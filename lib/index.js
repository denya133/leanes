'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var crypto = _interopDefault(require('crypto'));
var buffer = _interopDefault(require('buffer'));
var stream = _interopDefault(require('stream'));
var qs = _interopDefault(require('querystring'));
var url = require('url');
var url__default = _interopDefault(url);
var EventEmitter = _interopDefault(require('events'));

var __dirname$1 = '/leanes';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o) {
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var it,
      normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _initializerDefineProperty(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var flowRuntime_umd = createCommonjsModule(function (module, exports) {
(function (global, factory) {
	 module.exports = factory() ;
}(commonjsGlobal, (function () {
/**
 * This file exports a dictionary of global primitive types that are shared by all contexts.
 * It is populated in [registerPrimitiveTypes()](./registerPrimitiveTypes.js).
 */

var primitiveTypes = {};

var _regeneratorRuntime = runtime_1;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};





var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();













var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

function makeJSONError(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var input = validation.input,
      context = validation.context;

  var errors = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validation.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : null;
      var actual = context.typeOf(_resolvePath(input, path)).toString();
      var field = stringifyPath(validation.path.concat(path));

      var pointer = '/' + path.join('/');

      errors.push({
        pointer: pointer,
        field: field,
        message: message,
        expected: expected,
        actual: actual
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return errors;
}

// Tracks whether we're in validation of cyclic objects.
var cyclicValidation = new WeakMap();
// Tracks whether we're toString() of cyclic objects.


var cyclicToString = new WeakSet();

function inValidationCycle(type, input) {
  try {
    var tracked = cyclicValidation.get(type);
    if (!tracked) {
      return false;
    } else {
      return weakSetHas(tracked, input);
    }
  } catch (e) {
    // some exotic values cannot be checked
    return true;
  }
}

function startValidationCycle(type, input) {
  var tracked = cyclicValidation.get(type);
  if (!tracked) {
    tracked = new WeakSet();
    cyclicValidation.set(type, tracked);
  }
  weakSetAdd(tracked, input);
}

function endValidationCycle(type, input) {
  var tracked = cyclicValidation.get(type);
  if (tracked) {
    weakSetDelete(tracked, input);
  }
}

function inToStringCycle(type) {
  return cyclicToString.has(type);
}

function startToStringCycle(type) {
  cyclicToString.add(type);
}

function endToStringCycle(type) {
  cyclicToString.delete(type);
}

function weakSetHas(weakset, value) {
  try {
    return weakset.has(value);
  } catch (e) {
    return true;
  }
}

function weakSetAdd(weakset, value) {
  try {
    weakset.add(value);
  } catch (e) {}
}

function weakSetDelete(weakset, value) {
  try {
    weakset.delete(value);
  } catch (e) {}
}

var validIdentifierOrAccessor = /^[$A-Z_][0-9A-Z_$[\].]*$/i;

var Validation = function () {
  function Validation(context, input) {
    classCallCheck(this, Validation);
    this.path = [];
    this.prefix = '';
    this.errors = [];
    this.cyclic = new WeakMap();

    this.context = context;
    this.input = input;
  }

  // Tracks whether we're in validation of cyclic objects.


  createClass(Validation, [{
    key: 'inCycle',
    value: function inCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (!tracked) {
        return false;
      } else {
        return weakSetHas(tracked, input);
      }
    }
  }, {
    key: 'startCycle',
    value: function startCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (!tracked) {
        tracked = new WeakSet();
        this.cyclic.set(type, tracked);
      }
      weakSetAdd(tracked, input);
    }
  }, {
    key: 'endCycle',
    value: function endCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (tracked) {
        weakSetDelete(tracked, input);
      }
    }
  }, {
    key: 'hasErrors',
    value: function hasErrors(path) {
      if (path) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _ref = _step.value;

            var _ref2 = slicedToArray(_ref, 1);

            var candidate = _ref2[0];

            if (matchPath(path, candidate)) {
              return true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return false;
      } else {
        return this.errors.length > 0;
      }
    }
  }, {
    key: 'addError',
    value: function addError(path, expectedType, message) {
      this.errors.push([path, message, expectedType]);
      return this;
    }
  }, {
    key: 'clearError',
    value: function clearError(path) {
      var didClear = false;
      if (path) {
        var _errors = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.errors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var error = _step2.value;

            if (matchPath(path, error[0])) {
              didClear = true;
            } else {
              _errors.push(error);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        this.errors = _errors;
      } else {
        didClear = this.errors.length > 0;
        this.errors = [];
      }
      return didClear;
    }
  }, {
    key: 'resolvePath',
    value: function resolvePath(path) {
      return _resolvePath(this.input, path);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return makeJSONError(this);
    }
  }]);
  return Validation;
}();

function stringifyPath(path) {
  if (!path.length) {
    return 'Value';
  }
  var length = path.length;

  var parts = new Array(length);
  for (var i = 0; i < length; i++) {
    var part = path[i];
    if (part === '[[Return Type]]') {
      parts[i] = 'Return Type';
    } else if (typeof part !== 'string' || !validIdentifierOrAccessor.test(part)) {
      parts[i] = '[' + String(part) + ']';
    } else if (i > 0) {
      parts[i] = '.' + String(part);
    } else {
      parts[i] = String(part);
    }
  }
  return parts.join('');
}

function _resolvePath(input, path) {
  var subject = input;
  var length = path.length;

  for (var i = 0; i < length; i++) {
    if (subject == null) {
      return undefined;
    }
    var part = path[i];
    if (part === '[[Return Type]]') {
      continue;
    }
    if (subject instanceof Map) {
      subject = subject.get(part);
    } else {
      subject = subject[part];
    }
  }
  return subject;
}

function matchPath(path, candidate) {
  var length = path.length;

  if (length > candidate.length) {
    return false;
  }
  for (var i = 0; i < length; i++) {
    if (candidate[i] !== path[i]) {
      return false;
    }
  }
  return true;
}

var RuntimeTypeError = function (_TypeError) {
  inherits(RuntimeTypeError, _TypeError);

  function RuntimeTypeError(message, options) {
    classCallCheck(this, RuntimeTypeError);

    var _this = possibleConstructorReturn(this, (RuntimeTypeError.__proto__ || Object.getPrototypeOf(RuntimeTypeError)).call(this, message));

    _this.name = "RuntimeTypeError";

    Object.assign(_this, options);
    return _this;
  }

  return RuntimeTypeError;
}(TypeError);

var delimiter = '\n-------------------------------------------------\n\n';

function makeTypeError(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var prefix = validation.prefix,
      input = validation.input,
      context = validation.context,
      errors = validation.errors;

  var collected = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : "*";
      var actual = _resolvePath(input, path);
      var actualType = context.typeOf(actual).toString();

      var field = stringifyPath(validation.path.concat(path));

      var actualAsString = makeString(actual);

      if (typeof actualAsString === 'string') {
        collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual Value: ' + actualAsString + '\n\nActual Type: ' + actualType + '\n');
      } else {
        collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual: ' + actualType + '\n');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (prefix) {
    return new RuntimeTypeError(prefix.trim() + ' ' + collected.join(delimiter), { errors: errors });
  } else {
    return new RuntimeTypeError(collected.join(delimiter), { errors: errors });
  }
}

function makeString(value) {
  if (value === null) {
    return 'null';
  }
  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
    case 'string':
      return '"' + value + '"';
    // Issue
    case 'symbol':
    case 'number':
    case 'boolean':
    case 'undefined':
      return String(value);
    case 'function':
      return;
    default:
      if (Array.isArray(value) || value.constructor == null || value.constructor === Object) {
        try {
          return JSON.stringify(value, null, 2);
        } catch (e) {
          return;
        }
      }
      return;
  }
}

function makeError(expected, input) {
  var context = expected.context;

  var validation = context.validate(expected, input);
  return makeTypeError(validation);
}

/**
 * Given two types, A and B, compare them and return either -1, 0, or 1:
 *
 *   -1 if A cannot accept type B.
 *
 *    0 if the types are effectively identical.
 *
 *    1 if A accepts every possible B.
 */


function compareTypes(a, b) {
  var result = void 0;

  if (a === b) {
    return 0;
  }

  if (b instanceof TypeAlias || b instanceof TypeParameter || b instanceof TypeParameterApplication || b instanceof TypeTDZ) {
    b = b.unwrap();
  }

  if (a instanceof TypeAlias) {
    result = a.compareWith(b);
  } else if (a instanceof FlowIntoType || a instanceof TypeParameter || b instanceof FlowIntoType) {
    result = a.compareWith(b);
  } else if (a instanceof AnyType || a instanceof ExistentialType || a instanceof MixedType) {
    return 1;
  } else {
    result = a.compareWith(b);
  }

  if (b instanceof AnyType) {
    // Note: This check cannot be moved higher in the scope,
    // as this would prevent types from being propagated upwards.
    return 1;
  } else {
    return result;
  }
}

/**
 * # Type
 *
 * This is the base class for all types.
 */
var Type = function () {
  function Type(context) {
    classCallCheck(this, Type);
    this.typeName = 'Type';

    this.context = context;
  }

  createClass(Type, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var validation = new Validation(this.context, input);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.errors(validation, [], input)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var error = _step.value;
          // eslint-disable-line no-unused-vars
          return false;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      if (compareTypes(this, input) === -1) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return -1;
    }
  }, {
    key: 'assert',
    value: function assert(input) {
      var error = makeError(this, input);
      if (error) {
        if (typeof Error.captureStackTrace === 'function') {
          Error.captureStackTrace(error, this.assert);
        }
        throw error;
      }
      return input;
    }

    /**
     * Get the inner type.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Type';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return Type;
}();

var AnyType = function (_Type) {
  inherits(AnyType, _Type);

  function AnyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, AnyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AnyType.__proto__ || Object.getPrototypeOf(AnyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'AnyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(AnyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'any';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return AnyType;
}(Type);

var errorMessages = {
  ERR_CONSTRAINT_VIOLATION: 'violated a constraint',
  ERR_EXPECT_ARRAY: 'must be an Array',
  ERR_EXPECT_TRUE: 'must be true',
  ERR_EXPECT_FALSE: 'must be false',
  ERR_EXPECT_BOOLEAN: 'must be true or false',
  ERR_EXPECT_EMPTY: 'must be empty',
  ERR_EXPECT_EXACT_VALUE: 'must be exactly $0',
  ERR_EXPECT_CALLABLE: 'must be callable',
  ERR_EXPECT_CLASS: 'must be a Class of $0',
  ERR_EXPECT_FUNCTION: 'must be a function',
  ERR_EXPECT_GENERATOR: 'must be a generator function',
  ERR_EXPECT_ITERABLE: 'must be iterable',
  ERR_EXPECT_ARGUMENT: 'argument "$0" must be: $1',
  ERR_EXPECT_RETURN: 'expected return type of: $0',
  ERR_EXPECT_N_ARGUMENTS: 'requires $0 argument(s)',
  ERR_EXPECT_INSTANCEOF: 'must be an instance of $0',
  ERR_EXPECT_KEY_TYPE: 'keys must be: $0',
  ERR_EXPECT_NULL: 'must be null',
  ERR_EXPECT_NUMBER: 'must be a number',
  ERR_EXPECT_OBJECT: 'must be an object',
  ERR_EXPECT_PROMISE: 'must be a promise of $0',
  ERR_EXPECT_STRING: 'must be a string',
  ERR_EXPECT_SYMBOL: 'must be a symbol',
  ERR_EXPECT_THIS: 'must be exactly this',
  ERR_EXPECT_VOID: 'must be undefined',
  ERR_INVALID_DATE: 'must be a valid date',
  ERR_MISSING_PROPERTY: 'does not exist on object',
  ERR_NO_INDEXER: 'is not one of the permitted indexer types',
  ERR_NO_UNION: 'must be one of: $0',
  ERR_UNKNOWN_KEY: 'should not contain the key: "$0"'
};

function getErrorMessage(key) {
  for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  var message = errorMessages[key];
  if (params.length > 0) {
    return message.replace(/\$(\d+)/g, function (m, i) {
      return String(params[i]);
    });
  } else {
    return message;
  }
}

var TupleType = function (_Type) {
  inherits(TupleType, _Type);

  function TupleType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TupleType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TupleType.__proto__ || Object.getPrototypeOf(TupleType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TupleType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TupleType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, context, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              context = this.context;

              if (context.checkPredicate('Array', input)) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              i = 0;

            case 8:
              if (!(i < length)) {
                _context.next = 13;
                break;
              }

              return _context.delegateYield(types[i].errors(validation, path.concat(i), input[i]), 't0', 10);

            case 10:
              i++;
              _context.next = 8;
              break;

            case 13:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;
      var context = this.context;


      if (!context.checkPredicate('Array', input) || input.length < length) {
        return false;
      }
      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (!type.accepts(input[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof TupleType)) {
        return -1;
      }
      var types = this.types;
      var inputTypes = input.types;
      if (inputTypes.length < types.length) {
        return -1;
      }
      var isGreater = false;
      for (var i = 0; i < types.length; i++) {
        var result = compareTypes(types[i], inputTypes[i]);
        if (result === 1) {
          isGreater = true;
        } else if (result === -1) {
          return -1;
        }
      }
      if (types.length < inputTypes.length) {
        return 0;
      } else if (isGreater) {
        return 1;
      } else {
        return 0;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '[' + this.types.join(', ') + ']';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return TupleType;
}(Type);

var ArrayType = function (_Type) {
  inherits(ArrayType, _Type);

  function ArrayType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ArrayType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ArrayType.__proto__ || Object.getPrototypeOf(ArrayType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ArrayType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ArrayType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var context, elementType, length, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              context = this.context;

              if (context.checkPredicate('Array', input)) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              if (!validation.inCycle(this, input)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt('return');

            case 7:
              validation.startCycle(this, input);
              elementType = this.elementType;
              length = input.length;
              i = 0;

            case 11:
              if (!(i < length)) {
                _context.next = 16;
                break;
              }

              return _context.delegateYield(elementType.errors(validation, path.concat(i), input[i]), 't0', 13);

            case 13:
              i++;
              _context.next = 11;
              break;

            case 16:
              validation.endCycle(this, input);

            case 17:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var context = this.context;

      if (!context.checkPredicate('Array', input)) {
        return false;
      }
      if (inValidationCycle(this, input)) {
        return true;
      }
      startValidationCycle(this, input);
      var elementType = this.elementType;
      var length = input.length;

      for (var i = 0; i < length; i++) {
        if (!elementType.accepts(input[i])) {
          endValidationCycle(this, input);
          return false;
        }
      }
      endValidationCycle(this, input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var elementType = this.elementType;

      if (input instanceof TupleType) {
        var types = input.types;

        for (var i = 0; i < types.length; i++) {
          var result = compareTypes(elementType, types[i]);
          if (result === -1) {
            return -1;
          }
        }
        return 1;
      } else if (input instanceof ArrayType) {
        return compareTypes(elementType, input.elementType);
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var elementType = this.elementType;

      if (inToStringCycle(this)) {
        if (typeof elementType.name === 'string') {
          return 'Array<$Cycle<' + elementType.name + '>>';
        } else {
          return 'Array<$Cycle<Object>>';
        }
      }
      startToStringCycle(this);
      var output = 'Array<' + elementType.toString() + '>';
      endToStringCycle(this);
      return output;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        elementType: this.elementType
      };
    }
  }]);
  return ArrayType;
}(Type);

var BooleanLiteralType = function (_Type) {
  inherits(BooleanLiteralType, _Type);

  function BooleanLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, BooleanLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BooleanLiteralType.__proto__ || Object.getPrototypeOf(BooleanLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'BooleanLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(BooleanLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== this.value)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage(this.value ? 'ERR_EXPECT_TRUE' : 'ERR_EXPECT_FALSE'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof BooleanLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.value ? 'true' : 'false';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: this.typeName,
        value: this.value
      };
    }
  }]);
  return BooleanLiteralType;
}(Type);

var BooleanType = function (_Type) {
  inherits(BooleanType, _Type);

  function BooleanType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, BooleanType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BooleanType.__proto__ || Object.getPrototypeOf(BooleanType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'BooleanType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(BooleanType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'boolean')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_BOOLEAN'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'boolean';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof BooleanLiteralType) {
        return 1;
      } else if (input instanceof BooleanType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'boolean';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return BooleanType;
}(Type);

var EmptyType = function (_Type) {
  inherits(EmptyType, _Type);

  function EmptyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, EmptyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = EmptyType.__proto__ || Object.getPrototypeOf(EmptyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'EmptyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(EmptyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return [path, getErrorMessage('ERR_EXPECT_EMPTY'), this];

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return false; // empty types accepts nothing.
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof EmptyType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'empty';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return EmptyType;
}(Type);

var ExistentialType = function (_Type) {
  inherits(ExistentialType, _Type);

  function ExistentialType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ExistentialType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ExistentialType.__proto__ || Object.getPrototypeOf(ExistentialType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ExistentialType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ExistentialType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '*';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return ExistentialType;
}(Type);

/**
 * # TypeParameterApplication
 *
 */
var TypeParameterApplication = function (_Type) {
  inherits(TypeParameterApplication, _Type);

  function TypeParameterApplication() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeParameterApplication);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeParameterApplication.__proto__ || Object.getPrototypeOf(TypeParameterApplication)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeParameterApplication', _this.typeInstances = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeParameterApplication, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var parent, typeInstances;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              parent = this.parent, typeInstances = this.typeInstances;
              return _context.delegateYield(parent.errors.apply(parent, [validation, path, input].concat(toConsumableArray(typeInstances))), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var parent = this.parent,
          typeInstances = this.typeInstances;

      return parent.accepts.apply(parent, [input].concat(toConsumableArray(typeInstances)));
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var _parent;

      return (_parent = this.parent).compareWith.apply(_parent, [input].concat(toConsumableArray(this.typeInstances)));
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.parent;
      if (inner && typeof inner.hasProperty === 'function') {
        var _ref2;

        return (_ref2 = inner).hasProperty.apply(_ref2, [name].concat(toConsumableArray(this.typeInstances)));
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.parent;
      if (inner && typeof inner.getProperty === 'function') {
        var _ref3;

        return (_ref3 = inner).getProperty.apply(_ref3, [name].concat(toConsumableArray(this.typeInstances)));
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _parent2;

      return (_parent2 = this.parent).unwrap.apply(_parent2, toConsumableArray(this.typeInstances));
    }
  }, {
    key: 'toString',
    value: function toString() {
      var parent = this.parent,
          typeInstances = this.typeInstances;
      var name = parent.name;

      if (typeInstances.length) {
        var items = [];
        for (var i = 0; i < typeInstances.length; i++) {
          var typeInstance = typeInstances[i];
          items.push(typeInstance.toString());
        }
        return name + '<' + items.join(', ') + '>';
      } else {
        return name;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        typeInstances: this.typeInstances
      };
    }
  }]);
  return TypeParameterApplication;
}(Type);

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(collectConstraintErrors);

/**
 * Add constraints to the given subject type.
 */
function addConstraints(subject) {
  var _subject$constraints;

  for (var _len = arguments.length, constraints = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    constraints[_key - 1] = arguments[_key];
  }

  (_subject$constraints = subject.constraints).push.apply(_subject$constraints, toConsumableArray(constraints));
}

/**
 * Collect any errors from constraints on the given subject type.
 */


function collectConstraintErrors(subject, validation, path) {
  for (var _len2 = arguments.length, input = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    input[_key2 - 3] = arguments[_key2];
  }

  var constraints, length, i, constraint, violation;
  return _regeneratorRuntime.wrap(function collectConstraintErrors$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          constraints = subject.constraints;
          length = constraints.length;
          i = 0;

        case 3:
          if (!(i < length)) {
            _context.next = 12;
            break;
          }

          constraint = constraints[i];
          violation = constraint.apply(undefined, toConsumableArray(input));

          if (!(typeof violation === 'string')) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return [path, violation, this];

        case 9:
          i++;
          _context.next = 3;
          break;

        case 12:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked, this);
}

/**
 * Determine whether the input passes the constraints on the subject type.
 */
function constraintsAccept(subject) {
  var constraints = subject.constraints;
  var length = constraints.length;

  for (var _len3 = arguments.length, input = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    input[_key3 - 1] = arguments[_key3];
  }

  for (var i = 0; i < length; i++) {
    var constraint = constraints[i];
    if (typeof constraint.apply(undefined, toConsumableArray(input)) === 'string') {
      return false;
    }
  }
  return true;
}

var TypeAlias = function (_Type) {
  inherits(TypeAlias, _Type);

  function TypeAlias() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeAlias);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeAlias.__proto__ || Object.getPrototypeOf(TypeAlias)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeAlias', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeAlias, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0; // should never need this because it's taken care of by compareTypes.
      } else if (this.hasConstraints) {
        // if we have constraints the types cannot be the same
        return -1;
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len3 = arguments.length, typeInstances = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        typeInstances[_key3] = arguments[_key3];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var name = this.name,
          type = this.type;

      if (withDeclaration) {
        return 'type ' + name + ' = ' + type.toString() + ';';
      } else {
        return name;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        type: this.type
      };
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return this.type.properties;
    }
  }, {
    key: 'hasConstraints',
    get: function get$$1() {
      return this.constraints.length > 0;
    }
  }]);
  return TypeAlias;
}(Type);

var FlowIntoSymbol = Symbol('FlowInto');

/**
 * # TypeParameter
 *
 * Type parameters allow polymorphic type safety.
 * The first time a type parameter is checked, it records the shape of its input,
 * this recorded shape is used to check all future inputs for this particular instance.
 */

var TypeParameter = function (_Type) {
  inherits(TypeParameter, _Type);

  function TypeParameter() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeParameter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeParameter.__proto__ || Object.getPrototypeOf(TypeParameter)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeParameter', _this[FlowIntoSymbol] = null, _temp), possibleConstructorReturn(_this, _ret);
  }

  // Issue 252


  createClass(TypeParameter, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var boundOrDefault, recorded, context, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              boundOrDefault = this.bound || this.default;
              recorded = this.recorded, context = this.context;

              if (!(boundOrDefault instanceof FlowIntoType || boundOrDefault instanceof TypeAlias)) {
                _context.next = 7;
                break;
              }

              return _context.delegateYield(boundOrDefault.errors(validation, path, input), 't0', 4);

            case 4:
              return _context.abrupt('return');

            case 7:
              if (!recorded) {
                _context.next = 12;
                break;
              }

              return _context.delegateYield(recorded.errors(validation, path, input), 't1', 9);

            case 9:
              return _context.abrupt('return');

            case 12:
              if (!boundOrDefault) {
                _context.next = 47;
                break;
              }

              if (!(boundOrDefault.typeName === 'AnyType' || boundOrDefault.typeName === 'ExistentialType')) {
                _context.next = 17;
                break;
              }

              return _context.abrupt('return');

            case 17:
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 21;
              _iterator = boundOrDefault.errors(validation, path, input)[Symbol.iterator]();

            case 23:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 31;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 28;
              return error;

            case 28:
              _iteratorNormalCompletion = true;
              _context.next = 23;
              break;

            case 31:
              _context.next = 37;
              break;

            case 33:
              _context.prev = 33;
              _context.t2 = _context['catch'](21);
              _didIteratorError = true;
              _iteratorError = _context.t2;

            case 37:
              _context.prev = 37;
              _context.prev = 38;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 40:
              _context.prev = 40;

              if (!_didIteratorError) {
                _context.next = 43;
                break;
              }

              throw _iteratorError;

            case 43:
              return _context.finish(40);

            case 44:
              return _context.finish(37);

            case 45:
              if (!hasErrors) {
                _context.next = 47;
                break;
              }

              return _context.abrupt('return');

            case 47:

              this.recorded = context.typeOf(input);

            case 48:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[21, 33, 37, 45], [38,, 40, 44]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded,
          context = this.context;

      if (boundOrDefault instanceof FlowIntoType || boundOrDefault instanceof TypeAlias) {
        // We defer to the other type parameter so that values from this
        // one can flow "upwards".
        return boundOrDefault.accepts(input);
      } else if (recorded) {
        return recorded.accepts(input);
      } else if (boundOrDefault) {
        if (boundOrDefault.typeName === "AnyType" || boundOrDefault.typeName === "ExistentialType") {
          return true;
        } else if (!boundOrDefault.accepts(input)) {
          return false;
        }
      }

      this.recorded = context.typeOf(input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded;

      if (input instanceof TypeParameter) {
        // We don't need to check for `recorded` or `bound` fields
        // because the input has already been unwrapped, so
        // if we got a type parameter it must be totally generic and
        // we treat it like Any.
        return 1;
      } else if (recorded) {
        return compareTypes(recorded, input);
      } else if (boundOrDefault) {
        return compareTypes(boundOrDefault, input);
      } else {
        // A generic type parameter accepts any input.
        return 1;
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded;

      if (recorded) {
        return recorded.unwrap();
      } else if (boundOrDefault) {
        return boundOrDefault.unwrap();
      } else {
        return this;
      }
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      var id = this.id,
          bound = this.bound,
          defaultType = this.default;

      if (withBinding) {
        if (defaultType) {
          return id + ' = ' + defaultType.toString();
        } else if (bound) {
          return id + ': ' + bound.toString();
        }
      }
      return id;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        id: this.id,
        bound: this.bound,
        recorded: this.recorded
      };
    }
  }]);
  return TypeParameter;
}(Type);

function flowIntoTypeParameter(typeParameter) {
  var existing = typeParameter[FlowIntoSymbol];
  if (existing) {
    return existing;
  }

  var target = new FlowIntoType(typeParameter.context);
  target.typeParameter = typeParameter;
  typeParameter[FlowIntoSymbol] = target;
  return target;
}

/**
 * # FlowIntoType
 *
 * A virtual type which allows types it receives to "flow" upwards into a type parameter.
 * The type parameter will become of a union of any types seen by this instance.
 */

var FlowIntoType = function (_Type) {
  inherits(FlowIntoType, _Type);

  function FlowIntoType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FlowIntoType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FlowIntoType.__proto__ || Object.getPrototypeOf(FlowIntoType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FlowIntoType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FlowIntoType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var typeParameter, context, recorded, bound, hasError, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error, _hasError, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              typeParameter = this.typeParameter, context = this.context;
              recorded = typeParameter.recorded, bound = typeParameter.bound;

              if (!(bound instanceof FlowIntoType)) {
                _context.next = 5;
                break;
              }

              return _context.delegateYield(bound.errors(validation, path, input), 't0', 4);

            case 4:
              return _context.abrupt('return');

            case 5:
              if (!recorded) {
                _context.next = 47;
                break;
              }

              if (!bound) {
                _context.next = 39;
                break;
              }

              hasError = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 11;
              _iterator = bound.errors(validation, path, input)[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 21;
                break;
              }

              error = _step.value;
              _context.next = 17;
              return error;

            case 17:
              hasError = true;

            case 18:
              _iteratorNormalCompletion = true;
              _context.next = 13;
              break;

            case 21:
              _context.next = 27;
              break;

            case 23:
              _context.prev = 23;
              _context.t1 = _context['catch'](11);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 27:
              _context.prev = 27;
              _context.prev = 28;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 30:
              _context.prev = 30;

              if (!_didIteratorError) {
                _context.next = 33;
                break;
              }

              throw _iteratorError;

            case 33:
              return _context.finish(30);

            case 34:
              return _context.finish(27);

            case 35:
              if (!hasError) {
                _context.next = 37;
                break;
              }

              return _context.abrupt('return');

            case 37:
              _context.next = 45;
              break;

            case 39:
              if (!recorded.accepts(input)) {
                _context.next = 43;
                break;
              }

              return _context.abrupt('return');

            case 43:
              // we need to make a union
              typeParameter.recorded = context.union(recorded, context.typeOf(input));
              return _context.abrupt('return');

            case 45:
              _context.next = 82;
              break;

            case 47:
              if (!bound) {
                _context.next = 82;
                break;
              }

              if (!(bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType')) {
                _context.next = 52;
                break;
              }

              return _context.abrupt('return');

            case 52:
              _hasError = false;
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 56;
              _iterator2 = bound.errors(validation, path, input)[Symbol.iterator]();

            case 58:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 66;
                break;
              }

              _error = _step2.value;
              _context.next = 62;
              return _error;

            case 62:
              _hasError = true;

            case 63:
              _iteratorNormalCompletion2 = true;
              _context.next = 58;
              break;

            case 66:
              _context.next = 72;
              break;

            case 68:
              _context.prev = 68;
              _context.t2 = _context['catch'](56);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t2;

            case 72:
              _context.prev = 72;
              _context.prev = 73;

              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }

            case 75:
              _context.prev = 75;

              if (!_didIteratorError2) {
                _context.next = 78;
                break;
              }

              throw _iteratorError2;

            case 78:
              return _context.finish(75);

            case 79:
              return _context.finish(72);

            case 80:
              if (!_hasError) {
                _context.next = 82;
                break;
              }

              return _context.abrupt('return');

            case 82:

              typeParameter.recorded = context.typeOf(input);

            case 83:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[11, 23, 27, 35], [28,, 30, 34], [56, 68, 72, 80], [73,, 75, 79]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var typeParameter = this.typeParameter,
          context = this.context;
      var recorded = typeParameter.recorded,
          bound = typeParameter.bound;


      if (bound instanceof FlowIntoType) {
        // We defer to the other type so that values from this
        // one can flow "upwards".
        return bound.accepts(input);
      }
      if (recorded) {
        // we've already recorded a value for this type parameter
        if (bound && !bound.accepts(input)) {
          return false;
        } else if (recorded.accepts(input)) {
          // our existing type already permits this value, there's nothing to do.
          return true;
        } else {
          // we need to make a union
          typeParameter.recorded = context.union(recorded, context.typeOf(input));
          return true;
        }
      } else if (bound) {
        if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {
          return true;
        } else if (!bound.accepts(input)) {
          return false;
        }
      }

      typeParameter.recorded = context.typeOf(input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var typeParameter = this.typeParameter,
          context = this.context;
      var recorded = typeParameter.recorded,
          bound = typeParameter.bound;

      if (bound instanceof FlowIntoType) {
        // We defer to the other type so that values from this
        // one can flow "upwards".
        return bound.compareWith(input);
      }
      if (recorded) {
        if (bound && compareTypes(bound, input) === -1) {
          return -1;
        }
        var result = compareTypes(recorded, input);
        if (result === 0) {
          // our existing type already permits this value, there's nothing to do.
          return 0;
        }
        // we need to make a union
        typeParameter.recorded = context.union(recorded, input);
        return 1;
      } else if (bound) {
        if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {
          return 1;
        }
        var _result = compareTypes(bound, input);
        if (_result === -1) {
          return -1;
        }
      }

      typeParameter.recorded = input;
      return 0;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.typeParameter.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      return this.typeParameter.toString(withBinding);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.typeParameter.toJSON();
    }
  }]);
  return FlowIntoType;
}(Type);

var FunctionTypeRestParam = function (_Type) {
  inherits(FunctionTypeRestParam, _Type);

  function FunctionTypeRestParam() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeRestParam);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeRestParam.__proto__ || Object.getPrototypeOf(FunctionTypeRestParam)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeRestParam', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeRestParam, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              return _context.delegateYield(type.errors(validation, path, input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      return type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return '...' + this.name + ': ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        type: this.type
      };
    }
  }]);
  return FunctionTypeRestParam;
}(Type);

var FunctionTypeParam = function (_Type) {
  inherits(FunctionTypeParam, _Type);

  function FunctionTypeParam() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeParam);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeParam.__proto__ || Object.getPrototypeOf(FunctionTypeParam)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeParam', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeParam, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var optional, type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              optional = this.optional, type = this.type;

              if (!(optional && input === undefined)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return');

            case 5:
              return _context.delegateYield(type.errors(validation, path, input), 't0', 6);

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var optional = this.optional,
          type = this.type;

      if (optional && input === undefined) {
        return true;
      } else {
        return type.accepts(input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {
        return compareTypes(this.type, input.type);
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var optional = this.optional,
          type = this.type;

      return '' + this.name + (optional ? '?' : '') + ': ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        optional: this.optional,
        type: this.type
      };
    }
  }]);
  return FunctionTypeParam;
}(Type);

var FunctionTypeReturn = function (_Type) {
  inherits(FunctionTypeReturn, _Type);

  function FunctionTypeReturn() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeReturn);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeReturn.__proto__ || Object.getPrototypeOf(FunctionTypeReturn)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeReturn', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeReturn, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              return _context.delegateYield(type.errors(validation, path.concat('[[Return Type]]'), input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      return type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeReturn) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return FunctionTypeReturn;
}(Type);

var ParentSymbol = Symbol('Parent');
var NameRegistrySymbol = Symbol('NameRegistry');
var ModuleRegistrySymbol = Symbol('ModuleRegistry');
var CurrentModuleSymbol = Symbol('CurrentModule');
var TypeConstructorRegistrySymbol = Symbol('TypeConstructorRegistry');
var InferrerSymbol = Symbol('Inferrer');


var TypeSymbol = Symbol('Type');
var TypeParametersSymbol = Symbol('TypeParameters');
var TypePredicateRegistrySymbol = Symbol('TypePredicateRegistry');

var FunctionType = function (_Type) {
  inherits(FunctionType, _Type);

  function FunctionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionType.__proto__ || Object.getPrototypeOf(FunctionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionType', _this.params = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var annotation, returnType, params, i, param, annotationParam, context, _i, _param;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'function')) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 3:
              return _context.abrupt('return');

            case 4:
              annotation = input[TypeSymbol];
              returnType = this.returnType, params = this.params;

              if (!annotation) {
                _context.next = 29;
                break;
              }

              if (annotation.params) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i = 0;

            case 10:
              if (!(i < params.length)) {
                _context.next = 24;
                break;
              }

              param = params[i];
              annotationParam = annotation.params[i];

              if (!(!annotationParam && !param.optional)) {
                _context.next = 18;
                break;
              }

              _context.next = 16;
              return [path, getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()), this];

            case 16:
              _context.next = 21;
              break;

            case 18:
              if (param.acceptsType(annotationParam)) {
                _context.next = 21;
                break;
              }

              _context.next = 21;
              return [path, getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()), this];

            case 21:
              i++;
              _context.next = 10;
              break;

            case 24:
              if (returnType.acceptsType(annotation.returnType)) {
                _context.next = 27;
                break;
              }

              _context.next = 27;
              return [path, getErrorMessage('ERR_EXPECT_RETURN', returnType.toString()), this];

            case 27:
              _context.next = 32;
              break;

            case 29:
              context = this.context;
              // We cannot safely check an unannotated function.
              // But we need to propagate `any` type feedback upwards.

              for (_i = 0; _i < params.length; _i++) {
                _param = params[_i];

                _param.acceptsType(context.any());
              }
              returnType.acceptsType(context.any());

            case 32:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (typeof input !== 'function') {
        return false;
      }
      var returnType = this.returnType,
          params = this.params;

      var annotation = input[TypeSymbol];
      if (annotation) {
        if (!annotation.params) {
          return true;
        }
        for (var i = 0; i < params.length; i++) {
          var param = params[i];
          var annotationParam = annotation.params[i];
          if (!annotationParam && !param.optional) {
            return false;
          } else if (!param.acceptsType(annotationParam)) {
            return false;
          }
        }
        if (!returnType.acceptsType(annotation.returnType)) {
          return false;
        }
        return true;
      } else {
        var context = this.context;
        // We cannot safely check an unannotated function.
        // But we need to propagate `any` type feedback upwards.

        for (var _i2 = 0; _i2 < params.length; _i2++) {
          var _param2 = params[_i2];
          _param2.acceptsType(context.any());
        }
        returnType.acceptsType(context.any());
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof FunctionType)) {
        return -1;
      }
      var returnType = this.returnType;
      var inputReturnType = input.returnType;
      var isGreater = false;
      var returnTypeResult = compareTypes(returnType, inputReturnType);
      if (returnTypeResult === -1) {
        return -1;
      } else if (returnTypeResult === 1) {
        isGreater = true;
      }

      var params = this.params;
      var inputParams = input.params;
      for (var i = 0; i < params.length; i++) {
        var param = params[i];
        var inputParam = i >= inputParams.length ? input.rest : inputParams[i];
        if (inputParam == null) {
          return -1;
        }
        var result = compareTypes(param, inputParam);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
      }
      return isGreater ? 1 : 0;
    }
  }, {
    key: 'acceptsParams',
    value: function acceptsParams() {
      var params = this.params,
          rest = this.rest;

      var paramsLength = params.length;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          if (!param.accepts(args[i])) {
            return false;
          }
        } else if (!param.accepts(undefined)) {
          return false;
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i3 = paramsLength; _i3 < argsLength; _i3++) {
          if (!rest.accepts(args[_i3])) {
            return false;
          }
        }
      }

      return true;
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return this.returnType.accepts(input);
    }
  }, {
    key: 'assertParams',
    value: function assertParams() {
      var params = this.params,
          rest = this.rest;

      var paramsLength = params.length;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          param.assert(args[i]);
        } else {
          param.assert(undefined);
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i4 = paramsLength; _i4 < argsLength; _i4++) {
          rest.assert(args[_i4]);
        }
      }

      return args;
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      this.returnType.assert(input);
      return input;
    }
  }, {
    key: 'invoke',
    value: function invoke() {
      var params = this.params,
          rest = this.rest,
          context = this.context;

      var paramsLength = params.length;

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          if (!param.acceptsType(args[i])) {
            return context.empty();
          }
        } else if (!param.accepts(undefined)) {
          return context.empty();
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i5 = paramsLength; _i5 < argsLength; _i5++) {
          if (!rest.acceptsType(args[_i5])) {
            return context.empty();
          }
        }
      }

      return this.returnType.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var params = this.params,
          rest = this.rest,
          returnType = this.returnType;

      var args = [];
      for (var i = 0; i < params.length; i++) {
        args.push(params[i].toString());
      }
      if (rest) {
        args.push(rest.toString());
      }
      return '(' + args.join(', ') + ') => ' + returnType.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        params: this.params,
        rest: this.rest,
        returnType: this.returnType
      };
    }
  }]);
  return FunctionType;
}(Type);

var GeneratorType = function (_Type) {
  inherits(GeneratorType, _Type);

  function GeneratorType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, GeneratorType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GeneratorType.__proto__ || Object.getPrototypeOf(GeneratorType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'GeneratorType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(GeneratorType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var isValid;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              isValid = input && typeof input.next === 'function' && typeof input.return === 'function' && typeof input.throw === 'function';

              if (isValid) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_GENERATOR'), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input && typeof input.next === 'function' && typeof input.return === 'function' && typeof input.throw === 'function';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof GeneratorType)) {
        var _result = compareTypes(this.yieldType, input);
        if (_result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
      var isGreater = false;
      var result = compareTypes(this.yieldType, input.yieldType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      result = compareTypes(this.returnType, input.returnType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      result = compareTypes(this.nextType, input.nextType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      return isGreater ? 1 : 0;
    }
  }, {
    key: 'acceptsYield',
    value: function acceptsYield(input) {
      return this.yieldType.accepts(input);
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return this.returnType.accepts(input);
    }
  }, {
    key: 'acceptsNext',
    value: function acceptsNext(input) {
      return this.nextType.accepts(input);
    }
  }, {
    key: 'assertYield',
    value: function assertYield(input) {
      return this.yieldType.assert(input);
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      return this.returnType.assert(input);
    }
  }, {
    key: 'assertNext',
    value: function assertNext(input) {
      return this.nextType.assert(input);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var yieldType = this.yieldType,
          returnType = this.returnType,
          nextType = this.nextType;

      return 'Generator<' + yieldType.toString() + ', ' + returnType.toString() + ', ' + nextType.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        yieldType: this.yieldType,
        returnType: this.returnType,
        nextType: this.nextType
      };
    }
  }]);
  return GeneratorType;
}(Type);

var warnedInstances = new WeakSet();

var TypeConstructor = function (_Type) {
  inherits(TypeConstructor, _Type);

  function TypeConstructor() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeConstructor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeConstructor.__proto__ || Object.getPrototypeOf(TypeConstructor)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeConstructor', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeConstructor, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var context = this.context,
          name = this.name;

      if (!warnedInstances.has(this)) {
        context.emitWarningMessage('TypeConstructor ' + name + ' does not implement accepts().');
        warnedInstances.add(this);
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var context = this.context,
          name = this.name;

      if (!warnedInstances.has(this)) {
        context.emitWarningMessage('TypeConstructor ' + name + ' does not implement compareWith().');
        warnedInstances.add(this);
      }
      return -1;
    }
  }, {
    key: 'inferTypeParameters',
    value: function inferTypeParameters(input) {
      return [];
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name
      };
    }
  }]);
  return TypeConstructor;
}(Type);

var GenericType = function (_TypeConstructor) {
  inherits(GenericType, _TypeConstructor);

  function GenericType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, GenericType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GenericType.__proto__ || Object.getPrototypeOf(GenericType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = "GenericType", _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(GenericType, [{
    key: "errors",
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var name, impl;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              name = this.name, impl = this.impl;

              if (input instanceof impl) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage("ERR_EXPECT_INSTANCEOF", name), this];

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: "accepts",
    value: function accepts(input) {
      var impl = this.impl;

      return input instanceof impl;
    }
  }, {
    key: "compareWith",
    value: function compareWith(input) {
      var context = this.context,
          impl = this.impl;

      var annotation = context.getAnnotation(impl);
      if (annotation) {
        for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          typeInstances[_key2 - 1] = arguments[_key2];
        }

        var expected = annotation.unwrap.apply(annotation, toConsumableArray(typeInstances));
        return compareTypes(input, expected);
      } else if (input instanceof GenericType && (input.impl === impl || impl && impl.isPrototypeOf(input.impl))) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: "unwrap",
    value: function unwrap() {
      var context = this.context,
          impl = this.impl;

      if (typeof impl !== "function") {
        return this;
      }
      var annotation = context.getAnnotation(impl);
      if (annotation != null) {
        return annotation.unwrap.apply(annotation, arguments);
      } else {
        return this;
      }
    }
  }, {
    key: "inferTypeParameters",
    value: function inferTypeParameters(input) {
      return [];
    }
  }]);
  return GenericType;
}(TypeConstructor);

function invariant(input, message) {
  if (!input) {
    var error = new Error(message);
    error.name = 'InvariantViolation';
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(error, invariant);
    }
    throw error;
  }
}

var NullLiteralType = function (_Type) {
  inherits(NullLiteralType, _Type);

  function NullLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NullLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NullLiteralType.__proto__ || Object.getPrototypeOf(NullLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NullLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NullLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== null)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_NULL'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === null;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NullLiteralType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'null';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return NullLiteralType;
}(Type);

var VoidType = function (_Type) {
  inherits(VoidType, _Type);

  function VoidType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, VoidType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VoidType.__proto__ || Object.getPrototypeOf(VoidType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VoidType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(VoidType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== undefined)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_VOID'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === undefined;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof VoidType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'void';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return VoidType;
}(Type);

var NullableType = function (_Type) {
  inherits(NullableType, _Type);

  function NullableType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NullableType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NullableType.__proto__ || Object.getPrototypeOf(NullableType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NullableType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NullableType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input != null)) {
                _context.next = 2;
                break;
              }

              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (input == null) {
        return true;
      } else {
        return this.type.accepts(input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NullLiteralType || input instanceof VoidType) {
        return 1;
      } else if (input instanceof NullableType) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '? ' + this.type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return NullableType;
}(Type);

var ObjectTypeProperty = function (_Type) {
  inherits(ObjectTypeProperty, _Type);

  function ObjectTypeProperty() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeProperty);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeProperty.__proto__ || Object.getPrototypeOf(ObjectTypeProperty)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeProperty', _this['static'] = false, _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }
  // Ignore


  createClass(ObjectTypeProperty, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }

    /**
     * Determine whether the property is nullable.
     */

  }, {
    key: 'isNullable',
    value: function isNullable() {
      return this.value instanceof NullableType;
    }

    /**
     * Determine whether the property exists on the given input or its prototype chain.
     */

  }, {
    key: 'existsOn',
    value: function existsOn(input) {
      // Ignore
      var key = this.key,
          isStatic = this.static;

      return key in (isStatic ? input.constructor : input) === true;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var optional, key, value, isStatic, target, targetPath, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Ignore
              optional = this.optional, key = this.key, value = this.value, isStatic = this.static;
              target = void 0;
              targetPath = void 0;

              if (!isStatic) {
                _context.next = 18;
                break;
              }

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 8;
                break;
              }

              _context.next = 7;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 7:
              return _context.abrupt('return');

            case 8:
              targetPath = path.concat('constructor');

              if (!(typeof input.constructor !== 'function')) {
                _context.next = 14;
                break;
              }

              if (optional) {
                _context.next = 13;
                break;
              }

              _context.next = 13;
              return [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 13:
              return _context.abrupt('return');

            case 14:
              targetPath.push(key);
              target = input.constructor[key];
              _context.next = 20;
              break;

            case 18:
              target = input[key];
              targetPath = path.concat(key);

            case 20:
              if (!(optional && target === undefined)) {
                _context.next = 22;
                break;
              }

              return _context.abrupt('return');

            case 22:
              if (!(this.isNullable() && !this.existsOn(input))) {
                _context.next = 26;
                break;
              }

              _context.next = 25;
              return [targetPath, getErrorMessage('ERR_MISSING_PROPERTY'), this];

            case 25:
              return _context.abrupt('return');

            case 26:
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 30;
              _iterator = value.errors(validation, targetPath, target)[Symbol.iterator]();

            case 32:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 40;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 37;
              return error;

            case 37:
              _iteratorNormalCompletion = true;
              _context.next = 32;
              break;

            case 40:
              _context.next = 46;
              break;

            case 42:
              _context.prev = 42;
              _context.t0 = _context['catch'](30);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 46:
              _context.prev = 46;
              _context.prev = 47;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 49:
              _context.prev = 49;

              if (!_didIteratorError) {
                _context.next = 52;
                break;
              }

              throw _iteratorError;

            case 52:
              return _context.finish(49);

            case 53:
              return _context.finish(46);

            case 54:
              if (hasErrors) {
                _context.next = 56;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, targetPath, target), 't1', 56);

            case 56:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[30, 42, 46, 54], [47,, 49, 53]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      // Ignore
      var optional = this.optional,
          key = this.key,
          value = this.value,
          isStatic = this.static;

      var target = void 0;
      if (isStatic) {
        if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
          return false;
        }
        if (typeof input.constructor !== 'function') {
          return optional ? true : false;
        }
        target = input.constructor[key];
      } else {
        target = input[key];
      }

      if (optional && target === undefined) {
        return true;
      }

      if (this.isNullable() && !this.existsOn(input)) {
        return false;
      }

      if (!value.accepts(target)) {
        return false;
      } else {
        return constraintsAccept(this, target);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectTypeProperty)) {
        return -1;
      } else if (input.key !== this.key) {
        return -1;
      } else {
        return compareTypes(this.value, input.value);
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      var key = this.key;
      // Issue 252
      if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'symbol') {
        key = '[' + key.toString() + ']';
      }
      if (this.static) {
        return 'static ' + key + (this.optional ? '?' : '') + ': ' + this.value.toString() + ';';
      } else {
        return '' + key + (this.optional ? '?' : '') + ': ' + this.value.toString() + ';';
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        key: this.key,
        value: this.value,
        optional: this.optional
      };
    }
  }]);
  return ObjectTypeProperty;
}(Type);

var ObjectTypeIndexer = function (_Type) {
  inherits(ObjectTypeIndexer, _Type);

  function ObjectTypeIndexer() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeIndexer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeIndexer.__proto__ || Object.getPrototypeOf(ObjectTypeIndexer)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeIndexer', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ObjectTypeIndexer, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, key, value) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // special case number types
              if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {
                key = +key;
              }

              return _context.delegateYield(this.key.errors(validation, path.concat('[[Key]]'), key), 't0', 2);

            case 2:
              return _context.delegateYield(this.value.errors(validation, path.concat(key), value), 't1', 3);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(value) {
      return this.value.accepts(value);
    }
  }, {
    key: 'acceptsKey',
    value: function acceptsKey(key) {
      // special case number types
      if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {
        key = +key;
      }
      return this.key.accepts(key);
    }
  }, {
    key: 'acceptsValue',
    value: function acceptsValue(value) {
      return this.value.accepts(value);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof ObjectTypeProperty) {
        if (!this.key.accepts(input.key)) {
          return -1;
        } else {
          return compareTypes(this.value, input.value);
        }
      } else if (!(input instanceof ObjectTypeIndexer)) {
        return -1;
      }

      var keyResult = compareTypes(this.key, input.key);
      if (keyResult === -1) {
        return -1;
      }
      var valueResult = compareTypes(this.value, input.value);
      if (valueResult === -1) {
        return -1;
      }

      if (keyResult === 0 && valueResult === 0) {
        return 0;
      } else {
        return 1;
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '[' + this.id + ': ' + this.key.toString() + ']: ' + this.value.toString() + ';';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        id: this.id,
        key: this.key,
        value: this.value
      };
    }
  }]);
  return ObjectTypeIndexer;
}(Type);

var ObjectTypeCallProperty = function (_Type) {
  inherits(ObjectTypeCallProperty, _Type);

  function ObjectTypeCallProperty() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeCallProperty);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeCallProperty.__proto__ || Object.getPrototypeOf(ObjectTypeCallProperty)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeCallProperty', _this['static'] = false, _temp), possibleConstructorReturn(_this, _ret);
  }
  // Ignore


  createClass(ObjectTypeCallProperty, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value, isStatic, target, targetPath;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Ignore
              value = this.value, isStatic = this.static;
              target = void 0;
              targetPath = void 0;

              if (!isStatic) {
                _context.next = 16;
                break;
              }

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 8;
                break;
              }

              _context.next = 7;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 7:
              return _context.abrupt('return');

            case 8:
              targetPath = path.concat('constructor');

              if (!(typeof input.constructor !== 'function')) {
                _context.next = 13;
                break;
              }

              _context.next = 12;
              return [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 12:
              return _context.abrupt('return');

            case 13:
              target = input.constructor;
              _context.next = 18;
              break;

            case 16:
              target = input;
              targetPath = path;

            case 18:
              return _context.delegateYield(value.errors(validation, targetPath, target), 't0', 19);

            case 19:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      // Ignore
      var value = this.value,
          isStatic = this.static;

      var target = void 0;
      if (isStatic) {
        if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
          return false;
        }
        if (typeof input.constructor !== 'function') {
          return false;
        }
        target = input.constructor;
      } else {
        target = input;
      }
      return value.accepts(target);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectTypeCallProperty)) {
        return -1;
      }
      return compareTypes(this.value, input.value);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      if (this.static) {
        return 'static ' + this.value.toString() + ';';
      } else {
        return this.value.toString();
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return ObjectTypeCallProperty;
}(Type);

var Declaration = function (_Type) {
  inherits(Declaration, _Type);

  function Declaration() {
    classCallCheck(this, Declaration);
    return possibleConstructorReturn(this, (Declaration.__proto__ || Object.getPrototypeOf(Declaration)).apply(this, arguments));
  }

  return Declaration;
}(Type);

var VarDeclaration = function (_Declaration) {
  inherits(VarDeclaration, _Declaration);

  function VarDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, VarDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VarDeclaration.__proto__ || Object.getPrototypeOf(VarDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VarDeclaration', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(VarDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare var ' + this.name + ': ' + this.type.toString() + ';';
    }
  }]);
  return VarDeclaration;
}(Declaration);

var TypeDeclaration = function (_Declaration) {
  inherits(TypeDeclaration, _Declaration);

  function TypeDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeDeclaration.__proto__ || Object.getPrototypeOf(TypeDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint() {
      var _typeAlias;

      (_typeAlias = this.typeAlias).addConstraint.apply(_typeAlias, arguments);
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.typeAlias.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'apply',
    value: function apply() {
      var _typeAlias2;

      return (_typeAlias2 = this.typeAlias).apply.apply(_typeAlias2, arguments);
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.typeAlias.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.typeAlias, input);
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var _typeAlias3;

      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 1] = arguments[_key2];
      }

      return (_typeAlias3 = this.typeAlias).hasProperty.apply(_typeAlias3, [name].concat(toConsumableArray(typeInstances)));
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var _typeAlias4;

      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return (_typeAlias4 = this.typeAlias).getProperty.apply(_typeAlias4, [name].concat(toConsumableArray(typeInstances)));
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _typeAlias5;

      return (_typeAlias5 = this.typeAlias).unwrap.apply(_typeAlias5, arguments);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare ' + this.typeAlias.toString(true) + ';';
    }
  }, {
    key: 'type',
    get: function get$$1() {
      return this.typeAlias.type;
    }
  }]);
  return TypeDeclaration;
}(Declaration);

var ModuleDeclaration = function (_Declaration) {
  inherits(ModuleDeclaration, _Declaration);

  function ModuleDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ModuleDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ModuleDeclaration.__proto__ || Object.getPrototypeOf(ModuleDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ModuleDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ModuleDeclaration, [{
    key: 'get',
    value: function get$$1(name) {
      var moduleExports = this.moduleExports;

      if (moduleExports) {
        var exporting = moduleExports.unwrap();
        if (typeof exporting.getProperty === 'function') {
          var prop = exporting.getProperty(name);
          if (prop) {
            return prop.unwrap();
          }
        }
      } else {
        var declaration = this.declarations[name];
        if (declaration) {
          return declaration.unwrap();
        }
      }
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'import',
    value: function _import(moduleName) {
      if (/^\.\//.test(moduleName)) {
        moduleName = '' + this.name + moduleName.slice(1);
      }
      return this.innerContext.import(moduleName);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var name = this.name,
          declarations = this.declarations,
          modules = this.modules,
          moduleExports = this.moduleExports;

      var body = [];
      for (var _name in declarations) {
        // eslint-disable-line guard-for-in
        var declaration = declarations[_name];
        body.push(declaration.toString(true));
      }
      if (modules) {
        for (var _name2 in modules) {
          // eslint-disable-line guard-for-in
          var module = modules[_name2];
          body.push(module.toString());
        }
      }
      if (moduleExports) {
        body.push(moduleExports.toString());
      }
      return 'declare module "' + name + '" {\n' + indent$1(body.join('\n\n')) + '}';
    }
  }, {
    key: 'moduleType',
    get: function get$$1() {
      if (this.moduleExports) {
        return 'commonjs';
      } else {
        return 'es6';
      }
    }
  }, {
    key: 'isCommonJS',
    get: function get$$1() {
      return this.moduleExports ? true : false;
    }
  }, {
    key: 'isES6',
    get: function get$$1() {
      return this.moduleExports ? false : true;
    }
  }, {
    key: 'declarations',
    get: function get$$1() {
      var innerContext = this.innerContext;

      return innerContext[NameRegistrySymbol];
    }
  }, {
    key: 'modules',
    get: function get$$1() {
      var innerContext = this.innerContext;

      return innerContext[ModuleRegistrySymbol];
    }
  }]);
  return ModuleDeclaration;
}(Declaration);

function indent$1(input) {
  var lines = input.split('\n');
  var length = lines.length;

  for (var i = 0; i < length; i++) {
    lines[i] = '  ' + lines[i];
  }
  return lines.join('\n');
}

var ModuleExports = function (_Declaration) {
  inherits(ModuleExports, _Declaration);

  function ModuleExports() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ModuleExports);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ModuleExports.__proto__ || Object.getPrototypeOf(ModuleExports)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ModuleExports', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ModuleExports, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare module.exports: ' + this.type.toString() + ';';
    }
  }]);
  return ModuleExports;
}(Declaration);

var ClassDeclaration = function (_Declaration) {
  inherits(ClassDeclaration, _Declaration);

  function ClassDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ClassDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClassDeclaration.__proto__ || Object.getPrototypeOf(ClassDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ClassDeclaration', _this.shapeID = Symbol(), _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ClassDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var body, superClass, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref2, _ref3, errorPath, errorMessage, expectedType, propertyName;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              body = this.body;
              superClass = this.superClass && this.superClass.unwrap();

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 6;
                break;
              }

              _context.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', this.name), this];

            case 5:
              return _context.abrupt('return');

            case 6:
              if (!superClass) {
                _context.next = 42;
                break;
              }

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = superClass.errors(validation, path, input)[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 28;
                break;
              }

              _ref2 = _step.value;
              _ref3 = slicedToArray(_ref2, 3);
              errorPath = _ref3[0];
              errorMessage = _ref3[1];
              expectedType = _ref3[2];
              propertyName = errorPath[path.length];

              if (!body.getProperty(propertyName)) {
                _context.next = 23;
                break;
              }

              return _context.abrupt('continue', 25);

            case 23:
              _context.next = 25;
              return [errorPath, errorMessage, expectedType];

            case 25:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 28:
              _context.next = 34;
              break;

            case 30:
              _context.prev = 30;
              _context.t0 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 34:
              _context.prev = 34;
              _context.prev = 35;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 37:
              _context.prev = 37;

              if (!_didIteratorError) {
                _context.next = 40;
                break;
              }

              throw _iteratorError;

            case 40:
              return _context.finish(37);

            case 41:
              return _context.finish(34);

            case 42:
              return _context.delegateYield(body.errors(validation, path, input), 't1', 43);

            case 43:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 30, 34, 42], [35,, 37, 41]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var body = this.body;

      var superClass = this.superClass && this.superClass.unwrap();
      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      } else if (superClass && !superClass.accepts(input)) {
        return false;
      } else if (!body.accepts(input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof ClassDeclaration) {
        if (input === this) {
          return 0;
        } else if (this.isSuperClassOf(input)) {
          return 1;
        } else {
          return -1;
        }
      }
      return compareTypes(this.body, input);
    }

    /**
     * Get a property with the given name, or undefined if it does not exist.
     */

  }, {
    key: 'getProperty',
    value: function getProperty(key) {
      var body = this.body,
          superClass = this.superClass;

      var prop = body.getProperty(key);
      if (prop) {
        return prop;
      } else if (superClass && typeof superClass.getProperty === 'function') {
        return superClass.getProperty(key);
      }
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var body = this.body,
          superClass = this.superClass;

      if (body.hasProperty(key)) {
        return true;
      } else if (superClass && typeof superClass.hasProperty === 'function') {
        return superClass.hasProperty(key);
      } else {
        return false;
      }
    }

    /**
     * Determine whether this class declaration represents a super class of
     * the given type.
     */

  }, {
    key: 'isSuperClassOf',
    value: function isSuperClassOf(candidate) {
      var body = this.body,
          shapeID = this.shapeID;

      var current = candidate;

      while (current != null) {
        if (current === this || current === body || current.shapeID === shapeID) {
          return true;
        }
        if (current instanceof ClassDeclaration) {
          current = current.superClass;
        } else {
          current = current.unwrap();
        }
      }
      return false;
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var name = this.name,
          superClass = this.superClass,
          body = this.body;

      if (withDeclaration) {
        var superClassName = superClass && (typeof superClass.name === 'string' && superClass.name || superClass.toString());
        return 'declare class ' + name + (superClassName ? ' extends ' + superClassName : '') + ' ' + body.toString();
      } else {
        return name;
      }
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      var body = this.body,
          superClass = this.superClass;

      if (superClass == null) {
        return body.properties;
      }
      var bodyProps = body.properties;
      var superProps = superClass.unwrap().properties;
      if (superProps == null) {
        return bodyProps;
      }
      var seen = {};
      var seenStatic = {};
      var props = [];
      for (var i = 0; i < superProps.length; i++) {
        var prop = superProps[i];
        props.push(prop);
        if (prop.static) {
          seenStatic[prop.key] = i;
        } else {
          seen[prop.key] = i;
        }
      }
      for (var _i = 0; _i < bodyProps.length; _i++) {
        var _prop = bodyProps[_i];
        if (seen[_prop.key]) {
          props[_i] = _prop;
        } else {
          props.push(_prop);
        }
      }
      return props;
    }
  }]);
  return ClassDeclaration;
}(Declaration);

var PartialType = function (_Type) {
  inherits(PartialType, _Type);

  function PartialType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, PartialType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = PartialType.__proto__ || Object.getPrototypeOf(PartialType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'PartialType', _this.typeParameters = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(PartialType, [{
    key: 'typeParameter',
    value: function typeParameter(id, bound, defaultType) {
      var target = new TypeParameter(this.context);
      target.id = id;
      target.bound = bound;
      target.default = defaultType;
      this.typeParameters.push(target);
      return target;
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var constraints, type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              constraints = this.constraints, type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (!(!hasErrors && constraints)) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var constraints = this.constraints,
          type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (constraints && !constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0;
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'toString',
    value: function toString(expand) {
      var type = this.type;

      return type.toString(expand);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        typeParameters: this.typeParameters,
        type: this.type
      };
    }
  }]);
  return PartialType;
}(Type);

var ParameterizedClassDeclaration = function (_Declaration) {
  inherits(ParameterizedClassDeclaration, _Declaration);

  function ParameterizedClassDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedClassDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedClassDeclaration.__proto__ || Object.getPrototypeOf(ParameterizedClassDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedClassDeclaration', _this.shapeID = Symbol(), _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedClassDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return getPartial(this).compareWith(input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len4 = arguments.length, typeInstances = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        typeInstances[_key4] = arguments[_key4];
      }

      return getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).type;
    }
  }, {
    key: 'isSuperClassOf',
    value: function isSuperClassOf(candidate) {
      return getPartial(this).type.isSuperClassOf(candidate);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len5 = arguments.length, typeInstances = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        typeInstances[_key5] = arguments[_key5];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      if (!withDeclaration) {
        return this.name;
      }
      var partial = getPartial(this);
      var type = partial.type,
          typeParameters = partial.typeParameters;

      if (typeParameters.length === 0) {
        return partial.toString(true);
      }
      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }
      var superClass = type.superClass,
          body = type.body;

      var superClassName = superClass && (typeof superClass.name === 'string' && superClass.name || superClass.toString());
      return 'declare class ' + this.name + '<' + items.join(', ') + '>' + (superClassName ? ' extends ' + superClassName : '') + ' ' + body.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return getPartial(this).toJSON();
    }
  }, {
    key: 'superClass',
    get: function get$$1() {
      return getPartial(this).type.superClass;
    }
  }, {
    key: 'body',
    get: function get$$1() {
      return getPartial(this).type.body;
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return getPartial(this).type.properties;
    }
  }, {
    key: 'typeParameters',
    get: function get$$1() {
      return getPartial(this).typeParameters;
    }
  }]);
  return ParameterizedClassDeclaration;
}(Declaration);

function getPartial(parent) {
  var context = parent.context,
      bodyCreator = parent.bodyCreator;

  var partial = new PartialType(context);
  var body = bodyCreator(partial);
  if (Array.isArray(body)) {
    partial.type = context.class.apply(context, [parent.name].concat(toConsumableArray(body)));
  } else {
    partial.type = context.class(parent.name, body);
  }

  partial.type.shapeID = parent.shapeID;

  var typeParameters = partial.typeParameters;

  for (var _len6 = arguments.length, typeInstances = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
    typeInstances[_key6 - 1] = arguments[_key6];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var ExtendsDeclaration = function (_Declaration) {
  inherits(ExtendsDeclaration, _Declaration);

  function ExtendsDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ExtendsDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ExtendsDeclaration.__proto__ || Object.getPrototypeOf(ExtendsDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ExtendsDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ExtendsDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var type = this.type;

      if (withDeclaration) {
        return 'extends ' + type.toString();
      } else {
        return type.toString();
      }
    }
  }]);
  return ExtendsDeclaration;
}(Declaration);

var _marked$1 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsWithIndexers);
var _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsWithoutIndexers);
var _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsExact);

var ObjectType = function (_Type) {
  inherits(ObjectType, _Type);

  function ObjectType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectType.__proto__ || Object.getPrototypeOf(ObjectType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectType', _this.properties = [], _this.indexers = [], _this.callProperties = [], _this.exact = false, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ObjectType, [{
    key: 'getProperty',


    /**
     * Get a property with the given name, or undefined if it does not exist.
     */
    value: function getProperty(key) {
      var properties = this.properties;
      var length = properties.length;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          return property;
        }
      }
      return this.getIndexer(key);
    }
  }, {
    key: 'setProperty',
    value: function setProperty(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var context = this.context,
          properties = this.properties;
      var length = properties.length;

      var newProp = new ObjectTypeProperty(context);
      newProp.key = key;
      newProp.value = value;
      newProp.optional = optional;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          properties[i] = newProp;
          return;
        }
      }
      properties.push(newProp);
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var properties = this.properties;
      var length = properties.length;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          return true;
        }
      }
      return this.hasIndexer(key);
    }

    /**
     * Get an indexer with which matches the given key type.
     */

  }, {
    key: 'getIndexer',
    value: function getIndexer(key) {
      var indexers = this.indexers;
      var length = indexers.length;

      for (var i = 0; i < length; i++) {
        var indexer = indexers[i];
        if (indexer.acceptsKey(key)) {
          return indexer;
        }
      }
    }

    /**
     * Determine whether an indexer exists which matches the given key type.
     */

  }, {
    key: 'hasIndexer',
    value: function hasIndexer(key) {
      var indexers = this.indexers;
      var length = indexers.length;

      for (var i = 0; i < length; i++) {
        var indexer = indexers[i];
        if (indexer.acceptsKey(key)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var hasCallProperties;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input === null)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 3:
              return _context.abrupt('return');

            case 4:
              hasCallProperties = this.callProperties.length > 0;

              if (!hasCallProperties) {
                _context.next = 11;
                break;
              }

              if (acceptsCallProperties(this, input)) {
                _context.next = 9;
                break;
              }

              _context.next = 9;
              return [path, getErrorMessage('ERR_EXPECT_CALLABLE'), this];

            case 9:
              _context.next = 15;
              break;

            case 11:
              if (!((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object')) {
                _context.next = 15;
                break;
              }

              _context.next = 14;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 14:
              return _context.abrupt('return');

            case 15:
              if (!validation.inCycle(this, input)) {
                _context.next = 17;
                break;
              }

              return _context.abrupt('return');

            case 17:
              validation.startCycle(this, input);

              if (!(this.indexers.length > 0)) {
                _context.next = 26;
                break;
              }

              if (!(input instanceof Object && Array.isArray(input))) {
                _context.next = 23;
                break;
              }

              _context.next = 22;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 22:
              return _context.abrupt('return');

            case 23:
              return _context.delegateYield(collectErrorsWithIndexers(this, validation, path, input), 't0', 24);

            case 24:
              _context.next = 27;
              break;

            case 26:
              return _context.delegateYield(collectErrorsWithoutIndexers(this, validation, path, input), 't1', 27);

            case 27:
              if (!this.exact) {
                _context.next = 29;
                break;
              }

              return _context.delegateYield(collectErrorsExact(this, validation, path, input), 't2', 29);

            case 29:
              validation.endCycle(this, input);

            case 30:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (input === null) {
        return false;
      }
      var hasCallProperties = this.callProperties.length > 0;

      if (hasCallProperties) {
        if (!acceptsCallProperties(this, input)) {
          return false;
        }
      } else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object') {
        return false;
      }
      if (inValidationCycle(this, input)) {
        return true;
      }
      startValidationCycle(this, input);

      var result = void 0;
      if (this.indexers.length > 0) {
        result = acceptsWithIndexers(this, input);
      } else {
        result = acceptsWithoutIndexers(this, input);
      }
      if (result && this.exact) {
        result = acceptsExact(this, input);
      }
      endValidationCycle(this, input);
      return result;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectType || input instanceof ClassDeclaration || input instanceof ParameterizedClassDeclaration)) {
        return -1;
      }
      var hasCallProperties = this.callProperties.length > 0;

      var isGreater = false;
      if (hasCallProperties) {
        var _result = compareTypeCallProperties(this, input);
        if (_result === -1) {
          return -1;
        } else if (_result === 1) {
          isGreater = true;
        }
      }

      var result = void 0;
      if (this.indexers.length > 0) {
        result = compareTypeWithIndexers(this, input);
      } else {
        result = compareTypeWithoutIndexers(this, input);
      }

      if (result === -1) {
        return -1;
      } else if (isGreater) {
        return 1;
      } else {
        return result;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var callProperties = this.callProperties,
          properties = this.properties,
          indexers = this.indexers;

      if (inToStringCycle(this)) {
        return '$Cycle<Object>';
      }
      startToStringCycle(this);
      var body = [];
      for (var i = 0; i < callProperties.length; i++) {
        body.push(callProperties[i].toString());
      }
      for (var _i = 0; _i < properties.length; _i++) {
        body.push(properties[_i].toString());
      }
      for (var _i2 = 0; _i2 < indexers.length; _i2++) {
        body.push(indexers[_i2].toString());
      }
      endToStringCycle(this);
      if (this.exact) {
        return '{|\n' + indent(body.join('\n')) + '\n|}';
      } else {
        return '{\n' + indent(body.join('\n')) + '\n}';
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        callProperties: this.callProperties,
        properties: this.properties,
        indexers: this.indexers,
        exact: this.exact
      };
    }
  }]);
  return ObjectType;
}(Type);

function acceptsCallProperties(type, input) {
  var callProperties = type.callProperties;

  for (var i = 0; i < callProperties.length; i++) {
    var callProperty = callProperties[i];
    if (callProperty.accepts(input)) {
      return true;
    }
  }
  return false;
}

function compareTypeCallProperties(type, input) {
  var callProperties = type.callProperties;

  var inputCallProperties = input.callProperties;
  var identicalCount = 0;
  loop: for (var i = 0; i < callProperties.length; i++) {
    var callProperty = callProperties[i];

    for (var j = 0; j < inputCallProperties.length; j++) {
      var inputCallProperty = inputCallProperties[j];
      var result = compareTypes(callProperty, inputCallProperty);
      if (result === 0) {
        identicalCount++;
        continue loop;
      } else if (result === 1) {
        continue loop;
      }
    }
    // If we got this far, nothing accepted.
    return -1;
  }
  if (identicalCount === callProperties.length) {
    return 0;
  } else {
    return 1;
  }
}

function acceptsWithIndexers(type, input) {
  var properties = type.properties,
      indexers = type.indexers;

  var seen = [];
  for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    if (!property.accepts(input)) {
      return false;
    }
    seen.push(property.key);
  }
  loop: for (var key in input) {
    if (seen.indexOf(key) !== -1) {
      continue;
    }
    var value = input[key];
    for (var _i3 = 0; _i3 < indexers.length; _i3++) {
      var indexer = indexers[_i3];
      if (indexer.acceptsKey(key) && indexer.acceptsValue(value)) {
        continue loop;
      }
    }

    // if we got this far the key / value did not accepts any indexers.
    return false;
  }
  return true;
}

function compareTypeWithIndexers(type, input) {
  var indexers = type.indexers,
      properties = type.properties;

  var inputIndexers = input.indexers;
  var inputProperties = input.properties;
  var isGreater = false;
  loop: for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    for (var j = 0; j < inputProperties.length; j++) {
      var inputProperty = inputProperties[j];
      if (inputProperty.key === property.key) {
        var result = compareTypes(property, inputProperty);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
        continue loop;
      }
    }
  }
  loop: for (var _i4 = 0; _i4 < indexers.length; _i4++) {
    var indexer = indexers[_i4];
    for (var _j = 0; _j < inputIndexers.length; _j++) {
      var inputIndexer = inputIndexers[_j];
      var _result2 = compareTypes(indexer, inputIndexer);
      if (_result2 === 1) {
        isGreater = true;
        continue loop;
      } else if (_result2 === 0) {
        continue loop;
      }
    }
    // if we got this far, nothing accepted
    return -1;
  }
  return isGreater ? 1 : 0;
}

function acceptsWithoutIndexers(type, input) {
  var properties = type.properties;

  for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    if (!property.accepts(input)) {
      return false;
    }
  }
  return true;
}

function acceptsExact(type, input) {
  var properties = type.properties;

  var _loop = function _loop(key) {
    // eslint-disable-line guard-for-in
    if (!properties.some(function (property) {
      return property.key === key;
    })) {
      return {
        v: false
      };
    }
  };

  for (var key in input) {
    var _ret2 = _loop(key);

    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
  }
  return true;
}

function compareTypeWithoutIndexers(type, input) {
  var properties = type.properties;

  var inputProperties = input.properties;
  var isGreater = false;
  loop: for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    for (var j = 0; j < inputProperties.length; j++) {
      var inputProperty = inputProperties[j];
      if (inputProperty.key === property.key) {
        var result = compareTypes(property.value, inputProperty.value);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
        continue loop;
      }
    }
    return -1;
  }
  return isGreater ? 1 : 0;
}

function collectErrorsWithIndexers(type, validation, path, input) {
  var properties, indexers, seen, i, property, key, value, _i5, indexer;

  return _regeneratorRuntime.wrap(function collectErrorsWithIndexers$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          properties = type.properties, indexers = type.indexers;
          seen = [];
          i = 0;

        case 3:
          if (!(i < properties.length)) {
            _context2.next = 10;
            break;
          }

          property = properties[i];
          return _context2.delegateYield(property.errors(validation, path, input), 't0', 6);

        case 6:
          seen.push(property.key);

        case 7:
          i++;
          _context2.next = 3;
          break;

        case 10:
          _context2.t1 = _regeneratorRuntime.keys(input);

        case 11:
          if ((_context2.t2 = _context2.t1()).done) {
            _context2.next = 28;
            break;
          }

          key = _context2.t2.value;

          if (!(seen.indexOf(key) !== -1)) {
            _context2.next = 15;
            break;
          }

          return _context2.abrupt('continue', 11);

        case 15:
          value = input[key];
          _i5 = 0;

        case 17:
          if (!(_i5 < indexers.length)) {
            _context2.next = 24;
            break;
          }

          indexer = indexers[_i5];

          if (!(indexer.acceptsKey(key) && indexer.acceptsValue(value))) {
            _context2.next = 21;
            break;
          }

          return _context2.abrupt('continue', 11);

        case 21:
          _i5++;
          _context2.next = 17;
          break;

        case 24:
          _context2.next = 26;
          return [path.concat(key), getErrorMessage('ERR_NO_INDEXER'), type];

        case 26:
          _context2.next = 11;
          break;

        case 28:
        case 'end':
          return _context2.stop();
      }
    }
  }, _marked$1, this);
}

function collectErrorsWithoutIndexers(type, validation, path, input) {
  var properties, i, property;
  return _regeneratorRuntime.wrap(function collectErrorsWithoutIndexers$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          properties = type.properties;
          i = 0;

        case 2:
          if (!(i < properties.length)) {
            _context3.next = 8;
            break;
          }

          property = properties[i];
          return _context3.delegateYield(property.errors(validation, path, input), 't0', 5);

        case 5:
          i++;
          _context3.next = 2;
          break;

        case 8:
        case 'end':
          return _context3.stop();
      }
    }
  }, _marked2, this);
}

function collectErrorsExact(type, validation, path, input) {
  var _this2 = this;

  var properties, _loop2, key;

  return _regeneratorRuntime.wrap(function collectErrorsExact$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          properties = type.properties;
          _loop2 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop2(key) {
            return _regeneratorRuntime.wrap(function _loop2$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (properties.some(function (property) {
                      return property.key === key;
                    })) {
                      _context4.next = 3;
                      break;
                    }

                    _context4.next = 3;
                    return [path, getErrorMessage('ERR_UNKNOWN_KEY', key), type];

                  case 3:
                  case 'end':
                    return _context4.stop();
                }
              }
            }, _loop2, _this2);
          });
          _context5.t0 = _regeneratorRuntime.keys(input);

        case 3:
          if ((_context5.t1 = _context5.t0()).done) {
            _context5.next = 8;
            break;
          }

          key = _context5.t1.value;
          return _context5.delegateYield(_loop2(key), 't2', 6);

        case 6:
          _context5.next = 3;
          break;

        case 8:
        case 'end':
          return _context5.stop();
      }
    }
  }, _marked3, this);
}

function indent(input) {
  var lines = input.split('\n');
  var length = lines.length;

  for (var i = 0; i < length; i++) {
    lines[i] = '  ' + lines[i];
  }
  return lines.join('\n');
}

var IntersectionType = function (_Type) {
  inherits(IntersectionType, _Type);

  function IntersectionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, IntersectionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = IntersectionType.__proto__ || Object.getPrototypeOf(IntersectionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'IntersectionType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(IntersectionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              i = 0;

            case 3:
              if (!(i < length)) {
                _context.next = 8;
                break;
              }

              return _context.delegateYield(types[i].errors(validation, path, input), 't0', 5);

            case 5:
              i++;
              _context.next = 3;
              break;

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })

    /**
     * Get a property with the given name, or undefined if it does not exist.
     */

  }, {
    key: 'getProperty',
    value: function getProperty(key) {
      var types = this.types;
      var length = types.length;

      for (var i = length - 1; i >= 0; i--) {
        var type = types[i];
        if (typeof type.getProperty === 'function') {
          var prop = type.getProperty(key);
          if (prop) {
            return prop;
          }
        }
      }
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (typeof type.hasProperty === 'function' && type.hasProperty(key)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (!type.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var types = this.types;
      var identicalCount = 0;
      if (input instanceof IntersectionType) {
        var inputTypes = input.types;
        loop: for (var i = 0; i < types.length; i++) {
          var type = types[i];
          for (var j = 0; j < inputTypes.length; j++) {
            var result = compareTypes(type, inputTypes[i]);
            if (result === 0) {
              identicalCount++;
              continue loop;
            } else if (result === 1) {
              continue loop;
            }
          }
          // if we got this far then nothing accepted this type.
          return -1;
        }
        return identicalCount === types.length ? 0 : 1;
      } else {
        for (var _i = 0; _i < types.length; _i++) {
          var _type = types[_i];
          var _result = compareTypes(_type, input);
          if (_result === -1) {
            return -1;
          } else if (_result === 0) {
            identicalCount++;
          }
        }
        return identicalCount === types.length ? 0 : 1;
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _ref2;

      var callProperties = [];
      var properties = [];
      var indexers = [];
      var types = this.types,
          context = this.context;

      for (var i = 0; i < types.length; i++) {
        var type = types[i].unwrap();
        invariant(type instanceof ObjectType, 'Can only intersect object types');
        callProperties.push.apply(callProperties, toConsumableArray(type.callProperties));
        indexers.push.apply(indexers, toConsumableArray(type.indexers));
        mergeProperties(properties, type.properties);
      }
      return (_ref2 = context).object.apply(_ref2, callProperties.concat(properties, indexers));
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.types.join(' & ');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return IntersectionType;
}(Type);

function getPropertyIndex(name, properties) {
  for (var i = 0; i < properties.length; i++) {
    if (properties[i].name === name) {
      return i;
    }
  }
  return -1;
}

function mergeProperties(target, source) {
  for (var i = 0; i < source.length; i++) {
    var typeProp = source[i];
    var index = getPropertyIndex(typeProp.key, target);
    if (index === -1) {
      target.push(typeProp);
    } else {
      target[index] = typeProp;
    }
  }
  return target;
}

var MixedType = function (_Type) {
  inherits(MixedType, _Type);

  function MixedType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, MixedType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = MixedType.__proto__ || Object.getPrototypeOf(MixedType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'MixedType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(MixedType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'mixed';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return MixedType;
}(Type);

var NumericLiteralType = function (_Type) {
  inherits(NumericLiteralType, _Type);

  function NumericLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NumericLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NumericLiteralType.__proto__ || Object.getPrototypeOf(NumericLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NumericLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NumericLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', value), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NumericLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '' + this.value;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return NumericLiteralType;
}(Type);

var NumberType = function (_Type) {
  inherits(NumberType, _Type);

  function NumberType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NumberType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NumberType.__proto__ || Object.getPrototypeOf(NumberType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NumberType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NumberType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'number')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_NUMBER'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'number';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NumberType) {
        return 0;
      } else if (input instanceof NumericLiteralType) {
        return 1;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'number';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return NumberType;
}(Type);

var ParameterizedTypeAlias = function (_TypeAlias) {
  inherits(ParameterizedTypeAlias, _TypeAlias);

  function ParameterizedTypeAlias() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedTypeAlias);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedTypeAlias.__proto__ || Object.getPrototypeOf(ParameterizedTypeAlias)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedTypeAlias', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedTypeAlias, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      var partial = getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances)));
      if (!partial.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0; // should never need this because it's taken care of by compareTypes.
      } else if (this.hasConstraints) {
        // if we have constraints the types cannot be the same
        return -1;
      } else {
        return compareTypes(getPartial$1(this), input);
      }
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      for (var _len4 = arguments.length, typeInstances = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        typeInstances[_key4 - 1] = arguments[_key4];
      }

      var inner = this.unwrap.apply(this, toConsumableArray(typeInstances));
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty.apply(inner, [name].concat(toConsumableArray(typeInstances)));
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      for (var _len5 = arguments.length, typeInstances = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        typeInstances[_key5 - 1] = arguments[_key5];
      }

      var inner = this.unwrap.apply(this, toConsumableArray(typeInstances));
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty.apply(inner, [name].concat(toConsumableArray(typeInstances)));
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len6 = arguments.length, typeInstances = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        typeInstances[_key6] = arguments[_key6];
      }

      return getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances))).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var partial = getPartial$1(this);
      var typeParameters = partial.typeParameters;

      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }

      var name = this.name;

      var identifier = typeParameters.length > 0 ? name + '<' + items.join(', ') + '>' : name;

      if (withDeclaration) {
        return 'type ' + identifier + ' = ' + partial.toString() + ';';
      } else {
        return identifier;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var partial = getPartial$1(this);
      return partial.toJSON();
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return getPartial$1(this).type.properties;
    }
  }]);
  return ParameterizedTypeAlias;
}(TypeAlias);

function getPartial$1(parent) {
  var typeCreator = parent.typeCreator,
      context = parent.context,
      name = parent.name;

  var partial = new PartialType(context);
  partial.name = name;
  partial.type = typeCreator(partial);
  partial.constraints = parent.constraints;

  var typeParameters = partial.typeParameters;

  for (var _len7 = arguments.length, typeInstances = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
    typeInstances[_key7 - 1] = arguments[_key7];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var ParameterizedFunctionType = function (_Type) {
  inherits(ParameterizedFunctionType, _Type);

  function ParameterizedFunctionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedFunctionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedFunctionType.__proto__ || Object.getPrototypeOf(ParameterizedFunctionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedFunctionType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedFunctionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(getPartial$2(this), input);
    }
  }, {
    key: 'acceptsParams',
    value: function acceptsParams() {
      var _getPartial$type;

      return (_getPartial$type = getPartial$2(this).type).acceptsParams.apply(_getPartial$type, arguments);
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return getPartial$2(this).type.acceptsReturn(input);
    }
  }, {
    key: 'assertParams',
    value: function assertParams() {
      var _getPartial$type2;

      return (_getPartial$type2 = getPartial$2(this).type).assertParams.apply(_getPartial$type2, arguments);
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      return getPartial$2(this).type.assertReturn(input);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len4 = arguments.length, typeInstances = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        typeInstances[_key4] = arguments[_key4];
      }

      return getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      var partial = getPartial$2(this);
      var type = partial.type,
          typeParameters = partial.typeParameters;

      if (typeParameters.length === 0) {
        return type.toString();
      }
      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }
      return '<' + items.join(', ') + '> ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var partial = getPartial$2(this);
      return partial.toJSON();
    }
  }, {
    key: 'typeParameters',
    get: function get$$1() {
      return getPartial$2(this).typeParameters;
    }
  }, {
    key: 'params',
    get: function get$$1() {
      return getPartial$2(this).type.params;
    }
  }, {
    key: 'rest',
    get: function get$$1() {
      return getPartial$2(this).type.rest;
    }
  }, {
    key: 'returnType',
    get: function get$$1() {
      return getPartial$2(this).type.returnType;
    }
  }]);
  return ParameterizedFunctionType;
}(Type);

function getPartial$2(parent) {
  var context = parent.context,
      bodyCreator = parent.bodyCreator;

  var partial = new PartialType(context);
  var body = bodyCreator(partial);
  partial.type = context.function.apply(context, toConsumableArray(body));

  var typeParameters = partial.typeParameters;

  for (var _len5 = arguments.length, typeInstances = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    typeInstances[_key5 - 1] = arguments[_key5];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var RefinementType = function (_Type) {
  inherits(RefinementType, _Type);

  function RefinementType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, RefinementType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = RefinementType.__proto__ || Object.getPrototypeOf(RefinementType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'RefinementType', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(RefinementType, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len3 = arguments.length, typeInstances = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        typeInstances[_key3] = arguments[_key3];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return '$Refinment<' + type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return RefinementType;
}(Type);

var StringLiteralType = function (_Type) {
  inherits(StringLiteralType, _Type);

  function StringLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, StringLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = StringLiteralType.__proto__ || Object.getPrototypeOf(StringLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'StringLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(StringLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof StringLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return JSON.stringify(this.value);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return StringLiteralType;
}(Type);

var StringType = function (_Type) {
  inherits(StringType, _Type);

  function StringType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, StringType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = StringType.__proto__ || Object.getPrototypeOf(StringType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'StringType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(StringType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'string')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_STRING'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'string';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof StringLiteralType) {
        return 1;
      } else if (input instanceof StringType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'string';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return StringType;
}(Type);

var SymbolLiteralType = function (_Type) {
  inherits(SymbolLiteralType, _Type);

  function SymbolLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SymbolLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SymbolLiteralType.__proto__ || Object.getPrototypeOf(SymbolLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'SymbolLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SymbolLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof SymbolLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'typeof ' + String(this.value);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return SymbolLiteralType;
}(Type);

var SymbolType = function (_Type) {
  inherits(SymbolType, _Type);

  function SymbolType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SymbolType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SymbolType.__proto__ || Object.getPrototypeOf(SymbolType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'SymbolType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SymbolType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'symbol')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_SYMBOL'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof SymbolLiteralType) {
        return 1;
      } else if (input instanceof SymbolType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'Symbol';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return SymbolType;
}(Type);

/**
 * # ThisType
 * Captures a reference to a particular instance of a class or a value,
 * and uses that value to perform an identity check.
 * In the case that `this` is undefined, any value will be permitted.
 */

var ThisType = function (_Type) {
  inherits(ThisType, _Type);

  function ThisType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ThisType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ThisType.__proto__ || Object.getPrototypeOf(ThisType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ThisType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ThisType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var recorded;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              recorded = this.recorded;

              if (!(input === recorded)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return');

            case 5:
              if (!(typeof recorded === 'function' && input instanceof recorded)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              if (!(recorded != null)) {
                _context.next = 12;
                break;
              }

              _context.next = 12;
              return [path, getErrorMessage('ERR_EXPECT_THIS'), this];

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var recorded = this.recorded;

      if (input === recorded) {
        return true;
      } else if (typeof recorded === 'function' && input instanceof recorded) {
        return true;
      } else if (recorded != null) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ThisType)) {
        return -1;
      } else if (input.recorded && this.recorded) {
        return input.recorded === this.recorded ? 0 : -1;
      } else if (this.recorded) {
        return 0;
      } else {
        return 1;
      }
    }

    /**
     * Get the inner type.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      return 'this';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return ThisType;
}(Type);

var warnedInstances$1 = new WeakSet();

var TypeBox = function (_Type) {
  inherits(TypeBox, _Type);

  function TypeBox() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeBox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeBox.__proto__ || Object.getPrototypeOf(TypeBox)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeBox', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeBox, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this.type;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.type.toJSON();
    }
  }, {
    key: 'name',
    get: function get$$1() {
      return this.type.name;
    }
  }, {
    key: 'type',
    get: function get$$1() {
      var reveal = this.reveal;

      var type = reveal();
      if (!type) {
        if (!warnedInstances$1.has(this)) {
          this.context.emitWarningMessage('Failed to reveal boxed type.');
          warnedInstances$1.add(this);
        }
        return this.context.mixed();
      } else if (!(type instanceof Type)) {
        // we got a boxed reference to something like a class
        return this.context.ref(type);
      }
      return type;
    }
  }]);
  return TypeBox;
}(Type);

var warnedMissing = {};

var TypeReference = function (_Type) {
  inherits(TypeReference, _Type);

  function TypeReference() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeReference);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeReference.__proto__ || Object.getPrototypeOf(TypeReference)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeReference', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeReference, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name
      };
    }
  }, {
    key: 'type',
    get: function get$$1() {
      var context = this.context,
          name = this.name;

      var type = context.get(name);
      if (!type) {
        if (!warnedMissing[name]) {
          context.emitWarningMessage('Cannot resolve type: ' + name);
          warnedMissing[name] = true;
        }
        return context.any();
      }
      return type;
    }
  }]);
  return TypeReference;
}(Type);

var warnedInstances$2 = new WeakSet();

var RevealedName = Symbol('RevealedName');
var RevealedValue = Symbol('RevealedValue');

var TypeTDZ = function (_Type) {
  inherits(TypeTDZ, _Type);

  function TypeTDZ() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeTDZ);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeTDZ.__proto__ || Object.getPrototypeOf(TypeTDZ)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeTDZ', _this[RevealedName] = undefined, _this[RevealedValue] = undefined, _temp), possibleConstructorReturn(_this, _ret);
  }

  // Issue 252


  // Issue 252


  createClass(TypeTDZ, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getRevealed(this).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return getRevealed(this).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(getRevealed(this), input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = getRevealed(this);

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return getRevealed(this).unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return getRevealed(this).toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return getRevealed(this).toJSON();
    }
  }, {
    key: 'name',
    get: function get$$1() {
      var name = this[RevealedName];
      if (!name) {
        name = getRevealed(this).name;
      }
      return name;
    },
    set: function set$$1(value) {
      this[RevealedName] = value;
    }
  }]);
  return TypeTDZ;
}(Type);

function getRevealed(container) {
  var existing = container[RevealedValue];
  if (existing) {
    return existing;
  } else {
    var reveal = container.reveal;

    var type = reveal();
    if (!type) {
      if (!warnedInstances$2.has(container)) {
        var name = container[RevealedName];
        if (name) {
          container.context.emitWarningMessage('Failed to reveal type called "' + name + '" in Temporal Dead Zone.');
        } else {
          container.context.emitWarningMessage('Failed to reveal unknown type in Temporal Dead Zone.');
        }
        warnedInstances$2.add(container);
      }
      return container.context.mixed();
    } else if (!(type instanceof Type)) {
      // we got a boxed reference to something like a class
      return container.context.ref(type);
    }
    return type;
  }
}

var UnionType = function (_Type) {
  inherits(UnionType, _Type);

  function UnionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, UnionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = UnionType.__proto__ || Object.getPrototypeOf(UnionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'UnionType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(UnionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, i, type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              i = 0;

            case 3:
              if (!(i < length)) {
                _context.next = 10;
                break;
              }

              type = types[i];

              if (!type.accepts(input)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt('return');

            case 7:
              i++;
              _context.next = 3;
              break;

            case 10:
              _context.next = 12;
              return [path, getErrorMessage('ERR_NO_UNION', this.toString()), this];

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (type.accepts(input)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var types = this.types;
      if (input instanceof UnionType) {
        var inputTypes = input.types;
        var identicalCount = 0;
        loop: for (var i = 0; i < types.length; i++) {
          var type = types[i];
          for (var j = 0; j < inputTypes.length; j++) {
            var result = compareTypes(type, inputTypes[i]);
            if (result === 0) {
              identicalCount++;
              continue loop;
            } else if (result === 1) {
              continue loop;
            }
          }
          // if we got this far then nothing accepted this type.
          return -1;
        }

        if (identicalCount === types.length) {
          return 0;
        } else {
          return 1;
        }
      } else {
        for (var _i = 0; _i < types.length; _i++) {
          var _type = types[_i];
          if (compareTypes(_type, input) >= 0) {
            return 1;
          }
        }
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var types = this.types;

      var normalized = new Array(types.length);
      for (var i = 0; i < types.length; i++) {
        var type = types[i];
        if (type.typeName === 'FunctionType' || type.typeName === 'ParameterizedFunctionType') {
          normalized[i] = '(' + type.toString() + ')';
        } else {
          normalized[i] = type.toString();
        }
      }
      return normalized.join(' | ');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return UnionType;
}(Type);

function registerPrimitiveTypes(t) {
  primitiveTypes.null = Object.freeze(new NullLiteralType(t));
  primitiveTypes.empty = Object.freeze(new EmptyType(t));
  primitiveTypes.number = Object.freeze(new NumberType(t));
  primitiveTypes.boolean = Object.freeze(new BooleanType(t));
  primitiveTypes.string = Object.freeze(new StringType(t));
  primitiveTypes.symbol = Object.freeze(new SymbolType(t));
  primitiveTypes.any = Object.freeze(new AnyType(t));
  primitiveTypes.mixed = Object.freeze(new MixedType(t));
  primitiveTypes.void = Object.freeze(new VoidType(t));
  primitiveTypes.existential = Object.freeze(new ExistentialType(t));
  return t;
}

function registerBuiltinTypeConstructors(t) {

  t.declareTypeConstructor({
    name: 'Date',
    impl: Date,
    typeName: 'DateType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (input instanceof Date) {
                _context.next = 5;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Date'), this];

            case 3:
              _context.next = 8;
              break;

            case 5:
              if (!isNaN(input.getTime())) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return [path, getErrorMessage('ERR_INVALID_DATE'), this];

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    }),
    accepts: function accepts(input) {
      return input instanceof Date && !isNaN(input.getTime());
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'DateType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      return [];
    }
  });

  t.declareTypeConstructor({
    name: 'Promise',
    impl: Promise,
    typeName: 'PromiseType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, futureType) {
      var context;
      return _regeneratorRuntime.wrap(function errors$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              invariant(futureType, 'Must specify type parameter for Promise.');
              context = this.context;

              if (context.checkPredicate('Promise', input)) {
                _context2.next = 5;
                break;
              }

              _context2.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_PROMISE', futureType), this];

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, errors, this);
    }),
    accepts: function accepts(input) {
      var context = this.context;

      return context.checkPredicate('Promise', input);
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'PromiseType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      return [];
    }
  });

  t.declareTypeConstructor({
    name: 'Map',
    impl: Map,
    typeName: 'MapType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, keyType, valueType) {
      var context, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref, _ref2, key, value;

      return _regeneratorRuntime.wrap(function errors$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              invariant(keyType, 'Must specify two type parameters for Map.');
              invariant(valueType, 'Must specify two type parameters for Map.');
              context = this.context;

              if (context.checkPredicate('Map', input)) {
                _context3.next = 7;
                break;
              }

              _context3.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Map'), this];

            case 6:
              return _context3.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context3.prev = 10;
              _iterator = input[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context3.next = 24;
                break;
              }

              _ref = _step.value;
              _ref2 = slicedToArray(_ref, 2);
              key = _ref2[0];
              value = _ref2[1];

              if (keyType.accepts(key)) {
                _context3.next = 20;
                break;
              }

              _context3.next = 20;
              return [path, getErrorMessage('ERR_EXPECT_KEY_TYPE', keyType), this];

            case 20:
              return _context3.delegateYield(valueType.errors(validation, path.concat(key), value), 't0', 21);

            case 21:
              _iteratorNormalCompletion = true;
              _context3.next = 12;
              break;

            case 24:
              _context3.next = 30;
              break;

            case 26:
              _context3.prev = 26;
              _context3.t1 = _context3['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context3.t1;

            case 30:
              _context3.prev = 30;
              _context3.prev = 31;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 33:
              _context3.prev = 33;

              if (!_didIteratorError) {
                _context3.next = 36;
                break;
              }

              throw _iteratorError;

            case 36:
              return _context3.finish(33);

            case 37:
              return _context3.finish(30);

            case 38:
            case 'end':
              return _context3.stop();
          }
        }
      }, errors, this, [[10, 26, 30, 38], [31,, 33, 37]]);
    }),
    accepts: function accepts(input, keyType, valueType) {
      var context = this.context;

      if (!context.checkPredicate('Map', input)) {
        return false;
      }
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _ref3 = _step2.value;

          var _ref4 = slicedToArray(_ref3, 2);

          var key = _ref4[0];
          var value = _ref4[1];

          if (!keyType.accepts(key) || !valueType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'MapType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      var keyTypes = [];
      var valueTypes = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        loop: for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _ref5 = _step3.value;

          var _ref6 = slicedToArray(_ref5, 2);

          var key = _ref6[0];
          var value = _ref6[1];

          findKey: {
            for (var i = 0; i < keyTypes.length; i++) {
              var type = keyTypes[i];
              if (type.accepts(key)) {
                break findKey;
              }
            }
            keyTypes.push(t.typeOf(key));
          }

          for (var _i = 0; _i < valueTypes.length; _i++) {
            var _type = valueTypes[_i];
            if (_type.accepts(value)) {
              continue loop;
            }
          }
          valueTypes.push(t.typeOf(value));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var typeInstances = [];

      if (keyTypes.length === 0) {
        typeInstances.push(t.existential());
      } else if (keyTypes.length === 1) {
        typeInstances.push(keyTypes[0]);
      } else {
        typeInstances.push(t.union.apply(t, keyTypes));
      }

      if (valueTypes.length === 0) {
        typeInstances.push(t.existential());
      } else if (valueTypes.length === 1) {
        typeInstances.push(valueTypes[0]);
      } else {
        typeInstances.push(t.union.apply(t, valueTypes));
      }

      return typeInstances;
    }
  });

  t.declareTypeConstructor({
    name: 'Set',
    impl: Set,
    typeName: 'SetType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, valueType) {
      var context, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, value;

      return _regeneratorRuntime.wrap(function errors$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              invariant(valueType, 'Must specify type parameter for Set.');
              context = this.context;

              if (context.checkPredicate('Set', input)) {
                _context4.next = 6;
                break;
              }

              _context4.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Set'), this];

            case 5:
              return _context4.abrupt('return');

            case 6:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context4.prev = 9;
              _iterator4 = input[Symbol.iterator]();

            case 11:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context4.next = 17;
                break;
              }

              value = _step4.value;
              return _context4.delegateYield(valueType.errors(validation, path, value), 't0', 14);

            case 14:
              _iteratorNormalCompletion4 = true;
              _context4.next = 11;
              break;

            case 17:
              _context4.next = 23;
              break;

            case 19:
              _context4.prev = 19;
              _context4.t1 = _context4['catch'](9);
              _didIteratorError4 = true;
              _iteratorError4 = _context4.t1;

            case 23:
              _context4.prev = 23;
              _context4.prev = 24;

              if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
              }

            case 26:
              _context4.prev = 26;

              if (!_didIteratorError4) {
                _context4.next = 29;
                break;
              }

              throw _iteratorError4;

            case 29:
              return _context4.finish(26);

            case 30:
              return _context4.finish(23);

            case 31:
            case 'end':
              return _context4.stop();
          }
        }
      }, errors, this, [[9, 19, 23, 31], [24,, 26, 30]]);
    }),
    accepts: function accepts(input, valueType) {
      var context = this.context;

      if (!context.checkPredicate('Set', input)) {
        return false;
      }
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = input[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var value = _step5.value;

          if (!valueType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return true;
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'SetType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      var valueTypes = [];
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        loop: for (var _iterator6 = input[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var value = _step6.value;

          for (var i = 0; i < valueTypes.length; i++) {
            var type = valueTypes[i];
            if (type.accepts(value)) {
              continue loop;
            }
          }
          valueTypes.push(t.typeOf(value));
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      if (valueTypes.length === 0) {
        return [t.existential()];
      } else if (valueTypes.length === 1) {
        return [valueTypes[0]];
      } else {
        return [t.union.apply(t, valueTypes)];
      }
    }
  });

  return t;
}

function registerTypePredicates(context) {
  context.setPredicate('Array', function (input) {
    return Array.isArray(input);
  });
  context.setPredicate('Map', function (input) {
    return input instanceof Map;
  });
  context.setPredicate('Set', function (input) {
    return input instanceof Set;
  });
  context.setPredicate('Promise', function (input) {
    if (input instanceof Promise) {
      return true;
    } else {
      return input !== null && ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' || typeof input === 'function') && typeof input.then === 'function';
    }
  });
}

var TypeInferer = function () {
  function TypeInferer(context) {
    classCallCheck(this, TypeInferer);

    this.context = context;
  }

  createClass(TypeInferer, [{
    key: 'infer',
    value: function infer(input) {
      var primitive = this.inferPrimitive(input);
      if (primitive) {
        return primitive;
      }
      var inferred = new Map();
      return this.inferComplex(input, inferred);
    }
  }, {
    key: 'inferInternal',
    value: function inferInternal(input, inferred) {
      var primitive = this.inferPrimitive(input);
      if (primitive) {
        return primitive;
      }
      return this.inferComplex(input, inferred);
    }
  }, {
    key: 'inferPrimitive',
    value: function inferPrimitive(input) {
      var context = this.context;

      if (input === null) {
        return context.null();
      } else if (input === undefined) {
        return context.void();
      } else if (typeof input === 'number') {
        return context.number();
      } else if (typeof input === 'boolean') {
        return context.boolean();
      } else if (typeof input === 'string') {
        return context.string();
      }
      // Issue 252
      else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol') {
          return context.symbol(input);
        } else {
          return undefined;
        }
    }
  }, {
    key: 'inferComplex',
    value: function inferComplex(input, inferred) {
      var context = this.context;


      if (typeof input === 'function') {
        return this.inferFunction(input, inferred);
      } else if (input !== null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
        return this.inferObject(input, inferred);
      } else {
        return context.any();
      }
    }
  }, {
    key: 'inferFunction',
    value: function inferFunction(input, inferred) {
      var context = this.context;
      var length = input.length;

      var body = new Array(length + 1);
      for (var i = 0; i < length; i++) {
        body[i] = context.param(String.fromCharCode(97 + i), context.existential());
      }
      body[length] = context.return(context.existential());
      return context.fn.apply(context, body);
    }
  }, {
    key: 'inferObject',
    value: function inferObject(input, inferred) {
      var existing = inferred.get(input);
      if (existing) {
        return existing;
      }
      var context = this.context;

      var type = void 0;

      // Temporarily create a box for this type to catch cyclical references.
      // Nested references to this object will receive the boxed type.
      var box = context.box(function () {
        return type;
      });
      inferred.set(input, box);

      if (context.checkPredicate('Array', input)) {
        type = this.inferArray(input, inferred);
      } else if (!(input instanceof Object)) {
        type = this.inferDict(input, inferred);
      } else if (input.constructor !== Object) {
        var handler = context.getTypeConstructor(input.constructor);
        if (handler) {
          var typeParameters = handler.inferTypeParameters(input);
          type = handler.apply.apply(handler, toConsumableArray(typeParameters));
        } else {
          type = context.ref(input.constructor);
        }
      } else {
        var body = [];
        for (var key in input) {
          // eslint-disable-line
          var value = input[key];
          body.push(context.property(key, this.inferInternal(value, inferred)));
        }
        type = context.object.apply(context, body);
      }

      // Overwrite the box with the real value.
      inferred.set(input, type);
      return type;
    }
  }, {
    key: 'inferDict',
    value: function inferDict(input, inferred) {
      var numericIndexers = [];
      var stringIndexers = [];
      loop: for (var key in input) {
        // eslint-disable-line
        var value = input[key];
        var types = isNaN(+key) ? stringIndexers : numericIndexers;
        for (var i = 0; i < types.length; i++) {
          var type = types[i];
          if (type.accepts(value)) {
            continue loop;
          }
        }
        types.push(this.inferInternal(value, inferred));
      }

      var context = this.context;

      var body = [];
      if (numericIndexers.length === 1) {
        body.push(context.indexer('index', context.number(), numericIndexers[0]));
      } else if (numericIndexers.length > 1) {
        body.push(context.indexer('index', context.number(), context.union.apply(context, numericIndexers)));
      }

      if (stringIndexers.length === 1) {
        body.push(context.indexer('key', context.string(), stringIndexers[0]));
      } else if (stringIndexers.length > 1) {
        body.push(context.indexer('key', context.string(), context.union.apply(context, stringIndexers)));
      }

      return context.object.apply(context, body);
    }
  }, {
    key: 'inferArray',
    value: function inferArray(input, inferred) {
      var context = this.context;

      var types = [];
      var values = [];
      var length = input.length;

      loop: for (var i = 0; i < length; i++) {
        var item = input[i];
        var inferredType = this.inferInternal(item, inferred);
        for (var j = 0; j < types.length; j++) {
          var type = types[j];
          if (type.accepts(item) && inferredType.accepts(values[j])) {
            continue loop;
          }
        }
        types.push(inferredType);
        values.push(item);
      }
      if (types.length === 0) {
        return context.array(context.any());
      } else if (types.length === 1) {
        return context.array(types[0]);
      } else {
        return context.array(context.union.apply(context, types));
      }
    }
  }]);
  return TypeInferer;
}();

function makeReactPropTypes(objectType) {
  var output = {};
  if (!objectType.properties) {
    return output;
  }

  var _loop = function _loop(property) {
    output[property.key] = function (props, propName, componentName) {
      return makeError(property, props);
    };
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = objectType.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var property = _step.value;

      _loop(property);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
}

var delimiter$1 = '\n-------------------------------------------------\n\n';

function makeWarningMessage(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var input = validation.input,
      context = validation.context;

  var collected = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validation.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : "*";
      var actual = context.typeOf(_resolvePath(input, path)).toString();

      var field = stringifyPath(validation.path.concat(path));

      collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual: ' + actual + '\n');
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return 'Warning: ' + collected.join(delimiter$1);
}

function makeUnion(context, types) {
  var length = types.length;
  var merged = [];
  for (var i = 0; i < length; i++) {
    var type = types[i];
    if (type instanceof AnyType || type instanceof MixedType || type instanceof ExistentialType) {
      return type;
    }
    if (type instanceof UnionType) {
      mergeUnionTypes(merged, type.types);
    } else {
      merged.push(type);
    }
  }
  var union = new UnionType(context);
  union.types = merged;
  return union;
}

function mergeUnionTypes(aTypes, bTypes) {
  loop: for (var i = 0; i < bTypes.length; i++) {
    var bType = bTypes[i];
    for (var j = 0; j < aTypes.length; j++) {
      var aType = aTypes[j];
      if (compareTypes(aType, bType) !== -1) {
        continue loop;
      }
    }
    aTypes.push(bType);
  }
}

function makePropertyDescriptor(typeSource, input, propertyName, descriptor, shouldAssert) {
  if (typeof descriptor.get === 'function' && typeof descriptor.set === 'function') {
    return augmentExistingAccessors(typeSource, input, propertyName, descriptor, shouldAssert);
  } else {
    return propertyToAccessor(typeSource, input, propertyName, descriptor, shouldAssert);
  }
}

function makePropertyName(name) {
  return '_flowRuntime$' + name;
}

function getClassName(input) {
  if (typeof input === 'function') {
    return input.name || '[Class anonymous]';
  } else if (typeof input.constructor === 'function') {
    return getClassName(input.constructor);
  } else {
    return '[Class anonymous]';
  }
}

function resolveType(receiver, typeSource) {
  if (typeof typeSource === 'function') {
    return typeSource.call(receiver);
  } else {
    return typeSource;
  }
}

function propertyToAccessor(typeSource, input, propertyName, descriptor, shouldAssert) {
  var safeName = makePropertyName(propertyName);
  var className = getClassName(input);
  var initializer = descriptor.initializer,
      writable = descriptor.writable,
      config = objectWithoutProperties(descriptor, ['initializer', 'writable']); // eslint-disable-line no-unused-vars

  var propertyPath = [className, propertyName];

  return _extends({}, config, {
    type: 'accessor',
    get: function get$$1() {
      if (safeName in this) {
        return this[safeName];
      } else if (initializer) {
        var type = resolveType(this, typeSource);
        var _value = initializer.call(this);
        var context = type.context;
        context.check(type, _value, 'Default value for property', propertyPath);
        Object.defineProperty(this, safeName, {
          writable: true,
          value: _value
        });
        return _value;
      } else {
        Object.defineProperty(this, safeName, {
          writable: true,
          value: undefined
        });
      }
    },
    set: function set$$1(value) {
      var type = resolveType(this, typeSource);
      var context = type.context;
      if (shouldAssert) {
        context.assert(type, value, 'Property', propertyPath);
      } else {
        context.warn(type, value, 'Property', propertyPath);
      }
      if (safeName in this) {
        this[safeName] = value;
      } else {
        Object.defineProperty(this, safeName, {
          writable: true,
          value: value
        });
      }
    }
  });
}

function augmentExistingAccessors(typeSource, input, propertyName, descriptor, shouldAssert) {

  var className = getClassName(input);
  var propertyPath = [className, propertyName];

  var originalSetter = descriptor.set;

  descriptor.set = function set$$1(value) {
    var type = resolveType(this, typeSource);
    var context = type.context;
    if (shouldAssert) {
      context.assert(type, value, 'Property', propertyPath);
    } else {
      context.warn(type, value, 'Property', propertyPath);
    }
    originalSetter.call(this, value);
  };
}

// eslint-disable-line no-redeclare

function annotateValue(input, type) {
  // eslint-disable-line no-redeclare
  if (type instanceof Type) {
    input[TypeSymbol] = type;
    return input;
  } else {
    var _type = input;
    return function (input) {
      input[TypeSymbol] = _type;
      return input;
    };
  }
}

// If A and B are object types, $Diff<A,B> is the type of objects that have
// properties defined in A, but not in B.
// Properties that are defined in both A and B are allowed too.

var $DiffType = function (_Type) {
  inherits($DiffType, _Type);

  function $DiffType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $DiffType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $DiffType.__proto__ || Object.getPrototypeOf($DiffType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$DiffType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($DiffType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var aType, bType, properties, i, property;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              aType = this.aType, bType = this.bType;

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              aType = aType.unwrap();
              bType = bType.unwrap();
              invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
              properties = aType.properties;
              i = 0;

            case 10:
              if (!(i < properties.length)) {
                _context.next = 18;
                break;
              }

              property = properties[i];

              if (!bType.hasProperty(property.key)) {
                _context.next = 14;
                break;
              }

              return _context.abrupt('continue', 15);

            case 14:
              return _context.delegateYield(property.errors(validation, path.concat(property.key), input), 't0', 15);

            case 15:
              i++;
              _context.next = 10;
              break;

            case 18:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var aType = this.aType,
          bType = this.bType;

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }
      aType = aType.unwrap();
      bType = bType.unwrap();
      invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
      var properties = aType.properties;
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (bType.hasProperty(property.key)) {
          continue;
        }
        if (!property.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var aType = this.aType,
          bType = this.bType;

      aType = aType.unwrap();
      bType = bType.unwrap();
      invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
      var properties = aType.properties;
      var args = [];
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (bType.hasProperty(property.key)) {
          continue;
        }
        args.push(property);
      }
      return (_context2 = this.context).object.apply(_context2, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Diff<' + this.aType.toString() + ', ' + this.bType.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        aType: this.aType,
        bType: this.bType
      };
    }
  }]);
  return $DiffType;
}(Type);

// Any subtype of T

var $FlowFixMeType = function (_Type) {
  inherits($FlowFixMeType, _Type);

  function $FlowFixMeType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $FlowFixMeType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $FlowFixMeType.__proto__ || Object.getPrototypeOf($FlowFixMeType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$FlowFixMeType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($FlowFixMeType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$FlowFixMe';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return $FlowFixMeType;
}(Type);

// The set of keys of T.

var $KeysType = function (_Type) {
  inherits($KeysType, _Type);

  function $KeysType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $KeysType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $KeysType.__proto__ || Object.getPrototypeOf($KeysType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$KeysType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($KeysType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, properties, length, i, property, keys, _i;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type.unwrap();

              invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

              properties = type.properties;
              length = properties.length;
              i = 0;

            case 5:
              if (!(i < length)) {
                _context.next = 12;
                break;
              }

              property = properties[i];

              if (!(input === property.key)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i++;
              _context.next = 5;
              break;

            case 12:
              keys = new Array(length);

              for (_i = 0; _i < length; _i++) {
                keys[_i] = properties[_i].key;
              }
              _context.next = 16;
              return [path, getErrorMessage('ERR_NO_UNION', keys.join(' | ')), this];

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (input === property.key) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var context = this.context;
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      var keys = new Array(length);
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        keys[i] = context.literal(property.key);
      }
      return (_context2 = this.context).union.apply(_context2, keys);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Keys<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $KeysType;
}(Type);

// Map over the keys and values in an object.

var $ObjMapiType = function (_Type) {
  inherits($ObjMapiType, _Type);

  function $ObjMapiType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ObjMapiType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ObjMapiType.__proto__ || Object.getPrototypeOf($ObjMapiType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ObjMapiType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ObjMapiType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var object, mapper, context, target, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, prop, applied, returnType, value;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              object = this.object, mapper = this.mapper, context = this.context;
              target = object.unwrap();

              invariant(target instanceof ObjectType, 'Target must be an object type.');

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = target.properties[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 22;
                break;
              }

              prop = _step.value;
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              returnType = applied.invoke(context.literal(prop.key), prop.value);
              value = input[prop.key];
              return _context.delegateYield(returnType.errors(validation, path.concat(prop.key), value), 't0', 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 22:
              _context.next = 28;
              break;

            case 24:
              _context.prev = 24;
              _context.t1 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 28:
              _context.prev = 28;
              _context.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 31:
              _context.prev = 31;

              if (!_didIteratorError) {
                _context.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context.finish(31);

            case 35:
              return _context.finish(28);

            case 36:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = target.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prop = _step2.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          var returnType = applied.invoke(context.literal(prop.key), prop.value);

          var value = input[prop.key];
          if (!returnType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      var args = [];

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = target.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var prop = _step3.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          args.push(context.property(prop.key, applied.invoke(context.literal(prop.key), prop.value)));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return context.object.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$ObjMapi<' + this.object.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        mapper: this.mapper
      };
    }
  }]);
  return $ObjMapiType;
}(Type);

// Map over the keys in an object.

var $ObjMapType = function (_Type) {
  inherits($ObjMapType, _Type);

  function $ObjMapType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ObjMapType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ObjMapType.__proto__ || Object.getPrototypeOf($ObjMapType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ObjMapType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ObjMapType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var object, mapper, context, target, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, prop, applied, returnType, value;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              object = this.object, mapper = this.mapper, context = this.context;
              target = object.unwrap();

              invariant(target instanceof ObjectType, 'Target must be an object type.');

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = target.properties[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 22;
                break;
              }

              prop = _step.value;
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              returnType = applied.invoke(context.literal(prop.key));
              value = input[prop.key];
              return _context.delegateYield(returnType.errors(validation, path.concat(prop.key), value), 't0', 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 22:
              _context.next = 28;
              break;

            case 24:
              _context.prev = 24;
              _context.t1 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 28:
              _context.prev = 28;
              _context.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 31:
              _context.prev = 31;

              if (!_didIteratorError) {
                _context.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context.finish(31);

            case 35:
              return _context.finish(28);

            case 36:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = target.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prop = _step2.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          var returnType = applied.invoke(context.literal(prop.key));

          var value = input[prop.key];
          if (!returnType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      var args = [];

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = target.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var prop = _step3.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          args.push(context.property(prop.key, applied.invoke(context.literal(prop.key))));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return context.object.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$ObjMap<' + this.object.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        mapper: this.mapper
      };
    }
  }]);
  return $ObjMapType;
}(Type);

// The type of the named object property

var $PropertyType = function (_Type) {
  inherits($PropertyType, _Type);

  function $PropertyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $PropertyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $PropertyType.__proto__ || Object.getPrototypeOf($PropertyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$PropertyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($PropertyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.unwrap().errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.unwrap().accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          property = this.property;

      var unwrapped = object.unwrap();
      invariant(typeof unwrapped.getProperty === 'function', 'Can only use $PropertyType on Objects.');
      return unwrapped.getProperty(property).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$PropertyType<' + this.object.toString() + ', ' + String(this.property) + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        property: this.property
      };
    }
  }]);
  return $PropertyType;
}(Type);

// An object of type $Shape<T> does not have to have all of the properties
// that type T defines. But the types of the properties that it does have
// must accepts the types of the same properties in T.

var $ShapeType = function (_Type) {
  inherits($ShapeType, _Type);

  function $ShapeType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ShapeType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ShapeType.__proto__ || Object.getPrototypeOf($ShapeType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ShapeType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ShapeType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, key, property;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 4:
              return _context.abrupt('return');

            case 5:

              type = type.unwrap();
              invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');

              _context.t0 = _regeneratorRuntime.keys(input);

            case 8:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 16;
                break;
              }

              key = _context.t1.value;
              // eslint-disable-line guard-for-in
              property = type.getProperty(key);

              if (property) {
                _context.next = 13;
                break;
              }

              return _context.abrupt('continue', 8);

            case 13:
              return _context.delegateYield(property.errors(validation, path, input), 't2', 14);

            case 14:
              _context.next = 8;
              break;

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }
      type = type.unwrap();
      invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');
      for (var key in input) {
        // eslint-disable-line guard-for-in
        var property = type.getProperty(key);
        if (!property || !property.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var type = this.type;

      type = type.unwrap();
      var context = this.context;
      invariant(type instanceof ObjectType, 'Can only $Shape<T> object types.');
      var properties = type.properties;
      var args = new Array(properties.length);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        args[i] = context.property(property.key, property.value, true);
      }
      return (_context2 = this.context).object.apply(_context2, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Shape<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $ShapeType;
}(Type);

// Any subtype of T

var $SubType = function (_Type) {
  inherits($SubType, _Type);

  function $SubType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $SubType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $SubType.__proto__ || Object.getPrototypeOf($SubType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$SubType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($SubType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(input, path), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Subtype<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $SubType;
}(Type);

// Any, but at least T.

var $SuperType = function (_Type) {
  inherits($SuperType, _Type);

  function $SuperType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $SuperType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $SuperType.__proto__ || Object.getPrototypeOf($SuperType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$SuperType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($SuperType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Supertype<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $SuperType;
}(Type);

// Map over the values in a tuple.

var $TupleMapType = function (_Type) {
  inherits($TupleMapType, _Type);

  function $TupleMapType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $TupleMapType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $TupleMapType.__proto__ || Object.getPrototypeOf($TupleMapType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$TupleMapType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($TupleMapType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var tuple, mapper, context, target, i, type, applied, expected, value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              tuple = this.tuple, mapper = this.mapper, context = this.context;
              target = tuple.unwrap();

              invariant(target instanceof TupleType, 'Target must be a tuple type.');

              if (context.checkPredicate('Array', input)) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              i = 0;

            case 8:
              if (!(i < target.types.length)) {
                _context.next = 18;
                break;
              }

              type = target.types[i];
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              expected = applied.invoke(type);
              value = input[i];
              return _context.delegateYield(expected.errors(validation, path.concat(i), value), 't0', 15);

            case 15:
              i++;
              _context.next = 8;
              break;

            case 18:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var tuple = this.tuple,
          mapper = this.mapper,
          context = this.context;

      var target = tuple.unwrap();
      invariant(target instanceof TupleType, 'Target must be a tuple type.');

      if (!context.checkPredicate('Array', input)) {
        return false;
      }

      for (var i = 0; i < target.types.length; i++) {
        var type = target.types[i];
        var applied = mapper.unwrap();
        invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

        if (!applied.invoke(type).accepts(input[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var tuple = this.tuple,
          mapper = this.mapper,
          context = this.context;

      var target = tuple.unwrap();
      invariant(target instanceof TupleType, 'Target must be an tuple type.');

      var args = [];
      for (var i = 0; i < target.types.length; i++) {
        var type = target.types[i];
        var applied = mapper.unwrap();
        invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

        args.push(applied.invoke(type).unwrap().unwrap());
      }

      return context.tuple.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$TupleMap<' + this.tuple.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        tuple: this.tuple,
        mapper: this.mapper
      };
    }
  }]);
  return $TupleMapType;
}(Type);

// The set of keys of T.

var $ValuesType = function (_Type) {
  inherits($ValuesType, _Type);

  function $ValuesType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ValuesType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ValuesType.__proto__ || Object.getPrototypeOf($ValuesType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ValuesType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ValuesType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, properties, length, i, property, values, _i;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type.unwrap();

              invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

              properties = type.properties;
              length = properties.length;
              i = 0;

            case 5:
              if (!(i < length)) {
                _context.next = 12;
                break;
              }

              property = properties[i];

              if (!property.value.accepts(input)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i++;
              _context.next = 5;
              break;

            case 12:
              values = new Array(length);

              for (_i = 0; _i < length; _i++) {
                values[_i] = properties[_i].value.toString();
              }
              _context.next = 16;
              return [path, getErrorMessage('ERR_NO_UNION', values.join(' | ')), this];

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.value.accepts(input)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var context = this.context;
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      var values = new Array(length);
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        values[i] = property.value;
      }
      return context.union.apply(context, values);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Values<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $ValuesType;
}(Type);

function checkGenericType(context, expected, input) {
  var impl = expected.impl;

  if (typeof impl !== 'function') {
    // There is little else we can do here, so accept anything.
    return true;
  } else if (impl === input || impl.isPrototypeOf(input)) {
    return true;
  }

  var annotation = context.getAnnotation(impl);
  if (annotation == null) {
    return false;
  } else {
    return checkType(context, annotation, input);
  }
}

function checkType(context, expected, input) {
  var annotation = context.getAnnotation(input);
  if (annotation != null) {
    var result = compareTypes(expected, annotation);
    return result !== -1;
  }
  return true;
}

var ClassType = function (_Type) {
  inherits(ClassType, _Type);

  function ClassType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ClassType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClassType.__proto__ || Object.getPrototypeOf(ClassType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ClassType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ClassType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var instanceType, context, expectedType, isValid;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              instanceType = this.instanceType, context = this.context;

              if (!(typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              expectedType = instanceType.typeName === 'ClassDeclaration' ? instanceType : instanceType.unwrap();
              isValid = expectedType instanceof GenericType ? checkGenericType(context, expectedType, input) : checkType(context, expectedType, input);

              if (isValid) {
                _context.next = 10;
                break;
              }

              _context.next = 10;
              return [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];

            case 10:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var instanceType = this.instanceType,
          context = this.context;

      if (typeof input !== 'function') {
        return false;
      }
      var expectedType = instanceType.typeName === 'ClassDeclaration' ? instanceType : instanceType.unwrap();
      if (expectedType instanceof GenericType) {
        return checkGenericType(context, expectedType, input);
      } else {
        return checkType(context, expectedType, input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var instanceType = this.instanceType;

      if (input instanceof ClassType) {
        return compareTypes(instanceType, input.instanceType);
      }
      return -1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'Class<' + this.instanceType.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        instanceType: this.instanceType
      };
    }
  }]);
  return ClassType;
}(Type);

/**
 * Keeps track of invalid references in order to prevent
 * multiple warnings.
 */
var warnedInvalidReferences = new WeakSet();

var TypeContext = function () {
  function TypeContext() {
    classCallCheck(this, TypeContext);
    this.mode = 'assert';
    this[NameRegistrySymbol] = {};
    this[TypePredicateRegistrySymbol] = {};
    this[TypeConstructorRegistrySymbol] = new Map();
    this[InferrerSymbol] = new TypeInferer(this);
    this[ModuleRegistrySymbol] = {};
  }

  /**
   * Calls to `t.check(...)` will call either
   * `t.assert(...)` or `t.warn(...)` depending on this setting.
   */


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  createClass(TypeContext, [{
    key: 'makeJSONError',
    value: function makeJSONError$$1(validation) {
      return makeJSONError(validation);
    }
  }, {
    key: 'makeTypeError',
    value: function makeTypeError$$1(validation) {
      return makeTypeError(validation);
    }
  }, {
    key: 'createContext',
    value: function createContext() {
      var context = new TypeContext();
      // Issue 252
      context[ParentSymbol] = this;
      return context;
    }
  }, {
    key: 'typeOf',
    value: function typeOf(input) {

      var annotation = this.getAnnotation(input);
      if (annotation) {
        if (typeof input === 'function' && (annotation instanceof ClassDeclaration || annotation instanceof ParameterizedClassDeclaration)) {
          return this.Class(annotation);
        }
        return annotation;
      }
      // Issue 252
      var inferrer = this[InferrerSymbol];

      return inferrer.infer(input);
    }
  }, {
    key: 'compareTypes',
    value: function compareTypes$$1(a, b) {
      return compareTypes(a, b);
    }
  }, {
    key: 'get',
    value: function get$$1(name) {
      // Issue 252
      var item = this[NameRegistrySymbol][name];

      for (var _len = arguments.length, propertyNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        propertyNames[_key - 1] = arguments[_key];
      }

      if (item != null) {
        var current = typeof item === 'function' ? new item(this) : item;
        for (var i = 0; i < propertyNames.length; i++) {
          var propertyName = propertyNames[i];
          if (typeof current.getProperty !== 'function') {
            return;
          }
          current = current.getProperty(propertyName);
          if (!current) {
            return;
          }
          current = current.unwrap();
        }
        return current;
      }
      // Issue 252
      var parent = this[ParentSymbol];
      if (parent) {
        var fromParent = parent.get.apply(parent, [name].concat(toConsumableArray(propertyNames)));
        if (fromParent) {
          return fromParent;
        }
      }

      // if we got this far, see if we have a global type with this name.
      if (typeof commonjsGlobal[name] === 'function') {
        var target = new GenericType(this);
        target.name = name;
        target.impl = commonjsGlobal[name];
        // Issue 252
        this[NameRegistrySymbol][name] = target;
        return target;
      }
    }

    /**
     * Get the predicate for a given type name.
     * e.g. `t.getPredicate('Array')`.
     */

  }, {
    key: 'getPredicate',
    value: function getPredicate(name) {
      var item = this[TypePredicateRegistrySymbol][name];
      if (item) {
        return item;
      }
      var parent = this[ParentSymbol];
      if (parent) {
        return parent.getPredicate(name);
      }
    }

    /**
     * Set the predicate for a given type name.
     * This can be used to customise the behaviour of things like Array
     * detection or allowing Thenables in place of the global Promise.
     */

  }, {
    key: 'setPredicate',
    value: function setPredicate(name, predicate) {
      this[TypePredicateRegistrySymbol][name] = predicate;
    }

    /**
     * Check the given value against the named predicate.
     * Returns false if no such predicate exists.
     * e.g. `t.checkPredicate('Array', [1, 2, 3])`
     */

  }, {
    key: 'checkPredicate',
    value: function checkPredicate(name, input) {
      var predicate = this.getPredicate(name);
      if (predicate) {
        return predicate(input);
      } else {
        return false;
      }
    }

    /**
     * Returns a decorator for a function or object with the given type.
     */

  }, {
    key: 'decorate',
    value: function decorate(type, shouldAssert) {
      var _this2 = this;

      if (shouldAssert == null) {
        shouldAssert = this.mode === 'assert';
      }
      return function (input, propertyName, descriptor) {
        if (descriptor && typeof propertyName === 'string') {
          return makePropertyDescriptor(type, input, propertyName, descriptor, Boolean(shouldAssert));
        } else {
          invariant(typeof type !== 'function', 'Cannot decorate an object or function as a method.');
          return _this2.annotate(input, type);
        }
      };
    }

    /**
     * Annotates an object or function with the given type.
     * If a type is specified as the sole argument, returns a
     * function which can decorate classes or functions with the given type.
     */

  }, {
    key: 'annotate',
    value: function annotate(input, type) {
      if (type === undefined) {
        return annotateValue(input);
      } else {
        return annotateValue(input, type);
      }
    }
  }, {
    key: 'getAnnotation',
    value: function getAnnotation(input) {
      if (input !== null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' || typeof input === 'function') {
        // Issue 252
        return input[TypeSymbol];
      }
    }
  }, {
    key: 'hasAnnotation',
    value: function hasAnnotation(input) {
      if (input == null) {
        return false;
      } else {
        return input[TypeSymbol] ? true : false;
      }
    }
  }, {
    key: 'setAnnotation',
    value: function setAnnotation(input, type) {
      input[TypeSymbol] = type;
      return input;
    }
  }, {
    key: 'type',
    value: function type(name, _type) {
      if (typeof _type === 'function') {
        var target = new ParameterizedTypeAlias(this);
        target.name = name;
        target.typeCreator = _type;
        return target;
      } else {
        var _target = new TypeAlias(this);
        _target.name = name;
        _target.type = _type;
        return _target;
      }
    }
  }, {
    key: 'declare',
    value: function declare(name, type) {

      if (name instanceof Declaration) {
        type = name;
        name = type.name;
      } else if (name instanceof TypeAlias) {
        type = name;
        name = type.name;
      }
      if (typeof type === 'function') {
        type = this.type(name, type);
      }
      if (type instanceof ModuleDeclaration) {
        var moduleRegistry = this[ModuleRegistrySymbol];
        moduleRegistry[name] = type;
        return type;
      } else {
        invariant(typeof name === 'string', 'Name must be a string');
        invariant(type instanceof Type, 'Type must be supplied to declaration');
        var nameRegistry = this[NameRegistrySymbol];

        if (type instanceof Declaration) {
          nameRegistry[name] = type;
          return type;
        } else if (type instanceof TypeAlias || type instanceof ParameterizedTypeAlias) {
          var target = new TypeDeclaration(this);
          target.name = name;
          target.typeAlias = type;
          nameRegistry[name] = target;
          return target;
        } else {
          var _target2 = this.var(name, type);
          nameRegistry[name] = _target2;
          return _target2;
        }
      }
    }
  }, {
    key: 'declarations',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function declarations() {
      var nameRegistry, key;
      return _regeneratorRuntime.wrap(function declarations$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              nameRegistry = this[NameRegistrySymbol];
              _context.t0 = _regeneratorRuntime.keys(nameRegistry);

            case 2:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 8;
                break;
              }

              key = _context.t1.value;
              _context.next = 6;
              return [key, nameRegistry[key]];

            case 6:
              _context.next = 2;
              break;

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, declarations, this);
    })
  }, {
    key: 'modules',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function modules() {
      var moduleRegistry, key;
      return _regeneratorRuntime.wrap(function modules$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              moduleRegistry = this[ModuleRegistrySymbol];
              _context2.t0 = _regeneratorRuntime.keys(moduleRegistry);

            case 2:
              if ((_context2.t1 = _context2.t0()).done) {
                _context2.next = 8;
                break;
              }

              key = _context2.t1.value;
              _context2.next = 6;
              return moduleRegistry[key];

            case 6:
              _context2.next = 2;
              break;

            case 8:
            case 'end':
              return _context2.stop();
          }
        }
      }, modules, this);
    })
  }, {
    key: 'import',
    value: function _import(moduleName) {
      var moduleRegistry = this[ModuleRegistrySymbol];
      if (moduleRegistry[moduleName]) {
        return moduleRegistry[moduleName];
      }

      var _moduleName$split = moduleName.split('/'),
          _moduleName$split2 = slicedToArray(_moduleName$split, 1),
          head = _moduleName$split2[0];

      var module = moduleRegistry[head];
      if (module) {
        return module.import(moduleName);
      }
      var parent = this[ParentSymbol];
      if (parent) {
        return parent.import(moduleName);
      }
    }
  }, {
    key: 'declareTypeConstructor',
    value: function declareTypeConstructor(_ref) {
      var name = _ref.name,
          impl = _ref.impl,
          typeName = _ref.typeName,
          errors = _ref.errors,
          accepts = _ref.accepts,
          inferTypeParameters = _ref.inferTypeParameters,
          compareWith = _ref.compareWith;

      var nameRegistry = this[NameRegistrySymbol];

      if (nameRegistry[name]) {
        this.emitWarningMessage('Redeclaring type: ' + name + ', this may be unintended.');
      }

      var target = new TypeConstructor(this);
      target.name = name;
      target.typeName = typeName;
      target.impl = impl;
      target.errors = errors;
      target.accepts = accepts;
      target.inferTypeParameters = inferTypeParameters;
      if (typeof compareWith === 'function') {
        target.compareWith = compareWith;
      }

      nameRegistry[name] = target;

      if (typeof impl === 'function') {
        // Issue 252
        var handlerRegistry = this[TypeConstructorRegistrySymbol];

        if (handlerRegistry.has(impl)) {
          this.emitWarningMessage('A type handler already exists for the given implementation of ' + name + '.');
        }
        handlerRegistry.set(impl, target);
      }
      return target;
    }
  }, {
    key: 'getTypeConstructor',
    value: function getTypeConstructor(impl) {
      // Issue 252
      var handlerRegistry = this[TypeConstructorRegistrySymbol];

      return handlerRegistry.get(impl);
    }
  }, {
    key: 'literal',
    value: function literal(input) {
      if (input === undefined) {
        return this.void();
      } else if (input === null) {
        return this.null();
      } else if (typeof input === 'boolean') {
        return this.boolean(input);
      } else if (typeof input === 'number') {
        return this.number(input);
      } else if (typeof input === 'string') {
        return this.string(input);
      }
      // Issue 252
      else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol') {
          return this.symbol(input);
        } else {
          return this.typeOf(input);
        }
    }
  }, {
    key: 'null',
    value: function _null() {
      return primitiveTypes.null;
    }
  }, {
    key: 'nullable',
    value: function nullable(type) {
      var target = new NullableType(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'existential',
    value: function existential() {
      return primitiveTypes.existential;
    }
  }, {
    key: 'empty',
    value: function empty() {
      return primitiveTypes.empty;
    }
  }, {
    key: 'any',
    value: function any() {
      return primitiveTypes.any;
    }
  }, {
    key: 'mixed',
    value: function mixed() {
      return primitiveTypes.mixed;
    }
  }, {
    key: 'void',
    value: function _void() {
      return primitiveTypes.void;
    }
  }, {
    key: 'this',
    value: function _this(input) {
      var target = new ThisType(this);
      if (input !== undefined) {
        target.recorded = input;
      }
      return target;
    }
  }, {
    key: 'number',
    value: function number(input) {
      if (input !== undefined) {
        var target = new NumericLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.number;
      }
    }
  }, {
    key: 'boolean',
    value: function boolean(input) {
      if (input !== undefined) {
        var target = new BooleanLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.boolean;
      }
    }
  }, {
    key: 'string',
    value: function string(input) {
      if (input !== undefined) {
        var target = new StringLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.string;
      }
    }
  }, {
    key: 'symbol',
    value: function symbol(input) {
      if (input !== undefined) {
        var target = new SymbolLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.symbol;
      }
    }
  }, {
    key: 'typeParameter',
    value: function typeParameter(id, bound, defaultType) {
      var target = new TypeParameter(this);
      target.id = id;
      target.bound = bound;
      target.default = defaultType;
      return target;
    }
  }, {
    key: 'flowInto',
    value: function flowInto(typeParameter) {
      return flowIntoTypeParameter(typeParameter);
    }

    /**
     * Bind the type parameters for the parent class of the given instance.
     */

  }, {
    key: 'bindTypeParameters',
    value: function bindTypeParameters(subject) {
      var instancePrototype = Object.getPrototypeOf(subject);
      // Issue
      var parentPrototype = instancePrototype && Object.getPrototypeOf(instancePrototype);
      // Issue
      var parentClass = parentPrototype && parentPrototype.constructor;

      if (!parentClass) {
        this.emitWarningMessage('Could not bind type parameters for non-existent parent class.');
        return subject;
      }
      // Issue 252
      var typeParametersPointer = parentClass[TypeParametersSymbol];

      if (typeParametersPointer) {
        var typeParameters = subject[typeParametersPointer];
        var keys = Object.keys(typeParameters);

        for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          typeInstances[_key2 - 1] = arguments[_key2];
        }

        var length = Math.min(keys.length, typeInstances.length);
        for (var i = 0; i < length; i++) {
          var typeParam = typeParameters[keys[i]];
          typeParam.bound = typeInstances[i];
        }
      }
      return subject;
    }
  }, {
    key: 'module',
    value: function module(name, body) {
      var target = new ModuleDeclaration(this);
      target.name = name;
      var innerContext = this.createContext();
      // Issue 252
      innerContext[ParentSymbol] = this;
      // Issue 252
      innerContext[CurrentModuleSymbol] = target;

      target.innerContext = innerContext;
      body(innerContext);
      return target;
    }
  }, {
    key: 'moduleExports',
    value: function moduleExports(type) {
      var currentModule = this[CurrentModuleSymbol];
      if (!currentModule) {
        throw new Error('Cannot declare module.exports outside of a module.');
      }
      var target = new ModuleExports(this);
      target.type = type;
      currentModule.moduleExports = target;
      return target;
    }
  }, {
    key: 'var',
    value: function _var(name, type) {
      var target = new VarDeclaration(this);
      target.name = name;
      target.type = type;
      return target;
    }
  }, {
    key: 'class',
    value: function _class(name, head) {
      if (typeof head === 'function') {
        var _target3 = new ParameterizedClassDeclaration(this);
        _target3.name = name;
        _target3.bodyCreator = head;
        return _target3;
      }
      var target = new ClassDeclaration(this);
      target.name = name;

      for (var _len3 = arguments.length, tail = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        tail[_key3 - 2] = arguments[_key3];
      }

      if (head != null) {
        tail.unshift(head);
      }
      var length = tail.length;

      var properties = [];
      var body = void 0;

      for (var i = 0; i < length; i++) {
        var item = tail[i];
        if (item instanceof ObjectTypeProperty || item instanceof ObjectTypeIndexer) {
          properties.push(item);
        } else if (item instanceof ObjectType) {
          invariant(!body, 'Class body must only be declared once.');
          body = item;
        } else if (item instanceof ExtendsDeclaration) {
          invariant(!target.superClass, 'Classes can only have one super class.');
          target.superClass = item;
        } else if (item != null && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && !(item instanceof Type)) {
          for (var propertyName in item) {
            // eslint-disable-line
            properties.push(this.property(propertyName, item[propertyName]));
          }
        } else {
          throw new Error('ClassDeclaration cannot contain the given type directly.');
        }
      }
      if (!body) {
        body = new ObjectType(this);
      }
      if (properties.length) {
        var _body$properties;

        (_body$properties = body.properties).push.apply(_body$properties, properties);
      }
      target.body = body;
      return target;
    }
  }, {
    key: 'extends',
    value: function _extends(subject) {
      var target = new ExtendsDeclaration(this);

      for (var _len4 = arguments.length, typeInstances = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        typeInstances[_key4 - 1] = arguments[_key4];
      }

      target.type = this.ref.apply(this, [subject].concat(toConsumableArray(typeInstances)));
      return target;
    }
  }, {
    key: 'fn',
    value: function fn(head) {
      for (var _len5 = arguments.length, tail = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        tail[_key5 - 1] = arguments[_key5];
      }

      return this.function.apply(this, [head].concat(tail));
    }
  }, {
    key: 'function',
    value: function _function(head) {
      if (typeof head === 'function') {
        var _target4 = new ParameterizedFunctionType(this);
        _target4.bodyCreator = head;
        return _target4;
      }
      var target = new FunctionType(this);
      if (head != null) {
        for (var _len6 = arguments.length, tail = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          tail[_key6 - 1] = arguments[_key6];
        }

        tail.unshift(head);
        var length = tail.length;

        for (var i = 0; i < length; i++) {
          var item = tail[i];
          if (item instanceof FunctionTypeParam) {
            target.params.push(item);
          } else if (item instanceof FunctionTypeRestParam) {
            target.rest = item;
          } else if (item instanceof FunctionTypeReturn) {
            target.returnType = item;
          } else {
            throw new Error('FunctionType cannot contain the given type directly.');
          }
        }
      }
      if (!target.returnType) {
        target.returnType = this.any();
      }
      return target;
    }
  }, {
    key: 'param',
    value: function param(name, type) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var target = new FunctionTypeParam(this);
      target.name = name;
      target.type = type;
      target.optional = optional;
      return target;
    }
  }, {
    key: 'rest',
    value: function rest(name, type) {
      var target = new FunctionTypeRestParam(this);
      target.name = name;
      target.type = type;
      return target;
    }
  }, {
    key: 'return',
    value: function _return(type) {
      var target = new FunctionTypeReturn(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'generator',
    value: function generator(yieldType, returnType, nextType) {
      var target = new GeneratorType(this);
      target.yieldType = yieldType;
      target.returnType = returnType || this.any();
      target.nextType = nextType || this.any();
      return target;
    }
  }, {
    key: 'object',
    value: function object(head) {
      var target = new ObjectType(this);
      if (head != null && (typeof head === 'undefined' ? 'undefined' : _typeof(head)) === 'object' && !(head instanceof Type)) {
        for (var propertyName in head) {
          // eslint-disable-line
          target.properties.push(this.property(propertyName, head[propertyName]));
        }
      } else {
        var body = void 0;

        for (var _len7 = arguments.length, tail = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          tail[_key7 - 1] = arguments[_key7];
        }

        if (head) {
          body = [head].concat(toConsumableArray(tail));
        } else {
          body = tail;
        }
        var _body = body,
            length = _body.length;

        for (var i = 0; i < length; i++) {
          var item = body[i];
          if (item instanceof ObjectTypeProperty) {
            target.properties.push(item);
          } else if (item instanceof ObjectTypeIndexer) {
            target.indexers.push(item);
          } else if (item instanceof ObjectTypeCallProperty) {
            target.callProperties.push(item);
          } else {
            throw new Error('ObjectType cannot contain the given type directly.');
          }
        }
      }
      return target;
    }
  }, {
    key: 'exactObject',
    value: function exactObject(head) {
      for (var _len8 = arguments.length, tail = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        tail[_key8 - 1] = arguments[_key8];
      }

      var object = this.object.apply(this, [head].concat(toConsumableArray(tail)));
      object.exact = true;
      return object;
    }
  }, {
    key: 'callProperty',
    value: function callProperty(value) {
      var target = new ObjectTypeCallProperty(this);
      target.value = value;
      return target;
    }
  }, {
    key: 'property',
    value: function property(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var target = new ObjectTypeProperty(this);
      target.key = key;
      if (value instanceof Type) {
        target.value = value;
      } else {
        target.value = this.object(value);
      }
      target.optional = optional;
      return target;
    }
  }, {
    key: 'indexer',
    value: function indexer(id, key, value) {
      var target = new ObjectTypeIndexer(this);
      target.id = id;
      target.key = key;
      target.value = value;
      return target;
    }
  }, {
    key: 'method',
    value: function method(name, head) {
      var target = new ObjectTypeProperty(this);
      target.key = name;

      for (var _len9 = arguments.length, tail = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
        tail[_key9 - 2] = arguments[_key9];
      }

      target.value = this.function.apply(this, [head].concat(tail));
      return target;
    }
  }, {
    key: 'staticCallProperty',
    value: function staticCallProperty(value) {
      var prop = this.callProperty(value);
      prop.static = true;
      return prop;
    }
  }, {
    key: 'staticProperty',
    value: function staticProperty(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var prop = this.property(key, value, optional);
      prop.static = true;
      return prop;
    }
  }, {
    key: 'staticMethod',
    value: function staticMethod(name, head) {
      for (var _len10 = arguments.length, tail = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {
        tail[_key10 - 2] = arguments[_key10];
      }

      var prop = this.method.apply(this, [name, head].concat(tail));
      prop.static = true;
      return prop;
    }
  }, {
    key: 'spread',
    value: function spread() {
      var target = new ObjectType(this);

      for (var _len11 = arguments.length, types = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        types[_key11] = arguments[_key11];
      }

      for (var i = 0; i < types.length; i++) {
        var type = types[i].unwrap();
        if (Array.isArray(type.callProperties)) {
          var _target$callPropertie;

          (_target$callPropertie = target.callProperties).push.apply(_target$callPropertie, toConsumableArray(type.callProperties));
        }
        if (Array.isArray(type.indexers)) {
          var _target$indexers;

          (_target$indexers = target.indexers).push.apply(_target$indexers, toConsumableArray(type.indexers));
        }
        if (Array.isArray(type.properties)) {
          for (var j = 0; j < type.properties.length; j++) {
            var prop = type.properties[j];
            invariant(prop instanceof ObjectTypeProperty);
            target.setProperty(prop.key, prop.value, prop.optional);
          }
        }
      }
      return target;
    }
  }, {
    key: 'tuple',
    value: function tuple() {
      var target = new TupleType(this);

      for (var _len12 = arguments.length, types = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        types[_key12] = arguments[_key12];
      }

      target.types = types;
      return target;
    }
  }, {
    key: 'array',
    value: function array(elementType) {
      var target = new ArrayType(this);
      target.elementType = elementType || this.any();
      return target;
    }
  }, {
    key: 'union',
    value: function union() {
      for (var _len13 = arguments.length, types = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        types[_key13] = arguments[_key13];
      }

      return makeUnion(this, types);
    }
  }, {
    key: 'intersect',
    value: function intersect() {
      var target = new IntersectionType(this);

      for (var _len14 = arguments.length, types = Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        types[_key14] = arguments[_key14];
      }

      target.types = types;
      return target;
    }
  }, {
    key: 'intersection',
    value: function intersection() {
      return this.intersect.apply(this, arguments);
    }
  }, {
    key: 'box',
    value: function box(reveal) {
      var box = new TypeBox(this);
      box.reveal = reveal;
      return box;
    }
  }, {
    key: 'tdz',
    value: function tdz(reveal, name) {
      var tdz = new TypeTDZ(this);
      tdz.reveal = reveal;
      tdz.name = name;
      return tdz;
    }
  }, {
    key: 'ref',
    value: function ref(subject) {
      var target = void 0;
      if (typeof subject === 'string') {
        // try and eagerly resolve the reference
        target = this.get(subject);
        if (!target) {
          // defer dereferencing for now
          target = new TypeReference(this);
          target.name = subject;
        }
      } else if (typeof subject === 'function') {
        // Issue 252
        var handlerRegistry = this[TypeConstructorRegistrySymbol];

        // see if we have a dedicated TypeConstructor for this.
        target = handlerRegistry.get(subject);

        if (!target) {
          // just use a generic type handler.
          target = new GenericType(this);
          target.impl = subject;
          target.name = subject.name;
        }
      } else if (subject instanceof Type) {
        target = subject;
      } else {
        if (subject == null || (typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) !== 'object') {
          this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead. (got ' + String(subject) + ')');
        } else if (!warnedInvalidReferences.has(subject)) {
          this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead.');
          warnedInvalidReferences.add(subject);
        }
        return this.any();
      }

      for (var _len15 = arguments.length, typeInstances = Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
        typeInstances[_key15 - 1] = arguments[_key15];
      }

      if (typeInstances.length) {
        var _target5;

        invariant(typeof target.apply === 'function', 'Cannot apply non-applicable type: ' + target.typeName + '.');
        return (_target5 = target).apply.apply(_target5, toConsumableArray(typeInstances));
      } else {
        return target;
      }
    }
  }, {
    key: 'validate',
    value: function validate(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = new Validation(this, input);
      if (path) {
        var _validation$path;

        (_validation$path = validation.path).push.apply(_validation$path, toConsumableArray(path));
      } else if (typeof type.name === 'string') {
        validation.path.push(type.name);
      }
      validation.prefix = prefix;
      validation.errors = Array.from(type.errors(validation, [], input));
      return validation;
    }
  }, {
    key: 'check',
    value: function check(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      if (this.mode === 'assert') {
        return this.assert(type, input, prefix, path);
      } else {
        return this.warn(type, input, prefix, path);
      }
    }
  }, {
    key: 'assert',
    value: function assert(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = this.validate(type, input, prefix, path);
      var error = this.makeTypeError(validation);
      if (error) {
        throw error;
      }
      return input;
    }
  }, {
    key: 'warn',
    value: function warn(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = this.validate(type, input, prefix, path);
      var message = makeWarningMessage(validation);
      if (typeof message === 'string') {
        this.emitWarningMessage(message);
      }
      return input;
    }

    /**
     * Emits a warning message, using `console.warn()` by default.
     */

  }, {
    key: 'emitWarningMessage',
    value: function emitWarningMessage(message) {
      console.warn('flow-runtime:', message);
    }
  }, {
    key: 'propTypes',
    value: function propTypes(type) {
      return makeReactPropTypes(type.unwrap());
    }
  }, {
    key: 'match',
    value: function match() {
      for (var _len16 = arguments.length, args = Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      var clauses = args.pop();
      if (!Array.isArray(clauses)) {
        throw new Error('Invalid pattern, last argument must be an array.');
      }
      var pattern = this.pattern.apply(this, toConsumableArray(clauses));
      return pattern.apply(undefined, args);
    }
  }, {
    key: 'pattern',
    value: function pattern() {
      for (var _len17 = arguments.length, clauses = Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        clauses[_key17] = arguments[_key17];
      }

      var length = clauses.length;

      var tests = new Array(length);
      for (var i = 0; i < length; i++) {
        var clause = clauses[i];
        var annotation = this.getAnnotation(clause);
        if (!annotation) {
          if (i !== length - 1) {
            throw new Error('Invalid Pattern - found unannotated function in position ' + i + ', default clauses must be last.');
          }
          tests[i] = true;
        } else {
          invariant(annotation instanceof FunctionType || annotation instanceof ParameterizedFunctionType, 'Pattern clauses must be annotated functions.');
          tests[i] = annotation;
        }
      }
      return function () {
        for (var _i = 0; _i < tests.length; _i++) {
          var test = tests[_i];
          var _clause = clauses[_i];
          if (test === true) {
            return _clause.apply(undefined, arguments);
          } else if (test.acceptsParams.apply(test, arguments)) {
            return _clause.apply(undefined, arguments);
          }
        }
        var error = new TypeError('Value did not match any of the candidates.');
        error.name = 'RuntimeTypeError';
        throw error;
      };
    }
  }, {
    key: 'wrapIterator',
    value: function wrapIterator(type) {
      var t = this;
      return (/*#__PURE__*/_regeneratorRuntime.mark(function wrappedIterator(input) {
          var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

          return _regeneratorRuntime.wrap(function wrappedIterator$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context3.prev = 3;
                  _iterator = input[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                    _context3.next = 12;
                    break;
                  }

                  item = _step.value;
                  _context3.next = 9;
                  return t.check(type, item);

                case 9:
                  _iteratorNormalCompletion = true;
                  _context3.next = 5;
                  break;

                case 12:
                  _context3.next = 18;
                  break;

                case 14:
                  _context3.prev = 14;
                  _context3.t0 = _context3['catch'](3);
                  _didIteratorError = true;
                  _iteratorError = _context3.t0;

                case 18:
                  _context3.prev = 18;
                  _context3.prev = 19;

                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }

                case 21:
                  _context3.prev = 21;

                  if (!_didIteratorError) {
                    _context3.next = 24;
                    break;
                  }

                  throw _iteratorError;

                case 24:
                  return _context3.finish(21);

                case 25:
                  return _context3.finish(18);

                case 26:
                case 'end':
                  return _context3.stop();
              }
            }
          }, wrappedIterator, this, [[3, 14, 18, 26], [19,, 21, 25]]);
        })
      );
    }
  }, {
    key: 'refinement',
    value: function refinement(type) {
      var target = new RefinementType(this);
      target.type = type;

      for (var _len18 = arguments.length, constraints = Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {
        constraints[_key18 - 1] = arguments[_key18];
      }

      target.addConstraint.apply(target, toConsumableArray(constraints));
      return target;
    }
  }, {
    key: '$exact',
    value: function $exact(type) {
      var target = new ObjectType(this);
      type = type.unwrap();
      if (Array.isArray(type.callProperties)) {
        var _target$callPropertie2;

        (_target$callPropertie2 = target.callProperties).push.apply(_target$callPropertie2, toConsumableArray(type.callProperties));
      }
      if (Array.isArray(type.indexers)) {
        var _target$indexers2;

        (_target$indexers2 = target.indexers).push.apply(_target$indexers2, toConsumableArray(type.indexers));
      }
      if (Array.isArray(type.properties)) {
        var _target$properties;

        (_target$properties = target.properties).push.apply(_target$properties, toConsumableArray(type.properties));
      }
      target.exact = true;
      return target;
    }
  }, {
    key: '$diff',
    value: function $diff(aType, bType) {
      var target = new $DiffType(this);
      target.aType = aType;
      target.bType = bType;
      return target;
    }
  }, {
    key: '$flowFixMe',
    value: function $flowFixMe() {
      return new $FlowFixMeType(this);
    }
  }, {
    key: '$keys',
    value: function $keys(type) {
      var target = new $KeysType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$objMap',
    value: function $objMap(object, mapper) {
      var target = new $ObjMapType(this);
      target.object = object;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$objMapi',
    value: function $objMapi(object, mapper) {
      var target = new $ObjMapiType(this);
      target.object = object;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$propertyType',
    value: function $propertyType(object, property) {
      var target = new $PropertyType(this);
      target.object = object;
      if (property instanceof Type) {
        var unwrapped = property.unwrap();
        target.property = unwrapped.value;
      } else {
        target.property = property;
      }
      return target;
    }
  }, {
    key: '$shape',
    value: function $shape(type) {
      var target = new $ShapeType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$subtype',
    value: function $subtype(type) {
      var target = new $SubType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$supertype',
    value: function $supertype(type) {
      var target = new $SuperType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$tupleMap',
    value: function $tupleMap(tuple, mapper) {
      var target = new $TupleMapType(this);
      target.tuple = tuple;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$values',
    value: function $values(type) {
      var target = new $ValuesType(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'Class',
    value: function Class(instanceType) {
      var target = new ClassType(this);
      target.instanceType = instanceType;
      return target;
    }
  }, {
    key: 'TypeParametersSymbol',


    // Issue 252
    get: function get$$1() {
      return TypeParametersSymbol;
    }
  }]);
  return TypeContext;
}();

var globalContext$1 = void 0;
if (typeof commonjsGlobal !== 'undefined' && typeof commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ !== 'undefined') {
  globalContext$1 = commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__;
} else {
  globalContext$1 = new TypeContext();
  registerPrimitiveTypes(globalContext$1);
  registerBuiltinTypeConstructors(globalContext$1);
  registerTypePredicates(globalContext$1);
  if (typeof commonjsGlobal !== 'undefined') {
    commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ = globalContext$1;
  }
}

var globalContext$2 = globalContext$1;

function v(thing) {
  return { value: thing };
}

if (typeof commonjsGlobal !== 'undefined' && commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ !== globalContext$2) {
  Object.defineProperties(globalContext$2, {
    TypeContext: v(TypeContext),
    Type: v(Type),
    TypeBox: v(TypeBox),
    TypeParameter: v(TypeParameter),
    TypeReference: v(TypeReference),
    TypeTDZ: v(TypeTDZ),
    ParameterizedTypeAlias: v(ParameterizedTypeAlias),
    TypeAlias: v(TypeAlias),
    TypeConstructor: v(TypeConstructor),
    GenericType: v(GenericType),
    NullLiteralType: v(NullLiteralType),
    NumberType: v(NumberType),
    NumericLiteralType: v(NumericLiteralType),
    BooleanType: v(BooleanType),
    BooleanLiteralType: v(BooleanLiteralType),
    SymbolType: v(SymbolType),
    SymbolLiteralType: v(SymbolLiteralType),
    StringType: v(StringType),
    StringLiteralType: v(StringLiteralType),
    ArrayType: v(ArrayType),
    ObjectType: v(ObjectType),
    ObjectTypeCallProperty: v(ObjectTypeCallProperty),
    ObjectTypeIndexer: v(ObjectTypeIndexer),
    ObjectTypeProperty: v(ObjectTypeProperty),
    FunctionType: v(FunctionType),
    FunctionTypeParam: v(FunctionTypeParam),
    FunctionTypeRestParam: v(FunctionTypeRestParam),
    FunctionTypeReturn: v(FunctionTypeReturn),
    ParameterizedFunctionType: v(ParameterizedFunctionType),
    PartialType: v(PartialType),
    RefinementType: v(RefinementType),
    TypeParameterApplication: v(TypeParameterApplication),
    GeneratorType: v(GeneratorType),
    ExistentialType: v(ExistentialType),
    FlowIntoType: v(FlowIntoType),
    AnyType: v(AnyType),
    MixedType: v(MixedType),
    EmptyType: v(EmptyType),
    NullableType: v(NullableType),
    ThisType: v(ThisType),
    TupleType: v(TupleType),
    UnionType: v(UnionType),
    IntersectionType: v(IntersectionType),
    VoidType: v(VoidType),
    Declaration: v(Declaration),
    VarDeclaration: v(VarDeclaration),
    TypeDeclaration: v(TypeDeclaration),
    ModuleDeclaration: v(ModuleDeclaration),
    ModuleExportsDeclaration: v(ModuleExports),
    ClassDeclaration: v(ClassDeclaration),
    ParameterizedClassDeclaration: v(ParameterizedClassDeclaration),
    ExtendsDeclaration: v(ExtendsDeclaration)
  });
}

return globalContext$2;

})));

});

var __dirname$2 = '/patternes';

var __dirname$3 = '/es';

var lodash = createCommonjsModule(function (module, exports) {
(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined$1;

  /** Used as the semantic version number. */
  var VERSION = '4.17.19';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined$1) {
        result = result === undefined$1 ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined$1 : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined$1,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
        symIterator = Symbol ? Symbol.iterator : undefined$1,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined$1;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined$1;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined$1 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined$1 : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined$1;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined$1 && !eq(object[key], value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined$1 : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined$1) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined$1) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined$1) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined$1 : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined$1
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined$1 || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined$1;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined$1 ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined$1;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined$1 : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined$1 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined$1
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined$1 && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined$1;

          if (newValue === undefined$1) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined$1;

      var isCommon = newValue === undefined$1;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined$1;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
          if (newValue === undefined$1) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined$1;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined$1,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined$1;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined$1 ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined$1,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined$1,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined$1;

        if (newValue === undefined$1) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined$1,
            guard = length > 2 ? sources[2] : undefined$1;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined$1;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined$1 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined$1;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
            args, holders, undefined$1, undefined$1, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined$1;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined$1 : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined$1 && other === undefined$1) {
          return defaultValue;
        }
        if (value !== undefined$1) {
          result = value;
        }
        if (other !== undefined$1) {
          if (result === undefined$1) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined$1 ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined$1;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined$1,
          newHoldersRight = isCurry ? undefined$1 : holders,
          newPartials = isCurry ? partials : undefined$1,
          newPartialsRight = isCurry ? undefined$1 : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined$1, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined$1;
      }
      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined$1 ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined$1;
      }
      var data = isBindKey ? undefined$1 : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined$1
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined$1, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined$1 ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined$1 : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined$1) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined$1
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined$1, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined$1;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined$1;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined$1,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined$1 || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined$1, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined$1 ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined$1;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined$1;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined$1, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined$1;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined$1, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined$1 ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined$1, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined$1
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined$1);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined$1) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined$1 : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined$1;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined$1
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined$1 : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined$1 : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined$1;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined$1;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined$1;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined$1;
        return result;
      }

      function cancel() {
        if (timerId !== undefined$1) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
      }

      function flush() {
        return timerId === undefined$1 ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined$1) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined$1) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined$1 ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      var result = customizer ? customizer(value, other) : undefined$1;
      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined$1;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined$1;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined$1 ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined$1, customDefaultsMerge);
      return apply(mergeWith, undefined$1, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined$1 : baseGet(object, path);
      return result === undefined$1 ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined$1;
      }
      while (++index < length) {
        var value = object == null ? undefined$1 : object[toKey(path[index])];
        if (value === undefined$1) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined$1) {
        upper = lower;
        lower = undefined$1;
      }
      if (upper !== undefined$1) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined$1) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined$1) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined$1;
      }
      if (floating === undefined$1) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined$1;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined$1;
        }
      }
      if (lower === undefined$1 && upper === undefined$1) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined$1) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined$1
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined$1;
      }
      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined$1;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined$1, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined$1) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined$1 : pattern;

      if (pattern === undefined$1) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined$1, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(users, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(users, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined$1 : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined$1;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined$1;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined$1;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined$1;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined$1) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined$1
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(commonjsGlobal));
});

var customizer = function customizer(objValue, srcValue) {
  if (lodash.isArray(objValue)) {
    return objValue.concat(srcValue);
  }
};

function assign() {
  var target = lodash.head(arguments);

  if (lodash.isArray(target)) {
    var others = lodash.tail(arguments);

    return lodash.concat.apply(lodash, [target].concat(_toConsumableArray(others)));
  } else {
    var args = lodash.slice(arguments);

    args.push(customizer);
    return lodash.mergeWith.apply(lodash, _toConsumableArray(args));
  }
}

function copy(aObject) {
  if (lodash.isArray(aObject)) {
    return assign([], aObject);
  } else if (lodash.isObject(aObject)) {
    return assign({}, aObject);
  } else {
    return lodash.cloneDeep(aObject);
  }
}

function filter(_x, _x2, _x3) {
  return _filter.apply(this, arguments);
}

function _filter() {
  _filter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(items, lambda, context) {
    var result, index, item;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            result = [];
            _context2.t0 = regeneratorRuntime.keys(items);

          case 2:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 9;
              break;
            }

            index = _context2.t1.value;
            item = items[index];
            _context2.next = 7;
            return function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item, index, items, context) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return lambda.call(context, item, index, items);

                      case 2:
                        if (!_context.sent) {
                          _context.next = 4;
                          break;
                        }

                        result.push(item);

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x4, _x5, _x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }()(item, index, items, context);

          case 7:
            _context2.next = 2;
            break;

          case 9:
            return _context2.abrupt("return", result);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _filter.apply(this, arguments);
}

function forEach(_x, _x2, _x3) {
  return _forEach.apply(this, arguments);
}

function _forEach() {
  _forEach = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(items, lambda, context) {
    var index, item;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = regeneratorRuntime.keys(items);

          case 1:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 8;
              break;
            }

            index = _context2.t1.value;
            item = items[index];
            _context2.next = 6;
            return function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item, index, items, context) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return lambda.call(context, item, index, items);

                      case 2:
                        return _context.abrupt("return", _context.sent);

                      case 3:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x4, _x5, _x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }()(item, index, items, context);

          case 6:
            _context2.next = 1;
            break;

          case 8:
            return _context2.abrupt("return");

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _forEach.apply(this, arguments);
}

function instanceOf(x, Type) {
  if (x == null) {
    return false;
  }

  switch (Type) {
    case String:
      return lodash.isString(x);

    case Number:
      return lodash.isNumber(x);

    case Boolean:
      return lodash.isBoolean(x);

    case Array:
      return lodash.isArray(x);

    case Object:
      return lodash.isPlainObject(x);

    case Date:
      return lodash.isDate(x);

    default:
      return function (a) {
        while (a = a.__proto__) {
          if (a === Type.prototype) {
            return true;
          }
        }

        return false;
      }(x);
  }
}

function isThenable(suspected) {
  return typeof (suspected != null ? suspected.then : undefined) === 'function';
}

var at, // The index of the current character
    ch, // The current character
    escapee = {
        '"':  '"',
        '\\': '\\',
        '/':  '/',
        b:    '\b',
        f:    '\f',
        n:    '\n',
        r:    '\r',
        t:    '\t'
    },
    text,

    error = function (m) {
        // Call error when something is wrong.
        throw {
            name:    'SyntaxError',
            message: m,
            at:      at,
            text:    text
        };
    },
    
    next = function (c) {
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
        }
        
        // Get the next character. When there are no more characters,
        // return the empty string.
        
        ch = text.charAt(at);
        at += 1;
        return ch;
    },
    
    number = function () {
        // Parse a number value.
        var number,
            string = '';
        
        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    },
    
    string = function () {
        // Parse a string value.
        var hex,
            i,
            string = '',
            uffff;
        
        // When parsing for string values, we must look for " and \ characters.
        if (ch === '"') {
            while (next()) {
                if (ch === '"') {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    },

    white = function () {

// Skip whitespace.

        while (ch && ch <= ' ') {
            next();
        }
    },

    word = function () {

// true, false, or null.

        switch (ch) {
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
        }
        error("Unexpected '" + ch + "'");
    },

    value,  // Place holder for the value function.

    array = function () {

// Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array;   // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    },

    object = function () {

// Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object;   // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

value = function () {

// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.

    white();
    switch (ch) {
    case '{':
        return object();
    case '[':
        return array();
    case '"':
        return string();
    case '-':
        return number();
    default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
};

// Return the json_parse function. It will have access to all of the above
// functions and variables.

var parse = function (source, reviver) {
    var result;
    
    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
        error("Syntax error");
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function' ? (function walk(holder, key) {
        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
            for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                        value[k] = v;
                    } else {
                        delete value[k];
                    }
                }
            }
        }
        return reviver.call(holder, key, value);
    }({'': result}, '')) : result;
};

var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"' : '\\"',
        '\\': '\\\\'
    },
    rep;

function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.
    
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
        var c = meta[a];
        return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
}

function str(key, holder) {
    // Produce a string from holder[key].
    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];
    
    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
        value = value.toJSON(key);
    }
    
    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') {
        value = rep.call(holder, key, value);
    }
    
    // What happens next depends on the value's type.
    switch (typeof value) {
        case 'string':
            return quote(value);
        
        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';
        
        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);
            
        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];
            
            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                
                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            
            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            
        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0 ? '{}' : gap ?
            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
            '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
}

var stringify = function (value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    
    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
            indent += ' ';
        }
    }
    // If the space parameter is a string, it will be used as the indent string.
    else if (typeof space === 'string') {
        indent = space;
    }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function'
    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
    }
    
    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {'': value});
};

var parse$1 = parse;
var stringify$1 = stringify;

var jsonify = {
	parse: parse$1,
	stringify: stringify$1
};

var json = typeof JSON !== 'undefined' ? JSON : jsonify;

var jsonStableStringify = function (obj, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var space = opts.space || '';
    if (typeof space === 'number') space = Array(space+1).join(' ');
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
    var replacer = opts.replacer || function(key, value) { return value; };

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (parent, key, node, level) {
        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
        var colonSeparator = space ? ': ' : ':';

        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        node = replacer.call(parent, key, node);

        if (node === undefined) {
            return;
        }
        if (typeof node !== 'object' || node === null) {
            return json.stringify(node);
        }
        if (isArray(node)) {
            var out = [];
            for (var i = 0; i < node.length; i++) {
                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                out.push(indent + space + item);
            }
            return '[' + out.join(',') + indent + ']';
        }
        else {
            if (seen.indexOf(node) !== -1) {
                if (cycles) return json.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            }
            else seen.push(node);

            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node, key, node[key], level+1);

                if(!value) continue;

                var keyValue = json.stringify(key)
                    + colonSeparator
                    + value;
                out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return '{' + out.join(',') + indent + '}';
        }
    })({ '': obj }, '', obj, 0);
};

var isArray = Array.isArray || function (x) {
    return {}.toString.call(x) === '[object Array]';
};

var objectKeys = Object.keys || function (obj) {
    var has = Object.prototype.hasOwnProperty || function () { return true };
    var keys = [];
    for (var key in obj) {
        if (has.call(obj, key)) keys.push(key);
    }
    return keys;
};

function jsonStringify(aoObject, ahOptions) {
  return jsonStableStringify(aoObject, ahOptions);
}

function map(_x, _x2, _x3) {
  return _map.apply(this, arguments);
}

function _map() {
  _map = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(items, lambda, context) {
    var result, index, item;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            result = [];
            _context2.t0 = regeneratorRuntime.keys(items);

          case 2:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 9;
              break;
            }

            index = _context2.t1.value;
            item = items[index];
            _context2.next = 7;
            return function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item, index, items, context) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.t0 = result;
                        _context.next = 3;
                        return lambda.call(context, item, index, items);

                      case 3:
                        _context.t1 = _context.sent;
                        return _context.abrupt("return", _context.t0.push.call(_context.t0, _context.t1));

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x4, _x5, _x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }()(item, index, items, context);

          case 7:
            _context2.next = 2;
            break;

          case 9:
            return _context2.abrupt("return", result);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _map.apply(this, arguments);
}

var modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

var uuid = {
  v4: function v4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      // we use `Math.random` for cross platform compatibility between NodeJS and ArangoDB
      // when we will be use uuid.v4() for setting value in some attribute
      // then it attribute must has unique constraint index,
      // and logic for setting must check existing record with its value
      var sixteenNumber = Number.parseInt(Math.random() * Math.pow(10, 16));
      var r = modulo(sixteenNumber, 16);
      var v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }
};

function isAsync(func) {
  var GeneratorFunction = Object.getPrototypeOf( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })).constructor;
  var AsyncFunction = Object.getPrototypeOf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }))).constructor;

  var isFunction = function isFunction(f) {
    return typeof f === 'function';
  };

  return isFunction(func) && (func instanceof GeneratorFunction || func instanceof AsyncFunction);
}

var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var toStr = Object.prototype.toString;

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return toStr.call(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		toStr.call(value) !== '[object Array]' &&
		toStr.call(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

var isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

var toStr$1 = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag$1 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag$1) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var generatorFunc = getGeneratorFunc();
var GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {};

var isGeneratorFunction = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag$1) {
		var str = toStr$1.call(fn);
		return str === '[object GeneratorFunction]';
	}
	return getProto(fn) === GeneratorFunction;
};

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var foreach = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};

/**
 * Array#filter.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Object=} self
 * @return {Array}
 * @throw TypeError
 */

var arrayFilter = function (arr, fn, self) {
  if (arr.filter) return arr.filter(fn, self);
  if (void 0 === arr || null === arr) throw new TypeError;
  if ('function' != typeof fn) throw new TypeError;
  var ret = [];
  for (var i = 0; i < arr.length; i++) {
    if (!hasOwn$1.call(arr, i)) continue;
    var val = arr[i];
    if (fn.call(self, val, i, arr)) ret.push(val);
  }
  return ret;
};

var hasOwn$1 = Object.prototype.hasOwnProperty;

var availableTypedArrays = function availableTypedArrays() {
	return arrayFilter([
		'BigInt64Array',
		'BigUint64Array',
		'Float32Array',
		'Float64Array',
		'Int16Array',
		'Int32Array',
		'Int8Array',
		'Uint16Array',
		'Uint32Array',
		'Uint8Array',
		'Uint8ClampedArray'
	], function (typedArray) {
		return typeof commonjsGlobal[typedArray] === 'function';
	});
};

/* eslint complexity: [2, 18], max-statements: [2, 33] */
var shams = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

var origSymbol = commonjsGlobal.Symbol;


var hasSymbols = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return shams();
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr$2 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$2.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

var functionBind = Function.prototype.bind || implementation;

/* globals
	Atomics,
	SharedArrayBuffer,
*/

var undefined$1;

var $TypeError = TypeError;

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () { throw new $TypeError(); };
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols$1 = hasSymbols();

var getProto$1 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
var generatorFunction =  undefined$1;
var asyncFunction =  undefined$1;
var asyncGenFunction =  undefined$1;

var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);

var INTRINSICS = {
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
	'%ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer.prototype,
	'%ArrayIteratorPrototype%': hasSymbols$1 ? getProto$1([][Symbol.iterator]()) : undefined$1,
	'%ArrayPrototype%': Array.prototype,
	'%ArrayProto_entries%': Array.prototype.entries,
	'%ArrayProto_forEach%': Array.prototype.forEach,
	'%ArrayProto_keys%': Array.prototype.keys,
	'%ArrayProto_values%': Array.prototype.values,
	'%AsyncFromSyncIteratorPrototype%': undefined$1,
	'%AsyncFunction%': asyncFunction,
	'%AsyncFunctionPrototype%':  undefined$1,
	'%AsyncGenerator%':  undefined$1,
	'%AsyncGeneratorFunction%': asyncGenFunction,
	'%AsyncGeneratorPrototype%':  undefined$1,
	'%AsyncIteratorPrototype%':  undefined$1,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
	'%Boolean%': Boolean,
	'%BooleanPrototype%': Boolean.prototype,
	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
	'%DataViewPrototype%': typeof DataView === 'undefined' ? undefined$1 : DataView.prototype,
	'%Date%': Date,
	'%DatePrototype%': Date.prototype,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%ErrorPrototype%': Error.prototype,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%EvalErrorPrototype%': EvalError.prototype,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
	'%Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array.prototype,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
	'%Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array.prototype,
	'%Function%': Function,
	'%FunctionPrototype%': Function.prototype,
	'%Generator%':  undefined$1,
	'%GeneratorFunction%': generatorFunction,
	'%GeneratorPrototype%':  undefined$1,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
	'%Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array.prototype,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
	'%Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined$1 : Int8Array.prototype,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
	'%Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array.prototype,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols$1 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
	'%JSONParse%': typeof JSON === 'object' ? JSON.parse : undefined$1,
	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
	'%MapPrototype%': typeof Map === 'undefined' ? undefined$1 : Map.prototype,
	'%Math%': Math,
	'%Number%': Number,
	'%NumberPrototype%': Number.prototype,
	'%Object%': Object,
	'%ObjectPrototype%': Object.prototype,
	'%ObjProto_toString%': Object.prototype.toString,
	'%ObjProto_valueOf%': Object.prototype.valueOf,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
	'%PromisePrototype%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype,
	'%PromiseProto_then%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype.then,
	'%Promise_all%': typeof Promise === 'undefined' ? undefined$1 : Promise.all,
	'%Promise_reject%': typeof Promise === 'undefined' ? undefined$1 : Promise.reject,
	'%Promise_resolve%': typeof Promise === 'undefined' ? undefined$1 : Promise.resolve,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
	'%RangeError%': RangeError,
	'%RangeErrorPrototype%': RangeError.prototype,
	'%ReferenceError%': ReferenceError,
	'%ReferenceErrorPrototype%': ReferenceError.prototype,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
	'%RegExp%': RegExp,
	'%RegExpPrototype%': RegExp.prototype,
	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
	'%SetPrototype%': typeof Set === 'undefined' ? undefined$1 : Set.prototype,
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
	'%SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer.prototype,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols$1 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
	'%StringPrototype%': String.prototype,
	'%Symbol%': hasSymbols$1 ? Symbol : undefined$1,
	'%SymbolPrototype%': hasSymbols$1 ? Symbol.prototype : undefined$1,
	'%SyntaxError%': SyntaxError,
	'%SyntaxErrorPrototype%': SyntaxError.prototype,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined$1,
	'%TypeError%': $TypeError,
	'%TypeErrorPrototype%': $TypeError.prototype,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
	'%Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array.prototype,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
	'%Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray.prototype,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
	'%Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array.prototype,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
	'%Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array.prototype,
	'%URIError%': URIError,
	'%URIErrorPrototype%': URIError.prototype,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
	'%WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap.prototype,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
	'%WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet.prototype
};


var $replace = functionBind.call(Function.call, String.prototype.replace);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : (number || match);
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	if (!(name in INTRINSICS)) {
		throw new SyntaxError('intrinsic ' + name + ' does not exist!');
	}

	// istanbul ignore if // hopefully this is impossible to test :-)
	if (typeof INTRINSICS[name] === 'undefined' && !allowMissing) {
		throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
	}

	return INTRINSICS[name];
};

var GetIntrinsic = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);

	var value = getBaseIntrinsic('%' + (parts.length > 0 ? parts[0] : '') + '%', allowMissing);
	for (var i = 1; i < parts.length; i += 1) {
		if (value != null) {
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, parts[i]);
				if (!allowMissing && !(parts[i] in value)) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				value = desc ? (desc.get || desc.value) : value[parts[i]];
			} else {
				value = value[parts[i]];
			}
		}
	}
	return value;
};

var $Function = GetIntrinsic('%Function%');
var $apply = $Function.apply;
var $call = $Function.call;

var callBind = function callBind() {
	return functionBind.apply($call, arguments);
};

var apply = function applyBind() {
	return functionBind.apply($apply, arguments);
};
callBind.apply = apply;

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

var callBound = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.')) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

var $gOPD$1 = GetIntrinsic('%Object.getOwnPropertyDescriptor%');
if ($gOPD$1) {
	try {
		$gOPD$1([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD$1 = null;
	}
}

var getOwnPropertyDescriptor = $gOPD$1;

var $toString = callBound('Object.prototype.toString');
var hasSymbols$2 = hasSymbols();
var hasToStringTag$2 = hasSymbols$2 && typeof Symbol.toStringTag === 'symbol';

var typedArrays = availableTypedArrays();

var $indexOf$1 = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};

var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag$2 && getOwnPropertyDescriptor && getPrototypeOf) {
	foreach(typedArrays, function (typedArray) {
		var arr = new commonjsGlobal[typedArray]();
		if (!(Symbol.toStringTag in arr)) {
			throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
		}
		var proto = getPrototypeOf(arr);
		var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);
		if (!descriptor) {
			var superProto = getPrototypeOf(proto);
			descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
		}
		toStrTags[typedArray] = descriptor.get;
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	foreach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

var isTypedArray = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag$2) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf$1(typedArrays, tag) > -1;
	}
	if (!getOwnPropertyDescriptor) { return false; }
	return tryTypedArrays(value);
};

var $toString$1 = callBound('Object.prototype.toString');
var hasSymbols$3 = hasSymbols();
var hasToStringTag$3 = hasSymbols$3 && typeof Symbol.toStringTag === 'symbol';

var typedArrays$1 = availableTypedArrays();

var $slice$1 = callBound('String.prototype.slice');
var toStrTags$1 = {};

var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag$3 && getOwnPropertyDescriptor && getPrototypeOf$1) {
	foreach(typedArrays$1, function (typedArray) {
		if (typeof commonjsGlobal[typedArray] === 'function') {
			var arr = new commonjsGlobal[typedArray]();
			if (!(Symbol.toStringTag in arr)) {
				throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
			}
			var proto = getPrototypeOf$1(arr);
			var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf$1(proto);
				descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
			}
			toStrTags$1[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays$1 = function tryAllTypedArrays(value) {
	var foundName = false;
	foreach(toStrTags$1, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};



var whichTypedArray = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag$3) { return $slice$1($toString$1(value), 8, -1); }
	return tryTypedArrays$1(value);
};

var types = createCommonjsModule(function (module, exports) {






function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArguments;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
isSharedArrayBufferToString.working = (
  typeof SharedArrayBuffer !== 'undefined' &&
  isSharedArrayBufferToString(new SharedArrayBuffer())
);
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBuffer === 'undefined') {
    return false;
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBuffer;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});
});
var types_1 = types.isArgumentsObject;
var types_2 = types.isGeneratorFunction;
var types_3 = types.isTypedArray;
var types_4 = types.isPromise;
var types_5 = types.isArrayBufferView;
var types_6 = types.isUint8Array;
var types_7 = types.isUint8ClampedArray;
var types_8 = types.isUint16Array;
var types_9 = types.isUint32Array;
var types_10 = types.isInt8Array;
var types_11 = types.isInt16Array;
var types_12 = types.isInt32Array;
var types_13 = types.isFloat32Array;
var types_14 = types.isFloat64Array;
var types_15 = types.isBigInt64Array;
var types_16 = types.isBigUint64Array;
var types_17 = types.isMap;
var types_18 = types.isSet;
var types_19 = types.isWeakMap;
var types_20 = types.isWeakSet;
var types_21 = types.isArrayBuffer;
var types_22 = types.isDataView;
var types_23 = types.isSharedArrayBuffer;
var types_24 = types.isAsyncFunction;
var types_25 = types.isMapIterator;
var types_26 = types.isSetIterator;
var types_27 = types.isGeneratorObject;
var types_28 = types.isWebAssemblyCompiledModule;
var types_29 = types.isNumberObject;
var types_30 = types.isStringObject;
var types_31 = types.isBooleanObject;
var types_32 = types.isBigIntObject;
var types_33 = types.isSymbolObject;
var types_34 = types.isBoxedPrimitive;
var types_35 = types.isAnyArrayBuffer;

var isBufferBrowser = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
};

var inherits_browser = createCommonjsModule(function (module) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}
});

var util = createCommonjsModule(function (module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = types;

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = isBufferBrowser;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = inherits_browser;

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)); },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;
});
var util_1 = util.format;
var util_2 = util.deprecate;
var util_3 = util.debuglog;
var util_4 = util.inspect;
var util_5 = util.types;
var util_6 = util.isArray;
var util_7 = util.isBoolean;
var util_8 = util.isNull;
var util_9 = util.isNullOrUndefined;
var util_10 = util.isNumber;
var util_11 = util.isString;
var util_12 = util.isSymbol;
var util_13 = util.isUndefined;
var util_14 = util.isRegExp;
var util_15 = util.isObject;
var util_16 = util.isDate;
var util_17 = util.isError;
var util_18 = util.isFunction;
var util_19 = util.isPrimitive;
var util_20 = util.isBuffer;
var util_21 = util.log;
var util_22 = util.inherits;
var util_23 = util._extend;
var util_24 = util.promisify;
var util_25 = util.callbackify;

// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$1(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util$1;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits$1(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck$1(this, NodeError);

      _this = _possibleConstructorReturn$1(this, _getPrototypeOf$1(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = assert_1;
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof$1(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util$1 === undefined) util$1 = util;
  var inspected = util$1.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof$1(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = assert_1;
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
var codes_1 = codes;

var errors = {
	codes: codes_1
};

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } return target; }

function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn$2(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$2(self); }

function _assertThisInitialized$2(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$2(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf$2(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf$2(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf$2(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }

function _getPrototypeOf$2(o) { _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$2(o); }

function _typeof$2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

var inspect = util.inspect;

var ERR_INVALID_ARG_TYPE = errors.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith$1(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white$1 = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof$2(actual) === 'object' && _typeof$2(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof$2(actual) !== 'object' || actual === null) && (_typeof$2(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white$1);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white$1).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white$1, " ").concat(red, "- expected").concat(white$1);
  var skippedMsg = " ".concat(blue, "...").concat(white$1, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white$1);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white$1, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white$1);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white$1, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith$1(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith$1(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white$1);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white$1, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white$1, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white$1).concat(other, "\n") + "".concat(blue, "...").concat(white$1);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits$2(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck$2(this, AssertionError);

    if (_typeof$2(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn$2(this, _getPrototypeOf$2(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white$1 = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white$1 = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof$2(actual) === 'object' && actual !== null && _typeof$2(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn$2(this, _getPrototypeOf$2(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof$2(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white$1);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn$2(this, _getPrototypeOf$2(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn$2(this, _getPrototypeOf$2(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn$2(this, _getPrototypeOf$2(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized$2(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized$2(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn$2(_this);
  }

  _createClass$1(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

var assertion_error = AssertionError;

/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */

function assign$1(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign$1
    });
  }
}

var es6ObjectAssign = {
  assign: assign$1,
  polyfill: polyfill
};

var toStr$3 = Object.prototype.toString;

var isArguments$1 = function isArguments(value) {
	var str = toStr$3.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr$3.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr$4 = Object.prototype.toString;
	var isArgs = isArguments$1; // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr$4.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr$4.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
var implementation$1 = keysShim;

var slice$1 = Array.prototype.slice;


var origKeys = Object.keys;
var keysShim$1 = origKeys ? function keys(o) { return origKeys(o); } : implementation$1;

var originalKeys = Object.keys;

keysShim$1.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArguments$1(object)) {
					return originalKeys(slice$1.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim$1;
	}
	return Object.keys || keysShim$1;
};

var objectKeys$1 = keysShim$1;

var hasSymbols$4 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr$5 = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr$5.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = objectKeys$1(map);
	if (hasSymbols$4) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

var defineProperties_1 = defineProperties;

var numberIsNaN = function (value) {
	return value !== value;
};

var implementation$2 = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};

var polyfill$1 = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation$2;
};

var shim = function shimObjectIs() {
	var polyfill = polyfill$1();
	defineProperties_1(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};

var polyfill$2 = callBind(polyfill$1(), Object);

defineProperties_1(polyfill$2, {
	getPolyfill: polyfill$1,
	implementation: implementation$2,
	shim: shim
});

var objectIs = polyfill$2;

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

var implementation$3 = function isNaN(value) {
	return value !== value;
};

var polyfill$3 = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation$3;
};

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

var shim$1 = function shimNumberIsNaN() {
	var polyfill = polyfill$3();
	defineProperties_1(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};

var polyfill$4 = polyfill$3();

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

defineProperties_1(polyfill$4, {
	getPolyfill: polyfill$3,
	implementation: implementation$3,
	shim: shim$1
});

var isNan = polyfill$4;

function _slicedToArray$1(arr, i) { return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _nonIterableRest$1(); }

function _nonIterableRest$1() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit$1(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles$1(arr) { if (Array.isArray(arr)) return arr; }

function _typeof$3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs$1 = Object.is ? Object.is : objectIs;
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN$1 = Number.isNaN ? Number.isNaN : isNan;

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = util.types,
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs$1(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs$1(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof$3(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN$1(val1) && numberIsNaN$1(val2);
    }

    if (_typeof$3(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof$3(val1) !== 'object') {
      if (val2 === null || _typeof$3(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof$3(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1);
    var keys2 = getOwnNonIndexProperties(val2);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1);

    var _keys2 = getOwnNonIndexProperties(val2);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof$3(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN$1(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof$3(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof$3(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray$1(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof$3(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray$1(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof$3(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

var comparisons = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

var assert_1 = createCommonjsModule(function (module) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require$codes = errors.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;



var inspect = util.inspect;

var _require$types = util.types,
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : es6ObjectAssign.assign;
var objectIs$1 = Object.is ? Object.is : objectIs;
var isDeepEqual;
var isDeepStrictEqual;

function lazyLoadComparison() {
  var comparison = comparisons;

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new assertion_error(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new assertion_error(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = assertion_error;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new assertion_error({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs$1(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs$1(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new assertion_error({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new assertion_error({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new assertion_error({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;
});

var cpoMetaObject = Symbol["for"]('~metaObject');
function decorator(target, key, descriptor) {
  assert_1(target.constructor[cpoMetaObject] != null, 'Target for `decorator` decorator must be a Module.prototype');
  assert_1(target.constructor.isExtensible, "Class '".concat(target.constructor.name, "' has been frozen previously. Decorator '").concat(key, "' can not be declared"));
  var newDescriptor = {
    configurable: false,
    enumerable: true,
    writable: false,
    value: descriptor.value || descriptor.initializer()
  };
  Reflect.defineProperty(target.constructor.prototype, key, newDescriptor);
  target.constructor.metaObject.addMetaData('decorators', key, newDescriptor); // return newDescriptor;

  return;
}

var cpoMetaObject$1 = Symbol["for"]('~metaObject');
var cplExtensibles = Symbol["for"]('~isExtensible');
var cpsExtensibleSymbol = Symbol["for"]('~extensibleSymbol');
function freeze(acTarget) {
  assert_1(acTarget[cpoMetaObject$1] != null, 'Target for `freeze` decorator must be a Class');
  acTarget[cplExtensibles][acTarget[cpsExtensibleSymbol]] = false;
  return acTarget;
}

var cpoMetaObject$2 = Symbol["for"]('~metaObject');
function initialize(acTarget) {
  assert_1(acTarget[cpoMetaObject$2] != null, 'Target for `initialize` decorator must be a Class');
  var _acTarget$Module$NS = acTarget.Module.NS,
      Proto = _acTarget$Module$NS.Proto,
      meta = _acTarget$Module$NS.meta;
  acTarget.constructor = Proto;

  var vmWrapper = function vmWrapper(BaseClass) {
    var _class, _init, _class2, _temp;

    var Wrapper = (_class = (_temp = _class2 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Wrapper, _BaseClass);

      var _super = _createSuper(Wrapper);

      function Wrapper() {
        _classCallCheck(this, Wrapper);

        return _super.apply(this, arguments);
      }

      return Wrapper;
    }(BaseClass), _class2.object = {}, _temp), (_applyDecoratedDescriptor(_class, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class)), _class);
    return Wrapper;
  };

  var Wrapped = null;

  if (acTarget.Module !== acTarget || acTarget.name === 'Module') {
    assert_1(acTarget.Module.isExtensible, "Module '".concat(acTarget.Module.name, "' has been frozen previously. Constant '").concat(acTarget.name, "' can not be declared"));
    Wrapped = vmWrapper(acTarget);
    Reflect.defineProperty(Wrapped, 'name', {
      value: acTarget.name
    });
    Wrapped.metaObject.parent = acTarget.metaObject;
    Reflect.defineProperty(acTarget.Module.prototype, Wrapped.name, {
      configurable: false,
      enumerable: true,
      writable: false,
      value: Wrapped
    });
    acTarget.Module.metaObject.addMetaData('constants', Wrapped.name, Wrapped);
  }

  acTarget.onInitialize();
  return Wrapped || acTarget;
}

var cpoMetaObject$3 = Symbol["for"]('~metaObject');
function initializeMixin(acTarget) {
  assert_1(acTarget[cpoMetaObject$3] != null, 'Target for `initializeMixin` decorator must be a Class');
  var Proto = acTarget.Module.NS.Proto;
  acTarget.constructor = Proto;
  acTarget.onInitializeMixin();
  return acTarget;
}

var cpoMetaObject$4 = Symbol["for"]('~metaObject');
function initializePatch(acTarget) {
  assert_1(acTarget[cpoMetaObject$4] != null, 'Target for `initializePatch` decorator must be a Class');
  var Proto = acTarget.Module.NS.Proto;
  acTarget.constructor = Proto;
  acTarget.onInitializePatch();
  return acTarget;
}

var cpoMetaObject$5 = Symbol["for"]('~metaObject');
function mixin() {
  for (var _len = arguments.length, alMixins = new Array(_len), _key = 0; _key < _len; _key++) {
    alMixins[_key] = arguments[_key];
  }

  return function (target) {
    assert_1(target[cpoMetaObject$5] != null, 'Target for `mixin` decorator must be a Class');

    var vlMixins = lodash.castArray(alMixins);

    vlMixins.forEach(function (vmMixin) {
      assert_1(vmMixin != null, 'Supplied mixin was not found');
      assert_1(lodash.isFunction(vmMixin), 'Mixin must be a function');
      var SuperClass = Reflect.getPrototypeOf(target);
      var Mixin = vmMixin(SuperClass);
      Reflect.defineProperty(Mixin, 'name', {
        value: vmMixin.name
      });
      Reflect.setPrototypeOf(target, Mixin);
      Reflect.setPrototypeOf(target.prototype, Mixin.prototype);
      target.metaObject.parent = Mixin.metaObject;
      target.metaObject.addMetaData('applyedMixins', Mixin.name, Mixin);
      typeof Mixin.including === 'function' && Mixin.including.call(target);
    });
    return target;
  };
}

var cpoMetaObject$6 = Symbol["for"]('~metaObject');
function patch() {
  for (var _len = arguments.length, alPatches = new Array(_len), _key = 0; _key < _len; _key++) {
    alPatches[_key] = arguments[_key];
  }

  return function (target) {
    assert_1(target[cpoMetaObject$6] != null, 'Target for `patch` decorator must be a Class');
    assert_1(target.Module !== target, 'Target for `patch` decorator can not be a Module or its subclass');

    var vlPatches = lodash.castArray(alPatches);

    vlPatches.forEach(function (vmPatch) {
      assert_1(vmPatch != null, 'Supplied patch was not found');
      assert_1(lodash.isFunction(vmPatch), 'Patch must be a function');
      var SuperClass = Reflect.getPrototypeOf(target);
      var Patch = vmPatch(SuperClass);
      Reflect.defineProperty(Patch, 'name', {
        value: vmPatch.name
      });
      Reflect.setPrototypeOf(target, Patch);
      Reflect.setPrototypeOf(target.prototype, Patch.prototype);
      target.metaObject.parent = Patch.metaObject;
      target.metaObject.addMetaData('applyedPatches', Patch.name, Patch);
      typeof Patch.including === 'function' && Patch.including.call(target);
      return target;
    });
  };
}

var cpoMetaObject$7 = Symbol["for"]('~metaObject');
var slice$2 = [].slice;
function plugin() {
  for (var _len = arguments.length, alPlugins = new Array(_len), _key = 0; _key < _len; _key++) {
    alPlugins[_key] = arguments[_key];
  }

  return function (target) {
    assert_1(target[cpoMetaObject$7] != null, 'Target for `plugin` decorator must be a Module');
    var inflect = target.NS.Utils.inflect;

    var vlPlugins = lodash.castArray(alPlugins);

    vlPlugins.forEach(function (vmPlugin) {
      assert_1(vmPlugin != null, 'Supplied plugin was not found');
      assert_1(lodash.isFunction(vmPlugin), 'Plugin must be a function');

      var _vmPlugin = vmPlugin(target),
          _vmPlugin2 = _slicedToArray(_vmPlugin, 2),
          filename = _vmPlugin2[0],
          vmMixin = _vmPlugin2[1];

      var _slice$call = slice$2.call(filename.split('/'), -2),
          _slice$call2 = _slicedToArray(_slice$call, 2),
          preLast = _slice$call2[0],
          last = _slice$call2[1];

      var pluginName = inflect.camelize(last !== 'index.js' ? last.split('.')[0] : preLast);
      Reflect.defineProperty(vmMixin, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: pluginName
      });
      target.metaObject.addMetaData('constants', pluginName, vmMixin);
      Reflect.defineProperty(target.prototype, pluginName, {
        configurable: false,
        enumerable: true,
        writable: false,
        value: vmMixin
      });
      target.metaObject.addMetaData('plugins', pluginName, vmMixin);
      var SuperClass = Reflect.getPrototypeOf(target);
      var Mixin = vmMixin(SuperClass);
      Reflect.defineProperty(Mixin, 'name', {
        value: pluginName
      });
      Reflect.setPrototypeOf(target, Mixin);
      Reflect.setPrototypeOf(target.prototype, Mixin.prototype);
      target.metaObject.parent = Mixin.metaObject;
      target.metaObject.addMetaData('applyedMixins', pluginName, Mixin);
      typeof Mixin.including === 'function' && Mixin.including.call(target);
      return target;
    });
  };
}

var cpoMetaObject$8 = Symbol["for"]('~metaObject');
var cplExtensibles$1 = Symbol["for"]('~isExtensible');
var cpsExtensibleSymbol$1 = Symbol["for"]('~extensibleSymbol');
function meta$1(acTarget) {
  assert_1(acTarget[cpoMetaObject$8] != null, 'Target for `meta` decorator must be a Class');
  var MetaObject = acTarget.Module.prototype.MetaObject;
  var superclass = Reflect.getPrototypeOf(acTarget) || {};
  var parent = acTarget.metaObject || superclass.metaObject;
  Reflect.defineProperty(acTarget, cpoMetaObject$8, {
    enumerable: false,
    configurable: true,
    value: MetaObject["new"](acTarget, parent)
  });
  Reflect.defineProperty(acTarget, cpsExtensibleSymbol$1, {
    enumerable: false,
    configurable: true,
    value: Symbol('extensibleSymbol')
  });
  acTarget[cplExtensibles$1][acTarget[cpsExtensibleSymbol$1]] = true;
  acTarget.onMetalize();
  return;
}

var cpoMetaObject$9 = Symbol["for"]('~metaObject');
function module$1(acModule) {
  return function (target) {
    assert_1(target[cpoMetaObject$9] != null, 'Target for `module` decorator must be a Class');
    Reflect.defineProperty(target, 'Module', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: acModule
    });
    return target;
  };
}

var cpoMetaObject$a = Symbol["for"]('~metaObject');
var slice$3 = [].slice;
function nameBy(target, key, descriptor) {
  var filename = descriptor.value || descriptor.initializer && descriptor.initializer(); // console.log('?>?>?> nameBy', target.name, key, filename);

  assert_1(filename != null, 'Value must be __filename');
  assert_1(target[cpoMetaObject$a] != null, 'Target for `nameBy` decorator must be a Class');

  var _slice$call$0$split = slice$3.call(filename.split('/'), -1)[0].split('.'),
      _slice$call$0$split2 = _slicedToArray(_slice$call$0$split, 1),
      classname = _slice$call$0$split2[0];

  Reflect.defineProperty(target, 'name', {
    get: function get() {
      return classname;
    }
  });
  return descriptor;
}

var cpoMetaObject$b = Symbol["for"]('~metaObject');
var hasProp = {}.hasOwnProperty;
function constant(target, key, descriptor) {
  assert_1(target.constructor[cpoMetaObject$b] != null, 'Target for `constant` decorator must be a Module.prototype');
  assert_1(target.constructor.isExtensible, "Class '".concat(target.constructor.name, "' has been frozen previously. Constant '").concat(key, "' can not be declared")); // console.log('>>??? IN `constant` decorator', target.constructor.name, key);

  target.constructor.metaObject.addMetaData('constants', key, descriptor); // const newDescriptor = Object.assign({}, descriptor);
  // newDescriptor.configurable = false;
  // newDescriptor.enumerable = true;
  // newDescriptor.writable = false;
  // return newDescriptor;

  var newDescriptor;

  if (hasProp.call(descriptor, 'get') || hasProp.call(descriptor, 'set')) {
    newDescriptor = {
      configurable: false,
      enumerable: true,
      get: descriptor.get,
      set: descriptor.set
    };
    Reflect.defineProperty(target.constructor.prototype, key, newDescriptor);
  } else {
    // const value = descriptor.value || descriptor.initializer && descriptor.initializer();
    newDescriptor = {
      configurable: false,
      enumerable: true,
      writable: false,
      value: descriptor.value,
      initializer: descriptor.initializer
    }; // target.constructor.prototype[key] = (newDescriptor.value || newDescriptor.initializer());

    Reflect.defineProperty(target.constructor.prototype, key, {
      configurable: false,
      enumerable: true,
      writable: false,
      value: newDescriptor.value || newDescriptor.initializer()
    });
  } // console.log('>>??? END IN `constant` decorator', (newDescriptor.value || newDescriptor.initializer()), target.constructor.prototype, target.constructor.prototype[key]);


  return newDescriptor; // return;
}

var cpoMetaObject$c = Symbol["for"]('~metaObject');
function util$2(target, key, descriptor) {
  assert_1(target.constructor[cpoMetaObject$c] != null, 'Target for `util` decorator must be a Module.prototype');
  assert_1(target.constructor.isExtensible, "Class '".concat(target.constructor.name, "' has been frozen previously. Util '").concat(key, "' can not be declared"));
  var newDescriptor = {
    configurable: false,
    enumerable: true,
    writable: false,
    value: descriptor.value || descriptor.initializer()
  };
  Reflect.defineProperty(target.constructor.prototype, key, newDescriptor);
  target.constructor.metaObject.addMetaData('utilities', key, newDescriptor); // return newDescriptor;

  return;
}

var cpoMetaObject$d = Symbol["for"]('~metaObject');
function method(target, key, descriptor) {
  var isClass = target[cpoMetaObject$d] != null;
  var vmFunctor = descriptor.value || descriptor.initializer && descriptor.initializer();
  var vcClass = isClass ? target : target.constructor;
  var stringifyedKey = lodash.isSymbol(key) ? Symbol.keyFor(key) : key;
  assert_1(vcClass.isExtensible, "Class '".concat(vcClass.name, "' has been frozen previously. Method '").concat(stringifyedKey, "' can not be declared")); // const wrapper = function (...args) {
  //   return vmFunctor.apply(this, args);
  // };
  // Reflect.defineProperty(wrapper, 'class', {
  //   value: vcClass,
  //   enumerable: true
  // });
  // Reflect.defineProperty(vmFunctor, 'class', {
  //   value: vcClass,
  //   enumerable: true
  // });
  // Reflect.defineProperty(wrapper, 'name', {
  //   value: key,
  //   configurable: true
  // });

  Reflect.defineProperty(vmFunctor, 'name', {
    value: key,
    configurable: true
  });
  Reflect.defineProperty(vmFunctor, 'isAsync', {
    value: isAsync(vmFunctor),
    configurable: true
  }); // Reflect.defineProperty(vmFunctor, 'wrapper', {
  //   value: wrapper,
  //   enumerable: true
  // });
  // Reflect.defineProperty(wrapper, 'body', {
  //   value: vmFunctor,
  //   enumerable: true
  // });

  if (isClass) {
    vcClass.metaObject.addMetaData('classMethods', key, vmFunctor);
  } else {
    vcClass.metaObject.addMetaData('instanceMethods', key, vmFunctor);
  }

  return {
    configurable: descriptor.configurable,
    enumerable: descriptor.enumerable,
    writable: false,
    value: vmFunctor
  };
}

var cpoMetaObject$e = Symbol["for"]('~metaObject');
function property(target, key, descriptor) {
  var isClass = target[cpoMetaObject$e] != null;
  var vcClass = isClass ? target : target.constructor;
  var stringifyedKey = lodash.isSymbol(key) ? Symbol.keyFor(key) : key;
  assert_1(vcClass.isExtensible, "Class '".concat(vcClass.name, "' has been frozen previously. Property '").concat(stringifyedKey, "' can not be declared"));

  if (isClass) {
    vcClass.metaObject.mergeMetaData('classVariables', key, descriptor);
  } else {
    vcClass.metaObject.mergeMetaData('instanceVariables', key, descriptor);
  }

  return descriptor;
}

var cpoMetaObject$f = Symbol["for"]('~metaObject');
function machine(first, last) {
  var key = lodash.isFunction(first) ? 'default' : first;
  var functor = last || first;
  return function (target) {
    assert_1(target[cpoMetaObject$f] != null, 'Target for `machine` decorator must be a Class');
    assert_1(target.isExtensible, "Class '".concat(target.name, "' has been frozen previously. StateMachine '").concat(key, "' can not be declared"));
    target.metaObject.addMetaData('stateMachines', key, functor);
    return target;
  };
}
flowRuntime_umd.annotate(machine, flowRuntime_umd["function"](flowRuntime_umd.param("first", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"]())), flowRuntime_umd.param("last", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))));

var cpoMetaObject$g = Symbol["for"]('~metaObject');
var cphPathMap = Symbol["for"]('~pathMap');
var cphUtilsMap = Symbol["for"]('~utilsMap');
var cphMigrationsMap = Symbol["for"]('~migrationsMap');
var cphTemplatesList = Symbol["for"]('~templatesList');
var cphFilesList = Symbol["for"]('~filesList');
function resolver(req, amReg) {
  return function (target) {
    assert_1(target[cpoMetaObject$g] != null, 'Target for `resolver` decorator must be a Module subclass');

    var vmFunctor = function vmFunctor(name) {
      var isRecursion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // console.log('IN resolve', name);
      var errors = [];
      var currentHasError = true;

      var _this$superclass$reso = this.superclass().resolve(name, true),
          _this$superclass$reso2 = _slicedToArray(_this$superclass$reso, 2),
          maybeErrors = _this$superclass$reso2[0],
          parentHasError = _this$superclass$reso2[1];

      maybeErrors.forEach(function (i) {
        errors.push(i);
      });

      try {
        var currentRes = amReg(name); // console.log('IN resolve after amReg(name)', this.name, name, currentRes);

        if (currentRes && typeof currentRes["default"] === 'function') {
          // console.log('IN resolve if default function', this.name, name);
          currentRes["default"](this); // console.log('IN resolve after call default', this.name, name, this.prototype);
        } else {
          // console.log('IN resolve unless default function', this.name, name);
          currentRes(this); // console.log('IN resolve after call function', this.name, name, this.prototype);
        }

        currentHasError = false;
      } catch (e2) {
        if (e2.name.indexOf(" IN ".concat(this.name)) === -1) {
          e2.name += " IN ".concat(this.name);
        }

        errors.push(e2);
      }

      if (!isRecursion) {
        if (parentHasError && currentHasError) {
          var _iterator = _createForOfIteratorHelper(errors),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var err = _step.value;
              console.error(err);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var newError = new Error('Resolver has undefined dependency');
          newError.name += " IN ".concat(this.name);
          throw newError;
        }
      }

      return [errors, parentHasError && currentHasError];
    };

    var _Object$keys$sort$red = Object.keys(req).sort(function (a, b) {
      return (a.match(/\//g) || []).length - (b.match(/\//g) || []).length;
    }).reduce(function (_ref, vsItem) {
      var _ref2 = _slicedToArray(_ref, 5),
          cp = _ref2[0],
          up = _ref2[1],
          mp = _ref2[2],
          tp = _ref2[3],
          fp = _ref2[4];

      if (/\.[.]+$/.test(vsItem)) {
        fp.push(vsItem);
      }

      if (/\.js$/.test(vsItem)) {
        var vsPathMatch = vsItem.match(/([\w\-\_]+)\.js$/);

        var _ref3 = vsPathMatch != null ? vsPathMatch : [],
            _ref4 = _slicedToArray(_ref3, 2),
            blackhole = _ref4[0],
            vsName = _ref4[1];

        if (vsItem && vsName) {
          switch (false) {
            case !/.*\/templates\/.*/.test(vsItem):
              tp.push(vsItem);
              break;

            case !(/.*\/migrations\/.*/.test(vsItem) && vsName !== 'BaseMigration'):
              if (mp[vsName] == null) mp[vsName] = vsItem;
              break;

            case !/.*\/utils\/.*/.test(vsItem):
              if (up[vsName] == null) up[vsName] = vsItem;
              break;

            default:
              if (cp[vsName] == null) cp[vsName] = vsItem;
          }
        }
      }

      return [cp, up, mp, tp, fp];
    }, [{}, {}, {}, [], []]),
        _Object$keys$sort$red2 = _slicedToArray(_Object$keys$sort$red, 5),
        pathMap = _Object$keys$sort$red2[0],
        utilsMap = _Object$keys$sort$red2[1],
        migrationsMap = _Object$keys$sort$red2[2],
        templatesList = _Object$keys$sort$red2[3],
        filesList = _Object$keys$sort$red2[4];

    if (target[cphPathMap] == null) {
      Reflect.defineProperty(target, cphPathMap, {
        enumerable: true,
        writable: true,
        value: pathMap
      });
    }

    if (target[cphUtilsMap] == null) {
      Reflect.defineProperty(target, cphUtilsMap, {
        enumerable: true,
        writable: true,
        value: utilsMap
      });
    }

    if (target[cphMigrationsMap] == null) {
      Reflect.defineProperty(target, cphMigrationsMap, {
        enumerable: true,
        writable: true,
        value: migrationsMap
      });
    }

    if (target[cphTemplatesList] == null) {
      Reflect.defineProperty(target, cphTemplatesList, {
        enumerable: true,
        writable: true,
        value: templatesList
      });
    }

    if (target[cphFilesList] == null) {
      Reflect.defineProperty(target, cphFilesList, {
        enumerable: true,
        writable: true,
        value: filesList
      });
    }

    Reflect.defineProperty(target, 'resolve', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: vmFunctor
    });
    Reflect.defineProperty(target, 'require', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: req
    });
    target.Module.metaObject.addMetaData('classMethods', 'resolve', vmFunctor);
    target.Module.metaObject.addMetaData('classMethods', 'require', req);
    return target;
  };
}

var cpoMetaObject$h = Symbol["for"]('~metaObject');
var indexOf = [].indexOf;
var cachedChainsMixin = null;
function chains(first, last) {
  var _firstType = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()), flowRuntime_umd["function"]());

  var _lastType = flowRuntime_umd.nullable(flowRuntime_umd["function"]());

  flowRuntime_umd.warn(flowRuntime_umd.param("first", _firstType), first);
  flowRuntime_umd.warn(flowRuntime_umd.param("last", _lastType), last);
  return function (target) {
    assert_1(target[cpoMetaObject$h] != null, 'Target for `chains` decorator must be a Class');
    var chainsNames = lodash.isFunction(first) ? [] : first;
    var functor = last || first;
    assert_1(lodash.isFunction(functor), 'Last argument in `chains` decorator must be a function');
    var _target$Module$NS = target.Module.NS,
        CoreObject = _target$Module$NS.CoreObject,
        initializeMixin = _target$Module$NS.initializeMixin,
        meta = _target$Module$NS.meta,
        method = _target$Module$NS.method;
    var callWithChainName = flowRuntime_umd.annotate(function callWithChainName(isArray, isAsync) {
      var _isArrayType = flowRuntime_umd["boolean"]();

      var _isAsyncType = flowRuntime_umd["boolean"]();

      var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.warn(flowRuntime_umd.param("isArray", _isArrayType), isArray);
      flowRuntime_umd.warn(flowRuntime_umd.param("isAsync", _isAsyncType), isAsync);

      if (isArray) {
        if (isAsync) {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnArrayAsync');
        } else {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnArray');
        }
      } else {
        if (isAsync) {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnSingleAsync');
        } else {
          return flowRuntime_umd.warn(_returnType3, '_callWithChainNameOnSingle');
        }
      }
    }, flowRuntime_umd["function"](flowRuntime_umd.param("isArray", flowRuntime_umd["boolean"]()), flowRuntime_umd.param("isAsync", flowRuntime_umd["boolean"]()), flowRuntime_umd["return"](flowRuntime_umd.string())));

    var ChainsMixin = cachedChainsMixin || function (BaseClass) {
      var _dec, _class, _class2, _init, _class3, _temp;

      var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("_getChains", flowRuntime_umd.param("AbstractClass", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("callAsChain", flowRuntime_umd.param("isAsync", flowRuntime_umd.any()), flowRuntime_umd.param("methodName", flowRuntime_umd.any()), flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("_callWithChainNameOnSingle", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("singleData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("_callWithChainNameOnArray", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("arrayData", flowRuntime_umd.array()), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.method("_callWithChainNameOnSingleAsync", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("singleData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.any())), flowRuntime_umd.method("_callWithChainNameOnArrayAsync", flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("actionName", flowRuntime_umd.string()), flowRuntime_umd.param("arrayData", flowRuntime_umd.array()), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("_defineHookMethods", flowRuntime_umd.param("_arg", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("defineChains"), flowRuntime_umd.staticMethod("onInitialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("onInitializeMixin", flowRuntime_umd.param("args", flowRuntime_umd.any())))), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
        _inherits(Mixin, _BaseClass);

        var _super = _createSuper(Mixin);

        function Mixin() {
          _classCallCheck(this, Mixin);

          return _super.apply(this, arguments);
        }

        _createClass(Mixin, [{
          key: "callAsChain",
          value: function callAsChain(isAsync, methodName) {
            var _this = this;

            for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              args[_key - 2] = arguments[_key];
            }

            var name = Symbol["for"]("~chain_".concat(methodName));

            if (isAsync) {
              return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var asyncInitialData, asyncData, asyncResult, asyncAfterResult;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.t0 = lodash;
                        _context.next = 4;
                        return _this.initialAction.apply(_this, [isAsync, methodName].concat(args));

                      case 4:
                        _context.t1 = _context.sent;

                        if (_context.t1) {
                          _context.next = 7;
                          break;
                        }

                        _context.t1 = [];

                      case 7:
                        _context.t2 = _context.t1;
                        asyncInitialData = _context.t0.castArray.call(_context.t0, _context.t2);
                        _context.t3 = lodash;
                        _context.next = 12;
                        return _this.beforeAction.apply(_this, [isAsync, methodName].concat(_toConsumableArray(asyncInitialData)));

                      case 12:
                        _context.t4 = _context.sent;

                        if (_context.t4) {
                          _context.next = 15;
                          break;
                        }

                        _context.t4 = [];

                      case 15:
                        _context.t5 = _context.t4;
                        asyncData = _context.t3.castArray.call(_context.t3, _context.t5);
                        _context.next = 19;
                        return typeof _this[name] === "function" ? _this[name].apply(_this, _toConsumableArray(asyncData)) : undefined;

                      case 19:
                        asyncResult = _context.sent;
                        _context.next = 22;
                        return _this.afterAction(isAsync, methodName, asyncResult);

                      case 22:
                        asyncAfterResult = _context.sent;
                        _context.next = 25;
                        return _this.finallyAction(isAsync, methodName, asyncAfterResult);

                      case 25:
                        return _context.abrupt("return", _context.sent);

                      case 28:
                        _context.prev = 28;
                        _context.t6 = _context["catch"](0);
                        _context.next = 32;
                        return _this.errorAction(isAsync, methodName, _context.t6);

                      case 32:
                        throw _context.t6;

                      case 33:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[0, 28]]);
              }))();
            } else {
              try {
                var initialData = lodash.castArray(this.initialAction.apply(this, [isAsync, methodName].concat(args)) || []);

                var data = lodash.castArray(this.beforeAction.apply(this, [isAsync, methodName].concat(_toConsumableArray(initialData))) || []);

                var result = typeof this[name] === "function" ? this[name].apply(this, _toConsumableArray(data)) : undefined;
                var afterResult = this.afterAction(isAsync, methodName, result);
                return this.finallyAction(isAsync, methodName, afterResult);
              } catch (error) {
                this.errorAction(isAsync, methodName, error);
                throw error;
              }
            }
          }
        }, {
          key: "_callWithChainNameOnSingle",
          value: function _callWithChainNameOnSingle(methodName, actionName, singleData) {
            var _methodNameType = flowRuntime_umd.string();

            var _actionNameType = flowRuntime_umd.string();

            var _singleDataType = flowRuntime_umd.nullable(flowRuntime_umd.any());

            var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

            flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType), methodName);
            flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType), actionName);
            flowRuntime_umd.warn(flowRuntime_umd.param("singleData", _singleDataType), singleData);

            if (lodash.isFunction(this[methodName])) {
              this[methodName].chainName = actionName;
              var res = this[methodName](singleData);
              delete this[methodName].chainName;
              return flowRuntime_umd.warn(_returnType5, res);
            } else {
              return flowRuntime_umd.warn(_returnType5, singleData);
            }
          }
        }, {
          key: "_callWithChainNameOnArray",
          value: function _callWithChainNameOnArray(methodName, actionName, arrayData) {
            var _methodNameType2 = flowRuntime_umd.string();

            var _actionNameType2 = flowRuntime_umd.string();

            var _arrayDataType = flowRuntime_umd.array();

            var _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.array());

            flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType2), methodName);
            flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType2), actionName);
            flowRuntime_umd.warn(flowRuntime_umd.param("arrayData", _arrayDataType), arrayData);
            arrayData = flowRuntime_umd.warn(_arrayDataType, lodash.castArray(arrayData));

            if (lodash.isFunction(this[methodName])) {
              this[methodName].chainName = actionName;
              var res = this[methodName].apply(this, _toConsumableArray(arrayData));
              delete this[methodName].chainName;
              return flowRuntime_umd.warn(_returnType6, res);
            } else {
              return flowRuntime_umd.warn(_returnType6, arrayData);
            }
          }
        }, {
          key: "_callWithChainNameOnSingleAsync",
          value: function () {
            var _callWithChainNameOnSingleAsync2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(methodName, actionName, singleData) {
              var _methodNameType3, _actionNameType3, _singleDataType2, _returnType7, res;

              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _methodNameType3 = flowRuntime_umd.string();
                      _actionNameType3 = flowRuntime_umd.string();
                      _singleDataType2 = flowRuntime_umd.nullable(flowRuntime_umd.any());
                      _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.any());
                      flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType3), methodName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType3), actionName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("singleData", _singleDataType2), singleData);

                      if (!lodash.isFunction(this[methodName])) {
                        _context2.next = 16;
                        break;
                      }

                      this[methodName].chainName = actionName;
                      _context2.next = 11;
                      return Promise.resolve(this[methodName](singleData));

                    case 11:
                      res = _context2.sent;
                      delete this[methodName].chainName;
                      return _context2.abrupt("return", flowRuntime_umd.warn(_returnType7, res));

                    case 16:
                      return _context2.abrupt("return", flowRuntime_umd.warn(_returnType7, singleData));

                    case 17:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function _callWithChainNameOnSingleAsync(_x, _x2, _x3) {
              return _callWithChainNameOnSingleAsync2.apply(this, arguments);
            }

            return _callWithChainNameOnSingleAsync;
          }()
        }, {
          key: "_callWithChainNameOnArrayAsync",
          value: function () {
            var _callWithChainNameOnArrayAsync2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(methodName, actionName, arrayData) {
              var _methodNameType4, _actionNameType4, _arrayDataType2, _returnType2, res;

              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _methodNameType4 = flowRuntime_umd.string();
                      _actionNameType4 = flowRuntime_umd.string();
                      _arrayDataType2 = flowRuntime_umd.array();
                      _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.mixed());
                      flowRuntime_umd.warn(flowRuntime_umd.param("methodName", _methodNameType4), methodName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("actionName", _actionNameType4), actionName);
                      flowRuntime_umd.warn(flowRuntime_umd.param("arrayData", _arrayDataType2), arrayData);
                      arrayData = flowRuntime_umd.warn(_arrayDataType2, lodash.castArray(arrayData));

                      if (!lodash.isFunction(this[methodName])) {
                        _context3.next = 17;
                        break;
                      }

                      this[methodName].chainName = actionName;
                      _context3.next = 12;
                      return Promise.resolve(this[methodName].apply(this, _toConsumableArray(arrayData)));

                    case 12:
                      res = _context3.sent;
                      delete this[methodName].chainName;
                      return _context3.abrupt("return", flowRuntime_umd.warn(_returnType2, res));

                    case 17:
                      return _context3.abrupt("return", flowRuntime_umd.warn(_returnType2, arrayData));

                    case 18:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));

            function _callWithChainNameOnArrayAsync(_x4, _x5, _x6) {
              return _callWithChainNameOnArrayAsync2.apply(this, arguments);
            }

            return _callWithChainNameOnArrayAsync;
          }()
        }], [{
          key: "_getChains",
          value: function _getChains() {
            var AbstractClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

            AbstractClass = AbstractClass || this;

            var _AbstractClassType = flowRuntime_umd.Class(flowRuntime_umd.existential());

            flowRuntime_umd.warn(_AbstractClassType, AbstractClass);
            var ret = Object.keys(AbstractClass.metaObject.getOwnGroup('chains')) || [];
            return flowRuntime_umd.warn(_returnType4, ret);
          }
        }, {
          key: "_defineHookMethods",
          value: function _defineHookMethods(_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
                asHookName = _ref3[0],
                isArray = _ref3[1];

            var _returnType8 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

            var vsHookNames = "".concat(asHookName, "s");
            var vsActionName = "".concat(asHookName.replace('Hook', ''), "Action");
            Reflect.defineProperty(this, asHookName, method(this, asHookName, {
              value: flowRuntime_umd.annotate(function (method) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                var _methodType = flowRuntime_umd.string();

                var _optionsType = flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("only", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true), flowRuntime_umd.property("except", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true)));

                flowRuntime_umd.warn(flowRuntime_umd.param("method", _methodType), method);
                flowRuntime_umd.warn(flowRuntime_umd.param("options", _optionsType), options);

                switch (false) {
                  case options.only == null:
                    this.metaObject.appendMetaData('hooks', vsHookNames, {
                      method: method,
                      type: 'only',
                      actions: options.only
                    });
                    break;

                  case options.except == null:
                    this.metaObject.appendMetaData('hooks', vsHookNames, {
                      method: method,
                      type: 'except',
                      actions: options.except
                    });
                    break;

                  default:
                    this.metaObject.appendMetaData('hooks', vsHookNames, {
                      method: method,
                      type: 'all'
                    });
                }
              }, flowRuntime_umd["function"](flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("only", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true), flowRuntime_umd.property("except", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true))))))
            }));
            Reflect.defineProperty(this, vsHookNames, method(this, vsHookNames, {
              value: flowRuntime_umd.annotate(function () {
                var _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.object(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("only"), flowRuntime_umd.string("except"), flowRuntime_umd.string("all"))), flowRuntime_umd.property("actions", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true))));

                return flowRuntime_umd.warn(_returnType9, lodash.uniqWith(this.metaObject.getGroup('hooks')[vsHookNames] || [], function (first, second) {
                  var fstActions = first.actions;
                  var secActions = second.actions;
                  return first.method === second.method && first.type === second.type && (fstActions != null ? fstActions.join(',') : undefined) === (secActions != null ? secActions.join(',') : undefined);
                }));
              }, flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.object(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("only"), flowRuntime_umd.string("except"), flowRuntime_umd.string("all"))), flowRuntime_umd.property("actions", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())), true))))))
            }));
            Reflect.defineProperty(this.prototype, vsActionName, method(this.prototype, vsActionName, {
              value: function value(isAsync, action) {
                var _this2 = this;

                for (var _len2 = arguments.length, data = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                  data[_key2 - 2] = arguments[_key2];
                }

                if (!isArray) {
                  data = data[0];
                }

                var vlHooks = this.constructor[vsHookNames]();

                if (isAsync) {
                  return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                    var _iterator, _step, _loop;

                    return regeneratorRuntime.wrap(function _callee5$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _iterator = _createForOfIteratorHelper(vlHooks);
                            _context6.prev = 1;
                            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                              var _step$value, method, type, actions;

                              return regeneratorRuntime.wrap(function _loop$(_context5) {
                                while (1) {
                                  switch (_context5.prev = _context5.next) {
                                    case 0:
                                      _step$value = _step.value, method = _step$value.method, type = _step$value.type, actions = _step$value.actions;
                                      _context5.next = 3;
                                      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                        return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                          while (1) {
                                            switch (_context4.prev = _context4.next) {
                                              case 0:
                                                _context4.t0 = false;
                                                _context4.next = _context4.t0 === (type !== 'all') ? 3 : _context4.t0 === !(type === 'only' && indexOf.call(actions, action) >= 0) ? 3 : _context4.t0 === !(type === 'except' && indexOf.call(actions, action) < 0) ? 3 : 6;
                                                break;

                                              case 3:
                                                _context4.next = 5;
                                                return _this2[callWithChainName(isArray, isAsync)](method, action, data);

                                              case 5:
                                                return _context4.abrupt("return", _context4.sent);

                                              case 6:
                                                return _context4.abrupt("return", data);

                                              case 7:
                                              case "end":
                                                return _context4.stop();
                                            }
                                          }
                                        }, _callee4);
                                      }))();

                                    case 3:
                                      data = _context5.sent;

                                    case 4:
                                    case "end":
                                      return _context5.stop();
                                  }
                                }
                              }, _loop);
                            });

                            _iterator.s();

                          case 4:
                            if ((_step = _iterator.n()).done) {
                              _context6.next = 8;
                              break;
                            }

                            return _context6.delegateYield(_loop(), "t0", 6);

                          case 6:
                            _context6.next = 4;
                            break;

                          case 8:
                            _context6.next = 13;
                            break;

                          case 10:
                            _context6.prev = 10;
                            _context6.t1 = _context6["catch"](1);

                            _iterator.e(_context6.t1);

                          case 13:
                            _context6.prev = 13;

                            _iterator.f();

                            return _context6.finish(13);

                          case 16:
                            return _context6.abrupt("return", data);

                          case 17:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee5, null, [[1, 10, 13, 16]]);
                  }))();
                } else {
                  var _iterator2 = _createForOfIteratorHelper(vlHooks),
                      _step2;

                  try {
                    var _loop2 = function _loop2() {
                      var _step2$value = _step2.value,
                          method = _step2$value.method,
                          type = _step2$value.type,
                          actions = _step2$value.actions;

                      data = function () {
                        switch (false) {
                          case type !== 'all':
                          case !(type === 'only' && indexOf.call(actions, action) >= 0):
                          case !(type === 'except' && indexOf.call(actions, action) < 0):
                            return _this2[callWithChainName(isArray, isAsync)](method, action, data);

                          default:
                            return data;
                        }
                      }();
                    };

                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      _loop2();
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }

                  return data;
                }
              }
            }));
          }
        }, {
          key: "defineChains",
          value: function defineChains() {
            var _this3 = this;

            // console.log('>>??? chains.defineChains before _getChains');
            var vlChains = this._getChains(); // console.log('>>??? chains.defineChains vlChains', vlChains);


            if (!lodash.isEmpty(vlChains)) {
              var instanceMethods = this.instanceMethods;

              var _iterator3 = _createForOfIteratorHelper(vlChains),
                  _step3;

              try {
                var _loop3 = function _loop3() {
                  var methodName = _step3.value;
                  var name = "chain_".concat(methodName);
                  var pointer = Symbol["for"]("~".concat(name));
                  var vmFunctor = instanceMethods[methodName];

                  if (vmFunctor != null && !vmFunctor.isChain) {
                    var descriptor = {
                      configurable: true,
                      enumerable: true,
                      value: vmFunctor
                    };
                    Reflect.defineProperty(descriptor.value, 'name', {
                      value: name,
                      configurable: true
                    });
                    Reflect.defineProperty(_this3.prototype, pointer, descriptor);

                    if (vmFunctor.isAsync) {
                      Reflect.defineProperty(_this3.prototype, methodName, method(_this3.prototype, methodName, {
                        value: function () {
                          var _value = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                            var _len3,
                                args,
                                _key3,
                                _args7 = arguments;

                            return regeneratorRuntime.wrap(function _callee6$(_context7) {
                              while (1) {
                                switch (_context7.prev = _context7.next) {
                                  case 0:
                                    for (_len3 = _args7.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                                      args[_key3] = _args7[_key3];
                                    }

                                    _context7.next = 3;
                                    return this.callAsChain.apply(this, [true, methodName].concat(args));

                                  case 3:
                                    return _context7.abrupt("return", _context7.sent);

                                  case 4:
                                  case "end":
                                    return _context7.stop();
                                }
                              }
                            }, _callee6, this);
                          }));

                          function value() {
                            return _value.apply(this, arguments);
                          }

                          return value;
                        }()
                      }));
                    } else {
                      Reflect.defineProperty(_this3.prototype, methodName, method(_this3.prototype, methodName, {
                        value: function value() {
                          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            args[_key4] = arguments[_key4];
                          }

                          return this.callAsChain.apply(this, [false, methodName].concat(args));
                        }
                      }));
                    }

                    _this3.prototype[methodName].isChain = true;
                  }
                };

                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  _loop3();
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }
          }
        }, {
          key: "onInitialize",
          value: function onInitialize() {
            var _get2;

            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }

            (_get2 = _get(_getPrototypeOf(Mixin), "onInitialize", this)).call.apply(_get2, [this].concat(args));

            this.defineChains();
          }
        }, {
          key: "onInitializeMixin",
          value: function onInitializeMixin() {
            var _get3;

            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              args[_key6] = arguments[_key6];
            }

            (_get3 = _get(_getPrototypeOf(Mixin), "onInitializeMixin", this)).call.apply(_get3, [this].concat(args));

            this.defineChains();
          }
        }]);

        return Mixin;
      }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function initializer() {
          return _init;
        }
      }), _class2), _applyDecoratedDescriptor(_class2, "_getChains", [method], Object.getOwnPropertyDescriptor(_class2, "_getChains"), _class2), _applyDecoratedDescriptor(_class2.prototype, "callAsChain", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "callAsChain"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnSingle", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnSingle"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnArray", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnArray"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnSingleAsync", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnSingleAsync"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_callWithChainNameOnArrayAsync", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_callWithChainNameOnArrayAsync"), _class2.prototype), _applyDecoratedDescriptor(_class2, "_defineHookMethods", [method], Object.getOwnPropertyDescriptor(_class2, "_defineHookMethods"), _class2), _applyDecoratedDescriptor(_class2, "defineChains", [method], Object.getOwnPropertyDescriptor(_class2, "defineChains"), _class2), _applyDecoratedDescriptor(_class2, "onInitialize", [method], Object.getOwnPropertyDescriptor(_class2, "onInitialize"), _class2), _applyDecoratedDescriptor(_class2, "onInitializeMixin", [method], Object.getOwnPropertyDescriptor(_class2, "onInitializeMixin"), _class2)), _class2)) || _class);

      for (var _i = 0, _arr = [['initialHook', true], ['beforeHook', true], ['afterHook', false], ['finallyHook', false], ['errorHook', false]]; _i < _arr.length; _i++) {
        var methodName = _arr[_i];

        if (typeof Mixin[methodName[0]] == 'undefined') {
          Mixin._defineHookMethods(methodName);
        }
      }

      return initializeMixin(Mixin);
    };

    if (cachedChainsMixin == null) {
      Reflect.defineProperty(ChainsMixin, 'name', {
        configurable: false,
        enumerable: true,
        writable: false,
        value: 'ChainsMixin'
      });
      cachedChainsMixin = ChainsMixin;
    }

    var targetMixinsNames = Object.keys(target.metaObject.getGroup('applyedMixins'));

    if (!lodash.includes(targetMixinsNames, 'ChainsMixin')) {
      var SuperClass = Reflect.getPrototypeOf(target);
      var MixinClass = ChainsMixin(SuperClass);
      Reflect.defineProperty(MixinClass, 'name', {
        value: ChainsMixin.name
      });
      Reflect.setPrototypeOf(target, MixinClass);
      Reflect.setPrototypeOf(target.prototype, MixinClass.prototype);
      target.metaObject.parent = MixinClass.metaObject;
      target.metaObject.addMetaData('applyedMixins', MixinClass.name, MixinClass);
    }

    var alChains = lodash.castArray(chainsNames);

    var _iterator4 = _createForOfIteratorHelper(alChains),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var vsChainName = _step4.value;
        target.metaObject.addMetaData('chains', vsChainName, '');
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    functor.call(target);
    return target;
  };
}
flowRuntime_umd.annotate(chains, flowRuntime_umd["function"](flowRuntime_umd.param("first", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()), flowRuntime_umd["function"]())), flowRuntime_umd.param("last", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))));

var hasProp$1 = {}.hasOwnProperty;
var _class = null;
var MetaObjectTF = (function (NS) {
  if (_class !== null) {
    return _class;
  }

  var iphData = Symbol["for"]('~data');
  var ipoParent = Symbol["for"]('~parent');
  var ipoTarget = Symbol["for"]('~target');

  var MetaObject = /*#__PURE__*/function () {
    _createClass(MetaObject, [{
      key: "addMetaData",
      value: function addMetaData(asGroup, asKey, ahMetaData) {
        var base = this[iphData];

        if (base[asGroup] == null) {
          base[asGroup] = {};
        }

        Reflect.defineProperty(base[asGroup], asKey, {
          configurable: true,
          enumerable: true,
          value: ahMetaData
        });
      }
    }, {
      key: "mergeMetaData",
      value: function mergeMetaData(asGroup, asKey, ahMetaData) {
        var base = this[iphData];

        if (base[asGroup] == null) {
          base[asGroup] = {};
        }

        var hash = base[asGroup][asKey];

        if (hash != null) {
          var newHash = assign({}, hash, ahMetaData);

          for (var key in newHash) {
            if (!hasProp$1.call(newHash, key)) continue;
            hash[key] = newHash[key];
          }
        } else {
          Reflect.defineProperty(base[asGroup], asKey, {
            configurable: true,
            enumerable: true,
            value: assign({}, ahMetaData)
          });
        }
      }
    }, {
      key: "appendMetaData",
      value: function appendMetaData(asGroup, asKey, ahMetaData) {
        var base = this[iphData];

        if (base[asGroup] == null) {
          base[asGroup] = {};
        }

        var list = base[asGroup][asKey];

        if (list != null) {
          list.push(ahMetaData);
        } else {
          Reflect.defineProperty(base[asGroup], asKey, {
            configurable: true,
            enumerable: true,
            value: [ahMetaData]
          });
        }
      }
    }, {
      key: "removeMetaData",
      value: function removeMetaData(asGroup, asKey) {
        if (this[iphData][asGroup] != null) {
          Reflect.deleteProperty(this[iphData][asGroup], asKey);
        }
      }
    }, {
      key: "collectGroup",
      value: function collectGroup(asGroup) {
        var collector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var parent = this[ipoParent];
        var parentCollector = parent && typeof parent.collectGroup === "function" && parent.collectGroup(asGroup, collector);
        collector = collector.concat(parentCollector ? parentCollector : []);
        var group = this[iphData][asGroup];
        collector.push(group != null ? group : {});
        return collector;
      }
    }, {
      key: "getGroup",
      value: function getGroup(asGroup) {
        var abDeep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var assign = abDeep ? NS.prototype.assign : Object.assign;
        var vhGroup = assign.apply(void 0, [{}].concat(_toConsumableArray(this.collectGroup(asGroup))));
        return vhGroup;
      }
    }, {
      key: "getOwnGroup",
      value: function getOwnGroup(asGroup) {
        var group = this[iphData][asGroup]; // return group != null ? group : {};

        return group || {};
      }
    }, {
      key: "data",
      get: function get() {
        return this[iphData];
      }
    }, {
      key: "parent",
      get: function get() {
        return this[ipoParent];
      },
      set: function set(newParent) {
        this[ipoParent] = newParent;
        return newParent;
      }
    }, {
      key: "target",
      get: function get() {
        return this[ipoTarget];
      }
    }], [{
      key: "new",
      value: function _new() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return Reflect.construct(this, args);
      }
    }]);

    function MetaObject(target, parent) {
      _classCallCheck(this, MetaObject);

      this[ipoTarget] = target;
      this[ipoParent] = parent;
      this[iphData] = {};
      var data = parent != null ? parent.data : undefined;

      if (data !== undefined) {
        for (var key in data) {
          if (!hasProp$1.call(data, key)) continue;
          this[iphData][key] = {};
        }
      }
    }

    return MetaObject;
  }();

  Reflect.defineProperty(MetaObject, 'name', {
    get: function get() {
      return 'MetaObject';
    }
  });
  _class = MetaObject;
  return MetaObject;
});

var RecoverableStaticInterface = flowRuntime_umd.type("RecoverableStaticInterface", function (RecoverableStaticInterface) {
  var Module = RecoverableStaticInterface.typeParameter("Module"),
      Instance = RecoverableStaticInterface.typeParameter("Instance");
  return flowRuntime_umd.object(flowRuntime_umd.property("restoreObject", flowRuntime_umd["function"](flowRuntime_umd.param("acModule", flowRuntime_umd.Class(Module)), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", Instance)))), flowRuntime_umd.property("replicateObject", flowRuntime_umd["function"](flowRuntime_umd.param("instance", Instance), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))))));
});

var RecoverableStaticInterface$1 = flowRuntime_umd.tdz(function () {
  return RecoverableStaticInterface;
});
var _class$1 = null;
var CoreObjectTF = (function (NS) {
  var _dec, _class2, _class3, _temp;

  if (_class$1 !== null) {
    return _class$1;
  }

  var _NS$prototype = NS.prototype,
      PRODUCTION = _NS$prototype.PRODUCTION,
      DEVELOPMENT = _NS$prototype.DEVELOPMENT,
      CLASS_KEYS = _NS$prototype.CLASS_KEYS,
      INSTANCE_KEYS = _NS$prototype.INSTANCE_KEYS,
      _ = _NS$prototype._,
      inflect = _NS$prototype.inflect,
      assert = _NS$prototype.assert;
  var MetaObject = MetaObjectTF(NS);
  var cpoMetaObject = Symbol["for"]('~metaObject');
  var cplExtensibles = Symbol["for"]('~isExtensible');
  var cpsExtensibleSymbol = Symbol["for"]('~extensibleSymbol');
  var CoreObject = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("CoreObject", function (CoreObject) {
    return [flowRuntime_umd.staticProperty("Module", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("wrap", flowRuntime_umd.param("lambda", flowRuntime_umd.any())), flowRuntime_umd.method("wrap", flowRuntime_umd.param("lambda", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("metaObject"), flowRuntime_umd.staticMethod("new", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("onMetalize"), flowRuntime_umd.staticMethod("onInitialize"), flowRuntime_umd.staticMethod("onInitializeMixin"), flowRuntime_umd.method("Module"), flowRuntime_umd.staticMethod("moduleName"), flowRuntime_umd.method("moduleName"), flowRuntime_umd.staticMethod("superclass"), flowRuntime_umd.staticMethod("class"), flowRuntime_umd.method("class"), flowRuntime_umd.staticMethod("patches"), flowRuntime_umd.staticMethod("mixins"), flowRuntime_umd.staticMethod("classMethods"), flowRuntime_umd.staticMethod("instanceMethods"), flowRuntime_umd.staticMethod("isExtensible"), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CoreObject)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("aoInstance", flowRuntime_umd.ref(CoreObject)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))))];
  })), _dec(_class2 = (_temp = _class3 = /*#__PURE__*/function () {
    _createClass(CoreObject, [{
      key: "wrap",
      value: function wrap(lambda) {
        // const { caller } = arguments.callee;
        // const vcClass = caller.class || this.constructor;
        // const vsName = caller.name;
        var wrapper = function wrapper() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return lambda.apply(this, args);
        }; // Reflect.defineProperty(wrapper, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(lambda, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(wrapper, 'name', {
        //   value: vsName,
        //   configurable: true
        // });
        // Reflect.defineProperty(lambda, 'name', {
        //   value: vsName,
        //   configurable: true
        // });


        Reflect.defineProperty(lambda, 'wrapper', {
          value: wrapper,
          enumerable: true
        });
        Reflect.defineProperty(wrapper, 'body', {
          value: lambda,
          enumerable: true
        });
        return wrapper;
      }
    }, {
      key: "moduleName",
      value: function moduleName() {
        return this.Module.name;
      }
    }, {
      key: "class",
      value: function _class() {
        return this.constructor;
      }
    }, {
      key: "Module",
      // General class API
      get: function get() {
        return this.constructor.Module;
      }
    }], [{
      key: "wrap",
      // Core class API
      // static get 'super'() {
      //   const SuperClass = Reflect.getPrototypeOf(this);
      //   const self = this;
      //   return new Proxy(SuperClass, {
      //     get: function(target, name, receiver) {
      //       // if (name === 'super') {
      //       //   throw new Error('Method `super` can not been called twice');
      //       // }
      //       const method = target[name];
      //       if (method == null) {
      //         return () => {};
      //       }
      //       if (typeof method !== "function") {
      //         throw new Error(`Descriptor \`${name}\` absent in class ${SuperClass.name} is not method`);
      //       }
      //       return method.bind(self);
      //     }
      //   });
      // }
      // get 'super'() {
      //   const SuperClass = Reflect.getPrototypeOf(this.constructor);
      //   const self = this;
      //   return new Proxy(SuperClass.prototype, {
      //     get: function(target, name, receiver) {
      //       // if (name === 'super') {
      //       //   throw new Error('Method `super` can not been called twice');
      //       // }
      //       const method = target[name];
      //       if (method == null) {
      //         return () => {};
      //       }
      //       if (typeof method !== "function") {
      //         throw new Error(`Descriptor \`${name}\` absent in class ${SuperClass.name}.prototype is not method`);
      //       }
      //       return method.bind(self);
      //     }
      //   });
      // }
      value: function wrap(lambda) {
        // const { caller } = arguments.callee;
        // const vcClass = caller.class || this;
        // const vsName = caller.name;
        var wrapper = function wrapper() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return lambda.apply(this, args);
        }; // Reflect.defineProperty(wrapper, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(lambda, 'class', {
        //   value: vcClass,
        //   enumerable: true
        // });
        // Reflect.defineProperty(wrapper, 'name', {
        //   value: vsName,
        //   configurable: true
        // });
        // Reflect.defineProperty(lambda, 'name', {
        //   value: vsName,
        //   configurable: true
        // });


        Reflect.defineProperty(lambda, 'wrapper', {
          value: wrapper,
          enumerable: true
        });
        Reflect.defineProperty(wrapper, 'body', {
          value: lambda,
          enumerable: true
        });
        return wrapper;
      }
    }, {
      key: "new",
      value: function _new() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return Reflect.construct(this, args);
      }
    }, {
      key: "onMetalize",
      value: function onMetalize() {
        return;
      }
    }, {
      key: "onInitialize",
      value: function onInitialize() {
        return;
      }
    }, {
      key: "onInitializeMixin",
      value: function onInitializeMixin() {
        return;
      }
    }, {
      key: "moduleName",
      value: function moduleName() {
        return this.Module.name;
      }
    }, {
      key: "superclass",
      value: function superclass() {
        return Reflect.getPrototypeOf(this);
      }
    }, {
      key: "class",
      value: function _class() {
        return this.constructor;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          var instance, vcClass, _vcClassType2;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert(replica != null, "Replica cann`t be empty");
                  assert(replica["class"] != null, "Replica type is required");
                  assert((replica != null ? replica.type : void 0) === 'instance', "Replica type isn`t `instance`. It is `".concat(replica.type, "`"));

                  if (!(replica["class"] === this.name)) {
                    _context.next = 7;
                    break;
                  }

                  instance = this["new"]();
                  _context.next = 13;
                  break;

                case 7:
                  vcClass = acModule.prototype[replica["class"]];
                  _vcClassType2 = flowRuntime_umd.ref(RecoverableStaticInterface$1, acModule, flowRuntime_umd.ref(CoreObject));
                  _context.next = 12;
                  return vcClass.restoreObject(acModule, replica);

                case 12:
                  instance = _context.sent;

                case 13:
                  return _context.abrupt("return", instance);

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoInstance) {
          var replica;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert(aoInstance != null, "Argument cann`t be empty");
                  replica = {
                    type: 'instance',
                    "class": aoInstance.constructor.name
                  };
                  _context2.next = 4;
                  return replica;

                case 4:
                  return _context2.abrupt("return", _context2.sent);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }() // init(...args) {
      //   return;
      // }

    }, {
      key: "metaObject",
      get: function get() {
        return this[cpoMetaObject];
      }
    }, {
      key: "patches",
      get: function get() {
        return this.metaObject.getGroup('applyedPatches', false);
      }
    }, {
      key: "mixins",
      get: function get() {
        return this.metaObject.getGroup('applyedMixins', false);
      }
    }, {
      key: "classMethods",
      get: function get() {
        return this.metaObject.getGroup('classMethods', false);
      }
    }, {
      key: "instanceMethods",
      get: function get() {
        return this.metaObject.getGroup('instanceMethods', false);
      }
    }, {
      key: "isExtensible",
      get: function get() {
        return this[cplExtensibles][this[cpsExtensibleSymbol]];
      }
    }]);

    function CoreObject() {// this.init(...args);

      _classCallCheck(this, CoreObject);
    }

    return CoreObject;
  }(), _class3.Module = NS, _temp)) || _class2);
  Reflect.defineProperty(CoreObject, 'name', {
    get: function get() {
      return 'CoreObject';
    }
  });
  Reflect.defineProperty(CoreObject, cplExtensibles, {
    enumerable: false,
    configurable: false,
    value: {}
  });
  Reflect.defineProperty(CoreObject, cpoMetaObject, {
    enumerable: false,
    configurable: true,
    value: MetaObject["new"](CoreObject)
  });
  Reflect.defineProperty(CoreObject, cpsExtensibleSymbol, {
    enumerable: false,
    configurable: true,
    value: Symbol('extensibleSymbol')
  });
  CoreObject[cplExtensibles][CoreObject[cpsExtensibleSymbol]] = true;
  _class$1 = CoreObject;
  return CoreObject;
});

var __filename$1 = '/es/Proto.js';

var hasProp$2 = {}.hasOwnProperty; // const indexOf = [].indexOf;

var _class$2 = null;
var ProtoTF = (function (NS) {
  var _dec, _class2, _class3, _init, _init2, _class4, _temp;

  if (_class$2 !== null) {
    return _class$2;
  }

  var _NS$prototype = NS.prototype,
      _ = _NS$prototype._,
      CLASS_KEYS = _NS$prototype.CLASS_KEYS,
      INSTANCE_KEYS = _NS$prototype.INSTANCE_KEYS,
      meta = _NS$prototype.meta,
      nameBy = _NS$prototype.nameBy,
      assert = _NS$prototype.assert; // console.log('>>> IN Proto', meta, NS.__proto__, nameBy);

  var CoreObject = CoreObjectTF(NS);
  var Proto = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Proto", function (Proto) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("new", flowRuntime_umd.param("name", flowRuntime_umd.any()), flowRuntime_umd.param("object", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(Proto)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("acClass", flowRuntime_umd.ref(Proto)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.staticMethod("clone", flowRuntime_umd.param("klass", flowRuntime_umd.any()), flowRuntime_umd.param("options", flowRuntime_umd.any()))];
  })), _dec(_class2 = (_class3 = (_temp = _class4 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Proto, _CoreObject);

    var _super = _createSuper(Proto);

    function Proto() {
      _classCallCheck(this, Proto);

      return _super.apply(this, arguments);
    }

    _createClass(Proto, null, [{
      key: "new",
      value: function _new(name, object) {
        var vClass = this.clone(CoreObject, {
          name: name,
          parent: CoreObject
        });
        var reserved_words = Object.keys(CoreObject);
        var ClassMethods = object.ClassMethods;

        for (var c_key in ClassMethods) {
          if (!hasProp$2.call(ClassMethods, c_key)) continue;

          if (!_.includes(reserved_words, c_key)) {
            vClass[c_key] = ClassMethods[c_key];
          }
        }

        var InstanceMethods = object.InstanceMethods;

        for (var i_key in InstanceMethods) {
          if (!hasProp$2.call(InstanceMethods, i_key)) continue;

          if (!_.includes(INSTANCE_KEYS, i_key)) {
            vClass.prototype[i_key] = InstanceMethods[i_key];
          }
        }

        if (object.Module != null) {
          vClass.Module = object.Module;
        }

        Reflect.setPrototypeOf(vClass.prototype, new CoreObject());
        return vClass;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert(replica != null, "Replica cann`t be empty");
                  assert(replica["class"] != null, "Replica type is required");
                  assert((replica != null ? replica.type : void 0) === 'class', "Replica type isn`t `class`. It is `".concat(replica.type, "`"));
                  _context.next = 5;
                  return acModule.prototype[replica["class"]];

                case 5:
                  return _context.abrupt("return", _context.sent);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(acClass) {
          var replica;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert(acClass != null, "Argument cann`t be empty");
                  replica = {
                    type: 'class',
                    "class": acClass.name
                  };
                  _context2.next = 4;
                  return replica;

                case 4:
                  return _context2.abrupt("return", _context2.sent);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "clone",
      value: function clone(klass) {
        var _dec2, _class5;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        assert(_.isFunction(klass), 'Not a constructor function');
        var SuperClass = Reflect.getPrototypeOf(klass);
        var definedParent = options.parent;
        var parent = definedParent || SuperClass || klass.prototype.constructor;
        var clone = (_dec2 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ClonedClass", flowRuntime_umd["extends"](klass))), _dec2(_class5 = /*#__PURE__*/function (_klass) {
          _inherits(ClonedClass, _klass);

          var _super2 = _createSuper(ClonedClass);

          function ClonedClass() {
            _classCallCheck(this, ClonedClass);

            return _super2.apply(this, arguments);
          }

          return ClonedClass;
        }(klass)) || _class5);
        Reflect.defineProperty(clone, 'name', {
          value: options.name || klass.name
        });

        if (options.initialize) {
          if (typeof clone.initialize === "function") {
            clone.initialize(); // TODO: под вопросом
          }
        }

        return clone;
      }
    }]);

    return Proto;
  }(CoreObject), _class4.__filename = __filename$1, _class4.object = {}, _temp), (_applyDecoratedDescriptor(_class3, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class3, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class3), _applyDecoratedDescriptor(_class3, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class3, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class3)), _class3)) || _class2);
  Proto.constructor = Proto; // Reflect.defineProperty(Proto, 'name', {get: ()=> 'Proto'});

  _class$2 = Proto;
  return Proto;
});

var __filename$2 = '/es/Module.js';

// const indexOf = [].indexOf;
var slice$4 = [].slice;
var _class$3 = null;
var ModuleTF = (function (NS) {
  var _class2, _init, _init2, _class3, _temp;

  if (_class$3 !== null) {
    return _class$3;
  }

  var _NS$prototype = NS.prototype,
      PRODUCTION = _NS$prototype.PRODUCTION,
      DEVELOPMENT = _NS$prototype.DEVELOPMENT,
      MetaObject = _NS$prototype.MetaObject,
      _ = _NS$prototype._,
      inflect = _NS$prototype.inflect,
      assert = _NS$prototype.assert,
      meta = _NS$prototype.meta,
      nameBy = _NS$prototype.nameBy;
  var CoreObject = CoreObjectTF(NS);
  var cphFilesList = Symbol["for"]('~filesList');
  var cphTemplatesList = Symbol["for"]('~templatesList');
  var cphMigrationsMap = Symbol["for"]('~migrationsMap');
  var cphUtilsMap = Symbol["for"]('~utilsMap');
  var cpoUtils = Symbol["for"]('~utils'); // const cpoUtilsMeta = Symbol.for('~utilsMeta');

  var cpmUtilsHandler = Symbol["for"]('~utilsHandler');
  var cpmHandler = Symbol["for"]('~handler');
  var cphPathMap = Symbol["for"]('~pathMap');
  var cpoNamespace = Symbol["for"]('~namespace');
  var Module = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Module, _CoreObject);

    var _super = _createSuper(Module);

    _createClass(Module, [{
      key: "Utils",
      // static set Utils(ahConfig) {
      //   for (const vsKey in ahConfig) {
      //     if (!hasProp.call(ahConfig, vsKey)) continue;
      //     const vValue = ahConfig[vsKey];
      //     if (!this.Module[vsKey]) {
      //       this.metaObject.addMetaData('utilities', vsKey, vValue);
      //       Reflect.defineProperty(this, vsKey, {
      //         configurable: false,
      //         enumerable: true,
      //         writable: false,
      //         value: vValue
      //       });
      //     }
      //   }
      // }
      get: function get() {
        var MClass = this.constructor;
        return MClass[cpoUtils] != null ? MClass[cpoUtils] : MClass[cpoUtils] = new Proxy(MClass, MClass[cpmUtilsHandler]);
      }
    }], [{
      key: "new",
      value: function _new() {
        assert.fail('new method unsupported for Module');
      }
    }, {
      key: "resolve",
      value: function resolve(name) {
        return [[], true];
      }
    }, {
      key: "require",
      value: function require(path) {
        return null;
      }
    }, {
      key: "defineMixin",
      value: function defineMixin() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        assert(args.length > 0, 'defineMixin() method required two arguments');
        var filename = args[0],
            vmFunction = args[1];

        var _slice$call$0$split = slice$4.call(filename.split('/'), -1)[0].split('.'),
            _slice$call$0$split2 = _slicedToArray(_slice$call$0$split, 1),
            mixinName = _slice$call$0$split2[0];

        Reflect.defineProperty(vmFunction, 'name', {
          configurable: false,
          enumerable: true,
          writable: false,
          value: mixinName
        });
        this.metaObject.addMetaData('constants', mixinName, vmFunction);
        Reflect.defineProperty(this.prototype, mixinName, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: vmFunction
        });
        this.metaObject.addMetaData('mixins', mixinName, vmFunction);
        return vmFunction;
      }
    }, {
      key: "definePatch",
      value: function definePatch() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        assert(args.length > 0, 'definePatch() method required two arguments');
        var filename = args[0],
            vmFunction = args[1];

        var _slice$call$0$split3 = slice$4.call(filename.split('/'), -1)[0].split('.'),
            _slice$call$0$split4 = _slicedToArray(_slice$call$0$split3, 1),
            patchName = _slice$call$0$split4[0];

        Reflect.defineProperty(vmFunction, 'name', {
          configurable: false,
          enumerable: true,
          writable: false,
          value: patchName
        });
        this.metaObject.addMetaData('constants', patchName, vmFunction);
        Reflect.defineProperty(this.prototype, patchName, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: vmFunction
        });
        this.metaObject.addMetaData('patches', patchName, vmFunction);
        return vmFunction;
      }
    }, {
      key: "defineUtil",
      value: function defineUtil(filename, vmFunction) {
        var _slice$call$0$split5 = slice$4.call(filename.split('/'), -1)[0].split('.'),
            _slice$call$0$split6 = _slicedToArray(_slice$call$0$split5, 1),
            utilName = _slice$call$0$split6[0];

        Reflect.defineProperty(vmFunction, 'name', {
          configurable: false,
          enumerable: true,
          writable: false,
          value: utilName
        });
        Reflect.defineProperty(this.prototype, utilName, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: vmFunction
        });
        this.metaObject.addMetaData('utilities', utilName, vmFunction);
        return vmFunction;
      }
    }, {
      key: "constants",
      get: function get() {
        return this.metaObject.getGroup('constants', false);
      }
    }, {
      key: "utilities",
      get: function get() {
        return this.metaObject.getGroup('utilities', false); // return this[cpoUtilsMeta] != null ? this[cpoUtilsMeta] : this[cpoUtilsMeta] = this.metaObject.getGroup('utilities', false);
      }
    }, {
      key: "decorators",
      get: function get() {
        return this.metaObject.getGroup('decorators', false);
      }
    }, {
      key: "mixins",
      get: function get() {
        return this.metaObject.getGroup('mixins', false);
      }
    }, {
      key: "plugins",
      get: function get() {
        return this.metaObject.getGroup('plugins', false);
      }
    }, {
      key: "patches",
      get: function get() {
        return this.metaObject.getGroup('patches', false);
      }
    }, {
      key: "environment",
      get: function get() {
        return this.Module.prototype.ENV;
      }
    }, {
      key: "NS",
      get: function get() {
        var MClass = this;
        return MClass[cpoNamespace] != null ? MClass[cpoNamespace] : MClass[cpoNamespace] = new Proxy(MClass, MClass[cpmHandler]);
      }
    }]);

    function Module() {
      var _this;

      _classCallCheck(this, Module);

      _this = _super.call(this);

      if (_assertThisInitialized(_this) instanceof Module) {
        assert.fail('new operator unsupported');
      }

      return _this;
    }

    return Module;
  }(CoreObject), _class3.__filename = __filename$2, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2)), _class2);
  Reflect.defineProperty(Module, cphFilesList, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cphTemplatesList, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cphMigrationsMap, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cphUtilsMap, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cpoUtils, {
    enumerable: true,
    writable: true,
    value: null
  }); // Reflect.defineProperty(Module, cpoUtilsMeta, {
  //   enumerable: true,
  //   writable: true,
  //   value: null
  // });

  Reflect.defineProperty(Module, cphPathMap, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cpoNamespace, {
    enumerable: true,
    writable: true,
    value: null
  });
  Reflect.defineProperty(Module, cpmUtilsHandler, {
    enumerable: true,
    value: {
      // ownKeys: (aoTarget) =>
      //   Reflect.ownKeys(aoTarget.utilities),
      // has: (aoTarget, asName) =>
      //   indexOf.call(aoTarget.utilities, asName) >= 0,
      // set: (aoTarget, asName, aValue, aoReceiver) => {
      //   if (!Reflect.get(aoTarget, asName)) {
      //     aoTarget.metaObject.addMetaData('utilities', asName, aValue);
      //     Reflect.defineProperty(aoTarget, asName, {
      //       configurable: false,
      //       enumerable: true,
      //       writable: false,
      //       value: aValue
      //     });
      //     return aValue
      //   }
      // },
      get: function get(aoTarget, asName) {
        if (!Reflect.get(aoTarget.prototype, asName)) {
          // if (aoTarget[cphUtilsMap] == null) {
          //   const utilsMap = {};
          //   for (const vsName in aoTarget[cphPathMap]) {
          //     const vsPath = aoTarget[cphPathMap][vsName];
          //     // console.log('<><><><> Utils.get', vsName, vsPath);
          //     if (_.includes(vsPath, '/utils/')) {
          //       utilsMap[vsName] = vsPath;
          //     }
          //   }
          //   aoTarget[cphUtilsMap] = utilsMap;
          // }
          var vsPath = aoTarget[cphUtilsMap][asName];

          if (vsPath) {
            aoTarget.resolve(vsPath);
          }
        }

        return Reflect.get(aoTarget.prototype, asName);
      }
    }
  });
  Reflect.defineProperty(Module, cpmHandler, {
    enumerable: true,
    value: {
      get: function get(aoTarget, asName) {
        if (!Reflect.get(aoTarget.prototype, asName)) {
          var vsPath = aoTarget[cphPathMap][asName]; // console.log('>?>?>?> Module.NS.get before aoTarget.resolve', vsPath);

          if (vsPath) {
            aoTarget.resolve(vsPath);
          }
        } // console.log('>?>?>?> Module.NS.get', aoTarget.name, asName, [Reflect.get(aoTarget.prototype, asName)]);


        return Reflect.get(aoTarget.prototype, asName);
      }
    }
  });
  Reflect.defineProperty(Module.prototype, 'MetaObject', {
    configurable: false,
    enumerable: true,
    writable: false,
    value: MetaObject
  });
  _class$3 = Module;
  return Module;
});

var __filename$3 = '/es/statemachine/HookedObject.js';

var HookedObjectInterface = flowRuntime_umd.type("HookedObjectInterface", flowRuntime_umd.object(flowRuntime_umd.property("name", flowRuntime_umd.string())));

var HookedObjectInterface$1 = flowRuntime_umd.tdz(function () {
  return HookedObjectInterface;
});
var HookedObjectTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  console.log('hhhh', __filename$3);
  var HookedObject = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("HookedObject", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("_anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.method("_doHook", flowRuntime_umd.param("asHook", flowRuntime_umd.any()), flowRuntime_umd.param("alArguments", flowRuntime_umd.any()), flowRuntime_umd.param("asErrorMessage", flowRuntime_umd.any()), flowRuntime_umd.param("aDefaultValue", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(HookedObject, _CoreObject);

    var _super = _createSuper(HookedObject);

    _createClass(HookedObject, [{
      key: "_doHook",
      // ipoAnchor = HookedObject.protected({
      // ipmDoHook = HookedObject.protected(HookedObject.async({
      value: function () {
        var _doHook2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asHook, alArguments, asErrorMessage, aDefaultValue) {
          var anchor;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  anchor = this._anchor || this;

                  if (!(asHook != null)) {
                    _context.next = 22;
                    break;
                  }

                  if (!_.isFunction(anchor[asHook])) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 5;
                  return anchor[asHook].apply(anchor, _toConsumableArray(alArguments));

                case 5:
                  return _context.abrupt("return", _context.sent);

                case 8:
                  if (!_.isString(anchor[asHook])) {
                    _context.next = 19;
                    break;
                  }

                  if (!(typeof anchor.emit === "function")) {
                    _context.next = 15;
                    break;
                  }

                  _context.next = 12;
                  return anchor.emit.apply(anchor, [anchor[asHook]].concat(_toConsumableArray(alArguments)));

                case 12:
                  _context.t0 = _context.sent;
                  _context.next = 16;
                  break;

                case 15:
                  _context.t0 = undefined;

                case 16:
                  return _context.abrupt("return", _context.t0);

                case 19:
                  throw new Error(asErrorMessage);

                case 20:
                  _context.next = 25;
                  break;

                case 22:
                  _context.next = 24;
                  return aDefaultValue;

                case 24:
                  return _context.abrupt("return", _context.sent);

                case 25:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function _doHook(_x, _x2, _x3, _x4) {
          return _doHook2.apply(this, arguments);
        }

        return _doHook;
      }()
    }]);

    function HookedObject(name, anchor) {
      var _this;

      _classCallCheck(this, HookedObject);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_anchor", _descriptor2, _assertThisInitialized(_this));

      _this.name = name;

      if (anchor != null) {
        _this._anchor = anchor;
      }

      return _this;
    }

    return HookedObject;
  }(CoreObject), _class3.__filename = __filename$3, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_anchor", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_doHook", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_doHook"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$4 = '/es/statemachine/State.js';

var TransitionInterface = flowRuntime_umd.type("TransitionInterface", flowRuntime_umd.object(flowRuntime_umd.property("testGuard", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testIf", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testUnless", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doSuccess", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))))));

var TransitionInterface$1 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var EventInterface = flowRuntime_umd.tdz(function () {
  return EventInterface$1;
});
var StateInterface = flowRuntime_umd.type("StateInterface", function (StateInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("initial", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("getEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(EventInterface))))))), flowRuntime_umd.property("getEvent", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(EventInterface))))), flowRuntime_umd.property("defineTransition", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("aoTarget", StateInterface), flowRuntime_umd.param("aoTransition", flowRuntime_umd.ref(TransitionInterface$1)), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref(EventInterface)))), flowRuntime_umd.property("removeTransition", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("doBeforeEnter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doEnter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterEnter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doBeforeExit", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doExit", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterExit", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("send", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))));
});

var StateInterface$1 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var TransitionInterface$2 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var EventInterface$1 = flowRuntime_umd.type("EventInterface", flowRuntime_umd.object(flowRuntime_umd.property("transition", flowRuntime_umd.ref(TransitionInterface$2)), flowRuntime_umd.property("target", flowRuntime_umd.ref(StateInterface$1)), flowRuntime_umd.property("testGuard", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testIf", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("testUnless", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doBefore", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfter", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doSuccess", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doError", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))))));

var TransitionInterface$3 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var StateInterface$2 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var StateMachineInterface = flowRuntime_umd.type("StateMachineInterface", flowRuntime_umd.object(flowRuntime_umd.property("currentState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$2))), flowRuntime_umd.property("initialState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$2))), flowRuntime_umd.property("states", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(StateInterface$2)))), flowRuntime_umd.property("doBeforeReset", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterReset", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doBeforeAllEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterAllEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doAfterAllTransitions", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doErrorOnAllEvents", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doWithAnchorUpdateState", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doWithAnchorRestoreState", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("doWithAnchorSave", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("registerState", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref(StateInterface$2)))), flowRuntime_umd.property("removeState", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("registerEvent", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("alDepartures", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.param("asTarget", flowRuntime_umd.string()), flowRuntime_umd.param("ahEventConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("ahTransitionConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("reset", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("send", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("transitionTo", flowRuntime_umd["function"](flowRuntime_umd.param("nextState", flowRuntime_umd.ref(StateInterface$2)), flowRuntime_umd.param("transition", flowRuntime_umd.ref(TransitionInterface$3)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("beforeAllEvents", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("afterAllTransitions", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("afterAllEvents", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("errorOnAllEvents", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("withAnchorUpdateState", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("withAnchorSave", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("withAnchorRestoreState", flowRuntime_umd["function"](flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("state", flowRuntime_umd["function"](flowRuntime_umd.param("asState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("event", flowRuntime_umd["function"](flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd["function"]())), flowRuntime_umd.param("amTransitionInitializer", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("transition", flowRuntime_umd["function"](flowRuntime_umd.param("previousStates", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("nextState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var splice = [].splice;
var StateTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var State = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("State", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_stateMachine", flowRuntime_umd.nullable(flowRuntime_umd.ref("StateMachineInterface"))), flowRuntime_umd.property("_events", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface"))))), flowRuntime_umd.property("_beforeEnter", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_enter", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterEnter", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_beforeExit", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_exit", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterExit", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("initial", flowRuntime_umd["boolean"]()), flowRuntime_umd.method("getEvents", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface")))))), flowRuntime_umd.method("getEvent", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("EventInterface")))), flowRuntime_umd.method("defineTransition", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("aoTarget", flowRuntime_umd.ref("StateInterface")), flowRuntime_umd.param("aoTransition", flowRuntime_umd.ref("TransitionInterface")), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("EventInterface"))), flowRuntime_umd.method("removeTransition", flowRuntime_umd.param("asEvent", flowRuntime_umd.string())), flowRuntime_umd.method("doBeforeEnter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doEnter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterEnter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doBeforeExit", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doExit", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterExit", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("send", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoStateMachine", flowRuntime_umd.ref("StateMachineInterface")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(State, _HookedObject);

    var _super = _createSuper(State);

    _createClass(State, [{
      key: "getEvents",
      // ipoStateMachine = PointerT(State.private({
      // iphEvents = PointerT(State.private({
      // ipsBeforeEnter = PointerT(State.private({
      // ipsEnter = PointerT(State.private({
      // ipsAfterEnter = PointerT(State.private({
      // ipsBeforeExit = PointerT(State.private({
      // ipsExit = PointerT(State.private({
      // ipsAfterExit = PointerT(State.private({
      value: function getEvents() {
        return this._events;
      }
    }, {
      key: "getEvent",
      value: function getEvent(asEvent) {
        return this._events[asEvent];
      }
    }, {
      key: "defineTransition",
      value: function defineTransition(asEvent, aoTarget, aoTransition) {
        var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        if (this._events[asEvent] == null) {
          var vpoAnchor = this._anchor;

          var vhEventConfig = _.assign({}, config, {
            target: aoTarget,
            transition: aoTransition
          });

          var vsEventName = "".concat(this.name, "_").concat(asEvent);
          this._events[asEvent] = this.Module.NS.Event["new"](vsEventName, vpoAnchor, vhEventConfig);
        }

        return this._events[asEvent];
      }
    }, {
      key: "removeTransition",
      value: function removeTransition(asEvent) {
        if (this._events[asEvent] != null) {
          delete this._events[asEvent];
        }
      }
    }, {
      key: "doBeforeEnter",
      value: function () {
        var _doBeforeEnter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.next = 3;
                  return this._doHook(this._beforeEnter, args, 'Specified "beforeEnter" not found', args);

                case 3:
                  return _context.abrupt("return", _context.sent);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function doBeforeEnter() {
          return _doBeforeEnter.apply(this, arguments);
        }

        return doBeforeEnter;
      }()
    }, {
      key: "doEnter",
      value: function () {
        var _doEnter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.next = 3;
                  return this._doHook(this._enter, args, 'Specified "enter" not found', args);

                case 3:
                  return _context2.abrupt("return", _context2.sent);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function doEnter() {
          return _doEnter.apply(this, arguments);
        }

        return doEnter;
      }()
    }, {
      key: "doAfterEnter",
      value: function () {
        var _doAfterEnter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.next = 3;
                  return this._doHook(this._afterEnter, args, 'Specified "afterEnter" not found', args);

                case 3:
                  return _context3.abrupt("return", _context3.sent);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function doAfterEnter() {
          return _doAfterEnter.apply(this, arguments);
        }

        return doAfterEnter;
      }()
    }, {
      key: "doBeforeExit",
      value: function () {
        var _doBeforeExit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.next = 3;
                  return this._doHook(this._beforeExit, args, 'Specified "beforeExit" not found', args);

                case 3:
                  return _context4.abrupt("return", _context4.sent);

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doBeforeExit() {
          return _doBeforeExit.apply(this, arguments);
        }

        return doBeforeExit;
      }()
    }, {
      key: "doExit",
      value: function () {
        var _doExit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.next = 3;
                  return this._doHook(this._exit, args, 'Specified "exit" not found', args);

                case 3:
                  return _context5.abrupt("return", _context5.sent);

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doExit() {
          return _doExit.apply(this, arguments);
        }

        return doExit;
      }()
    }, {
      key: "doAfterExit",
      value: function () {
        var _doAfterExit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var _len6,
              args,
              _key6,
              _args6 = arguments;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  for (_len6 = _args6.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = _args6[_key6];
                  }

                  _context6.next = 3;
                  return this._doHook(this._afterExit, args, 'Specified "afterExit" not found', args);

                case 3:
                  return _context6.abrupt("return", _context6.sent);

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function doAfterExit() {
          return _doAfterExit.apply(this, arguments);
        }

        return doAfterExit;
      }()
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(asEvent) {
          var oldState,
              event,
              _len7,
              args,
              _key7,
              eventGuard,
              eventIf,
              eventUnless,
              transition,
              transitionGuard,
              transitionIf,
              transitionUnless,
              stateMachine,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  oldState = this;
                  event = oldState._events[asEvent];

                  if (!(event != null)) {
                    _context7.next = 46;
                    break;
                  }

                  _context7.prev = 3;

                  for (_len7 = _args7.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
                    args[_key7 - 1] = _args7[_key7];
                  }

                  _context7.next = 7;
                  return event.doBefore.apply(event, args);

                case 7:
                  _context7.next = 9;
                  return event.testGuard.apply(event, args);

                case 9:
                  eventGuard = _context7.sent;
                  _context7.next = 12;
                  return event.testIf.apply(event, args);

                case 12:
                  eventIf = _context7.sent;
                  _context7.next = 15;
                  return event.testUnless.apply(event, args);

                case 15:
                  eventUnless = _context7.sent;

                  if (!(eventGuard && eventIf && !eventUnless)) {
                    _context7.next = 37;
                    break;
                  }

                  transition = event.transition;
                  _context7.next = 20;
                  return transition.testGuard.apply(transition, args);

                case 20:
                  transitionGuard = _context7.sent;
                  _context7.next = 23;
                  return transition.testIf.apply(transition, args);

                case 23:
                  transitionIf = _context7.sent;
                  _context7.next = 26;
                  return transition.testUnless.apply(transition, args);

                case 26:
                  transitionUnless = _context7.sent;

                  if (!(transitionGuard && transitionIf && !transitionUnless)) {
                    _context7.next = 35;
                    break;
                  }

                  _context7.next = 30;
                  return oldState.doBeforeExit.apply(oldState, args);

                case 30:
                  _context7.next = 32;
                  return oldState.doExit.apply(oldState, args);

                case 32:
                  stateMachine = oldState._stateMachine;
                  _context7.next = 35;
                  return stateMachine.transitionTo.apply(stateMachine, [event.target, transition].concat(args));

                case 35:
                  _context7.next = 37;
                  return event.doSuccess.apply(event, args);

                case 37:
                  _context7.next = 39;
                  return event.doAfter.apply(event, args);

                case 39:
                  _context7.next = 46;
                  break;

                case 41:
                  _context7.prev = 41;
                  _context7.t0 = _context7["catch"](3);
                  _context7.next = 45;
                  return event.doError(_context7.t0);

                case 45:
                  throw _context7.t0;

                case 46:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this, [[3, 41]]);
        }));

        function send(_x) {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }]);

    function State(name, anchor, aoStateMachine) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len8 = arguments.length, args1 = new Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {
        args1[_key8 - 3] = arguments[_key8];
      }

      _classCallCheck(this, State);

      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === undefined) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_stateMachine", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_events", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeEnter", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_enter", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterEnter", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeExit", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_exit", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterExit", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "initial", _descriptor9, _assertThisInitialized(_this));

      _this._events = {};
      _this._stateMachine = aoStateMachine;
      var _config = config;
      _this._beforeEnter = _config.beforeEnter;
      _this._enter = _config.enter;
      _this._afterEnter = _config.afterEnter;
      _this._beforeExit = _config.beforeExit;
      _this._exit = _config.exit;
      _this._afterExit = _config.afterExit;
      _this.initial = config.initial === true;
      return _this;
    }

    return State;
  }(HookedObject), _class3.__filename = __filename$4, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_stateMachine", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_events", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_beforeEnter", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_enter", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_afterEnter", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_beforeExit", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_exit", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_afterExit", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "initial", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getEvent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getEvent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defineTransition", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defineTransition"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeTransition", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeTransition"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBeforeEnter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeEnter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doEnter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doEnter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterEnter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterEnter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBeforeExit", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doExit", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterExit", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$5 = '/es/statemachine/Transition.js';

var TransitionInterface$4 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var splice$1 = [].splice;
var TransitionTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Transition = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Transition", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_guard", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_if", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_unless", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_after", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_success", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("testGuard", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testIf", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testUnless", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doSuccess", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(Transition, _HookedObject);

    var _super = _createSuper(Transition);

    _createClass(Transition, [{
      key: "testGuard",
      // ipsGuard = PointerT(Transition.private({
      // ipsIf = PointerT(Transition.private({
      // ipsUnless = PointerT(Transition.private({
      // ipsAfter = PointerT(Transition.private({
      // ipsSuccess = PointerT(Transition.private({
      value: function () {
        var _testGuard = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.next = 3;
                  return this._doHook(this._guard, args, 'Specified "guard" not found', true);

                case 3:
                  return _context.abrupt("return", _context.sent);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function testGuard() {
          return _testGuard.apply(this, arguments);
        }

        return testGuard;
      }()
    }, {
      key: "testIf",
      value: function () {
        var _testIf = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.next = 3;
                  return this._doHook(this._if, args, 'Specified "if" not found', true);

                case 3:
                  return _context2.abrupt("return", _context2.sent);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function testIf() {
          return _testIf.apply(this, arguments);
        }

        return testIf;
      }()
    }, {
      key: "testUnless",
      value: function () {
        var _testUnless = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.next = 3;
                  return this._doHook(this._unless, args, 'Specified "unless" not found', false);

                case 3:
                  return _context3.abrupt("return", _context3.sent);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function testUnless() {
          return _testUnless.apply(this, arguments);
        }

        return testUnless;
      }()
    }, {
      key: "doAfter",
      value: function () {
        var _doAfter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.next = 3;
                  return this._doHook(this._after, args, 'Specified "after" not found', args);

                case 3:
                  return _context4.abrupt("return", _context4.sent);

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doAfter() {
          return _doAfter.apply(this, arguments);
        }

        return doAfter;
      }()
    }, {
      key: "doSuccess",
      value: function () {
        var _doSuccess = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.next = 3;
                  return this._doHook(this._success, args, 'Specified "success" not found', args);

                case 3:
                  return _context5.abrupt("return", _context5.sent);

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doSuccess() {
          return _doSuccess.apply(this, arguments);
        }

        return doSuccess;
      }() // FuncG([String, Object, MaybeG(Object)], NilT)

    }]);

    function Transition(name, anchor) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len6 = arguments.length, args1 = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
        args1[_key6 - 2] = arguments[_key6];
      }

      _classCallCheck(this, Transition);

      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice$1.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === void 0) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_guard", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_if", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_unless", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_after", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_success", _descriptor5, _assertThisInitialized(_this));

      var _config = config;
      _this._guard = _config.guard;
      _this._if = _config["if"];
      _this._unless = _config.unless;
      _this._after = _config.after;
      _this._success = _config.success;
      return _this;
    }

    return Transition;
  }(HookedObject), _class3.__filename = __filename$5, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_guard", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_if", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_unless", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_after", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_success", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "testGuard", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testGuard"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testIf", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testIf"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testUnless", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testUnless"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doSuccess", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doSuccess"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$6 = '/es/statemachine/Event.js';

var StateInterface$3 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var EventInterface$2 = flowRuntime_umd.tdz(function () {
  return EventInterface$1;
});
var TransitionInterface$5 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var splice$2 = [].splice;
var EventTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var Event = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Event", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("transition", flowRuntime_umd.ref(TransitionInterface$5)), flowRuntime_umd.property("target", flowRuntime_umd.ref(StateInterface$3)), flowRuntime_umd.property("_guard", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_if", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_unless", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_before", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_after", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_success", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_error", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("testGuard", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testIf", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("testUnless", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doBefore", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfter", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doSuccess", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doError", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(Event, _HookedObject);

    var _super = _createSuper(Event);

    _createClass(Event, [{
      key: "testGuard",
      // ipsGuard = PointerT(Event.private({
      // ipsIf = PointerT(Event.private({
      // ipsUnless = PointerT(Event.private({
      // ipsBefore = PointerT(Event.private({
      // ipsAfter = PointerT(Event.private({
      // ipsSuccess = PointerT(Event.private({
      // ipsError = PointerT(Event.private({
      value: function () {
        var _testGuard = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.next = 3;
                  return this._doHook(this._guard, args, 'Specified "guard" not found', true);

                case 3:
                  return _context.abrupt("return", _context.sent);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function testGuard() {
          return _testGuard.apply(this, arguments);
        }

        return testGuard;
      }()
    }, {
      key: "testIf",
      value: function () {
        var _testIf = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.next = 3;
                  return this._doHook(this._if, args, 'Specified "if" not found', true);

                case 3:
                  return _context2.abrupt("return", _context2.sent);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function testIf() {
          return _testIf.apply(this, arguments);
        }

        return testIf;
      }()
    }, {
      key: "testUnless",
      value: function () {
        var _testUnless = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.next = 3;
                  return this._doHook(this._unless, args, 'Specified "unless" not found', false);

                case 3:
                  return _context3.abrupt("return", _context3.sent);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function testUnless() {
          return _testUnless.apply(this, arguments);
        }

        return testUnless;
      }()
    }, {
      key: "doBefore",
      value: function () {
        var _doBefore = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.next = 3;
                  return this._doHook(this._before, args, 'Specified "before" not found', args);

                case 3:
                  return _context4.abrupt("return", _context4.sent);

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doBefore() {
          return _doBefore.apply(this, arguments);
        }

        return doBefore;
      }()
    }, {
      key: "doAfter",
      value: function () {
        var _doAfter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.next = 3;
                  return this._doHook(this._after, args, 'Specified "after" not found', args);

                case 3:
                  return _context5.abrupt("return", _context5.sent);

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doAfter() {
          return _doAfter.apply(this, arguments);
        }

        return doAfter;
      }()
    }, {
      key: "doSuccess",
      value: function () {
        var _doSuccess = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var _len6,
              args,
              _key6,
              _args6 = arguments;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  for (_len6 = _args6.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = _args6[_key6];
                  }

                  _context6.next = 3;
                  return this._doHook(this._success, args, 'Specified "success" not found', args);

                case 3:
                  return _context6.abrupt("return", _context6.sent);

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function doSuccess() {
          return _doSuccess.apply(this, arguments);
        }

        return doSuccess;
      }()
    }, {
      key: "doError",
      value: function () {
        var _doError = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          var _len7,
              args,
              _key7,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  for (_len7 = _args7.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                    args[_key7] = _args7[_key7];
                  }

                  _context7.next = 3;
                  return this._doHook(this._error, args, 'Specified "error" not found', args);

                case 3:
                  return _context7.abrupt("return", _context7.sent);

                case 4:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function doError() {
          return _doError.apply(this, arguments);
        }

        return doError;
      }()
    }]);

    function Event(name, anchor) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len8 = arguments.length, args1 = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
        args1[_key8 - 2] = arguments[_key8];
      }

      _classCallCheck(this, Event);

      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice$2.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === undefined) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "transition", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "target", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_guard", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_if", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_unless", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_before", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_after", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_success", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_error", _descriptor9, _assertThisInitialized(_this));

      var _config = config;
      _this.transition = _config.transition;
      _this.target = _config.target;
      _this._guard = _config.guard;
      _this._if = _config["if"];
      _this._unless = _config.unless;
      _this._before = _config.before;
      _this._success = _config.success;
      _this._after = _config.after;
      _this._error = _config.error;
      return _this;
    }

    return Event;
  }(HookedObject), _class3.__filename = __filename$6, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "transition", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "target", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_guard", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_if", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_unless", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_before", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_after", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_success", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_error", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "testGuard", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testGuard"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testIf", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testIf"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "testUnless", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "testUnless"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBefore", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBefore"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doSuccess", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doSuccess"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doError", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doError"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$7 = '/es/statemachine/StateMachine.js';

var StateMachineInterface$1 = flowRuntime_umd.tdz(function () {
  return StateMachineInterface;
});
var StateInterface$4 = flowRuntime_umd.tdz(function () {
  return StateInterface;
});
var TransitionInterface$6 = flowRuntime_umd.tdz(function () {
  return TransitionInterface;
});
var splice$3 = [].splice;
var StateMachineTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _class3, _temp;

  var _Module$NS = Module.NS,
      HookedObject = _Module$NS.HookedObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var StateMachine = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("StateMachine", flowRuntime_umd["extends"](HookedObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("currentState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))), flowRuntime_umd.property("initialState", flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))), flowRuntime_umd.property("states", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(StateInterface$4))))), flowRuntime_umd.property("_transitionConfigs", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("previousStates", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("nextState", flowRuntime_umd.string()), flowRuntime_umd.property("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))))), flowRuntime_umd.property("_beforeReset", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterReset", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_beforeAllEvents", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterAllEvents", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_afterAllTransitions", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_errorOnAllEvents", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_withAnchorUpdateState", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_withAnchorRestoreState", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_withAnchorSave", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("doBeforeReset", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterReset", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doBeforeAllEvents", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterAllEvents", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doAfterAllTransitions", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doErrorOnAllEvents", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doWithAnchorUpdateState", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doWithAnchorRestoreState", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("doWithAnchorSave", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("registerState", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("config", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref(StateInterface$4))), flowRuntime_umd.method("removeState", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("registerEvent", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("alDepartures", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.param("asTarget", flowRuntime_umd.string()), flowRuntime_umd.param("ahEventConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("ahTransitionConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("reset", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("send", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("transitionTo", flowRuntime_umd.param("nextState", flowRuntime_umd.ref(StateInterface$4)), flowRuntime_umd.param("transition", flowRuntime_umd.ref(TransitionInterface$6)), flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("beforeAllEvents", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("afterAllTransitions", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("afterAllEvents", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("errorOnAllEvents", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("withAnchorUpdateState", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("withAnchorSave", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("withAnchorRestoreState", flowRuntime_umd.param("asMethod", flowRuntime_umd.string())), flowRuntime_umd.method("state", flowRuntime_umd.param("asState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("event", flowRuntime_umd.param("asEvent", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd["function"]())), flowRuntime_umd.param("amTransitionInitializer", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))), flowRuntime_umd.method("transition", flowRuntime_umd.param("previousStates", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("nextState", flowRuntime_umd.string()), flowRuntime_umd.param("ahConfig", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("anchor", flowRuntime_umd.ref("object")), flowRuntime_umd.param("args1", flowRuntime_umd.any())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_HookedObject) {
    _inherits(StateMachine, _HookedObject);

    var _super = _createSuper(StateMachine);

    _createClass(StateMachine, [{
      key: "doBeforeReset",
      // iplTransitionConfigs = PointerT(StateMachine.private({
      // ipsBeforeReset = PointerT(StateMachine.private({
      // ipsAfterReset = PointerT(StateMachine.private({
      // ipsBeforeAllEvents = PointerT(StateMachine.private({
      // ipsAfterAllEvents = PointerT(StateMachine.private({
      // ipsAfterAllTransitions = PointerT(StateMachine.private({
      // ipsAfterAllErrors = PointerT(StateMachine.private({
      // ipsWithAnchorUpdateState = PointerT(StateMachine.private({
      // ipsWithAnchorRestoreState = PointerT(StateMachine.private({
      // ipsWithAnchorSave = PointerT(StateMachine.private({
      value: function () {
        var _doBeforeReset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.next = 3;
                  return this._doHook(this._beforeReset, args, 'Specified "beforeReset" not found', args);

                case 3:
                  return _context.abrupt("return", _context.sent);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function doBeforeReset() {
          return _doBeforeReset.apply(this, arguments);
        }

        return doBeforeReset;
      }()
    }, {
      key: "doAfterReset",
      value: function () {
        var _doAfterReset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.next = 3;
                  return this._doHook(this._afterReset, args, 'Specified "afterReset" not found', args);

                case 3:
                  return _context2.abrupt("return", _context2.sent);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function doAfterReset() {
          return _doAfterReset.apply(this, arguments);
        }

        return doAfterReset;
      }()
    }, {
      key: "doBeforeAllEvents",
      value: function () {
        var _doBeforeAllEvents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  _context3.next = 3;
                  return this._doHook(this._beforeAllEvents, args, 'Specified "beforeAllEvents" not found', args);

                case 3:
                  return _context3.abrupt("return", _context3.sent);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function doBeforeAllEvents() {
          return _doBeforeAllEvents.apply(this, arguments);
        }

        return doBeforeAllEvents;
      }()
    }, {
      key: "doAfterAllEvents",
      value: function () {
        var _doAfterAllEvents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  _context4.next = 3;
                  return this._doHook(this._afterAllEvents, args, 'Specified "afterAllEvents" not found', args);

                case 3:
                  return _context4.abrupt("return", _context4.sent);

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function doAfterAllEvents() {
          return _doAfterAllEvents.apply(this, arguments);
        }

        return doAfterAllEvents;
      }()
    }, {
      key: "doAfterAllTransitions",
      value: function () {
        var _doAfterAllTransitions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _len5,
              args,
              _key5,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  _context5.next = 3;
                  return this._doHook(this._afterAllTransitions, args, 'Specified "afterAllTransitions" not found', args);

                case 3:
                  return _context5.abrupt("return", _context5.sent);

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function doAfterAllTransitions() {
          return _doAfterAllTransitions.apply(this, arguments);
        }

        return doAfterAllTransitions;
      }()
    }, {
      key: "doErrorOnAllEvents",
      value: function () {
        var _doErrorOnAllEvents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var _len6,
              args,
              _key6,
              _args6 = arguments;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  for (_len6 = _args6.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = _args6[_key6];
                  }

                  _context6.next = 3;
                  return this._doHook(this._errorOnAllEvents, args, 'Specified "errorOnAllEvents" not found', args);

                case 3:
                  return _context6.abrupt("return", _context6.sent);

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function doErrorOnAllEvents() {
          return _doErrorOnAllEvents.apply(this, arguments);
        }

        return doErrorOnAllEvents;
      }()
    }, {
      key: "doWithAnchorUpdateState",
      value: function () {
        var _doWithAnchorUpdateState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          var _len7,
              args,
              _key7,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  for (_len7 = _args7.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                    args[_key7] = _args7[_key7];
                  }

                  _context7.next = 3;
                  return this._doHook(this._withAnchorUpdateState, args, 'Specified "withAnchorUpdateState" not found', args);

                case 3:
                  return _context7.abrupt("return", _context7.sent);

                case 4:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function doWithAnchorUpdateState() {
          return _doWithAnchorUpdateState.apply(this, arguments);
        }

        return doWithAnchorUpdateState;
      }()
    }, {
      key: "doWithAnchorRestoreState",
      value: function () {
        var _doWithAnchorRestoreState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
          var _len8,
              args,
              _key8,
              _args8 = arguments;

          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  for (_len8 = _args8.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                    args[_key8] = _args8[_key8];
                  }

                  _context8.next = 3;
                  return this._doHook(this._withAnchorRestoreState, args, 'Specified "withAnchorRestoreState" not found', args);

                case 3:
                  return _context8.abrupt("return", _context8.sent);

                case 4:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function doWithAnchorRestoreState() {
          return _doWithAnchorRestoreState.apply(this, arguments);
        }

        return doWithAnchorRestoreState;
      }()
    }, {
      key: "doWithAnchorSave",
      value: function () {
        var _doWithAnchorSave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
          var _len9,
              args,
              _key9,
              _args9 = arguments;

          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  for (_len9 = _args9.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
                    args[_key9] = _args9[_key9];
                  }

                  _context9.next = 3;
                  return this._doHook(this._withAnchorSave, args, 'Specified "withAnchorSave" not found', args);

                case 3:
                  return _context9.abrupt("return", _context9.sent);

                case 4:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function doWithAnchorSave() {
          return _doWithAnchorSave.apply(this, arguments);
        }

        return doWithAnchorSave;
      }()
    }, {
      key: "registerState",
      value: function registerState(name) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.states[name] != null) {
          throw new Error("State with specified name ".concat(name, " is already registered"));
        }

        var vpoAnchor = this._anchor;
        var State = this.Module.NS.State;
        var state = State["new"](name, vpoAnchor, this, config);
        this.states[name] = state;

        if (state.initial) {
          this.initialState = state;
        }

        return state;
      }
    }, {
      key: "removeState",
      value: function removeState(name) {
        var removedState = this.states[name];

        if (removedState != null) {
          delete this.states[name];

          if (this.initialState === removedState) {
            this.initialState = null;
          }

          if (this.currentState === removedState) {
            this.currentState = null;
          }

          return true;
        }

        return false;
      }
    }, {
      key: "registerEvent",
      value: function registerEvent(asEvent, alDepartures, asTarget) {
        var ahEventConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var ahTransitionConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        var vlDepartues = _.castArray(alDepartures);

        var voNextState = this.states[asTarget];
        var voAnchor = this._anchor;
        var Transition = this.Module.NS.Transition;

        var _iterator = _createForOfIteratorHelper(vlDepartues),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var vsState = _step.value;
            var voState = this.states[vsState];

            if (voState != null) {
              var vsTransitionName = "".concat(voState.name, "_").concat(asEvent);
              var voTransition = Transition["new"](vsTransitionName, voAnchor, ahTransitionConfig);
              voState.defineTransition(asEvent, voNextState, voTransition, ahEventConfig);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "reset",
      value: function () {
        var _reset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
          var restoredState;
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return this.doBeforeReset();

                case 2:
                  _context10.next = 4;
                  return this.doWithAnchorRestoreState();

                case 4:
                  _context10.t0 = _context10.sent;
                  restoredState = this.states[_context10.t0];
                  this.currentState = restoredState != null ? restoredState : this.initialState;

                  if (!(this.currentState != null)) {
                    _context10.next = 10;
                    break;
                  }

                  _context10.next = 10;
                  return this.doWithAnchorUpdateState(this.currentState.name);

                case 10:
                  _context10.next = 12;
                  return this.doAfterReset();

                case 12:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function reset() {
          return _reset.apply(this, arguments);
        }

        return reset;
      }()
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(asEvent) {
          var stateMachine,
              _stateMachine$current,
              _len10,
              args,
              _key10,
              _args11 = arguments;

          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  stateMachine = this;
                  _context11.prev = 1;

                  for (_len10 = _args11.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
                    args[_key10 - 1] = _args11[_key10];
                  }

                  _context11.next = 5;
                  return stateMachine.doBeforeAllEvents.apply(stateMachine, args);

                case 5:
                  _context11.next = 7;
                  return (_stateMachine$current = stateMachine.currentState).send.apply(_stateMachine$current, [asEvent].concat(args));

                case 7:
                  _context11.next = 9;
                  return stateMachine.doAfterAllEvents.apply(stateMachine, args);

                case 9:
                  _context11.next = 15;
                  break;

                case 11:
                  _context11.prev = 11;
                  _context11.t0 = _context11["catch"](1);
                  _context11.next = 15;
                  return stateMachine.doErrorOnAllEvents(_context11.t0);

                case 15:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this, [[1, 11]]);
        }));

        function send(_x) {
          return _send.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: "transitionTo",
      value: function () {
        var _transitionTo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(nextState, transition) {
          var stateMachine,
              oldState,
              _len11,
              args,
              _key11,
              _args12 = arguments;

          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  stateMachine = this;
                  oldState = stateMachine.currentState;
                  stateMachine.currentState = nextState;
                  _context12.next = 5;
                  return stateMachine.doWithAnchorUpdateState(nextState.name);

                case 5:
                  for (_len11 = _args12.length, args = new Array(_len11 > 2 ? _len11 - 2 : 0), _key11 = 2; _key11 < _len11; _key11++) {
                    args[_key11 - 2] = _args12[_key11];
                  }

                  _context12.next = 8;
                  return stateMachine.doAfterAllTransitions.apply(stateMachine, args);

                case 8:
                  _context12.next = 10;
                  return transition.doAfter.apply(transition, args);

                case 10:
                  _context12.next = 12;
                  return nextState.doBeforeEnter.apply(nextState, args);

                case 12:
                  _context12.next = 14;
                  return nextState.doEnter.apply(nextState, args);

                case 14:
                  _context12.next = 16;
                  return stateMachine.doWithAnchorSave();

                case 16:
                  _context12.next = 18;
                  return transition.doSuccess.apply(transition, args);

                case 18:
                  _context12.next = 20;
                  return oldState.doAfterExit.apply(oldState, args);

                case 20:
                  _context12.next = 22;
                  return nextState.doAfterEnter.apply(nextState, args);

                case 22:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function transitionTo(_x2, _x3) {
          return _transitionTo.apply(this, arguments);
        }

        return transitionTo;
      }() // Mixin intializer methods

    }, {
      key: "beforeAllEvents",
      value: function beforeAllEvents(asMethod) {
        this._beforeAllEvents = asMethod;
      }
    }, {
      key: "afterAllTransitions",
      value: function afterAllTransitions(asMethod) {
        this._afterAllTransitions = asMethod;
      }
    }, {
      key: "afterAllEvents",
      value: function afterAllEvents(asMethod) {
        this._afterAllEvents = asMethod;
      }
    }, {
      key: "errorOnAllEvents",
      value: function errorOnAllEvents(asMethod) {
        this._errorOnAllEvents = asMethod;
      }
    }, {
      key: "withAnchorUpdateState",
      value: function withAnchorUpdateState(asMethod) {
        this._withAnchorUpdateState = asMethod;
      }
    }, {
      key: "withAnchorSave",
      value: function withAnchorSave(asMethod) {
        this._withAnchorSave = asMethod;
      }
    }, {
      key: "withAnchorRestoreState",
      value: function withAnchorRestoreState(asMethod) {
        this._withAnchorRestoreState = asMethod;
      }
    }, {
      key: "state",
      value: function state(asState, ahConfig) {
        this.registerState(asState, ahConfig);
      }
    }, {
      key: "event",
      value: function event(asEvent, ahConfig, amTransitionInitializer) {
        if (_.isFunction(ahConfig)) {
          amTransitionInitializer = ahConfig;
          ahConfig = {};
        }

        if (!_.isFunction(amTransitionInitializer)) {
          amTransitionInitializer = function amTransitionInitializer() {};
        }

        this.constructor._transitionConfigs = null;
        amTransitionInitializer.call(this);
        var transitionConfigs = this.constructor._transitionConfigs;
        this.constructor._transitionConfigs = null;

        var _iterator2 = _createForOfIteratorHelper(transitionConfigs),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var transitionConf = _step2.value;
            var previousStates = transitionConf.previousStates,
                nextState = transitionConf.nextState,
                transitionConfig = transitionConf.config;
            this.registerEvent(asEvent, previousStates, nextState, ahConfig, transitionConfig);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var voAnchor = this._anchor;

        if (voAnchor != null) {
          var base = voAnchor.constructor;

          if (typeof base.defineSpecialMethods === "function") {
            base.defineSpecialMethods(asEvent, this);
          }
        }
      }
    }, {
      key: "transition",
      value: function transition(previousStates, nextState, ahConfig) {
        var base = this.constructor;

        if (base._transitionConfigs == null) {
          base._transitionConfigs = [];
        }

        base._transitionConfigs.push({
          previousStates: previousStates,
          nextState: nextState,
          config: ahConfig
        });
      } // FuncG([String, Object, MaybeG(Object)], NilT)

    }]);

    function StateMachine(name, anchor) {
      var _ref, _ref2, _splice$call, _splice$call2;

      var _this;

      for (var _len12 = arguments.length, args1 = new Array(_len12 > 2 ? _len12 - 2 : 0), _key12 = 2; _key12 < _len12; _key12++) {
        args1[_key12 - 2] = arguments[_key12];
      }

      _classCallCheck(this, StateMachine);

      var config, ref;
      ref = args1, (_ref = ref, _ref2 = _toArray(_ref), args1 = _ref2.slice(0), _ref), (_splice$call = splice$3.call(args1, -1), _splice$call2 = _slicedToArray(_splice$call, 1), config = _splice$call2[0], _splice$call);

      if (config === void 0) {
        config = {};
      }

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "currentState", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "initialState", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "states", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_transitionConfigs", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeReset", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterReset", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_beforeAllEvents", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterAllEvents", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_afterAllTransitions", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_errorOnAllEvents", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_withAnchorUpdateState", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_withAnchorRestoreState", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_withAnchorSave", _descriptor13, _assertThisInitialized(_this));

      _this.states = {};
      var _config = config;
      _this._beforeReset = _config.beforeReset;
      _this._afterReset = _config.afterReset;
      _this._beforeAllEvents = _config.beforeAllEvents;
      _this._afterAllEvents = _config.afterAllEvents;
      _this._afterAllTransitions = _config.afterAllTransitions;
      _this._errorOnAllEvents = _config.errorOnAllEvents;
      _this._withAnchorUpdateState = _config.withAnchorUpdateState;
      _this._withAnchorSave = _config.withAnchorSave;
      _this._withAnchorRestoreState = _config.withAnchorRestoreState;
      return _this;
    }

    return StateMachine;
  }(HookedObject), _class3.__filename = __filename$7, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "currentState", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "initialState", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "states", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_transitionConfigs", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_beforeReset", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_afterReset", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_beforeAllEvents", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_afterAllEvents", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_afterAllTransitions", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_errorOnAllEvents", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_withAnchorUpdateState", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_withAnchorRestoreState", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_withAnchorSave", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "doBeforeReset", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeReset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterReset", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterReset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doBeforeAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doBeforeAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAfterAllTransitions", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAfterAllTransitions"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doErrorOnAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doErrorOnAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doWithAnchorUpdateState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doWithAnchorUpdateState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doWithAnchorRestoreState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doWithAnchorRestoreState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doWithAnchorSave", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doWithAnchorSave"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerEvent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerEvent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reset", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "transitionTo", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "transitionTo"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "beforeAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "afterAllTransitions", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterAllTransitions"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "afterAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "errorOnAllEvents", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "errorOnAllEvents"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "withAnchorUpdateState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "withAnchorUpdateState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "withAnchorSave", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "withAnchorSave"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "withAnchorRestoreState", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "withAnchorRestoreState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "state", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "state"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "event", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "event"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "transition", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "transition"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$8 = '/es/mixins/StateMachineMixin.js';

/*
  # Технология машины состояний проектировалась с оглядкой на
  https://github.com/aasm/aasm

class Tomato extends CoreObject
  @StateMachine 'default', ->
    @beforeAllEvents 'beforeAllEvents'
    @afterAllTransitions 'afterAllTransitions'
    @afterAllEvents 'afterAllEvents'
    @errorOnAllEvents 'errorOnAllEvents'
    @state 'first',
      initial: yes
      beforeExit: 'beforeExitFromFirst'
      afterExit: 'afterExitFromFirst'
    @state 'sleeping',
      beforeExit: 'beforeExitFromSleeping'
      afterExit: 'afterExitFromSleeping'
    @state 'running',
      beforeEnter: 'beforeEnterToRunning'
      afterEnter: 'afterEnterFromRunning'
    @event 'run',
      before: 'beforeRun'
      after: 'afterRun'
      error: 'errorOnRun'
     , =>
        @transition ['first', 'second'], 'third',
          guard: 'checkSomethingCondition'
          after: 'afterFirstSecondToThird'
        @transition 'third', 'running',
          if: 'checkThirdCondition'
          after: 'afterThirdToRunning'
        @transition ['first', 'third', 'sleeping', 'running'], 'superRunning',
          unless: 'checkThirdCondition'
          after: 'afterSleepingToRunning'

  checkSomethingCondition: ->
    console.log '!!!???? checkSomethingCondition'
    yes
  checkThirdCondition: ->
    console.log '!!!???? checkThirdCondition'
    yes
  beforeExitFromSleeping: ->
    console.log 'DFSDFSD beforeExitFromSleeping'
  beforeExitFromFirst: ->
    console.log 'DFSDFSD beforeExitFromFirst'
  afterExitFromSleeping: ->
    console.log 'DFSDFSD afterExitFromSleeping'
  afterExitFromFirst: ->
    console.log 'DFSDFSD afterExitFromFirst'
  beforeEnterToRunning: ->
    console.log 'DFSDFSD beforeEnterToRunning'
  beforeRun: ->
    console.log 'DFSDFSD beforeRun'
  afterRun: ->
    console.log 'DFSDFSD afterRun'
  afterFirstSecondToThird: (firstArg, secondArg)->
    console.log firstArg, secondArg # => {key: 'value'}, 125
    console.log 'DFSDFSD afterFirstSecondToThird'
  afterThirdToRunning: (firstArg, secondArg)->
    console.log firstArg, secondArg # => {key: 'value'}, 125
    console.log 'DFSDFSD afterThirdToRunning'
  afterSleepingToRunning: (firstArg, secondArg)->
    console.log firstArg, secondArg # => {key: 'value'}, 125
    console.log 'DFSDFSD afterSleepingToRunning'
  afterRunningToSleeping: ->
    console.log 'DFSDFSD afterRunningToSleeping'

  beforeAllEvents: ->
    console.log 'DFSDFSD beforeAllEvents'
  afterAllTransitions: ->
    console.log 'DFSDFSD afterAllTransitions'
  afterAllEvents: ->
    console.log 'DFSDFSD afterAllEvents'
  errorOnAllEvents: (err)->
    console.log 'DFSDFSD errorOnAllEvents', err, err.stack
  errorOnRun: ->
    console.log 'DFSDFSD errorOnRun'

tomato = new Tomato()
tomato.run({key: 'value'}, 125) # можно передать как аргументы какие нибудь данные, они будут переданы внутырь коллбеков указанных на транзишенах в ключах :after
console.log 'tomato.state', tomato.state
*/

/*
StateMachine flow

try
  event           beforeAllEvents
  event           before
  event           guard
    transition      guard
    old_state       beforeExit
    old_state       exit
    ...update state...
                    afterAllTransitions
    transition      after
    new_state       beforeEnter
    new_state       enter
    ...save state...
    transition      success             # if persist successful
    old_state       afterExit
    new_state       afterEnter
  event           success             # if persist successful
  event           after
  event           afterAllEvents
catch
  event           error
  event           errorOnAllEvents
*/
var hasProp$3 = {}.hasOwnProperty;
var iplStateMachines = Symbol["for"]('~stateMachines');
var StateMachineMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      StateMachine = _Module$NS.StateMachine,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      property = _Module$NS.property,
      _ = _Module$NS.Utils._;
  Module.defineMixin(__filename$8, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("initializeStateMachines"), flowRuntime_umd.staticMethod("defineSpecialMethods", flowRuntime_umd.param("asEvent", flowRuntime_umd.any()), flowRuntime_umd.param("aoStateMachine", flowRuntime_umd.any())), flowRuntime_umd.method("getStateMachine", flowRuntime_umd.param("asName", flowRuntime_umd.string())))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      _createClass(Mixin, [{
        key: "initializeStateMachines",
        value: function initializeStateMachines() {
          var configs = this.constructor.metaObject.getGroup('stateMachines', false);

          if (_.isObject(configs)) {
            for (var vsName in configs) {
              if (!hasProp$3.call(configs, vsName)) continue;
              var vmConfig = configs[vsName];

              if (this[iplStateMachines][vsName] == null) {
                this[iplStateMachines][vsName] = StateMachine["new"](vsName, this, {});
                vmConfig.call(this[iplStateMachines][vsName]);
                this[iplStateMachines][vsName].reset();
              }
            }
          }
        } // _Class.protected(_Class.static({

      }, {
        key: "getStateMachine",
        value: function getStateMachine(asName) {
          var stateMachines = this[iplStateMachines];
          return stateMachines != null ? stateMachines[asName] : undefined;
        } // @method init(...args) {
        //   super.init(...args);
        //   this[iplStateMachines] = {};
        //   this.initializeStateMachines();
        // }

      }], [{
        key: "defineSpecialMethods",
        value: function defineSpecialMethods(asEvent, aoStateMachine) {
          Reflect.defineProperty(this.prototype, asEvent, method(this.prototype, asEvent, {
            value: function () {
              var _value = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var _len,
                    args,
                    _key,
                    _args = arguments;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = _args[_key];
                        }

                        _context.next = 3;
                        return aoStateMachine.send.apply(aoStateMachine, [asEvent].concat(args));

                      case 3:
                        return _context.abrupt("return", _context.sent);

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              function value() {
                return _value.apply(this, arguments);
              }

              return value;
            }()
          }));
          var vsResetName = "reset".concat(_.upperFirst(aoStateMachine.name));
          if (this.prototype[vsResetName] == null) Reflect.defineProperty(this.prototype, vsResetName, method(this.prototype, vsResetName, {
            value: function () {
              var _value2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return aoStateMachine.reset();

                      case 2:
                        return _context2.abrupt("return", _context2.sent);

                      case 3:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              function value() {
                return _value2.apply(this, arguments);
              }

              return value;
            }()
          }));
        }
      }]);

      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        _this = _super.apply(this, arguments);
        _this[iplStateMachines] = {};

        _this.initializeStateMachines();

        return _this;
      }

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "initializeStateMachines", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeStateMachines"), _class2.prototype), _applyDecoratedDescriptor(_class2, "defineSpecialMethods", [method], Object.getOwnPropertyDescriptor(_class2, "defineSpecialMethods"), _class2), _applyDecoratedDescriptor(_class2.prototype, "getStateMachine", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getStateMachine"), _class2.prototype)), _class2)) || _class) || _class);
    property(Mixin.prototype, iplStateMachines, {
      value: null
    });
    return Mixin;
  });
});

var _dec, _class$4, _dec2, _dec3, _class2, _class3, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _class4, _temp;

var inflect = require('i')();

var cpoMetaObject$i = Symbol["for"]('~metaObject');
var cphUtilsMap$1 = Symbol["for"]('~utilsMap');
var cpoUtils = Symbol["for"]('~utils');
var cphPathMap$1 = Symbol["for"]('~pathMap');
var cphMigrationsMap$1 = Symbol["for"]('~migrationsMap');
var cphTemplatesList$1 = Symbol["for"]('~templatesList');
var cphFilesList$1 = Symbol["for"]('~filesList');
var cpoNamespace = Symbol["for"]('~namespace');
var PRODUCTION = 'production';
var DEVELOPMENT = 'development';
var CLASS_KEYS = ['arguments', 'name', 'displayName', 'caller', 'length', 'prototype', 'constructor', '__super__', 'including'];
var INSTANCE_KEYS = ['constructor', '__proto__', 'arguments', 'caller'];

var _ES = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("_ES", flowRuntime_umd.staticMethod("isExtensible"))), _dec(_class$4 = /*#__PURE__*/function () {
  function _ES() {
    _classCallCheck(this, _ES);
  }

  _createClass(_ES, null, [{
    key: "isExtensible",
    get: function get() {
      return true;
    }
  }]);

  return _ES;
}()) || _class$4);

Reflect.defineProperty(_ES, 'name', {
  get: function get() {
    return '_ES';
  }
});
Reflect.defineProperty(_ES.prototype, 'ROOT', {
  value: __dirname$3
});
Reflect.defineProperty(_ES.prototype, 'ENV', {
  value: DEVELOPMENT
});
Reflect.defineProperty(_ES.prototype, 'assert', {
  value: assert_1
});
Reflect.defineProperty(_ES.prototype, 'assign', {
  value: assign
});
Reflect.defineProperty(_ES.prototype, 'lodash', {
  value: lodash
});
Reflect.defineProperty(_ES.prototype, '_', {
  value: lodash
});
Reflect.defineProperty(_ES.prototype, 'inflect', {
  value: inflect
});
Reflect.defineProperty(_ES.prototype, 'PRODUCTION', {
  value: PRODUCTION
});
Reflect.defineProperty(_ES.prototype, 'DEVELOPMENT', {
  value: DEVELOPMENT
});
Reflect.defineProperty(_ES.prototype, 'CLASS_KEYS', {
  value: CLASS_KEYS
});
Reflect.defineProperty(_ES.prototype, 'INSTANCE_KEYS', {
  value: INSTANCE_KEYS
});
Reflect.defineProperty(_ES.prototype, 'initialize', {
  value: initialize
});
Reflect.defineProperty(_ES.prototype, 'meta', {
  value: meta$1
});
Reflect.defineProperty(_ES.prototype, 'constant', {
  value: constant
});
Reflect.defineProperty(_ES.prototype, 'util', {
  value: util$2
});
Reflect.defineProperty(_ES.prototype, 'nameBy', {
  value: nameBy
});
_ES.prototype.MetaObject = MetaObjectTF(_ES);
_ES.prototype.CoreObject = CoreObjectTF(_ES);
Reflect.defineProperty(_ES, cpoMetaObject$i, {
  enumerable: false,
  configurable: true,
  value: _ES.prototype.MetaObject["new"](_ES, undefined)
});
_ES.prototype.Proto = ProtoTF(_ES);
_ES.prototype.Module = ModuleTF(_ES); // console.log('?>?>?> CoreObject', _ES.prototype.CoreObject);

var ES = (_dec2 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ES", flowRuntime_umd["extends"](_ES.prototype.Module), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()), flowRuntime_umd.property("ENV", flowRuntime_umd.any()), flowRuntime_umd.property("PRODUCTION", flowRuntime_umd.any()), flowRuntime_umd.property("DEVELOPMENT", flowRuntime_umd.any()), flowRuntime_umd.property("CLASS_KEYS", flowRuntime_umd.any()), flowRuntime_umd.property("INSTANCE_KEYS", flowRuntime_umd.any()), flowRuntime_umd.property("assert", flowRuntime_umd.any()), flowRuntime_umd.property("assign", flowRuntime_umd.any()), flowRuntime_umd.property("copy", flowRuntime_umd.any()), flowRuntime_umd.property("filter", flowRuntime_umd.any()), flowRuntime_umd.property("forEach", flowRuntime_umd.any()), flowRuntime_umd.property("instanceOf", flowRuntime_umd.any()), flowRuntime_umd.property("isThenable", flowRuntime_umd.any()), flowRuntime_umd.property("jsonStringify", flowRuntime_umd.any()), flowRuntime_umd.property("map", flowRuntime_umd.any()), flowRuntime_umd.property("uuid", flowRuntime_umd.any()), flowRuntime_umd.property("isAsync", flowRuntime_umd.any()), flowRuntime_umd.property("lodash", flowRuntime_umd.any()), flowRuntime_umd.property("_", flowRuntime_umd.any()), flowRuntime_umd.property("inflect", flowRuntime_umd.any()), flowRuntime_umd.property("decorator", flowRuntime_umd.any()), flowRuntime_umd.property("freeze", flowRuntime_umd.any()), flowRuntime_umd.property("initialize", flowRuntime_umd.any()), flowRuntime_umd.property("initializeMixin", flowRuntime_umd.any()), flowRuntime_umd.property("initializePatch", flowRuntime_umd.any()), flowRuntime_umd.property("mixin", flowRuntime_umd.any()), flowRuntime_umd.property("patch", flowRuntime_umd.any()), flowRuntime_umd.property("plugin", flowRuntime_umd.any()), flowRuntime_umd.property("meta", flowRuntime_umd.any()), flowRuntime_umd.property("module", flowRuntime_umd.any()), flowRuntime_umd.property("nameBy", flowRuntime_umd.any()), flowRuntime_umd.property("constant", flowRuntime_umd.any()), flowRuntime_umd.property("util", flowRuntime_umd.any()), flowRuntime_umd.property("method", flowRuntime_umd.any()), flowRuntime_umd.property("prop", flowRuntime_umd.any()), flowRuntime_umd.property("property", flowRuntime_umd.any()), flowRuntime_umd.property("machine", flowRuntime_umd.any()), flowRuntime_umd.property("statemachine", flowRuntime_umd.any()), flowRuntime_umd.property("resolver", flowRuntime_umd.any()), flowRuntime_umd.property("chains", flowRuntime_umd.any()), flowRuntime_umd.property("MetaObject", flowRuntime_umd.any()), flowRuntime_umd.property("CoreObject", flowRuntime_umd.any()), flowRuntime_umd.property("Proto", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("Module"))), _dec3 = resolver(require, function (name) {
  return require(name);
}), _dec2(_class2 = initialize(_class2 = _dec3(_class2 = (_class3 = (_temp = _class4 = /*#__PURE__*/function (_ES$prototype$Module) {
  _inherits(ES, _ES$prototype$Module);

  var _super = _createSuper(ES);

  function ES() {
    var _this;

    _classCallCheck(this, ES);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "ENV", _descriptor2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "PRODUCTION", _descriptor3, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "DEVELOPMENT", _descriptor4, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "CLASS_KEYS", _descriptor5, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "INSTANCE_KEYS", _descriptor6, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "assert", _descriptor7, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "assign", _descriptor8, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "copy", _descriptor9, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "filter", _descriptor10, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "forEach", _descriptor11, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "instanceOf", _descriptor12, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "isThenable", _descriptor13, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "jsonStringify", _descriptor14, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "map", _descriptor15, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "uuid", _descriptor16, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "isAsync", _descriptor17, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "lodash", _descriptor18, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "_", _descriptor19, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "inflect", _descriptor20, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "decorator", _descriptor21, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "freeze", _descriptor22, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "initialize", _descriptor23, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "initializeMixin", _descriptor24, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "initializePatch", _descriptor25, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "mixin", _descriptor26, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "patch", _descriptor27, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "plugin", _descriptor28, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "meta", _descriptor29, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "module", _descriptor30, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "nameBy", _descriptor31, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "constant", _descriptor32, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "util", _descriptor33, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "method", _descriptor34, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "prop", _descriptor35, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "property", _descriptor36, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "machine", _descriptor37, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "statemachine", _descriptor38, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "resolver", _descriptor39, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "chains", _descriptor40, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "MetaObject", _descriptor41, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "CoreObject", _descriptor42, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "Proto", _descriptor43, _assertThisInitialized(_this));

    return _this;
  }

  _createClass(ES, null, [{
    key: "Module",
    get: function get() {
      return this;
    }
  }]);

  return ES;
}(_ES.prototype.Module), _class4.__filename = 'ES', _class4.object = {}, _temp), (_applyDecoratedDescriptor(_class3, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class3, "__filename"), _init = _init ? _init.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init;
  }
}), _class3), _applyDecoratedDescriptor(_class3, "object", [meta$1], (_init2 = Object.getOwnPropertyDescriptor(_class3, "object"), _init2 = _init2 ? _init2.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2;
  }
}), _class3), _descriptor = _applyDecoratedDescriptor(_class3.prototype, "ROOT", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$3;
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class3.prototype, "ENV", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return DEVELOPMENT;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "PRODUCTION", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return PRODUCTION;
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, "DEVELOPMENT", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return DEVELOPMENT;
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class3.prototype, "CLASS_KEYS", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return CLASS_KEYS;
  }
}), _descriptor6 = _applyDecoratedDescriptor(_class3.prototype, "INSTANCE_KEYS", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return INSTANCE_KEYS;
  }
}), _descriptor7 = _applyDecoratedDescriptor(_class3.prototype, "assert", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return assert_1;
  }
}), _descriptor8 = _applyDecoratedDescriptor(_class3.prototype, "assign", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return assign;
  }
}), _descriptor9 = _applyDecoratedDescriptor(_class3.prototype, "copy", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return copy;
  }
}), _descriptor10 = _applyDecoratedDescriptor(_class3.prototype, "filter", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return filter;
  }
}), _descriptor11 = _applyDecoratedDescriptor(_class3.prototype, "forEach", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return forEach;
  }
}), _descriptor12 = _applyDecoratedDescriptor(_class3.prototype, "instanceOf", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return instanceOf;
  }
}), _descriptor13 = _applyDecoratedDescriptor(_class3.prototype, "isThenable", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return isThenable;
  }
}), _descriptor14 = _applyDecoratedDescriptor(_class3.prototype, "jsonStringify", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return jsonStringify;
  }
}), _descriptor15 = _applyDecoratedDescriptor(_class3.prototype, "map", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return map;
  }
}), _descriptor16 = _applyDecoratedDescriptor(_class3.prototype, "uuid", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return uuid;
  }
}), _descriptor17 = _applyDecoratedDescriptor(_class3.prototype, "isAsync", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return isAsync;
  }
}), _descriptor18 = _applyDecoratedDescriptor(_class3.prototype, "lodash", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return lodash;
  }
}), _descriptor19 = _applyDecoratedDescriptor(_class3.prototype, "_", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return lodash;
  }
}), _descriptor20 = _applyDecoratedDescriptor(_class3.prototype, "inflect", [util$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return inflect;
  }
}), _descriptor21 = _applyDecoratedDescriptor(_class3.prototype, "decorator", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return decorator;
  }
}), _descriptor22 = _applyDecoratedDescriptor(_class3.prototype, "freeze", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return freeze;
  }
}), _descriptor23 = _applyDecoratedDescriptor(_class3.prototype, "initialize", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return initialize;
  }
}), _descriptor24 = _applyDecoratedDescriptor(_class3.prototype, "initializeMixin", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return initializeMixin;
  }
}), _descriptor25 = _applyDecoratedDescriptor(_class3.prototype, "initializePatch", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return initializePatch;
  }
}), _descriptor26 = _applyDecoratedDescriptor(_class3.prototype, "mixin", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return mixin;
  }
}), _descriptor27 = _applyDecoratedDescriptor(_class3.prototype, "patch", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return patch;
  }
}), _descriptor28 = _applyDecoratedDescriptor(_class3.prototype, "plugin", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return plugin;
  }
}), _descriptor29 = _applyDecoratedDescriptor(_class3.prototype, "meta", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return meta$1;
  }
}), _descriptor30 = _applyDecoratedDescriptor(_class3.prototype, "module", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return module$1;
  }
}), _descriptor31 = _applyDecoratedDescriptor(_class3.prototype, "nameBy", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return nameBy;
  }
}), _descriptor32 = _applyDecoratedDescriptor(_class3.prototype, "constant", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return constant;
  }
}), _descriptor33 = _applyDecoratedDescriptor(_class3.prototype, "util", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return util$2;
  }
}), _descriptor34 = _applyDecoratedDescriptor(_class3.prototype, "method", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return method;
  }
}), _descriptor35 = _applyDecoratedDescriptor(_class3.prototype, "prop", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return property;
  }
}), _descriptor36 = _applyDecoratedDescriptor(_class3.prototype, "property", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return property;
  }
}), _descriptor37 = _applyDecoratedDescriptor(_class3.prototype, "machine", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return machine;
  }
}), _descriptor38 = _applyDecoratedDescriptor(_class3.prototype, "statemachine", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return machine;
  }
}), _descriptor39 = _applyDecoratedDescriptor(_class3.prototype, "resolver", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return resolver;
  }
}), _descriptor40 = _applyDecoratedDescriptor(_class3.prototype, "chains", [decorator], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return chains;
  }
}), _descriptor41 = _applyDecoratedDescriptor(_class3.prototype, "MetaObject", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _ES.prototype.MetaObject;
  }
}), _descriptor42 = _applyDecoratedDescriptor(_class3.prototype, "CoreObject", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _ES.prototype.CoreObject;
  }
}), _descriptor43 = _applyDecoratedDescriptor(_class3.prototype, "Proto", [constant], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return _ES.prototype.Proto;
  }
})), _class3)) || _class2) || _class2) || _class2);
// console.log('?>?>?> CoreObject111', ES.prototype.ENV);
// console.log('?>?>?> CoreObject111', ES.prototype.CoreObject);

ES.prototype.CoreObject.constructor = ES.prototype.Proto;
ES.prototype.MetaObject.constructor = ES.prototype.Proto;
ES.prototype.Proto.Module = ES;
ES.prototype.CoreObject.Module = ES;
ES.prototype.MetaObject.Module = ES; // require('./statemachine/HookedObject').default(ES);
HookedObjectTF(ES);
StateTF(ES);
TransitionTF(ES);
EventTF(ES);
StateMachineTF(ES);
StateMachineMixinTF(ES);
Reflect.defineProperty(ES, 'onMetalize', {
  configurable: true,
  enumerable: true,
  writable: true,
  value: function value() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    Reflect.getPrototypeOf(ES).onMetalize.apply(this, args);
    this[cphPathMap$1] = undefined;
    this[cpoNamespace] = undefined;
    this[cphUtilsMap$1] = undefined;
    this[cpoUtils] = undefined;
    this[cphMigrationsMap$1] = undefined;
    this[cphTemplatesList$1] = undefined;
    this[cphFilesList$1] = undefined;
    return;
  }
});
freeze(ES);
console.log('?>?>?>00');

var __filename$9 = '/patternes/observer/Notification.js';

var NotificationInterface = flowRuntime_umd.type("NotificationInterface", flowRuntime_umd.object(flowRuntime_umd.property("getName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setBody", flowRuntime_umd["function"](flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("getBody", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("setType", flowRuntime_umd["function"](flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("getType", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))))));

var NotificationInterface$1 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var NotificationTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy; // @injectable

  var Notification = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Notification", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_name", flowRuntime_umd.string()), flowRuntime_umd.property("_body", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.property("_type", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setBody", flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("getBody", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("setType", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("getType", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("toString", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref(NotificationInterface$1))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(NotificationInterface$1)), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Notification, _CoreObject);

    var _super = _createSuper(Notification);

    _createClass(Notification, [{
      key: "getName",
      // ipsName = PointerT(Notification.private({
      // ipoBody = PointerT(Notification.private({
      // ipsType = PointerT(Notification.private({
      value: function getName() {
        return this._name;
      }
    }, {
      key: "setBody",
      value: function setBody(aoBody) {
        this._body = aoBody;
        return aoBody;
      }
    }, {
      key: "getBody",
      value: function getBody() {
        return this._body;
      }
    }, {
      key: "setType",
      value: function setType(asType) {
        this._type = asType;
        return asType;
      }
    }, {
      key: "getType",
      value: function getType() {
        return this._type;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "Notification Name: ".concat(this.getName(), "\nBody: ").concat(this.getBody() != null ? this.getBody().toString() : 'null', "\nType: ").concat(this.getType() != null ? this.getType() : 'null');
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          var _replica$notification, name, body, type, instance;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context.next = 6;
                    break;
                  }

                  _replica$notification = replica.notification, name = _replica$notification.name, body = _replica$notification.body, type = _replica$notification.type;
                  instance = this["new"](name, body, type);
                  return _context.abrupt("return", instance);

                case 6:
                  _context.next = 8;
                  return _get(_getPrototypeOf(Notification), "restoreObject", this).call(this, acModule, replica);

                case 8:
                  return _context.abrupt("return", _context.sent);

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(instance) {
          var replica;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _get(_getPrototypeOf(Notification), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context2.sent;
                  replica.notification = {
                    name: instance.getName(),
                    body: instance.getBody(),
                    type: instance.getType()
                  };
                  return _context2.abrupt("return", replica);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Notification(asName, aoBody, asType) {
      var _this;

      _classCallCheck(this, Notification);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_name", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_body", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_type", _descriptor3, _assertThisInitialized(_this));

      _this._name = asName;
      _this._body = aoBody;

      if (asType != null) {
        _this._type = asType;
      }

      return _this;
    }

    return Notification;
  }(CoreObject), _class3.__filename = __filename$9, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_name", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_body", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_type", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toString", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toString"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$a = '/patternes/observer/Notifier.js';

var ProxyInterface = flowRuntime_umd.type("ProxyInterface", flowRuntime_umd.object(flowRuntime_umd.property("getProxyName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setData", flowRuntime_umd["function"](flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getData", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("onRegister", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("onRemove", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var NotificationInterface$2 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface = flowRuntime_umd.type("MediatorInterface", flowRuntime_umd.object(flowRuntime_umd.property("getMediatorName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("getViewComponent", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("setViewComponent", flowRuntime_umd["function"](flowRuntime_umd.param("aoViewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("listNotificationInterests", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.array()))), flowRuntime_umd.property("handleNotification", flowRuntime_umd["function"](flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$2)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("onRegister", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("onRemove", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var NotificationInterface$3 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface$1 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ProxyInterface$1 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var FacadeInterface = flowRuntime_umd.type("FacadeInterface", flowRuntime_umd.object(flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("registerCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("hasCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("registerProxy", flowRuntime_umd["function"](flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("retrieveProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$1))))), flowRuntime_umd.property("removeProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$1))))), flowRuntime_umd.property("hasProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("registerMediator", flowRuntime_umd["function"](flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("retrieveMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$1))))), flowRuntime_umd.property("removeMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$1))))), flowRuntime_umd.property("hasMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("notifyObservers", flowRuntime_umd["function"](flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$3)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("sendNotification", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var NotifierInterface = flowRuntime_umd.type("NotifierInterface", flowRuntime_umd.object(flowRuntime_umd.property("sendNotification", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("initializeNotifier", flowRuntime_umd["function"](flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var NotifierInterface$1 = flowRuntime_umd.tdz(function () {
  return NotifierInterface;
});
var FacadeInterface$1 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var NotifierTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy; // @injectable

  var Notifier = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Notifier", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string("multitonKey for this Notifier not yet initialized!")), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_ApplicationModule", flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.method("facade", flowRuntime_umd["return"](flowRuntime_umd.ref(FacadeInterface$1))), flowRuntime_umd.method("sendNotification", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("send"), flowRuntime_umd.method("run", flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("initializeNotifier", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Notifier, _CoreObject);

    var _super = _createSuper(Notifier);

    function Notifier() {
      var _this;

      _classCallCheck(this, Notifier);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_ApplicationModule", _descriptor2, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(Notifier, [{
      key: "sendNotification",
      value: function sendNotification(asName, aoBody, asType) {
        if (this.facade != null) {
          this.facade.sendNotification(asName, aoBody, asType);
        }
      }
    }, {
      key: "send",
      value: function send() {
        return this.sendNotification.apply(this, arguments);
      }
    }, {
      key: "run",
      value: function () {
        var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(scriptName, data) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.facade.run(scriptName, data);

                case 2:
                  return _context.abrupt("return", _context.sent);

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function run(_x, _x2) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }, {
      key: "initializeNotifier",
      value: function initializeNotifier(asKey) {
        this._multitonKey = asKey;
      }
    }, {
      key: "ApplicationModule",
      get: function get() {
        if (this._ApplicationModule != null) {
          return this._ApplicationModule;
        } else {
          if (this._multitonKey != null) {
            var voFacade = Module.NS.Facade.getInstance(this._multitonKey);

            if (typeof voFacade.retrieveMediator == 'function') {
              var voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);

              if (typeof voMediator.getViewComponent == 'function') {
                var app = voMediator.getViewComponent();

                if (app && app.Module) {
                  return app.Module;
                } else {
                  return this.Module;
                }
              } else {
                return this.Module;
              }
            } else {
              return this.Module;
            }
          } else {
            return this.Module;
          }
        }
      }
    }, {
      key: "facade",
      get: function get() {
        if (this._multitonKey == null) {
          throw new Error(Notifier.MULTITON_MSG);
        }

        return Module.NS.Facade.getInstance(this._multitonKey);
      }
    }]);

    return Notifier;
  }(CoreObject), _class3.__filename = __filename$a, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_ApplicationModule", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "facade", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "facade"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeNotifier", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeNotifier"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$b = '/patternes/observer/Observer.js';

var NotificationInterface$4 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ObserverInterface = flowRuntime_umd.type("ObserverInterface", flowRuntime_umd.object(flowRuntime_umd.property("setNotifyMethod", flowRuntime_umd["function"](flowRuntime_umd.param("amNotifyMethod", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("setNotifyContext", flowRuntime_umd["function"](flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getNotifyMethod", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd["function"]())))), flowRuntime_umd.property("getNotifyContext", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("compareNotifyContext", flowRuntime_umd["function"](flowRuntime_umd.param("object", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("notifyObserver", flowRuntime_umd["function"](flowRuntime_umd.param("notification", flowRuntime_umd.ref(NotificationInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var NotificationInterface$5 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ObserverInterface$1 = flowRuntime_umd.tdz(function () {
  return ObserverInterface;
});
var ObserverTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy; // @injectable

  var Observer = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Observer", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_notify", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.property("_context", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("setNotifyMethod", flowRuntime_umd.param("amNotifyMethod", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("setNotifyContext", flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("getNotifyMethod", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd["function"]()))), flowRuntime_umd.method("getNotifyContext", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("compareNotifyContext", flowRuntime_umd.param("object", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("notifyObserver", flowRuntime_umd.param("notification", flowRuntime_umd.ref(NotificationInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("amNotifyMethod", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Observer, _CoreObject);

    var _super = _createSuper(Observer);

    _createClass(Observer, [{
      key: "setNotifyMethod",
      // ipoNotify = PointerT(Observer.private({
      // ipoContext = PointerT(Observer.private({
      value: function setNotifyMethod(amNotifyMethod) {
        this._notify = amNotifyMethod;
      }
    }, {
      key: "setNotifyContext",
      value: function setNotifyContext(aoNotifyContext) {
        this._context = aoNotifyContext;
      }
    }, {
      key: "getNotifyMethod",
      value: function getNotifyMethod() {
        return this._notify;
      }
    }, {
      key: "getNotifyContext",
      value: function getNotifyContext() {
        return this._context;
      }
    }, {
      key: "compareNotifyContext",
      value: function compareNotifyContext(object) {
        return object === this._context;
      }
    }, {
      key: "notifyObserver",
      value: function notifyObserver(notification) {
        this.getNotifyMethod().call(this.getNotifyContext(), notification);
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Observer(amNotifyMethod, aoNotifyContext) {
      var _this;

      _classCallCheck(this, Observer);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_notify", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_context", _descriptor2, _assertThisInitialized(_this));

      if (amNotifyMethod) {
        _this.setNotifyMethod(amNotifyMethod);
      }

      if (aoNotifyContext) {
        _this.setNotifyContext(aoNotifyContext);
      }

      return _this;
    }

    return Observer;
  }(CoreObject), _class3.__filename = __filename$b, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_notify", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_context", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "setNotifyMethod", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setNotifyMethod"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setNotifyContext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setNotifyContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getNotifyMethod", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getNotifyMethod"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getNotifyContext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getNotifyContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "compareNotifyContext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "compareNotifyContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "notifyObserver", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "notifyObserver"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$c = '/patternes/proxy/Proxy.js';

var ProxyInterface$2 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var ProxyTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      Notifier = _Module$NS.Notifier,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy; // @injectable

  var Proxy = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Proxy", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_proxyName", flowRuntime_umd.string()), flowRuntime_umd.property("_data", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("getProxyName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setData", flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("getData", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("onRegister", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRemove", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref(ProxyInterface$2))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(ProxyInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asProxyName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Proxy, _Notifier);

    var _super = _createSuper(Proxy);

    _createClass(Proxy, [{
      key: "getProxyName",
      // ipsProxyName = PointerT(Proxy.private({
      // ipoData = PointerT(Proxy.private({
      value: function getProxyName() {
        return this._proxyName;
      }
    }, {
      key: "getName",
      value: function getName() {
        return this._proxyName;
      }
    }, {
      key: "setData",
      value: function setData(ahData) {
        this._data = ahData;
        return ahData;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        return;
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        return;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          var facade, proxy;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context.next = 6;
                    break;
                  }

                  facade = acModule.NS.ApplicationFacade.getInstance(replica.multitonKey);
                  proxy = facade.retrieveProxy(replica.proxyName);
                  return _context.abrupt("return", proxy);

                case 6:
                  _context.next = 8;
                  return _get(_getPrototypeOf(Proxy), "restoreObject", this).call(this, acModule, replica);

                case 8:
                  return _context.abrupt("return", _context.sent);

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(instance) {
          var replica;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _get(_getPrototypeOf(Proxy), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context2.sent;
                  replica.multitonKey = instance._multitonKey;
                  replica.proxyName = instance.getProxyName();
                  return _context2.abrupt("return", replica);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Proxy(asProxyName, ahData) {
      var _this;

      _classCallCheck(this, Proxy);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_proxyName", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_data", _descriptor2, _assertThisInitialized(_this));

      _this._proxyName = asProxyName || _this.constructor.name;

      if (ahData != null) {
        _this.setData(ahData);
      }

      return _this;
    }

    return Proxy;
  }(Notifier), _class3.__filename = __filename$c, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_proxyName", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_data", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getProxyName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxyName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setData", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setData"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getData", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getData"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$d = '/patternes/mediator/Mediator.js';

var MediatorInterface$2 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var MediatorTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      Notifier = _Module$NS.Notifier,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Mediator = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mediator", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_mediatorName", flowRuntime_umd.string()), flowRuntime_umd.property("_viewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("getMediatorName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("getViewComponent", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("setViewComponent", flowRuntime_umd.param("aoViewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("view", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("view", flowRuntime_umd.param("aoViewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("getProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("ProxyInterface"))), flowRuntime_umd.method("addProxy", flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref("ProxyInterface")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.method("handleNotification", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref("NotificationInterface")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRegister", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRemove", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref(MediatorInterface$2))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(MediatorInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("aoViewComponent", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(Mediator, _Notifier);

    var _super = _createSuper(Mediator);

    _createClass(Mediator, [{
      key: "getMediatorName",
      // ipsMediatorName = PointerT(Mediator.private({
      // ipoViewComponent = PointerT(Mediator.private({
      value: function getMediatorName() {
        return this._mediatorName;
      }
    }, {
      key: "getName",
      value: function getName() {
        return this._mediatorName;
      }
    }, {
      key: "getViewComponent",
      value: function getViewComponent() {
        return this._viewComponent;
      }
    }, {
      key: "setViewComponent",
      value: function setViewComponent(aoViewComponent) {
        this._viewComponent = aoViewComponent;
      }
    }, {
      key: "getProxy",
      value: function getProxy(asProxyName) {
        return this.facade.retrieveProxy(asProxyName);
      }
    }, {
      key: "addProxy",
      value: function addProxy(aoProxy) {
        this.facade.registerProxy(aoProxy);
      }
    }, {
      key: "listNotificationInterests",
      value: function listNotificationInterests() {
        return [];
      }
    }, {
      key: "handleNotification",
      value: function handleNotification(aoNotification) {
        return;
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        return;
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        return;
      }
    }, {
      key: "view",
      get: function get() {
        return this.getViewComponent();
      },
      set: function set(aoViewComponent) {
        this.setViewComponent(aoViewComponent);
        return aoViewComponent;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acModule, replica) {
          var facade, mediator;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context.next = 6;
                    break;
                  }

                  facade = acModule.NS.ApplicationFacade.getInstance(replica.multitonKey);
                  mediator = facade.retrieveMediator(replica.mediatorName);
                  return _context.abrupt("return", mediator);

                case 6:
                  _context.next = 8;
                  return _get(_getPrototypeOf(Mediator), "restoreObject", this).call(this, acModule, replica);

                case 8:
                  return _context.abrupt("return", _context.sent);

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject(_x, _x2) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(instance) {
          var replica;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _get(_getPrototypeOf(Mediator), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context2.sent;
                  replica.multitonKey = instance._multitonKey;
                  replica.mediatorName = instance.getMediatorName();
                  return _context2.abrupt("return", replica);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject(_x3) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Mediator(asMediatorName, aoViewComponent) {
      var _this;

      _classCallCheck(this, Mediator);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_mediatorName", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_viewComponent", _descriptor2, _assertThisInitialized(_this));

      _this._mediatorName = asMediatorName || _this.constructor.name;

      if (aoViewComponent != null) {
        _this._viewComponent = aoViewComponent;
      }

      return _this;
    }

    return Mediator;
  }(Notifier), _class3.__filename = __filename$d, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mediatorName", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_viewComponent", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getMediatorName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getMediatorName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getViewComponent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getViewComponent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setViewComponent", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setViewComponent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "view", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "view"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "view", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "view"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$e = '/patternes/command/SimpleCommand.js';

var NotificationInterface$6 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var CommandInterface = flowRuntime_umd.type("CommandInterface", flowRuntime_umd.object(flowRuntime_umd.property("execute", flowRuntime_umd["function"](flowRuntime_umd.param("note", flowRuntime_umd.ref(NotificationInterface$6)), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var NotificationInterface$7 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var CommandInterface$1 = flowRuntime_umd.tdz(function () {
  return CommandInterface;
});
var SimpleCommandTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy; // @injectable

  var SimpleCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("SimpleCommand", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("execute", flowRuntime_umd.param("voNotification", flowRuntime_umd.ref(NotificationInterface$7)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(SimpleCommand, _Notifier);

    var _super = _createSuper(SimpleCommand);

    function SimpleCommand() {
      _classCallCheck(this, SimpleCommand);

      return _super.apply(this, arguments);
    }

    _createClass(SimpleCommand, [{
      key: "execute",
      value: function execute(voNotification) {}
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return SimpleCommand;
  }(Notifier), _class3.__filename = __filename$e, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$f = '/patternes/command/MacroCommand.js';

var NotificationInterface$8 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var CommandInterface$2 = flowRuntime_umd.tdz(function () {
  return CommandInterface;
});
var MacroCommandTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      Notifier = _Module$NS.Notifier,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy; // @injectable

  var MacroCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("MacroCommand", flowRuntime_umd["extends"](Notifier), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_subCommands", flowRuntime_umd.array(flowRuntime_umd.Class(flowRuntime_umd.ref(CoreObject)))), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$8)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("initializeMacroCommand", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addSubCommand", flowRuntime_umd.param("aClass", flowRuntime_umd.Class(flowRuntime_umd.ref(CoreObject))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Notifier) {
    _inherits(MacroCommand, _Notifier);

    var _super = _createSuper(MacroCommand);

    _createClass(MacroCommand, [{
      key: "execute",
      // iplSubCommands = MacroCommand.private({
      value: function execute(aoNotification) {
        var vlSubCommands = _toConsumableArray(this._subCommands);

        var _iterator = _createForOfIteratorHelper(vlSubCommands),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var vCommand = _step.value;
            var voCommand = vCommand["new"]();
            voCommand.initializeNotifier(this._multitonKey);
            voCommand.execute(aoNotification);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "initializeMacroCommand",
      value: function initializeMacroCommand() {
        return;
      }
    }, {
      key: "addSubCommand",
      value: function addSubCommand(aClass) {
        this._subCommands.push(aClass);

        return;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function MacroCommand() {
      var _this;

      _classCallCheck(this, MacroCommand);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_subCommands", _descriptor, _assertThisInitialized(_this));

      _this._subCommands = [];

      _this.initializeMacroCommand();

      return _this;
    }

    return MacroCommand;
  }(Notifier), _class3.__filename = __filename$f, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_subCommands", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeMacroCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeMacroCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addSubCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addSubCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$g = '/patternes/facade/Facade.js';

var NotificationInterface$9 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ControllerInterface = flowRuntime_umd.type("ControllerInterface", flowRuntime_umd.object(flowRuntime_umd.property("executeCommand", flowRuntime_umd["function"](flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$9)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("registerCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("lazyRegisterCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("hasCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("removeCommand", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var ProxyInterface$3 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var ModelInterface = flowRuntime_umd.type("ModelInterface", flowRuntime_umd.object(flowRuntime_umd.property("registerProxy", flowRuntime_umd["function"](flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$3)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$3))))), flowRuntime_umd.property("retrieveProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$3))))), flowRuntime_umd.property("hasProxy", flowRuntime_umd["function"](flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())))));

var NotificationInterface$a = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface$3 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ControllerInterface$1 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var ObserverInterface$2 = flowRuntime_umd.tdz(function () {
  return ObserverInterface;
});
var ViewInterface = flowRuntime_umd.type("ViewInterface", flowRuntime_umd.object(flowRuntime_umd.property("registerObserver", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoObserver", flowRuntime_umd.ref(ObserverInterface$2)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeObserver", flowRuntime_umd["function"](flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.union(flowRuntime_umd.ref(ControllerInterface$1), flowRuntime_umd.ref(MediatorInterface$3))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("notifyObservers", flowRuntime_umd["function"](flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$a)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("registerMediator", flowRuntime_umd["function"](flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$3)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("retrieveMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$3))))), flowRuntime_umd.property("removeMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$3))))), flowRuntime_umd.property("hasMediator", flowRuntime_umd["function"](flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())))));

var ViewInterface$1 = flowRuntime_umd.tdz(function () {
  return ViewInterface;
});
var ProxyInterface$4 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var NotificationInterface$b = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ModelInterface$1 = flowRuntime_umd.tdz(function () {
  return ModelInterface;
});
var MediatorInterface$4 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ControllerInterface$2 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var FacadeInterface$2 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var FacadeTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _init4, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy; // let container = new Container();
  // @injectable

  var Facade = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Facade", function (Facade) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string("Facade instance for this multiton key already constructed!")), flowRuntime_umd.property("_model", flowRuntime_umd.nullable(flowRuntime_umd.ref(ModelInterface$1))), flowRuntime_umd.property("_view", flowRuntime_umd.nullable(flowRuntime_umd.ref(ViewInterface$1))), flowRuntime_umd.property("_controller", flowRuntime_umd.nullable(flowRuntime_umd.ref(ControllerInterface$2))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(FacadeInterface$2))))), flowRuntime_umd.method("_initializeModel", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeController", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeView", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeFacade", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(Facade))), flowRuntime_umd.method("remove", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("registerCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.ref(CoreObject))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addCommand", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("lazyRegisterCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("registerProxy", flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addProxy", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("lazyRegisterProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd.param("asProxyClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("retrieveProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)))), flowRuntime_umd.method("getProxy", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)))), flowRuntime_umd.method("removeProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$4)))), flowRuntime_umd.method("hasProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("registerMediator", flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addMediator", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("retrieveMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)))), flowRuntime_umd.method("getMediator", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)))), flowRuntime_umd.method("removeMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$4)))), flowRuntime_umd.method("hasMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("notifyObservers", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$b)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("sendNotification", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("asType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("send", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("run", flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("initializeNotifier", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("hasCore", flowRuntime_umd.param("key", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("removeCore", flowRuntime_umd.param("key", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(FacadeInterface$2)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(FacadeInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string()))];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Facade, _CoreObject);

    var _super = _createSuper(Facade);

    _createClass(Facade, [{
      key: "_initializeModel",
      // ipoModel = PointerT(Facade.protected({
      // ipoView = PointerT(Facade.protected({
      // ipoController = PointerT(Facade.protected({
      // ipsMultitonKey = PointerT(Facade.protected({
      // cphInstanceMap = PointerT(Facade.protected(Facade.static({
      // ipmInitializeModel = PointerT(Facade.protected({
      value: function _initializeModel() {
        if (this._model == null) {
          this._model = Module.NS.Model.getInstance(this._multitonKey);
        } // container.bind("Model").to(Module.NS.Model);
        // if (this._model == null) {
        //   this._model = container.get("Model").getInstance(this._multitonKey);
        // }

      } // ipmInitializeController = PointerT(Facade.protected({

    }, {
      key: "_initializeController",
      value: function _initializeController() {
        if (this._controller == null) {
          this._controller = Module.NS.Controller.getInstance(this._multitonKey);
        } // container.bind("Controller").to(Module.NS.Controller);
        // if (this._controller == null) {
        //   this._controller = container.get("Controller").getInstance(this._multitonKey);
        // }

      } // ipmInitializeView = PointerT(Facade.protected({

    }, {
      key: "_initializeView",
      value: function _initializeView() {
        if (this._view == null) {
          this._view = Module.NS.View.getInstance(this._multitonKey);
        } // container.bind("View").to(Module.NS.View);
        // if (this._view == null) {
        //   this._view = container.get("View").getInstance(this._multitonKey);
        // }

      } // ipmInitializeFacade = PointerT(Facade.protected({

    }, {
      key: "_initializeFacade",
      value: function _initializeFacade() {
        this._initializeModel();

        this._initializeController();

        this._initializeView();
      }
    }, {
      key: "remove",
      value: function remove() {
        Module.NS.Model.removeModel(this._multitonKey);
        Module.NS.Controller.removeController(this._multitonKey);
        Module.NS.View.removeView(this._multitonKey); // container.get("Model").removeModel(this._multitonKey);
        // container.get("Controller").removeController(this._multitonKey);
        // container.get("View").removeView(this._multitonKey);

        this._model = undefined;
        this._view = undefined;
        this._controller = undefined;
        Module.NS.Facade._instanceMap[this._multitonKey] = undefined;
        delete Module.NS.Facade._instanceMap[this._multitonKey];
      }
    }, {
      key: "registerCommand",
      value: function registerCommand(asNotificationName, aCommand) {
        this._controller.registerCommand(asNotificationName, aCommand);
      }
    }, {
      key: "addCommand",
      value: function addCommand() {
        return this.registerCommand.apply(this, arguments);
      }
    }, {
      key: "lazyRegisterCommand",
      value: function lazyRegisterCommand(asNotificationName, asClassName) {
        this._controller.lazyRegisterCommand(asNotificationName, asClassName);
      }
    }, {
      key: "removeCommand",
      value: function removeCommand(asNotificationName) {
        this._controller.removeCommand(asNotificationName);
      }
    }, {
      key: "hasCommand",
      value: function hasCommand(asNotificationName) {
        return this._controller.hasCommand(asNotificationName);
      }
    }, {
      key: "registerProxy",
      value: function registerProxy(aoProxy) {
        this._model.registerProxy(aoProxy);
      }
    }, {
      key: "addProxy",
      value: function addProxy() {
        return this.registerProxy.apply(this, arguments);
      }
    }, {
      key: "lazyRegisterProxy",
      value: function lazyRegisterProxy(asProxyName, asProxyClassName, ahData) {
        this._model.lazyRegisterProxy(asProxyName, asProxyClassName, ahData);
      }
    }, {
      key: "retrieveProxy",
      value: function retrieveProxy(asProxyName) {
        return this._model.retrieveProxy(asProxyName);
      }
    }, {
      key: "getProxy",
      value: function getProxy() {
        return this.retrieveProxy.apply(this, arguments);
      }
    }, {
      key: "removeProxy",
      value: function removeProxy(asProxyName) {
        return this._model.removeProxy(asProxyName);
      }
    }, {
      key: "hasProxy",
      value: function hasProxy(asProxyName) {
        return this._model.hasProxy(asProxyName);
      }
    }, {
      key: "registerMediator",
      value: function registerMediator(aoMediator) {
        if (this._view) {
          this._view.registerMediator(aoMediator);
        }
      }
    }, {
      key: "addMediator",
      value: function addMediator() {
        return this.registerMediator.apply(this, arguments);
      }
    }, {
      key: "retrieveMediator",
      value: function retrieveMediator(asMediatorName) {
        if (this._view) {
          return this._view.retrieveMediator(asMediatorName);
        }
      }
    }, {
      key: "getMediator",
      value: function getMediator() {
        return this.retrieveMediator.apply(this, arguments);
      }
    }, {
      key: "removeMediator",
      value: function removeMediator(asMediatorName) {
        if (this._view) {
          return this._view.removeMediator(asMediatorName);
        }
      }
    }, {
      key: "hasMediator",
      value: function hasMediator(asMediatorName) {
        if (this._view) {
          return this._view.hasMediator(asMediatorName);
        }
      }
    }, {
      key: "notifyObservers",
      value: function notifyObservers(aoNotification) {
        if (this._view) {
          this._view.notifyObservers(aoNotification);
        }
      }
    }, {
      key: "sendNotification",
      value: function sendNotification(asName, aoBody, asType) {
        this.notifyObservers(Module.NS.Notification["new"](asName, aoBody, asType));
      }
    }, {
      key: "send",
      value: function send() {
        return this.sendNotification.apply(this, arguments);
      }
    }, {
      key: "run",
      value: function () {
        var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(scriptName, data) {
          var voFacade, voMediator;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(this._multitonKey != null)) {
                    _context.next = 8;
                    break;
                  }

                  voFacade = Facade.getInstance(this._multitonKey);

                  if (!(typeof voFacade.retrieveMediator == 'function')) {
                    _context.next = 8;
                    break;
                  }

                  voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);

                  if (!(typeof voMediator.run == 'function')) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 7;
                  return voMediator.run(scriptName, data);

                case 7:
                  return _context.abrupt("return", _context.sent);

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function run(_x, _x2) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }, {
      key: "initializeNotifier",
      value: function initializeNotifier(asKey) {
        this._multitonKey = asKey;
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey) {
        var facade = Facade["new"]('nnnnnn');
        console.log('facade>>>>', Facade, facade, facade instanceof Facade);

        if (Facade._instanceMap[asKey] == null) {
          Facade._instanceMap[asKey] = Facade["new"](asKey);
        }

        return Facade._instanceMap[asKey];
      }
    }, {
      key: "hasCore",
      value: function hasCore(key) {
        return !!Facade._instanceMap[key];
      }
    }, {
      key: "removeCore",
      value: function removeCore(key) {
        if (!Facade._instanceMap[key]) {
          return;
        }

        Module.NS.Model.removeModel(key);
        Module.NS.View.removeView(key);
        Module.NS.Controller.removeController(key); // container.get("Model").removeModel(key);
        // container.get("View").removeView(key);
        // container.get("Controller").removeController(key);

        delete Facade._instanceMap[key];
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(acModule, replica) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : undefined) === this.name && (replica != null ? replica.type : undefined) === 'instance')) {
                    _context2.next = 5;
                    break;
                  }

                  if (Facade._instanceMap[replica.multitonKey] == null) {
                    acModule.NS[replica.application]["new"]();
                  }

                  return _context2.abrupt("return", acModule.NS.ApplicationFacade.getInstance(replica.multitonKey));

                case 5:
                  _context2.next = 7;
                  return _get(_getPrototypeOf(Facade), "restoreObject", this).call(this, acModule, replica);

                case 7:
                  return _context2.abrupt("return", _context2.sent);

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function restoreObject(_x3, _x4) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(instance) {
          var replica, applicationMediator, application;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _get(_getPrototypeOf(Facade), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context3.sent;
                  replica.multitonKey = instance._multitonKey;
                  applicationMediator = instance.retrieveMediator(APPLICATION_MEDIATOR);
                  application = applicationMediator.getViewComponent().constructor.name;
                  replica.application = application;
                  return _context3.abrupt("return", replica);

                case 8:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function replicateObject(_x5) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Facade(asKey) {
      var _this;

      _classCallCheck(this, Facade);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_model", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_view", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_controller", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor4, _assertThisInitialized(_this));

      console.log('>?>?>? Facade', asKey);
      assert(Facade._instanceMap[asKey] == null, Facade.MULTITON_MSG);
      console.log('>?>?>? Facade before initializeNotifier');

      _this.initializeNotifier(asKey);

      console.log('>?>?>? Facade after initializeNotifier', _this._multitonKey);
      Facade._instanceMap[asKey] = _assertThisInitialized(_this);
      console.log('>?>?>? Facade after Facade._instanceMap[asKey] = this');

      _this._initializeFacade();

      console.log('>?>?>? Facade after _initializeFacade');
      return _this;
    }

    return Facade;
  }(CoreObject), _class3.__filename = __filename$g, _class3.object = {}, _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_model", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_view", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_controller", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "_initializeModel", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeModel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeController", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeController"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeView", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeView"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeFacade", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeFacade"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "notifyObservers", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "notifyObservers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "send", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "send"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeNotifier", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeNotifier"), _class2.prototype), _applyDecoratedDescriptor(_class2, "hasCore", [method], Object.getOwnPropertyDescriptor(_class2, "hasCore"), _class2), _applyDecoratedDescriptor(_class2, "removeCore", [method], Object.getOwnPropertyDescriptor(_class2, "removeCore"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$h = '/patternes/core/View.js';

var ViewInterface$2 = flowRuntime_umd.tdz(function () {
  return ViewInterface;
});
var ObserverInterface$3 = flowRuntime_umd.tdz(function () {
  return ObserverInterface;
});
var NotificationInterface$c = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MediatorInterface$5 = flowRuntime_umd.tdz(function () {
  return MediatorInterface;
});
var ControllerInterface$3 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var ViewTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _init3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._; // let container = new Container();

  var View = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("View", function (View) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string("View instance for this multiton key already constructed!")), flowRuntime_umd.property("_mediatorMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5))))), flowRuntime_umd.property("_observerMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(ObserverInterface$3)))))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ViewInterface$2))))), flowRuntime_umd.property("_ApplicationModule", flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(View))), flowRuntime_umd.staticMethod("removeView", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("registerObserver", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoObserver", flowRuntime_umd.ref(ObserverInterface$3)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeObserver", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aoNotifyContext", flowRuntime_umd.union(flowRuntime_umd.ref(ControllerInterface$3), flowRuntime_umd.ref(MediatorInterface$5))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("notifyObservers", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$c)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("registerMediator", flowRuntime_umd.param("aoMediator", flowRuntime_umd.ref(MediatorInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addMediator", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("retrieveMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5)))), flowRuntime_umd.method("getMediator", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("removeMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(MediatorInterface$5)))), flowRuntime_umd.method("hasMediator", flowRuntime_umd.param("asMediatorName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("_initializeView", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string()))];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(View, _CoreObject);

    var _super = _createSuper(View);

    _createClass(View, [{
      key: "registerObserver",
      value: function registerObserver(asNotificationName, aoObserver) {
        var vlObservers = this._observerMap[asNotificationName];

        if (vlObservers != null) {
          vlObservers.push(aoObserver);
        } else {
          this._observerMap[asNotificationName] = [aoObserver];
        }
      }
    }, {
      key: "removeObserver",
      value: function removeObserver(asNotificationName, aoNotifyContext) {
        var vlObservers = this._observerMap[asNotificationName] || [];

        for (var _iType2 = flowRuntime_umd.number(), i = 0; i < vlObservers.length; i++) {
          if (vlObservers[i].compareNotifyContext(aoNotifyContext) === true) {
            vlObservers.splice(i, 1);
            break;
          }
        }

        if (vlObservers.length === 0) {
          delete this._observerMap[asNotificationName];
        }
      }
    }, {
      key: "notifyObservers",
      value: function notifyObservers(aoNotification) {
        var vsNotificationName = aoNotification.getName();
        var vlObservers = this._observerMap[vsNotificationName];

        if (vlObservers != null) {
          var vlNewObservers = _toConsumableArray(vlObservers);

          var _iterator = _createForOfIteratorHelper(vlNewObservers),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var voObserver = _step.value;
              // ((voObserver) => {
              voObserver.notifyObserver(aoNotification); // })(voObserver);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    }, {
      key: "registerMediator",
      value: function registerMediator(aoMediator) {
        var vsName = aoMediator.getMediatorName(); // Do not allow re-registration (you must removeMediator first).

        if (this._mediatorMap[vsName] != null) {
          return;
        }

        aoMediator.initializeNotifier(this._multitonKey); // Register the Mediator for retrieval by name.

        this._mediatorMap[vsName] = aoMediator; // container.bind(vsName).to(aoMediator);
        // Get Notification interests, if any.

        var vlInterests = aoMediator.listNotificationInterests() || [];

        if (vlInterests.length > 0) {
          var voObserver = Module.NS.Observer["new"](aoMediator.handleNotification, aoMediator);

          var _iterator2 = _createForOfIteratorHelper(vlInterests),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var vsInterest = _step2.value;
              // ((vsInterest) => {
              this.registerObserver(vsInterest, voObserver); // })(vsInterest);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } // Alert the mediator that it has been registered.


        aoMediator.onRegister();
      }
    }, {
      key: "addMediator",
      value: function addMediator() {
        return this.registerMediator.apply(this, arguments);
      }
    }, {
      key: "retrieveMediator",
      value: function retrieveMediator(asMediatorName) {
        return this._mediatorMap[asMediatorName] || null; // return container.get(asMediatorName) || null;
      }
    }, {
      key: "getMediator",
      value: function getMediator() {
        return this.retrieveMediator.apply(this, arguments);
      }
    }, {
      key: "removeMediator",
      value: function removeMediator(asMediatorName) {
        var voMediator = this._mediatorMap[asMediatorName]; // const voMediator = container.get(asMediatorName);

        if (voMediator == null) {
          return null;
        } // Get Notification interests, if any.


        var vlInterests = voMediator.listNotificationInterests(); // For every notification this mediator is interested in...

        var _iterator3 = _createForOfIteratorHelper(vlInterests),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var vsInterest = _step3.value;
            // ((vsInterest) => {
            this.removeObserver(vsInterest, voMediator); // })(vsInterest);
          } // remove the mediator from the map

        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        this._mediatorMap[asMediatorName] = undefined;
        delete this._mediatorMap[asMediatorName]; // Alert the mediator that it has been removed

        voMediator.onRemove();
        return voMediator;
      }
    }, {
      key: "hasMediator",
      value: function hasMediator(asMediatorName) {
        return this._mediatorMap[asMediatorName] != null; // return container.get(asMediatorName) != null;
      }
    }, {
      key: "_initializeView",
      value: function _initializeView() {
        return;
      }
    }, {
      key: "ApplicationModule",
      // iphMediatorMap = PointerT(View.protected({
      // iphObserverMap = PointerT(View.protected({
      // ipsMultitonKey = PointerT(View.protected({
      // cphInstanceMap = PointerT(View.private(View.static({
      // ipcApplicationModule = PointerT(Model.protected({
      get: function get() {
        if (this._ApplicationModule != null) {
          return this._ApplicationModule;
        } else {
          if (this._multitonKey != null) {
            var voFacade = Module.NS.Facade.getInstance(this._multitonKey);

            if (typeof voFacade.retrieveMediator == 'function') {
              var voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);

              if (typeof voMediator.getViewComponent == 'function') {
                var app = voMediator.getViewComponent();

                if (app && app.Module) {
                  return app.Module;
                } else {
                  return this.Module;
                }
              } else {
                return this.Module;
              }
            } else {
              return this.Module;
            }
          } else {
            return this.Module;
          }
        }
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey) {
        if (!asKey) {
          return null;
        }

        if (View._instanceMap[asKey] == null) {
          View._instanceMap[asKey] = View["new"](asKey);
        }

        return View._instanceMap[asKey];
      }
    }, {
      key: "removeView",
      value: function removeView(asKey) {
        var voView = View._instanceMap[asKey];

        if (voView != null) {
          var _iterator4 = _createForOfIteratorHelper(Reflect.ownKeys(voView._mediatorMap)),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var asMediatorName = _step4.value;
              voView.removeMediator(asMediatorName);
            } // for (const asMediatorName of container._bindingDictionary._map) {
            //   voView.removeMediator(asMediatorName[0]);
            // }

          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          View._instanceMap[asKey] = undefined;
          delete View._instanceMap[asKey];
        }
      }
    }]);

    function View(asKey) {
      var _this;

      _classCallCheck(this, View);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_mediatorMap", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_observerMap", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_ApplicationModule", _descriptor4, _assertThisInitialized(_this));

      assert(View._instanceMap[asKey] == null, View.MULTITON_MSG);
      _this._multitonKey = asKey;
      View._instanceMap[asKey] = _assertThisInitialized(_this);
      _this._mediatorMap = {};
      _this._observerMap = {};

      _this._initializeView();

      return _this;
    }

    return View;
  }(CoreObject), _class3.__filename = __filename$h, _class3.object = {}, _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mediatorMap", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_observerMap", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_ApplicationModule", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2, "removeView", [method], Object.getOwnPropertyDescriptor(_class2, "removeView"), _class2), _applyDecoratedDescriptor(_class2.prototype, "registerObserver", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerObserver"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeObserver", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeObserver"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "notifyObservers", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "notifyObservers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasMediator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasMediator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeView", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeView"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$i = '/patternes/core/Model.js';

var ProxyInterface$5 = flowRuntime_umd.tdz(function () {
  return ProxyInterface;
});
var ModelInterface$2 = flowRuntime_umd.tdz(function () {
  return ModelInterface;
});
var ModelTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _descriptor3, _init4, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._; // let container = new Container();

  var Model = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Model", function (Model) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string()), flowRuntime_umd.property("_proxyMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5))))), flowRuntime_umd.property("_metaProxyMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("className", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("data", flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ModelInterface$2))))), flowRuntime_umd.property("_ApplicationModule", flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(Model))), flowRuntime_umd.staticMethod("removeModel", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("registerProxy", flowRuntime_umd.param("aoProxy", flowRuntime_umd.ref(ProxyInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addProxy", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("removeProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5)))), flowRuntime_umd.method("retrieveProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(ProxyInterface$5)))), flowRuntime_umd.method("getProxy", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("hasProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("lazyRegisterProxy", flowRuntime_umd.param("asProxyName", flowRuntime_umd.string()), flowRuntime_umd.param("asProxyClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeModel", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string()))];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Model, _CoreObject);

    var _super = _createSuper(Model);

    _createClass(Model, [{
      key: "registerProxy",
      value: function registerProxy(aoProxy) {
        aoProxy.initializeNotifier(this._multitonKey);
        this._proxyMap[aoProxy.getName()] = aoProxy; // container.bind(aoProxy.getProxyName()).to(aoProxy);

        aoProxy.onRegister();
      }
    }, {
      key: "addProxy",
      value: function addProxy() {
        return this.registerProxy.apply(this, arguments);
      }
    }, {
      key: "removeProxy",
      value: function removeProxy(asProxyName) {
        var voProxy = this._proxyMap[asProxyName]; // const voProxy = container.get(asProxyName);

        if (voProxy) {
          this._proxyMap[asProxyName] = undefined;
          this._metaProxyMap[asProxyName] = undefined;
          delete this._proxyMap[asProxyName];
          delete this._metaProxyMap[asProxyName];
          voProxy.onRemove();
        }

        return voProxy;
      }
    }, {
      key: "retrieveProxy",
      value: function retrieveProxy(asProxyName) {
        if (this._proxyMap[asProxyName] == null) {
          // if (!container.isBoundNamed(asProxyName)) {
          var _ref = this._metaProxyMap[asProxyName] || {},
              className = _ref.className,
              _ref$data = _ref.data,
              data = _ref$data === void 0 ? {} : _ref$data;

          if (!_.isEmpty(className)) {
            var voClass = this.ApplicationModule.NS[className];
            this.registerProxy(voClass["new"](asProxyName, data));
          }
        }

        return this._proxyMap[asProxyName] || null; // return container.get(asProxyName) || null;
      }
    }, {
      key: "getProxy",
      value: function getProxy() {
        return this.retrieveProxy.apply(this, arguments);
      }
    }, {
      key: "hasProxy",
      value: function hasProxy(asProxyName) {
        return this._proxyMap[asProxyName] != null || this._metaProxyMap[asProxyName] != null; // return (container.get(asProxyName) != null) || (this._metaProxyMap[asProxyName] != null);
      }
    }, {
      key: "lazyRegisterProxy",
      value: function lazyRegisterProxy(asProxyName, asProxyClassName, ahData) {
        this._metaProxyMap[asProxyName] = {
          className: asProxyClassName,
          data: ahData
        };
      }
    }, {
      key: "_initializeModel",
      value: function _initializeModel() {
        return;
      }
    }, {
      key: "ApplicationModule",
      // iphProxyMap = PointerT(Model.private({
      // iphMetaProxyMap = PointerT(Model.private({
      // ipsMultitonKey = PointerT(Model.protected({
      // cphInstanceMap = PointerT(Model.private(Model.static({
      // ipcApplicationModule = PointerT(Model.protected({
      get: function get() {
        if (this._ApplicationModule != null) {
          return this._ApplicationModule;
        } else {
          if (this._multitonKey != null) {
            var voFacade = Module.NS.Facade.getInstance(this._multitonKey);

            if (typeof voFacade.retrieveMediator == 'function') {
              var voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);

              if (typeof voMediator.getViewComponent == 'function') {
                var app = voMediator.getViewComponent();

                if (app && app.Module) {
                  return app.Module;
                } else {
                  return this.Module;
                }
              } else {
                return this.Module;
              }
            } else {
              return this.Module;
            }
          } else {
            return this.Module;
          }
        }
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey) {
        if (!asKey) {
          return null;
        } // console.log('>>>>???/ Model.getInstance 111', asKey, Model._instanceMap[asKey]);


        if (Model._instanceMap[asKey] == null) {
          Model._instanceMap[asKey] = Model["new"](asKey);
        } // const mmm = Model._instanceMap[asKey];
        // console.log('>>>>???/ Model.getInstance 222', asKey, mmm);
        // (mmm: ModelInterface);
        // console.log('>>>>???/ Model.getInstance 333', asKey);


        return Model._instanceMap[asKey];
      }
    }, {
      key: "removeModel",
      value: function removeModel(asKey) {
        var voModel = Model._instanceMap[asKey];

        if (voModel != null) {
          var _iterator = _createForOfIteratorHelper(Reflect.ownKeys(voModel._proxyMap)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var asProxyName = _step.value;
              voModel.removeProxy(asProxyName);
            } // for (const asProxyName of container._bindingDictionary._map) {
            //   voModel.removeProxy(asProxyName[0]);
            // }

          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          Model._instanceMap[asKey] = undefined;
          delete Model._instanceMap[asKey];
        }
      }
    }]);

    function Model(asKey) {
      var _this;

      _classCallCheck(this, Model);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_proxyMap", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_metaProxyMap", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_ApplicationModule", _descriptor4, _assertThisInitialized(_this));

      assert(Model._instanceMap[asKey] == null, Model.MULTITON_MSG);
      _this._multitonKey = asKey;
      Model._instanceMap[asKey] = _assertThisInitialized(_this);
      _this._proxyMap = {};
      _this._metaProxyMap = {};

      _this._initializeModel();

      return _this;
    }

    return Model;
  }(CoreObject), _class3.__filename = __filename$i, _class3.object = {}, _class3.MULTITON_MSG = 'Model instance for this multiton key already constructed!', _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_proxyMap", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_metaProxyMap", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_ApplicationModule", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2, "removeModel", [method], Object.getOwnPropertyDescriptor(_class2, "removeModel"), _class2), _applyDecoratedDescriptor(_class2.prototype, "registerProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterProxy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterProxy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeModel", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeModel"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$j = '/patternes/core/Controller.js';

var NotificationInterface$d = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var CommandInterface$3 = flowRuntime_umd.tdz(function () {
  return CommandInterface;
});
var ViewInterface$3 = flowRuntime_umd.tdz(function () {
  return ViewInterface;
});
var ControllerInterface$4 = flowRuntime_umd.tdz(function () {
  return ControllerInterface;
});
var ControllerTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _init4, _descriptor5, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._; // let container = new Container();
  // @injectable

  var Controller = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Controller", function (Controller) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("MULTITON_MSG", flowRuntime_umd.string()), flowRuntime_umd.property("_view", flowRuntime_umd.ref(ViewInterface$3)), flowRuntime_umd.property("_commandMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.ref(CoreObject)))))), flowRuntime_umd.property("_classNames", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd.property("_multitonKey", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.staticProperty("_instanceMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ControllerInterface$4))))), flowRuntime_umd.property("_ApplicationModule", flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.method("ApplicationModule", flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.ref("Module")))), flowRuntime_umd.staticMethod("getInstance", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(Controller))), flowRuntime_umd.staticMethod("removeController", flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("executeCommand", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$d)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("registerCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("aCommand", flowRuntime_umd.Class(flowRuntime_umd.ref(CoreObject))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addCommand", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("lazyRegisterCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd.param("asClassName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("hasCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removeCommand", flowRuntime_umd.param("asNotificationName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_initializeController", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asKey", flowRuntime_umd.string()))];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Controller, _CoreObject);

    var _super = _createSuper(Controller);

    _createClass(Controller, [{
      key: "executeCommand",
      value: function executeCommand(aoNotification) {
        if (!aoNotification) {
          return;
        }

        var vCommand;
        var vsName = aoNotification.getName();
        vCommand = this._commandMap[vsName];
        vCommand = container.get(vsName);

        if (vCommand == null) {
          var vsClassName = this._classNames[vsName];

          if (!_.isEmpty(vsClassName)) {
            vCommand = this._commandMap[vsName] = this.ApplicationModule.NS[vsClassName]; // container.bind(vsName).to(this.ApplicationModule.NS[vsClassName]);
            // vCommand = container.get(vsName);
          }
        }

        if (vCommand != null) {
          var voCommand = vCommand["new"]();
          voCommand.initializeNotifier(this._multitonKey);
          voCommand.execute(aoNotification);
        }
      }
    }, {
      key: "registerCommand",
      value: function registerCommand(asNotificationName, aCommand) {
        if (!this._commandMap[asNotificationName]) {
          this._view.registerObserver(asNotificationName, Module.NS.Observer["new"](this.executeCommand, this));

          this._commandMap[asNotificationName] = aCommand;
        } // if (!container.get(asNotificationName)) {
        //   this._view.registerObserver(asNotificationName, Module.NS.Observer.new(this.executeCommand, this));
        //   container.bind(asNotificationName).to(aCommand);
        // }

      }
    }, {
      key: "addCommand",
      value: function addCommand() {
        return this.registerCommand.apply(this, arguments);
      }
    }, {
      key: "lazyRegisterCommand",
      value: function lazyRegisterCommand(asNotificationName, asClassName) {
        if (asClassName == null) {
          asClassName = asNotificationName;
        }

        if (!this._commandMap[asNotificationName]) {
          this._view.registerObserver(asNotificationName, Module.NS.Observer["new"](this.executeCommand, this));

          this._classNames[asNotificationName] = asClassName;
        } // if (!container.get(asNotificationName)) {
        //   this._view.registerObserver(asNotificationName, Module.NS.Observer.new(this.executeCommand, this));
        //   this._classNames[asNotificationName] = asClassName;
        // }

      }
    }, {
      key: "hasCommand",
      value: function hasCommand(asNotificationName) {
        return this._commandMap[asNotificationName] != null || this._classNames[asNotificationName] != null; // return (container.get(asNotificationName) != null) || (this._classNames[asNotificationName] != null);
      }
    }, {
      key: "removeCommand",
      value: function removeCommand(asNotificationName) {
        if (this.hasCommand(asNotificationName)) {
          this._view.removeObserver(asNotificationName, this);

          this._commandMap[asNotificationName] = undefined;
          this._classNames[asNotificationName] = undefined;
          delete this._commandMap[asNotificationName];
          delete this._classNames[asNotificationName];
        }
      }
    }, {
      key: "_initializeController",
      value: function _initializeController() {
        this._view = Module.NS.View.getInstance(this._multitonKey);
      }
    }, {
      key: "ApplicationModule",
      // ipoView         = PointerT @private _view: ViewInterface
      // iphCommandMap   = PointerT @private _commandMap: DictG String, MaybeG SubsetG CommandInterface
      // iphClassNames   = PointerT @private _classNames: DictG String, MaybeG String
      // ipsMultitonKey  = PointerT @protected _multitonKey: MaybeG String
      // cphInstanceMap  = PointerT @private @static _instanceMap: DictG(String, MaybeG ControllerInterface),
      //   default: {}
      // ipcApplicationModule = PointerT @protected _ApplicationModule: MaybeG SubsetG Module
      get: function get() {
        if (this._ApplicationModule != null) {
          return this._ApplicationModule;
        } else {
          if (this._multitonKey != null) {
            var voFacade = Module.NS.Facade.getInstance(this._multitonKey);

            if (typeof voFacade.retrieveMediator == 'function') {
              var voMediator = voFacade.retrieveMediator(APPLICATION_MEDIATOR);

              if (typeof voMediator.getViewComponent == 'function') {
                var app = voMediator.getViewComponent();

                if (app && app.Module) {
                  return app.Module;
                } else {
                  return this.Module;
                }
              } else {
                return this.Module;
              }
            } else {
              return this.Module;
            }
          } else {
            return this.Module;
          }
        }
      }
    }], [{
      key: "getInstance",
      value: function getInstance(asKey) {
        if (!asKey) {
          return null;
        }

        if (Controller._instanceMap[asKey] == null) {
          Controller._instanceMap[asKey] = Controller["new"](asKey);
        }

        return Controller._instanceMap[asKey];
      }
    }, {
      key: "removeController",
      value: function removeController(asKey) {
        var voController = Controller._instanceMap[asKey];

        if (voController != null) {
          var _iterator = _createForOfIteratorHelper(Reflect.ownKeys(voController._commandMap)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var asNotificationName = _step.value;
              voController.removeCommand(asNotificationName);
            } // for (const asNotificationName of container._bindingDictionary._map) {
            //   voController.removeCommand(asNotificationName[0]);
            // }

          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          Controller._instanceMap[asKey] = undefined;
          delete Controller._instanceMap[asKey];
        }
      }
    }]);

    function Controller(asKey) {
      var _this;

      _classCallCheck(this, Controller);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_view", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_commandMap", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_classNames", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_multitonKey", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_ApplicationModule", _descriptor5, _assertThisInitialized(_this));

      assert(Controller._instanceMap[asKey] == null, Controller.MULTITON_MSG);
      _this._multitonKey = asKey;
      Controller._instanceMap[asKey] = _assertThisInitialized(_this);
      _this._commandMap = {};
      _this._classNames = {};

      _this._initializeController();

      return _this;
    }

    return Controller;
  }(CoreObject), _class3.__filename = __filename$j, _class3.object = {}, _class3.MULTITON_MSG = 'Controller instance for this multiton key already constructed!', _class3._instanceMap = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "MULTITON_MSG", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "MULTITON_MSG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_view", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_commandMap", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_classNames", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_multitonKey", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_instanceMap", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "_instanceMap"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_ApplicationModule", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "ApplicationModule", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ApplicationModule"), _class2.prototype), _applyDecoratedDescriptor(_class2, "getInstance", [method], Object.getOwnPropertyDescriptor(_class2, "getInstance"), _class2), _applyDecoratedDescriptor(_class2, "removeController", [method], Object.getOwnPropertyDescriptor(_class2, "removeController"), _class2), _applyDecoratedDescriptor(_class2.prototype, "executeCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "executeCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lazyRegisterCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "lazyRegisterCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeCommand", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeCommand"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_initializeController", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_initializeController"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var _dec$1, _dec2$1, _class$5, _class2$1, _init$1, _init2$1, _descriptor$1, _descriptor2$1, _descriptor3$1, _class3$1, _temp$1;
var _ES$NS = ES.NS,
    initialize$1 = _ES$NS.initialize,
    meta$2 = _ES$NS.meta,
    nameBy$1 = _ES$NS.nameBy,
    constant$1 = _ES$NS.constant,
    resolver$1 = _ES$NS.resolver,
    util$3 = _ES$NS.util;
console.log('?>?>?>00--111');
var PatternES = (_dec$1 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PatternES", flowRuntime_umd["extends"](ES), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_MEDIATOR", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_PROXY", flowRuntime_umd.any()))), _dec2$1 = resolver$1(require, function (name) {
  return require(name);
}), _dec$1(_class$5 = initialize$1(_class$5 = _dec2$1(_class$5 = (_class2$1 = (_temp$1 = _class3$1 = /*#__PURE__*/function (_ES) {
  _inherits(PatternES, _ES);

  var _super = _createSuper(PatternES);

  function PatternES() {
    var _this;

    _classCallCheck(this, PatternES);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_MEDIATOR", _descriptor2$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_PROXY", _descriptor3$1, _assertThisInitialized(_this));

    return _this;
  } // @constant APPLICATION_ROUTER =  'ApplicationRouter';
  // @constant APPLICATION_RENDERER =  'ApplicationRenderer';
  // @constant APPLICATION_SWITCH =  'ApplicationSwitch';
  // @constant APPLICATION_GATEWAY =  'ApplicationGateway';
  // @constant RESOURCE_RENDERER =  'ResourceRenderer';
  // @constant RESQUE_EXECUTOR =  'ResqueExecutor';
  // @constant LOG_MSG = 'LOG_MSG';
  // @constant UP = Symbol.for('UP');
  // @constant DOWN = Symbol.for('DOWN');
  // @constant NON_OVERRIDDEN = Symbol.for('NON_OVERRIDDEN');
  // @constant SUPPORTED_TYPES = {
  //   json:         'json',
  //   binary:       'binary',
  //   boolean:      'boolean',
  //   date:         'date',
  //   datetime:     'datetime',
  //   number:       'number',
  //   decimal:      'decimal',
  //   float:        'float',
  //   integer:      'integer',
  //   primary_key:  'primary_key',
  //   string:       'string',
  //   text:         'text',
  //   time:         'time',
  //   timestamp:    'timestamp',
  //   array:        'array',
  //   hash:         'hash',
  // };
  // @constant REVERSE_MAP = {
  //   createCollection: 'dropCollection',
  //   dropCollection: 'dropCollection',
  //   createEdgeCollection: 'dropEdgeCollection',
  //   dropEdgeCollection: 'dropEdgeCollection',
  //   addField: 'removeField',
  //   removeField: 'removeField',
  //   addIndex: 'removeIndex',
  //   removeIndex: 'removeIndex',
  //   addTimestamps: 'removeTimestamps',
  //   removeTimestamps: 'addTimestamps',
  //   changeCollection: 'changeCollection',
  //   changeField: 'changeField',
  //   renameField: 'renameField',
  //   renameIndex: 'renameIndex',
  //   renameCollection: 'renameCollection'
  // };
  // @constant METHODS = [
  //   'get',
  //   'post',
  //   'put',
  //   'head',
  //   'delete',
  //   'options',
  //   'trace',
  //   'copy',
  //   'lock',
  //   'mkcol',
  //   'move',
  //   'purge',
  //   'propfind',
  //   'proppatch',
  //   'unlock',
  //   'report',
  //   'mkactivity',
  //   'checkout',
  //   'merge',
  //   'm-search',
  //   'notify',
  //   'subscribe',
  //   'unsubscribe',
  //   'patch',
  //   'search',
  //   'connect'
  // ];
  // @util joi = joi;
  // @util moment = moment;
  // @util statuses = statuses;


  return PatternES;
}(ES), _class3$1.__filename = 'PatternES', _class3$1.object = {}, _temp$1), (_applyDecoratedDescriptor(_class2$1, "__filename", [nameBy$1], (_init$1 = Object.getOwnPropertyDescriptor(_class2$1, "__filename"), _init$1 = _init$1 ? _init$1.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init$1;
  }
}), _class2$1), _applyDecoratedDescriptor(_class2$1, "object", [meta$2], (_init2$1 = Object.getOwnPropertyDescriptor(_class2$1, "object"), _init2$1 = _init2$1 ? _init2$1.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2$1;
  }
}), _class2$1), _descriptor$1 = _applyDecoratedDescriptor(_class2$1.prototype, "ROOT", [constant$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$2;
  }
}), _descriptor2$1 = _applyDecoratedDescriptor(_class2$1.prototype, "APPLICATION_MEDIATOR", [constant$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationMediator';
  }
}), _descriptor3$1 = _applyDecoratedDescriptor(_class2$1.prototype, "APPLICATION_PROXY", [constant$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationProxy';
  }
})), _class2$1)) || _class$5) || _class$5) || _class$5); // require('./observer/Notification').default(PatternES);
NotificationTF(PatternES);
NotifierTF(PatternES);
ObserverTF(PatternES);
ProxyTF(PatternES);
MediatorTF(PatternES);
SimpleCommandTF(PatternES);
MacroCommandTF(PatternES);
FacadeTF(PatternES); // require('./core/View').default(PatternES);
ViewTF(PatternES);
ModelTF(PatternES);
ControllerTF(PatternES);
console.log('?>?>?>00--222');

var __dirname$4 = '/pipes';

var __filename$k = '/pipes/Pipe.js';

var PipeMessageInterface = flowRuntime_umd.type("PipeMessageInterface", flowRuntime_umd.object(flowRuntime_umd.property("getType", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setType", flowRuntime_umd["function"](flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getPriority", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.number()))), flowRuntime_umd.property("setPriority", flowRuntime_umd["function"](flowRuntime_umd.param("anPriority", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getHeader", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("object")))), flowRuntime_umd.property("setHeader", flowRuntime_umd["function"](flowRuntime_umd.param("aoHeader", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("getBody", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("setBody", flowRuntime_umd["function"](flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var PipeMessageInterface$1 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface = flowRuntime_umd.type("PipeFittingInterface", function (PipeFittingInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("connect", flowRuntime_umd["function"](flowRuntime_umd.param("aoOutput", PipeFittingInterface), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))), flowRuntime_umd.property("disconnect", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(PipeFittingInterface)))), flowRuntime_umd.property("write", flowRuntime_umd["function"](flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]()))));
});

var PipeMessageInterface$2 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface$1 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Pipe = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Pipe", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_output", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1))), flowRuntime_umd.method("connect", flowRuntime_umd.param("aoOutput", flowRuntime_umd.ref(PipeFittingInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("disconnect", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1)))), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$2)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoOutput", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$1)))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Pipe, _CoreObject);

    var _super = _createSuper(Pipe);

    _createClass(Pipe, [{
      key: "connect",
      // ipoOutput = PointerT(Pipe.protected({
      value: function connect(aoOutput) {
        var vbSuccess = false;

        if (this._output == null) {
          this._output = aoOutput;
          vbSuccess = true;
        }

        return vbSuccess;
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        var disconnectedFitting = this._output;
        this._output = null;
        return disconnectedFitting;
      }
    }, {
      key: "write",
      value: function write(aoMessage) {
        return this._output && this._output.write(aoMessage) || true;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Pipe(aoOutput) {
      var _this;

      _classCallCheck(this, Pipe);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_output", _descriptor, _assertThisInitialized(_this));

      if (aoOutput != null) {
        _this.connect(aoOutput);
      }

      return _this;
    }

    return Pipe;
  }(CoreObject), _class3.__filename = __filename$k, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_output", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "connect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$l = '/pipes/PipeMessage.js';

var PipeMessageInterface$3 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeMessageTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var PipeMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PipeMessage", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("PRIORITY_HIGH", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("PRIORITY_MED", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("PRIORITY_LOW", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("BASE", flowRuntime_umd.string()), flowRuntime_umd.staticMethod("NORMAL"), flowRuntime_umd.property("_type", flowRuntime_umd.string()), flowRuntime_umd.property("_priority", flowRuntime_umd.number()), flowRuntime_umd.property("_header", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("_body", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("getType", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setType", flowRuntime_umd.param("asType", flowRuntime_umd.string())), flowRuntime_umd.method("getPriority", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("setPriority", flowRuntime_umd.param("anPriority", flowRuntime_umd.number())), flowRuntime_umd.method("getHeader", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("setHeader", flowRuntime_umd.param("aoHeader", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("getBody", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("setBody", flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("aoHeader", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoBody", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("anPriority", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(PipeMessage, _CoreObject);

    var _super = _createSuper(PipeMessage);

    _createClass(PipeMessage, [{
      key: "getType",
      value: function getType() {
        return this._type;
      }
    }, {
      key: "setType",
      value: function setType(asType) {
        this._type = asType;
      }
    }, {
      key: "getPriority",
      value: function getPriority() {
        return this._priority;
      }
    }, {
      key: "setPriority",
      value: function setPriority(anPriority) {
        this._priority = anPriority;
      }
    }, {
      key: "getHeader",
      value: function getHeader() {
        return this._header;
      }
    }, {
      key: "setHeader",
      value: function setHeader(aoHeader) {
        this._header = aoHeader;
      }
    }, {
      key: "getBody",
      value: function getBody() {
        return this._body;
      }
    }, {
      key: "setBody",
      value: function setBody(aoBody) {
        this._body = aoBody;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "NORMAL",
      get: function get() {
        return "".concat(this.BASE, "normal");
      }
    }]);

    function PipeMessage(asType) {
      var _this;

      var aoHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var aoBody = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var anPriority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;

      _classCallCheck(this, PipeMessage);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_type", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_priority", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_header", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_body", _descriptor4, _assertThisInitialized(_this));

      _this.setType(asType);

      if (aoHeader != null) {
        _this.setHeader(aoHeader);
      }

      if (aoBody != null) {
        _this.setBody(aoBody);
      }

      _this.setPriority(anPriority);

      return _this;
    }

    return PipeMessage;
  }(CoreObject), _class3.__filename = __filename$l, _class3.object = {}, _class3.PRIORITY_HIGH = 1, _class3.PRIORITY_MED = 5, _class3.PRIORITY_LOW = 10, _class3.BASE = 'namespaces/pipes/messages/', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "PRIORITY_HIGH", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "PRIORITY_HIGH"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "PRIORITY_MED", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "PRIORITY_MED"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "PRIORITY_LOW", [property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "PRIORITY_LOW"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "BASE"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "NORMAL", [property], Object.getOwnPropertyDescriptor(_class2, "NORMAL"), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_type", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_priority", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_header", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_body", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "getType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getPriority", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getPriority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setPriority", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setPriority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getHeader", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getHeader"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setHeader", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setHeader"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setBody"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$m = '/pipes/PipeListener.js';

var PipeMessageInterface$4 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface$2 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeListenerTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var PipeListener = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PipeListener", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_context", flowRuntime_umd.ref("object")), flowRuntime_umd.property("_listener", flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));

    return [flowRuntime_umd["return"](flowRuntime_umd.flowInto(T))];
  })), flowRuntime_umd.method("connect", flowRuntime_umd.param("pipe", flowRuntime_umd.ref(PipeFittingInterface$2)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("disconnect", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$2)))), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoContext", flowRuntime_umd.ref("object")), flowRuntime_umd.param("amListener", flowRuntime_umd["function"]())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(PipeListener, _CoreObject);

    var _super = _createSuper(PipeListener);

    _createClass(PipeListener, [{
      key: "connect",
      // ipoContext = PointerT(PipeListener.private({
      // ipmListener = PointerT(PipeListener.private({
      value: function connect(pipe) {
        return false;
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        return null;
      }
    }, {
      key: "write",
      value: function write(aoMessage) {
        this._listener.call(this._context, aoMessage);

        return true;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function PipeListener(aoContext, amListener) {
      var _this;

      _classCallCheck(this, PipeListener);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_context", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_listener", _descriptor2, _assertThisInitialized(_this));

      _this._context = aoContext;
      _this._listener = amListener;
      return _this;
    }

    return PipeListener;
  }(CoreObject), _class3.__filename = __filename$m, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_context", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_listener", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "connect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$n = '/pipes/FilterControlMessage.js';

var FilterControlMessageTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      PipeMessage = _Module$NS.PipeMessage,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var FilterControlMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("FilterControlMessage", flowRuntime_umd["extends"](PipeMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("BASE", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SET_PARAMS", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SET_FILTER", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("BYPASS", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("FILTER", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.property("_name", flowRuntime_umd.string()), flowRuntime_umd.property("_filter", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.property("_params", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.method("setName", flowRuntime_umd.param("asName", flowRuntime_umd.string())), flowRuntime_umd.method("getName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("setFilter", flowRuntime_umd.param("amFilter", flowRuntime_umd["function"]())), flowRuntime_umd.method("getFilter", flowRuntime_umd["return"](flowRuntime_umd["function"]())), flowRuntime_umd.method("setParams", flowRuntime_umd.param("aoParams", flowRuntime_umd.ref("object"))), flowRuntime_umd.method("getParams", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("amFilter", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.param("aoParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeMessage) {
    _inherits(FilterControlMessage, _PipeMessage);

    var _super = _createSuper(FilterControlMessage);

    _createClass(FilterControlMessage, [{
      key: "setName",
      value: function setName(asName) {
        this._name = asName;
      }
    }, {
      key: "getName",
      value: function getName() {
        return this._name;
      }
    }, {
      key: "setFilter",
      value: function setFilter(amFilter) {
        this._filter = amFilter;
      }
    }, {
      key: "getFilter",
      value: function getFilter() {
        return this._filter;
      }
    }, {
      key: "setParams",
      value: function setParams(aoParams) {
        this._params = aoParams;
      }
    }, {
      key: "getParams",
      value: function getParams() {
        return this._params;
      }
    }], [{
      key: "BASE",
      get: function get() {
        return "".concat(PipeMessage.BASE, "filter-control/");
      }
    }, {
      key: "SET_PARAMS",
      get: function get() {
        return "".concat(this.BASE, "setparams");
      }
    }, {
      key: "SET_FILTER",
      get: function get() {
        return "".concat(this.BASE, "setfilter");
      }
    }, {
      key: "BYPASS",
      get: function get() {
        return "".concat(this.BASE, "bypass");
      }
    }, {
      key: "FILTER",
      get: function get() {
        return "".concat(this.BASE, "filter");
      } // ipsName = PointerT(FilterControlMessage.protected({

    }]);

    function FilterControlMessage(asType, asName) {
      var _this;

      var amFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var aoParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, FilterControlMessage);

      _this = _super.call(this, asType);

      _initializerDefineProperty(_this, "_name", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_filter", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_params", _descriptor3, _assertThisInitialized(_this));

      _this.setName(asName);

      if (amFilter != null) {
        _this.setFilter(amFilter);
      }

      if (aoParams != null) {
        _this.setParams(aoParams);
      }

      return _this;
    }

    return FilterControlMessage;
  }(PipeMessage), _class3.__filename = __filename$n, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [property], Object.getOwnPropertyDescriptor(_class2, "BASE"), _class2), _applyDecoratedDescriptor(_class2, "SET_PARAMS", [property], Object.getOwnPropertyDescriptor(_class2, "SET_PARAMS"), _class2), _applyDecoratedDescriptor(_class2, "SET_FILTER", [property], Object.getOwnPropertyDescriptor(_class2, "SET_FILTER"), _class2), _applyDecoratedDescriptor(_class2, "BYPASS", [property], Object.getOwnPropertyDescriptor(_class2, "BYPASS"), _class2), _applyDecoratedDescriptor(_class2, "FILTER", [property], Object.getOwnPropertyDescriptor(_class2, "FILTER"), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_name", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_filter", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_params", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "setName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setParams", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setParams"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getParams", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getParams"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$o = '/pipes/LogMessage.js';

var LogMessageTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _init7, _init8, _init9, _init10, _init11, _class3, _temp;

  var _Module$NS = Module.NS,
      PipeMessage = _Module$NS.PipeMessage,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LogMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LogMessage", flowRuntime_umd["extends"](PipeMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("DEBUG", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("INFO", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("WARN", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("ERROR", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("FATAL", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("NONE", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("CHANGE", flowRuntime_umd.number()), flowRuntime_umd.staticProperty("LEVELS", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SEND_TO_LOG", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticProperty("STDLOG", flowRuntime_umd.string()), flowRuntime_umd.method("logLevel", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("logLevel", flowRuntime_umd.param("logLevel", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("sender", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("sender", flowRuntime_umd.param("sender", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("time", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("time", flowRuntime_umd.param("time", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("message", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("logLevel", flowRuntime_umd.number()), flowRuntime_umd.param("sender", flowRuntime_umd.string()), flowRuntime_umd.param("message", flowRuntime_umd.any())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeMessage) {
    _inherits(LogMessage, _PipeMessage);

    var _super = _createSuper(LogMessage);

    _createClass(LogMessage, [{
      key: "logLevel",
      get: function get() {
        return this.getHeader().logLevel;
      },
      set: function set(logLevel) {
        var header = this.getHeader();
        header.logLevel = logLevel;
        this.setHeader(header);
        return logLevel;
      }
    }, {
      key: "sender",
      get: function get() {
        return this.getHeader().sender;
      },
      set: function set(sender) {
        var header = this.getHeader();
        header.sender = sender;
        this.setHeader(header);
        return sender;
      }
    }, {
      key: "time",
      get: function get() {
        return this.getHeader().time;
      },
      set: function set(time) {
        var header = this.getHeader();
        header.time = time;
        this.setHeader(header);
        return time;
      }
    }, {
      key: "message",
      get: function get() {
        return this.getBody();
      }
    }], [{
      key: "SEND_TO_LOG",
      get: function get() {
        return PipeMessage.BASE + 'LoggerModule/sendToLog';
      }
    }]);

    function LogMessage(logLevel, sender, message) {
      _classCallCheck(this, LogMessage);

      var time = new Date().toISOString();
      var headers = {
        logLevel: logLevel,
        sender: sender,
        time: time
      };
      return _super.call(this, PipeMessage.NORMAL, headers, message);
    }

    return LogMessage;
  }(PipeMessage), _class3.__filename = __filename$o, _class3.object = {}, _class3.DEBUG = 5, _class3.INFO = 4, _class3.WARN = 3, _class3.ERROR = 2, _class3.FATAL = 1, _class3.NONE = 0, _class3.CHANGE = -1, _class3.LEVELS = ['NONE', 'FATAL', 'ERROR', 'WARN', 'INFO', 'DEBUG'], _class3.STDLOG = 'standardLog', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "DEBUG", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "DEBUG"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "INFO", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "INFO"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "WARN", [property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "WARN"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "ERROR", [property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "ERROR"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "FATAL", [property], (_init7 = Object.getOwnPropertyDescriptor(_class2, "FATAL"), _init7 = _init7 ? _init7.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init7;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "NONE", [property], (_init8 = Object.getOwnPropertyDescriptor(_class2, "NONE"), _init8 = _init8 ? _init8.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init8;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CHANGE", [property], (_init9 = Object.getOwnPropertyDescriptor(_class2, "CHANGE"), _init9 = _init9 ? _init9.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init9;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "LEVELS", [property], (_init10 = Object.getOwnPropertyDescriptor(_class2, "LEVELS"), _init10 = _init10 ? _init10.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init10;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "SEND_TO_LOG", [property], Object.getOwnPropertyDescriptor(_class2, "SEND_TO_LOG"), _class2), _applyDecoratedDescriptor(_class2, "STDLOG", [property], (_init11 = Object.getOwnPropertyDescriptor(_class2, "STDLOG"), _init11 = _init11 ? _init11.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init11;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "logLevel", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "logLevel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "logLevel", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "logLevel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sender", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "sender"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sender", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "sender"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "time", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "time"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "time", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "time"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "message", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "message"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$p = '/pipes/LogFilterMessage.js';

var PipeMessageInterface$5 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var LogFilterMessageTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      FilterControlMessage = _Module$NS.FilterControlMessage,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LogFilterMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LogFilterMessage", flowRuntime_umd["extends"](FilterControlMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("BASE", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("LOG_FILTER_NAME", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SET_LOG_LEVEL", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.property("logLevel", flowRuntime_umd.number()), flowRuntime_umd.staticMethod("filterLogByLevel", flowRuntime_umd.param("message", flowRuntime_umd.ref(PipeMessageInterface$5)), flowRuntime_umd.param("params", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("logLevel", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_FilterControlMessage) {
    _inherits(LogFilterMessage, _FilterControlMessage);

    var _super = _createSuper(LogFilterMessage);

    _createClass(LogFilterMessage, null, [{
      key: "filterLogByLevel",
      value: function filterLogByLevel(message, params) {
        var voParams = params || {};
        var logLevel = voParams.logLevel;

        if (logLevel == null) {
          logLevel = 0;
        }

        if (message.getHeader().logLevel > voParams.logLevel) {
          throw new Error();
        }
      }
    }, {
      key: "BASE",
      get: function get() {
        return "".concat(FilterControlMessage.BASE, "LoggerModule/");
      }
    }, {
      key: "LOG_FILTER_NAME",
      get: function get() {
        return "".concat(this.BASE, "logFilter/");
      }
    }, {
      key: "SET_LOG_LEVEL",
      get: function get() {
        return "".concat(this.BASE, "setLogLevel/");
      }
    }]);

    function LogFilterMessage(action) {
      var _this;

      var logLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      _classCallCheck(this, LogFilterMessage);

      _this = _super.call(this, action, LogFilterMessage.LOG_FILTER_NAME, null, {
        logLevel: logLevel
      });

      _initializerDefineProperty(_this, "logLevel", _descriptor, _assertThisInitialized(_this));

      _this.logLevel = logLevel;
      return _this;
    }

    return LogFilterMessage;
  }(FilterControlMessage), _class3.__filename = __filename$p, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [property], Object.getOwnPropertyDescriptor(_class2, "BASE"), _class2), _applyDecoratedDescriptor(_class2, "LOG_FILTER_NAME", [property], Object.getOwnPropertyDescriptor(_class2, "LOG_FILTER_NAME"), _class2), _applyDecoratedDescriptor(_class2, "SET_LOG_LEVEL", [property], Object.getOwnPropertyDescriptor(_class2, "SET_LOG_LEVEL"), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "logLevel", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _applyDecoratedDescriptor(_class2, "filterLogByLevel", [method], Object.getOwnPropertyDescriptor(_class2, "filterLogByLevel"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$q = '/pipes/Filter.js';

var PipeFittingInterface$3 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeMessageInterface$6 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var FilterTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      Pipe = _Module$NS.Pipe,
      PipeMessage = _Module$NS.PipeMessage,
      FilterControlMessage = _Module$NS.FilterControlMessage,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var NORMAL = PipeMessage.NORMAL;
  var FILTER = FilterControlMessage.FILTER,
      SET_PARAMS = FilterControlMessage.SET_PARAMS,
      SET_FILTER = FilterControlMessage.SET_FILTER,
      BYPASS = FilterControlMessage.BYPASS;
  var Filter = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Filter", flowRuntime_umd["extends"](Pipe), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_mode", flowRuntime_umd.string()), flowRuntime_umd.method("_filter", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd.param("aoParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.property("_params", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("_name", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("_isTarget", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("applyFilter", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd["return"](flowRuntime_umd.ref(PipeMessageInterface$6))), flowRuntime_umd.method("setParams", flowRuntime_umd.param("aoParams", flowRuntime_umd.ref("object"))), flowRuntime_umd.method("setFilter", flowRuntime_umd.param("amFilter", flowRuntime_umd["function"]())), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$6)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoOutput", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$3))), flowRuntime_umd.param("amFilter", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd.param("aoParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Pipe) {
    _inherits(Filter, _Pipe);

    var _super = _createSuper(Filter);

    _createClass(Filter, [{
      key: "_filter",

      /**
       * @protected
       * @type string
       */

      /**
       * @protected
       * @return {void}
       */
      value: function _filter(aoMessage, aoParams) {}
    }, {
      key: "_isTarget",

      /**
       * @protected
       * @param {object} aoMessage
       * @return {boolean}
       */
      value: function _isTarget(aoMessage) {
        // must be instance of FilterControlMessage
        return aoMessage instanceof FilterControlMessage && (aoMessage != null ? aoMessage.getName() : void 0) === this._name;
      }
      /**
       * @protected
       * @param {object} aoMessage
       * @return {object}
       */

    }, {
      key: "applyFilter",
      value: function applyFilter(aoMessage) {
        this._filter.apply(this, [aoMessage, this._params]);

        return aoMessage;
      }
    }, {
      key: "setParams",
      value: function setParams(aoParams) {
        this._params = aoParams;
      }
    }, {
      key: "setFilter",
      value: function setFilter(amFilter) {
        Reflect.defineProperty(this, '_filter', method(this, '_filter', {
          value: amFilter
        }));
      }
    }, {
      key: "write",
      value: function write(aoMessage) {
        var vbSuccess, voOutputMessage;
        vbSuccess = true;
        voOutputMessage = null;

        switch (aoMessage.getType()) {
          case NORMAL:
            try {
              if (this._mode === FILTER) {
                voOutputMessage = this.applyFilter(aoMessage);
              } else {
                voOutputMessage = aoMessage;
              }

              vbSuccess = this._output.write(voOutputMessage);
            } catch (error) {
              console.log('>>>>>>>>>>>>>>> err', error);
              vbSuccess = false;
            }

            break;

          case SET_PARAMS:
            if (this._isTarget(aoMessage)) {
              this.setParams(aoMessage.getParams());
            } else {
              vbSuccess = this._output.write(voOutputMessage);
            }

            break;

          case SET_FILTER:
            if (this._isTarget(aoMessage)) {
              this.setFilter(aoMessage.getFilter());
            } else {
              vbSuccess = this._output.write(voOutputMessage);
            }

            break;

          case BYPASS:
          case FILTER:
            if (this._isTarget(aoMessage)) {
              this._mode = aoMessage.getType();
            } else {
              vbSuccess = this._output.write(voOutputMessage);
            }

            break;

          default:
            vbSuccess = this._output.write(outputMessage);
        }

        return vbSuccess;
      }
    }]);

    function Filter(asName) {
      var _this;

      var aoOutput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var amFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var aoParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, Filter);

      _this = _super.call(this, aoOutput);

      _initializerDefineProperty(_this, "_mode", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_params", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_name", _descriptor3, _assertThisInitialized(_this));

      _this._name = asName;

      if (amFilter != null) {
        _this.setFilter(amFilter);
      }

      if (aoParams != null) {
        _this.setParams(aoParams);
      }

      return _this;
    }

    return Filter;
  }(Pipe), _class3.__filename = __filename$q, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mode", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return FILTER;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_filter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_filter"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_params", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_name", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_isTarget", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_isTarget"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "applyFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setParams", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setParams"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setFilter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setFilter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$r = '/pipes/Junction.js';

var PipeFittingInterface$4 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var JunctionTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _init4, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      PipeListener = _Module$NS.PipeListener,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var splice = [].splice;
  var Junction = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Junction", function (Junction) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("INPUT", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("OUTPUT", flowRuntime_umd.string()), flowRuntime_umd.property("_inputPipes", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("_outputPipes", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("_pipesMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$4))))), flowRuntime_umd.property("_pipeTypesMap", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.union(flowRuntime_umd.ref(Junction.INPUT), flowRuntime_umd.ref(Junction.OUTPUT))))), flowRuntime_umd.method("registerPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("type", flowRuntime_umd.string()), flowRuntime_umd.param("pipe", flowRuntime_umd.ref(PipeFittingInterface$4)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("hasPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("hasInputPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("hasOutputPipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("removePipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("retrievePipe", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(PipeFittingInterface$4))), flowRuntime_umd.method("addPipeListener", flowRuntime_umd.param("inputPipeName", flowRuntime_umd.string()), flowRuntime_umd.param("context", flowRuntime_umd.ref("object")), flowRuntime_umd.param("listener", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("sendMessage", flowRuntime_umd.param("outputPipeName", flowRuntime_umd.string()), flowRuntime_umd.param("message", flowRuntime_umd.ref("PipeMessageInterface")), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject")];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Junction, _CoreObject);

    var _super = _createSuper(Junction);

    _createClass(Junction, [{
      key: "registerPipe",
      // iplInputPipes = PointerT(Junction.protected({
      // iplOutputPipes = PointerT(Junction.protected({
      // iplPipesMap = PointerT(Junction.protected({
      // iplPipeTypesMap = PointerT(Junction.protected({
      value: function registerPipe(name, type, pipe) {
        var vbSuccess = true;

        if (this._pipesMap[name] == null) {
          this._pipesMap[name] = pipe;
          this._pipeTypesMap[name] = type;

          switch (type) {
            case Junction.INPUT:
              this._inputPipes.push(name);

              break;

            case Junction.OUTPUT:
              this._outputPipes.push(name);

              break;

            default:
              vbSuccess = false;
          }
        } else {
          vbSuccess = false;
        }

        return vbSuccess;
      }
    }, {
      key: "hasPipe",
      value: function hasPipe(name) {
        return this._pipesMap[name] != null;
      }
    }, {
      key: "hasInputPipe",
      value: function hasInputPipe(name) {
        return this.hasPipe(name) && this._pipeTypesMap[name] === Junction.INPUT;
      }
    }, {
      key: "hasOutputPipe",
      value: function hasOutputPipe(name) {
        return this.hasPipe(name) && this._pipeTypesMap[name] === Junction.OUTPUT;
      }
    }, {
      key: "removePipe",
      value: function removePipe(name) {
        var ref;

        if (this.hasPipe(name)) {
          var type = this._pipeTypesMap[name];

          var pipesList = function () {
            switch (type) {
              case Junction.INPUT:
                return this._inputPipes;

              case Junction.OUTPUT:
                return this._outputPipes;

              default:
                return [];
            }
          }.call(this);

          for (var i = j = 0, len = pipesList.length; j < len; i = ++j) {
            var pipe = pipesList[i];

            if (pipe === name) {
              splice.apply(pipesList, [i, i - i + 1].concat(ref = [])), ref;
              break;
            }
          }

          delete this._pipesMap[name];
          delete this._pipeTypesMap[name];
        }
      }
    }, {
      key: "retrievePipe",
      value: function retrievePipe(name) {
        return this._pipesMap[name];
      }
    }, {
      key: "addPipeListener",
      value: function addPipeListener(inputPipeName, context, listener) {
        var vbSuccess = false;

        if (this.hasInputPipe(inputPipeName)) {
          var pipe = this._pipesMap[inputPipeName];
          vbSuccess = pipe.connect(new PipeListener(context, listener));
        }

        return vbSuccess;
      }
    }, {
      key: "sendMessage",
      value: function sendMessage(outputPipeName, message) {
        var vbSuccess = false;

        if (this.hasOutputPipe(outputPipeName)) {
          var pipe = this._pipesMap[outputPipeName];
          vbSuccess = pipe.write(message);
        }

        return vbSuccess;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Junction() {
      var _this;

      _classCallCheck(this, Junction);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_inputPipes", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_outputPipes", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pipesMap", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pipeTypesMap", _descriptor4, _assertThisInitialized(_this));

      _this._inputPipes = [];
      _this._outputPipes = [];
      _this._pipesMap = {};
      _this._pipeTypesMap = {};
      return _this;
    }

    return Junction;
  }(CoreObject), _class3.__filename = __filename$r, _class3.object = {}, _class3.INPUT = 'input', _class3.OUTPUT = 'output', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "INPUT", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "INPUT"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "OUTPUT", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "OUTPUT"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_inputPipes", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_outputPipes", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_pipesMap", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_pipeTypesMap", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "registerPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "registerPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasInputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasInputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasOutputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasOutputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removePipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removePipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrievePipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "retrievePipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addPipeListener", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addPipeListener"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendMessage", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendMessage"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$s = '/pipes/JunctionMediator.js';

var PipeMessageInterface$7 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var NotificationInterface$e = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var JunctionMediatorTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _init4, _init5, _class3, _temp;

  var _Module$NS = Module.NS,
      Mediator = _Module$NS.Mediator,
      Junction = _Module$NS.Junction,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var INPUT = Junction.INPUT,
      OUTPUT = Junction.OUTPUT;
  var JunctionMediator = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("JunctionMediator", flowRuntime_umd["extends"](Mediator), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("ACCEPT_INPUT_PIPE", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("ACCEPT_OUTPUT_PIPE", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("REMOVE_PIPE", flowRuntime_umd.string()), flowRuntime_umd.method("_junction", flowRuntime_umd["return"](flowRuntime_umd.ref(Junction))), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$e)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("handlePipeMessage", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$7)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Mediator) {
    _inherits(JunctionMediator, _Mediator);

    var _super = _createSuper(JunctionMediator);

    function JunctionMediator() {
      _classCallCheck(this, JunctionMediator);

      return _super.apply(this, arguments);
    }

    _createClass(JunctionMediator, [{
      key: "listNotificationInterests",
      value: function listNotificationInterests() {
        return [JunctionMediator.ACCEPT_INPUT_PIPE, JunctionMediator.ACCEPT_OUTPUT_PIPE, JunctionMediator.REMOVE_PIPE];
      }
    }, {
      key: "handleNotification",
      value: function handleNotification(aoNotification) {
        var pipeName = aoNotification.getType();

        switch (aoNotification.getName()) {
          case JunctionMediator.ACCEPT_INPUT_PIPE:
            var inputPipe = aoNotification.getBody();

            if (this._junction.registerPipe(pipeName, INPUT, inputPipe)) {
              this._junction.addPipeListener(pipeName, this, this.handlePipeMessage);
            }

            break;

          case JunctionMediator.ACCEPT_OUTPUT_PIPE:
            var outputPipe = aoNotification.getBody();

            this._junction.registerPipe(pipeName, OUTPUT, outputPipe);

            break;

          case JunctionMediator.REMOVE_PIPE:
            this._junction.removePipe(pipeName);

        }
      }
    }, {
      key: "handlePipeMessage",
      value: function handlePipeMessage(aoMessage) {
        return this.send(aoMessage.getType(), aoMessage);
      }
    }, {
      key: "_junction",
      // ipoJunction = PointerT(JunctionMediator.protected({
      get: function get() {
        return this.getViewComponent();
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return JunctionMediator;
  }(Mediator), _class3.__filename = __filename$s, _class3.object = {}, _class3.ACCEPT_INPUT_PIPE = 'acceptInputPipe', _class3.ACCEPT_OUTPUT_PIPE = 'acceptOutputPipe', _class3.REMOVE_PIPE = 'removePipe', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "ACCEPT_INPUT_PIPE", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "ACCEPT_INPUT_PIPE"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "ACCEPT_OUTPUT_PIPE", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "ACCEPT_OUTPUT_PIPE"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "REMOVE_PIPE", [property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "REMOVE_PIPE"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "_junction", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "_junction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handlePipeMessage", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handlePipeMessage"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$t = '/pipes/PipeAwareModule.js';

var PipeFittingInterface$5 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeAwareInterface = flowRuntime_umd.type("PipeAwareInterface", flowRuntime_umd.object(flowRuntime_umd.property("acceptInputPipe", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.ref(PipeFittingInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("acceptOutputPipe", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.ref(PipeFittingInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var PipeAwareInterface$1 = flowRuntime_umd.tdz(function () {
  return PipeAwareInterface;
});
var FacadeInterface$3 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var PipeAwareModuleTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      JunctionMediator = _Module$NS.JunctionMediator,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var ACCEPT_INPUT_PIPE = JunctionMediator.ACCEPT_INPUT_PIPE,
      ACCEPT_OUTPUT_PIPE = JunctionMediator.ACCEPT_OUTPUT_PIPE;
  var PipeAwareModule = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PipeAwareModule", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("STDOUT", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("STDIN", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("STDLOG", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("STDSHELL", flowRuntime_umd.string()), flowRuntime_umd.property("facade", flowRuntime_umd.ref(FacadeInterface$3)), flowRuntime_umd.method("acceptInputPipe", flowRuntime_umd.param("asName", flowRuntime_umd.any()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.any())), flowRuntime_umd.method("acceptOutputPipe", flowRuntime_umd.param("asName", flowRuntime_umd.any()), flowRuntime_umd.param("aoPipe", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoFacade", flowRuntime_umd.nullable(flowRuntime_umd.ref(FacadeInterface$3)))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(PipeAwareModule, _CoreObject);

    var _super = _createSuper(PipeAwareModule);

    _createClass(PipeAwareModule, [{
      key: "acceptInputPipe",
      value: function acceptInputPipe(asName, aoPipe) {
        this.facade.send(ACCEPT_INPUT_PIPE, aoPipe, asName);
      }
    }, {
      key: "acceptOutputPipe",
      value: function acceptOutputPipe(asName, aoPipe) {
        this.facade.send(ACCEPT_OUTPUT_PIPE, aoPipe, asName);
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }() // @method init(aoFacade: ?FacadeInterface) {
      //   console.log('><><><V>V<>V<V>V< 000', aoFacade);
      //   super.init(... arguments);
      //   // console.log('><><><V>V<>V<V>V< 111');
      //   // (aoFacade: FacadeInterface);
      //   // console.log('><><><V>V<>V<V>V< 222');
      //   // (aoFacade: PipeAwareInterface);
      //   // console.log('><><><V>V<>V<V>V< 333');
      //   // (aoFacade: string);
      //   console.log('><><><V>V<>V<V>V< 111', aoFacade);
      //   if (aoFacade != null) {
      //     this.facade = aoFacade;
      //   }
      //   console.log('><><><V>V<>V<V>V< 222', this.facade);
      // }

    }]);

    function PipeAwareModule(aoFacade) {
      var _this;

      _classCallCheck(this, PipeAwareModule);

      // console.log('><><><V>V<>V<V>V< 000', aoFacade);
      _this = _super.apply(this, arguments); // console.log('><><><V>V<>V<V>V< 111', aoFacade);

      _initializerDefineProperty(_this, "facade", _descriptor, _assertThisInitialized(_this));

      if (aoFacade != null) {
        _this.facade = aoFacade;
      } // console.log('><><><V>V<>V<V>V< 222', this.facade);


      return _this;
    }

    return PipeAwareModule;
  }(CoreObject), _class3.__filename = __filename$t, _class3.object = {}, _class3.STDOUT = 'standardOutput', _class3.STDIN = 'standardInput', _class3.STDLOG = 'standardLog', _class3.STDSHELL = 'standardShell', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDOUT", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "STDOUT"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDIN", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "STDIN"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDLOG", [property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "STDLOG"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "STDSHELL", [property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "STDSHELL"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "facade", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "acceptInputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptInputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptOutputPipe", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptOutputPipe"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$u = '/pipes/LineControlMessage.js';

var LineControlMessageTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      PipeMessage = _Module$NS.PipeMessage,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LineControlMessage = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LineControlMessage", flowRuntime_umd["extends"](PipeMessage), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("BASE", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("FLUSH", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("SORT", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("FIFO", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("asType", flowRuntime_umd.string())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeMessage) {
    _inherits(LineControlMessage, _PipeMessage);

    var _super = _createSuper(LineControlMessage);

    _createClass(LineControlMessage, null, [{
      key: "BASE",
      get: function get() {
        return "".concat(PipeMessage.BASE, "queue/");
      }
    }, {
      key: "FLUSH",
      get: function get() {
        return "".concat(this.BASE, "flush");
      }
    }, {
      key: "SORT",
      get: function get() {
        return "".concat(this.BASE, "sort");
      }
    }, {
      key: "FIFO",
      get: function get() {
        return "".concat(this.BASE, "fifo");
      }
    }]);

    function LineControlMessage(asType) {
      _classCallCheck(this, LineControlMessage);

      return _super.call(this, asType);
    }

    return LineControlMessage;
  }(PipeMessage), _class3.__filename = __filename$u, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "BASE", [property], Object.getOwnPropertyDescriptor(_class2, "BASE"), _class2), _applyDecoratedDescriptor(_class2, "FLUSH", [property], Object.getOwnPropertyDescriptor(_class2, "FLUSH"), _class2), _applyDecoratedDescriptor(_class2, "SORT", [property], Object.getOwnPropertyDescriptor(_class2, "SORT"), _class2), _applyDecoratedDescriptor(_class2, "FIFO", [property], Object.getOwnPropertyDescriptor(_class2, "FIFO"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$v = '/pipes/Line.js';

var PipeFittingInterface$6 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var PipeMessageInterface$8 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var LineTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      Pipe = _Module$NS.Pipe,
      PipeMessage = _Module$NS.PipeMessage,
      LineControlMessage = _Module$NS.LineControlMessage,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var NORMAL = PipeMessage.NORMAL;
  var SORT = LineControlMessage.SORT,
      FLUSH = LineControlMessage.FLUSH,
      FIFO = LineControlMessage.FIFO;
  var Line = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Line", flowRuntime_umd["extends"](Pipe), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_mode", flowRuntime_umd.string()), flowRuntime_umd.property("_messages", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(PipeMessageInterface$8)))), flowRuntime_umd.method("_sortMessagesByPriority", flowRuntime_umd.param("msgA", flowRuntime_umd.ref(PipeMessageInterface$8)), flowRuntime_umd.param("msgB", flowRuntime_umd.ref(PipeMessageInterface$8)), flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("_store", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$8)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("_flush", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$8)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoOutput", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$6)))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Pipe) {
    _inherits(Line, _Pipe);

    var _super = _createSuper(Line);

    _createClass(Line, [{
      key: "_sortMessagesByPriority",
      // ipsMode = PointerT(Line.protected({
      // iplMessages = PointerT(Line.protected({
      // ipmSort = PointerT(Line.protected({
      value: function _sortMessagesByPriority(msgA, msgB) {
        var vnNum = 0;

        if (msgA.getPriority() < msgB.getPriority()) {
          vnNum = -1;
        }

        if (msgA.getPriority() > msgB.getPriority()) {
          vnNum = 1;
        }

        return vnNum;
      } // ipmStore = PointerT(Line.protected({

    }, {
      key: "_store",
      value: function _store(aoMessage) {
        if (this._messages == null) {
          this._messages = [];
        }

        this._messages.push(aoMessage);

        if (this._mode === SORT) {
          this._messages.sort(this._sortMessagesByPriority.bind(this));
        }
      } // ipmFlush = PointerT(Line.protected({

    }, {
      key: "_flush",
      value: function _flush() {
        var voMessage;
        var vbSuccess = true;

        if (this._messages == null) {
          this._messages = [];
        }

        while ((voMessage = this._messages.shift()) != null) {
          var ok = this._output.write(voMessage);

          if (!ok) {
            vbSuccess = false;
          }
        }

        return vbSuccess;
      }
    }, {
      key: "write",
      value: function write(aoMessage) {
        var vbSuccess = true;

        switch (aoMessage.getType()) {
          case NORMAL:
            this._store(aoMessage);

            break;

          case FLUSH:
            vbSuccess = this._flush();
            break;

          case SORT:
          case FIFO:
            this._mode = aoMessage.getType();
        }

        return vbSuccess;
      }
    }]);

    function Line() {
      var _this;

      var aoOutput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      _classCallCheck(this, Line);

      _this = _super.call(this, aoOutput);

      _initializerDefineProperty(_this, "_mode", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_messages", _descriptor2, _assertThisInitialized(_this));

      return _this;
    }

    return Line;
  }(Pipe), _class3.__filename = __filename$v, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mode", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return SORT;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_messages", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "_sortMessagesByPriority", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_sortMessagesByPriority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_store", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_store"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_flush", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "_flush"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$w = '/pipes/TeeMerge.js';

var PipeFittingInterface$7 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var TeeMergeTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      Pipe = _Module$NS.Pipe,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var TeeMerge = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("TeeMerge", flowRuntime_umd["extends"](Pipe), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("connectInput", flowRuntime_umd.param("aoInput", flowRuntime_umd.ref(PipeFittingInterface$7)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("input1", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$7))), flowRuntime_umd.param("input2", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$7)))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Pipe) {
    _inherits(TeeMerge, _Pipe);

    var _super = _createSuper(TeeMerge);

    _createClass(TeeMerge, [{
      key: "connectInput",
      value: function connectInput(aoInput) {
        return aoInput.connect(this);
      }
    }]);

    function TeeMerge() {
      var _this;

      var input1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var input2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, TeeMerge);

      _this = _super.apply(this, arguments);

      if (input1 != null) {
        _this.connectInput(input1);
      }

      if (input2 != null) {
        _this.connectInput(input2);
      }

      return _this;
    }

    return TeeMerge;
  }(Pipe), _class3.__filename = __filename$w, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "connectInput", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connectInput"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$x = '/pipes/TeeSplit.js';

var PipeMessageInterface$9 = flowRuntime_umd.tdz(function () {
  return PipeMessageInterface;
});
var PipeFittingInterface$8 = flowRuntime_umd.tdz(function () {
  return PipeFittingInterface;
});
var splice$4 = [].splice;
var TeeSplitTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var TeeSplit = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("TeeSplit", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_outputs", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(PipeFittingInterface$8)))), flowRuntime_umd.method("connect", flowRuntime_umd.param("aoOutput", flowRuntime_umd.ref(PipeFittingInterface$8)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("disconnect", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8)))), flowRuntime_umd.method("disconnectFitting", flowRuntime_umd.param("aoTarget", flowRuntime_umd.ref(PipeFittingInterface$8)), flowRuntime_umd["return"](flowRuntime_umd.ref(PipeFittingInterface$8))), flowRuntime_umd.method("write", flowRuntime_umd.param("aoMessage", flowRuntime_umd.ref(PipeMessageInterface$9)), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("output1", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8))), flowRuntime_umd.param("output2", flowRuntime_umd.nullable(flowRuntime_umd.ref(PipeFittingInterface$8)))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(TeeSplit, _CoreObject);

    var _super = _createSuper(TeeSplit);

    _createClass(TeeSplit, [{
      key: "connect",
      // iplOutputs = PointerT(TeeSplit.protected({
      value: function connect(aoOutput) {
        if (this._outputs == null) {
          this._outputs = [];
        }

        this._outputs.push(aoOutput);

        return true;
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        if (this._outputs == null) {
          this._outputs = [];
        }

        return this._outputs.pop();
      }
    }, {
      key: "disconnectFitting",
      value: function disconnectFitting(aoTarget) {
        var ref1;
        var voRemoved = null;

        if (this._outputs == null) {
          this._outputs = [];
        }

        var alOutputs = this._outputs;

        for (var i = j = 0, len = alOutputs.length; j < len; i = ++j) {
          var aoOutput = alOutputs[i];

          if (aoOutput === aoTarget) {
            splice$4.apply(this._outputs, [i, i - i + 1].concat(ref1 = [])), ref1;
            voRemoved = aoOutput;
            break;
          }
        }

        return voRemoved;
      }
    }, {
      key: "write",
      value: function write(aoMessage) {
        var vbSuccess = true;

        this._outputs.forEach(function (aoOutput) {
          if (!aoOutput.write(aoMessage)) {
            return vbSuccess = false;
          }
        });

        return vbSuccess;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function TeeSplit() {
      var _this;

      var output1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var output2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, TeeSplit);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_outputs", _descriptor, _assertThisInitialized(_this));

      if (output1 != null) {
        _this.connect(output1);
      }

      if (output2 != null) {
        _this.connect(output2);
      }

      return _this;
    }

    return TeeSplit;
  }(CoreObject), _class3.__filename = __filename$x, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_outputs", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "connect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "connect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnect", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disconnectFitting", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "disconnectFitting"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "write", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "write"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var _dec$2, _dec2$2, _class$6, _class2$2, _init$2, _init2$2, _descriptor$2, _class3$2, _temp$2;
var _PatternES$NS = PatternES.NS,
    initialize$2 = _PatternES$NS.initialize,
    meta$3 = _PatternES$NS.meta,
    nameBy$2 = _PatternES$NS.nameBy,
    freeze$1 = _PatternES$NS.freeze,
    resolver$2 = _PatternES$NS.resolver,
    constant$2 = _PatternES$NS.constant;
var Pipes = (_dec$2 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Pipes", flowRuntime_umd["extends"](PatternES), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()))), _dec2$2 = resolver$2(require, function (name) {
  return require(name);
}), _dec$2(_class$6 = initialize$2(_class$6 = _dec2$2(_class$6 = (_class2$2 = (_temp$2 = _class3$2 = /*#__PURE__*/function (_PatternES) {
  _inherits(Pipes, _PatternES);

  var _super = _createSuper(Pipes);

  function Pipes() {
    var _this;

    _classCallCheck(this, Pipes);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor$2, _assertThisInitialized(_this));

    return _this;
  }

  return Pipes;
}(PatternES), _class3$2.__filename = 'Pipes', _class3$2.object = {}, _temp$2), (_applyDecoratedDescriptor(_class2$2, "__filename", [nameBy$2], (_init$2 = Object.getOwnPropertyDescriptor(_class2$2, "__filename"), _init$2 = _init$2 ? _init$2.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init$2;
  }
}), _class2$2), _applyDecoratedDescriptor(_class2$2, "object", [meta$3], (_init2$2 = Object.getOwnPropertyDescriptor(_class2$2, "object"), _init2$2 = _init2$2 ? _init2$2.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2$2;
  }
}), _class2$2), _descriptor$2 = _applyDecoratedDescriptor(_class2$2.prototype, "ROOT", [constant$2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$4;
  }
})), _class2$2)) || _class$6) || _class$6) || _class$6); // require('./Pipe').default(Pipes);
PipeTF(Pipes);
PipeMessageTF(Pipes);
PipeListenerTF(Pipes);
FilterControlMessageTF(Pipes);
LogMessageTF(Pipes);
LogFilterMessageTF(Pipes);
FilterTF(Pipes);
JunctionTF(Pipes);
JunctionMediatorTF(Pipes);
PipeAwareModuleTF(Pipes);
LineControlMessageTF(Pipes);
LineTF(Pipes);
TeeMergeTF(Pipes);
TeeSplitTF(Pipes);
var Pipes$1 = freeze$1(Pipes);

var joiBrowser = createCommonjsModule(function (module, exports) {
(function webpackUniversalModuleDefinition(root, factory) {
	module.exports = factory();
})(commonjsGlobal, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 32);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(Buffer, process) {

// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Assert = __webpack_require__(17);
var Crypto = __webpack_require__(15);
var Path = __webpack_require__(37);
var Util = __webpack_require__(16);

var Escape = __webpack_require__(18);

// Declare internals

var internals = {};

// Clone object or array

exports.clone = function (obj, seen) {

    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {

        return obj;
    }

    seen = seen || new Map();

    var lookup = seen.get(obj);
    if (lookup) {
        return lookup;
    }

    var newObj = void 0;
    var cloneDeep = false;

    if (!Array.isArray(obj)) {
        if (Buffer.isBuffer(obj)) {
            newObj = Buffer.from(obj);
        } else if (obj instanceof Date) {
            newObj = new Date(obj.getTime());
        } else if (obj instanceof RegExp) {
            newObj = new RegExp(obj);
        } else {
            var proto = Object.getPrototypeOf(obj);
            if (proto && proto.isImmutable) {

                newObj = obj;
            } else {
                newObj = Object.create(proto);
                cloneDeep = true;
            }
        }
    } else {
        newObj = [];
        cloneDeep = true;
    }

    seen.set(obj, newObj);

    if (cloneDeep) {
        var keys = Object.getOwnPropertyNames(obj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            var descriptor = Object.getOwnPropertyDescriptor(obj, key);
            if (descriptor && (descriptor.get || descriptor.set)) {

                Object.defineProperty(newObj, key, descriptor);
            } else {
                newObj[key] = exports.clone(obj[key], seen);
            }
        }
    }

    return newObj;
};

// Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied

/*eslint-disable */
exports.merge = function (target, source, isNullOverride /* = true */, isMergeArrays /* = true */) {
    /*eslint-enable */

    exports.assert(target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object', 'Invalid target value: must be an object');
    exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object', 'Invalid source value: must be null, undefined, or an object');

    if (!source) {
        return target;
    }

    if (Array.isArray(source)) {
        exports.assert(Array.isArray(target), 'Cannot merge array onto an object');
        if (isMergeArrays === false) {
            // isMergeArrays defaults to true
            target.length = 0; // Must not change target assignment
        }

        for (var i = 0; i < source.length; ++i) {
            target.push(exports.clone(source[i]));
        }

        return target;
    }

    var keys = Object.keys(source);
    for (var _i = 0; _i < keys.length; ++_i) {
        var key = keys[_i];
        if (key === '__proto__') {
            continue;
        }

        var value = source[key];
        if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {

            if (!target[key] || _typeof(target[key]) !== 'object' || Array.isArray(target[key]) !== Array.isArray(value) || value instanceof Date || Buffer.isBuffer(value) || value instanceof RegExp) {

                target[key] = exports.clone(value);
            } else {
                exports.merge(target[key], value, isNullOverride, isMergeArrays);
            }
        } else {
            if (value !== null && value !== undefined) {
                // Explicit to preserve empty strings

                target[key] = value;
            } else if (isNullOverride !== false) {
                // Defaults to true
                target[key] = value;
            }
        }
    }

    return target;
};

// Apply options to a copy of the defaults

exports.applyToDefaults = function (defaults, options, isNullOverride) {

    exports.assert(defaults && (typeof defaults === 'undefined' ? 'undefined' : _typeof(defaults)) === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options value: must be true, falsy or an object');

    if (!options) {
        // If no options, return null
        return null;
    }

    var copy = exports.clone(defaults);

    if (options === true) {
        // If options is set to true, use defaults
        return copy;
    }

    return exports.merge(copy, options, isNullOverride === true, false);
};

// Clone an object except for the listed keys which are shallow copied

exports.cloneWithShallow = function (source, keys) {

    if (!source || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {

        return source;
    }

    var storage = internals.store(source, keys); // Move shallow copy items to storage
    var copy = exports.clone(source); // Deep copy the rest
    internals.restore(copy, source, storage); // Shallow copy the stored items and restore
    return copy;
};

internals.store = function (source, keys) {

    var storage = {};
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var value = exports.reach(source, key);
        if (value !== undefined) {
            storage[key] = value;
            internals.reachSet(source, key, undefined);
        }
    }

    return storage;
};

internals.restore = function (copy, source, storage) {

    var keys = Object.keys(storage);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        internals.reachSet(copy, key, storage[key]);
        internals.reachSet(source, key, storage[key]);
    }
};

internals.reachSet = function (obj, key, value) {

    var path = key.split('.');
    var ref = obj;
    for (var i = 0; i < path.length; ++i) {
        var segment = path[i];
        if (i + 1 === path.length) {
            ref[segment] = value;
        }

        ref = ref[segment];
    }
};

// Apply options to defaults except for the listed keys which are shallow copied from option without merging

exports.applyToDefaultsWithShallow = function (defaults, options, keys) {

    exports.assert(defaults && (typeof defaults === 'undefined' ? 'undefined' : _typeof(defaults)) === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options value: must be true, falsy or an object');
    exports.assert(keys && Array.isArray(keys), 'Invalid keys');

    if (!options) {
        // If no options, return null
        return null;
    }

    var copy = exports.cloneWithShallow(defaults, keys);

    if (options === true) {
        // If options is set to true, use defaults
        return copy;
    }

    var storage = internals.store(options, keys); // Move shallow copy items to storage
    exports.merge(copy, options, false, false); // Deep copy the rest
    internals.restore(copy, options, storage); // Shallow copy the stored items and restore
    return copy;
};

// Deep object or array comparison

exports.deepEqual = function (obj, ref, options, seen) {

    options = options || { prototype: true };

    var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);

    if (type !== (typeof ref === 'undefined' ? 'undefined' : _typeof(ref))) {
        return false;
    }

    if (type !== 'object' || obj === null || ref === null) {

        if (obj === ref) {
            // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
            return obj !== 0 || 1 / obj === 1 / ref; // -0 / +0
        }

        return obj !== obj && ref !== ref; // NaN
    }

    seen = seen || [];
    if (seen.indexOf(obj) !== -1) {
        return true; // If previous comparison failed, it would have stopped execution
    }

    seen.push(obj);

    if (Array.isArray(obj)) {
        if (!Array.isArray(ref)) {
            return false;
        }

        if (!options.part && obj.length !== ref.length) {
            return false;
        }

        for (var i = 0; i < obj.length; ++i) {
            if (options.part) {
                var found = false;
                for (var j = 0; j < ref.length; ++j) {
                    if (exports.deepEqual(obj[i], ref[j], options)) {
                        found = true;
                        break;
                    }
                }

                return found;
            }

            if (!exports.deepEqual(obj[i], ref[i], options)) {
                return false;
            }
        }

        return true;
    }

    if (Buffer.isBuffer(obj)) {
        if (!Buffer.isBuffer(ref)) {
            return false;
        }

        if (obj.length !== ref.length) {
            return false;
        }

        for (var _i2 = 0; _i2 < obj.length; ++_i2) {
            if (obj[_i2] !== ref[_i2]) {
                return false;
            }
        }

        return true;
    }

    if (obj instanceof Date) {
        return ref instanceof Date && obj.getTime() === ref.getTime();
    }

    if (obj instanceof RegExp) {
        return ref instanceof RegExp && obj.toString() === ref.toString();
    }

    if (options.prototype) {
        if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
            return false;
        }
    }

    var keys = Object.getOwnPropertyNames(obj);

    if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
        return false;
    }

    for (var _i3 = 0; _i3 < keys.length; ++_i3) {
        var key = keys[_i3];
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        if (descriptor.get) {
            if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
                return false;
            }
        } else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
            return false;
        }
    }

    return true;
};

// Remove duplicate items from array

exports.unique = function (array, key) {

    var result = void 0;
    if (key) {
        result = [];
        var index = new Set();
        array.forEach(function (item) {

            var identifier = item[key];
            if (!index.has(identifier)) {
                index.add(identifier);
                result.push(item);
            }
        });
    } else {
        result = Array.from(new Set(array));
    }

    return result;
};

// Convert array into object

exports.mapToObject = function (array, key) {

    if (!array) {
        return null;
    }

    var obj = {};
    for (var i = 0; i < array.length; ++i) {
        if (key) {
            if (array[i][key]) {
                obj[array[i][key]] = true;
            }
        } else {
            obj[array[i]] = true;
        }
    }

    return obj;
};

// Find the common unique items in two arrays

exports.intersect = function (array1, array2, justFirst) {

    if (!array1 || !array2) {
        return [];
    }

    var common = [];
    var hash = Array.isArray(array1) ? exports.mapToObject(array1) : array1;
    var found = {};
    for (var i = 0; i < array2.length; ++i) {
        if (hash[array2[i]] && !found[array2[i]]) {
            if (justFirst) {
                return array2[i];
            }

            common.push(array2[i]);
            found[array2[i]] = true;
        }
    }

    return justFirst ? null : common;
};

// Test if the reference contains the values

exports.contain = function (ref, values, options) {

    /*
        string -> string(s)
        array -> item(s)
        object -> key(s)
        object -> object (key:value)
    */

    var valuePairs = null;
    if ((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' && (typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object' && !Array.isArray(ref) && !Array.isArray(values)) {

        valuePairs = values;
        values = Object.keys(values);
    } else {
        values = [].concat(values);
    }

    options = options || {}; // deep, once, only, part

    exports.assert(typeof ref === 'string' || (typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object', 'Reference must be string or an object');
    exports.assert(values.length, 'Values array cannot be empty');

    var compare = void 0;
    var compareFlags = void 0;
    if (options.deep) {
        compare = exports.deepEqual;

        var hasOnly = options.hasOwnProperty('only');
        var hasPart = options.hasOwnProperty('part');

        compareFlags = {
            prototype: hasOnly ? options.only : hasPart ? !options.part : false,
            part: hasOnly ? !options.only : hasPart ? options.part : true
        };
    } else {
        compare = function compare(a, b) {
            return a === b;
        };
    }

    var misses = false;
    var matches = new Array(values.length);
    for (var i = 0; i < matches.length; ++i) {
        matches[i] = 0;
    }

    if (typeof ref === 'string') {
        var pattern = '(';
        for (var _i4 = 0; _i4 < values.length; ++_i4) {
            var value = values[_i4];
            exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
            pattern += (_i4 ? '|' : '') + exports.escapeRegex(value);
        }

        var regex = new RegExp(pattern + ')', 'g');
        var leftovers = ref.replace(regex, function ($0, $1) {

            var index = values.indexOf($1);
            ++matches[index];
            return ''; // Remove from string
        });

        misses = !!leftovers;
    } else if (Array.isArray(ref)) {
        for (var _i5 = 0; _i5 < ref.length; ++_i5) {
            var matched = false;
            for (var j = 0; j < values.length && matched === false; ++j) {
                matched = compare(values[j], ref[_i5], compareFlags) && j;
            }

            if (matched !== false) {
                ++matches[matched];
            } else {
                misses = true;
            }
        }
    } else {
        var keys = Object.getOwnPropertyNames(ref);
        for (var _i6 = 0; _i6 < keys.length; ++_i6) {
            var key = keys[_i6];
            var pos = values.indexOf(key);
            if (pos !== -1) {
                if (valuePairs && !compare(valuePairs[key], ref[key], compareFlags)) {

                    return false;
                }

                ++matches[pos];
            } else {
                misses = true;
            }
        }
    }

    var result = false;
    for (var _i7 = 0; _i7 < matches.length; ++_i7) {
        result = result || !!matches[_i7];
        if (options.once && matches[_i7] > 1 || !options.part && !matches[_i7]) {

            return false;
        }
    }

    if (options.only && misses) {

        return false;
    }

    return result;
};

// Flatten array

exports.flatten = function (array, target) {

    var result = target || [];

    for (var i = 0; i < array.length; ++i) {
        if (Array.isArray(array[i])) {
            exports.flatten(array[i], result);
        } else {
            result.push(array[i]);
        }
    }

    return result;
};

// Convert an object key chain string ('a.b.c') to reference (object[a][b][c])

exports.reach = function (obj, chain, options) {

    if (chain === false || chain === null || typeof chain === 'undefined') {

        return obj;
    }

    options = options || {};
    if (typeof options === 'string') {
        options = { separator: options };
    }

    var path = chain.split(options.separator || '.');
    var ref = obj;
    for (var i = 0; i < path.length; ++i) {
        var key = path[i];
        if (key[0] === '-' && Array.isArray(ref)) {
            key = key.slice(1, key.length);
            key = ref.length - key;
        }

        if (!ref || !(((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' || typeof ref === 'function') && key in ref) || (typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) !== 'object' && options.functions === false) {
            // Only object and function can have properties

            exports.assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);
            exports.assert((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
            ref = options.default;
            break;
        }

        ref = ref[key];
    }

    return ref;
};

exports.reachTemplate = function (obj, template, options) {

    return template.replace(/{([^}]+)}/g, function ($0, chain) {

        var value = exports.reach(obj, chain, options);
        return value === undefined || value === null ? '' : value;
    });
};

exports.formatStack = function (stack) {

    var trace = [];
    for (var i = 0; i < stack.length; ++i) {
        var item = stack[i];
        trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
    }

    return trace;
};

exports.formatTrace = function (trace) {

    var display = [];

    for (var i = 0; i < trace.length; ++i) {
        var row = trace[i];
        display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
    }

    return display;
};

exports.callStack = function (slice) {

    // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi

    var v8 = Error.prepareStackTrace;
    Error.prepareStackTrace = function (_, stack) {

        return stack;
    };

    var capture = {};
    Error.captureStackTrace(capture, this);
    var stack = capture.stack;

    Error.prepareStackTrace = v8;

    var trace = exports.formatStack(stack);

    return trace.slice(1 + slice);
};

exports.displayStack = function (slice) {

    var trace = exports.callStack(slice === undefined ? 1 : slice + 1);

    return exports.formatTrace(trace);
};

exports.abortThrow = false;

exports.abort = function (message, hideStack) {

    if (process.env.NODE_ENV === 'test' || exports.abortThrow === true) {
        throw new Error(message || 'Unknown error');
    }

    var stack = '';
    if (!hideStack) {
        stack = exports.displayStack(1).join('\n\t');
    }
    console.log('ABORT: ' + message + '\n\t' + stack);
    process.exit(1);
};

exports.assert = function (condition) {

    if (condition) {
        return;
    }

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
        throw args[0];
    }

    var msgs = args.filter(function (arg) {
        return arg !== '';
    }).map(function (arg) {

        return typeof arg === 'string' ? arg : arg instanceof Error ? arg.message : exports.stringify(arg);
    });

    throw new Assert.AssertionError({
        message: msgs.join(' ') || 'Unknown error',
        actual: false,
        expected: true,
        operator: '==',
        stackStartFunction: exports.assert
    });
};

exports.Bench = function () {

    this.ts = 0;
    this.reset();
};

exports.Bench.prototype.reset = function () {

    this.ts = exports.Bench.now();
};

exports.Bench.prototype.elapsed = function () {

    return exports.Bench.now() - this.ts;
};

exports.Bench.now = function () {

    var ts = process.hrtime();
    return ts[0] * 1e3 + ts[1] / 1e6;
};

// Escape string for Regex construction

exports.escapeRegex = function (string) {

    // Escape ^$.*+-?=!:|\/()[]{},
    return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
};

// Base64url (RFC 4648) encode

exports.base64urlEncode = function (value, encoding) {

    exports.assert(typeof value === 'string' || Buffer.isBuffer(value), 'value must be string or buffer');
    var buf = Buffer.isBuffer(value) ? value : Buffer.from(value, encoding || 'binary');
    return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
};

// Base64url (RFC 4648) decode

exports.base64urlDecode = function (value, encoding) {

    if (typeof value !== 'string') {

        throw new Error('Value not a string');
    }

    if (!/^[\w\-]*$/.test(value)) {

        throw new Error('Invalid character');
    }

    var buf = Buffer.from(value, 'base64');
    return encoding === 'buffer' ? buf : buf.toString(encoding || 'binary');
};

// Escape attribute value for use in HTTP header

exports.escapeHeaderAttribute = function (attribute) {

    // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "

    exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');

    return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"'); // Escape quotes and slash
};

exports.escapeHtml = function (string) {

    return Escape.escapeHtml(string);
};

exports.escapeJavaScript = function (string) {

    return Escape.escapeJavaScript(string);
};

exports.escapeJson = function (string) {

    return Escape.escapeJson(string);
};

exports.once = function (method) {

    if (method._hoekOnce) {
        return method;
    }

    var once = false;
    var wrapped = function wrapped() {

        if (!once) {
            once = true;

            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            method.apply(null, args);
        }
    };

    wrapped._hoekOnce = true;
    return wrapped;
};

exports.isInteger = Number.isSafeInteger;

exports.ignore = function () {};

exports.inherits = Util.inherits;

exports.format = Util.format;

exports.transform = function (source, transform, options) {

    exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');
    var separator = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null ? options.separator || '.' : '.';

    if (Array.isArray(source)) {
        var results = [];
        for (var i = 0; i < source.length; ++i) {
            results.push(exports.transform(source[i], transform, options));
        }
        return results;
    }

    var result = {};
    var keys = Object.keys(transform);

    for (var _i8 = 0; _i8 < keys.length; ++_i8) {
        var key = keys[_i8];
        var path = key.split(separator);
        var sourcePath = transform[key];

        exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');

        var segment = void 0;
        var res = result;

        while (path.length > 1) {
            segment = path.shift();
            if (!res[segment]) {
                res[segment] = {};
            }
            res = res[segment];
        }
        segment = path.shift();
        res[segment] = exports.reach(source, sourcePath, options);
    }

    return result;
};

exports.uniqueFilename = function (path, extension) {

    if (extension) {
        extension = extension[0] !== '.' ? '.' + extension : extension;
    } else {
        extension = '';
    }

    path = Path.resolve(path);
    var name = [Date.now(), process.pid, Crypto.randomBytes(8).toString('hex')].join('-') + extension;
    return Path.join(path, name);
};

exports.stringify = function () {

    try {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return JSON.stringify.apply(null, args);
    } catch (err) {
        return '[Cannot display object: ' + err.message + ']';
    }
};

exports.shallow = function (source) {

    var target = {};
    var keys = Object.keys(source);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        target[key] = source[key];
    }

    return target;
};

exports.wait = function (timeout) {

    return new Promise(function (resolve) {
        return setTimeout(resolve, timeout);
    });
};

exports.block = function () {

    return new Promise(exports.ignore);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer, __webpack_require__(7)));

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var Hoek = __webpack_require__(0);

exports.create = function (key, options) {

    Hoek.assert(typeof key === 'string', 'Invalid reference key:', key);

    var settings = Hoek.clone(options); // options can be reused and modified

    var ref = function ref(value, validationOptions) {

        return Hoek.reach(ref.isContext ? validationOptions.context : value, ref.key, settings);
    };

    ref.isContext = key[0] === (settings && settings.contextPrefix || '$');
    ref.key = ref.isContext ? key.slice(1) : key;
    ref.path = ref.key.split(settings && settings.separator || '.');
    ref.depth = ref.path.length;
    ref.root = ref.path[0];
    ref.isJoi = true;

    ref.toString = function () {

        return (ref.isContext ? 'context:' : 'ref:') + ref.key;
    };

    return ref;
};

exports.isRef = function (ref) {

    return typeof ref === 'function' && ref.isJoi;
};

exports.push = function (array, ref) {

    if (exports.isRef(ref) && !ref.isContext) {

        array.push(ref.root);
    }
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Hoek = __webpack_require__(0);
var Settings = __webpack_require__(11);
var Ref = __webpack_require__(1);
var Errors = __webpack_require__(6);
var Alternatives = null; // Delay-loaded to prevent circular dependencies
var Cast = null;

// Declare internals

var internals = {
    Set: __webpack_require__(9)
};

internals.defaults = {
    abortEarly: true,
    convert: true,
    allowUnknown: false,
    skipFunctions: false,
    stripUnknown: false,
    language: {},
    presence: 'optional',
    strip: false,
    noDefaults: false,
    escapeHtml: false

    // context: null
};

module.exports = internals.Any = function () {
    function _class() {
        _classCallCheck(this, _class);

        Cast = Cast || __webpack_require__(4);

        this.isJoi = true;
        this._type = 'any';
        this._settings = null;
        this._valids = new internals.Set();
        this._invalids = new internals.Set();
        this._tests = [];
        this._refs = [];
        this._flags = {
            /*
             presence: 'optional',                   // optional, required, forbidden, ignore
             allowOnly: false,
             allowUnknown: undefined,
             default: undefined,
             forbidden: false,
             encoding: undefined,
             insensitive: false,
             trim: false,
             normalize: undefined,                   // NFC, NFD, NFKC, NFKD
             case: undefined,                        // upper, lower
             empty: undefined,
             func: false,
             raw: false
             */
        };

        this._description = null;
        this._unit = null;
        this._notes = [];
        this._tags = [];
        this._examples = [];
        this._meta = [];

        this._inner = {}; // Hash of arrays of immutable objects
    }

    _class.prototype._init = function _init() {

        return this;
    };

    _class.prototype.createError = function createError(type, context, state, options) {
        var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this._flags;


        return Errors.create(type, context, state, options, flags);
    };

    _class.prototype.createOverrideError = function createOverrideError(type, context, state, options, message, template) {

        return Errors.create(type, context, state, options, this._flags, message, template);
    };

    _class.prototype.checkOptions = function checkOptions(options) {

        var Schemas = __webpack_require__(21);
        var result = Schemas.options.validate(options);
        if (result.error) {
            throw new Error(result.error.details[0].message);
        }
    };

    _class.prototype.clone = function clone() {

        var obj = Object.create(Object.getPrototypeOf(this));

        obj.isJoi = true;
        obj._currentJoi = this._currentJoi;
        obj._type = this._type;
        obj._settings = this._settings;
        obj._baseType = this._baseType;
        obj._valids = this._valids.slice();
        obj._invalids = this._invalids.slice();
        obj._tests = this._tests.slice();
        obj._refs = this._refs.slice();
        obj._flags = Hoek.clone(this._flags);

        obj._description = this._description;
        obj._unit = this._unit;
        obj._notes = this._notes.slice();
        obj._tags = this._tags.slice();
        obj._examples = this._examples.slice();
        obj._meta = this._meta.slice();

        obj._inner = {};
        var inners = Object.keys(this._inner);
        for (var i = 0; i < inners.length; ++i) {
            var key = inners[i];
            obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;
        }

        return obj;
    };

    _class.prototype.concat = function concat(schema) {

        Hoek.assert(schema instanceof internals.Any, 'Invalid schema object');
        Hoek.assert(this._type === 'any' || schema._type === 'any' || schema._type === this._type, 'Cannot merge type', this._type, 'with another type:', schema._type);

        var obj = this.clone();

        if (this._type === 'any' && schema._type !== 'any') {

            // Reset values as if we were "this"
            var tmpObj = schema.clone();
            var keysToRestore = ['_settings', '_valids', '_invalids', '_tests', '_refs', '_flags', '_description', '_unit', '_notes', '_tags', '_examples', '_meta', '_inner'];

            for (var i = 0; i < keysToRestore.length; ++i) {
                tmpObj[keysToRestore[i]] = obj[keysToRestore[i]];
            }

            obj = tmpObj;
        }

        obj._settings = obj._settings ? Settings.concat(obj._settings, schema._settings) : schema._settings;
        obj._valids.merge(schema._valids, schema._invalids);
        obj._invalids.merge(schema._invalids, schema._valids);
        obj._tests = obj._tests.concat(schema._tests);
        obj._refs = obj._refs.concat(schema._refs);
        Hoek.merge(obj._flags, schema._flags);

        obj._description = schema._description || obj._description;
        obj._unit = schema._unit || obj._unit;
        obj._notes = obj._notes.concat(schema._notes);
        obj._tags = obj._tags.concat(schema._tags);
        obj._examples = obj._examples.concat(schema._examples);
        obj._meta = obj._meta.concat(schema._meta);

        var inners = Object.keys(schema._inner);
        var isObject = obj._type === 'object';
        for (var _i = 0; _i < inners.length; ++_i) {
            var key = inners[_i];
            var source = schema._inner[key];
            if (source) {
                var target = obj._inner[key];
                if (target) {
                    if (isObject && key === 'children') {
                        var keys = {};

                        for (var j = 0; j < target.length; ++j) {
                            keys[target[j].key] = j;
                        }

                        for (var _j = 0; _j < source.length; ++_j) {
                            var sourceKey = source[_j].key;
                            if (keys[sourceKey] >= 0) {
                                target[keys[sourceKey]] = {
                                    key: sourceKey,
                                    schema: target[keys[sourceKey]].schema.concat(source[_j].schema)
                                };
                            } else {
                                target.push(source[_j]);
                            }
                        }
                    } else {
                        obj._inner[key] = obj._inner[key].concat(source);
                    }
                } else {
                    obj._inner[key] = source.slice();
                }
            }
        }

        return obj;
    };

    _class.prototype._test = function _test(name, arg, func, options) {

        var obj = this.clone();
        obj._tests.push({ func: func, name: name, arg: arg, options: options });
        return obj;
    };

    _class.prototype.options = function options(_options) {

        Hoek.assert(!_options.context, 'Cannot override context');
        this.checkOptions(_options);

        var obj = this.clone();
        obj._settings = Settings.concat(obj._settings, _options);
        return obj;
    };

    _class.prototype.strict = function strict(isStrict) {

        var obj = this.clone();

        var convert = isStrict === undefined ? false : !isStrict;
        obj._settings = Settings.concat(obj._settings, { convert: convert });
        return obj;
    };

    _class.prototype.raw = function raw(isRaw) {

        var value = isRaw === undefined ? true : isRaw;

        if (this._flags.raw === value) {
            return this;
        }

        var obj = this.clone();
        obj._flags.raw = value;
        return obj;
    };

    _class.prototype.error = function error(err) {

        Hoek.assert(err && (err instanceof Error || typeof err === 'function'), 'Must provide a valid Error object or a function');

        var obj = this.clone();
        obj._flags.error = err;
        return obj;
    };

    _class.prototype.allow = function allow() {
        for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
            values[_key] = arguments[_key];
        }

        var obj = this.clone();
        values = Hoek.flatten(values);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];

            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');
            obj._invalids.remove(value);
            obj._valids.add(value, obj._refs);
        }
        return obj;
    };

    _class.prototype.valid = function valid() {

        var obj = this.allow.apply(this, arguments);
        obj._flags.allowOnly = true;
        return obj;
    };

    _class.prototype.invalid = function invalid() {
        for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
        }

        var obj = this.clone();
        values = Hoek.flatten(values);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];

            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');
            obj._valids.remove(value);
            obj._invalids.add(value, obj._refs);
        }

        return obj;
    };

    _class.prototype.required = function required() {

        if (this._flags.presence === 'required') {
            return this;
        }

        var obj = this.clone();
        obj._flags.presence = 'required';
        return obj;
    };

    _class.prototype.optional = function optional() {

        if (this._flags.presence === 'optional') {
            return this;
        }

        var obj = this.clone();
        obj._flags.presence = 'optional';
        return obj;
    };

    _class.prototype.forbidden = function forbidden() {

        if (this._flags.presence === 'forbidden') {
            return this;
        }

        var obj = this.clone();
        obj._flags.presence = 'forbidden';
        return obj;
    };

    _class.prototype.strip = function strip() {

        if (this._flags.strip) {
            return this;
        }

        var obj = this.clone();
        obj._flags.strip = true;
        return obj;
    };

    _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {

        children = [].concat(children);

        if (children.length !== 1 || children[0] !== '') {
            root = root ? root + '.' : '';

            var extraChildren = (children[0] === '' ? children.slice(1) : children).map(function (child) {

                return root + child;
            });

            throw new Error('unknown key(s) ' + extraChildren.join(', '));
        }

        return this[fn].apply(this, args);
    };

    _class.prototype.default = function _default(value, description) {

        if (typeof value === 'function' && !Ref.isRef(value)) {

            if (!value.description && description) {

                value.description = description;
            }

            if (!this._flags.func) {
                Hoek.assert(typeof value.description === 'string' && value.description.length > 0, 'description must be provided when default value is a function');
            }
        }

        var obj = this.clone();
        obj._flags.default = value;
        Ref.push(obj._refs, value);
        return obj;
    };

    _class.prototype.empty = function empty(schema) {

        var obj = this.clone();
        if (schema === undefined) {
            delete obj._flags.empty;
        } else {
            obj._flags.empty = Cast.schema(this._currentJoi, schema);
        }
        return obj;
    };

    _class.prototype.when = function when(condition, options) {

        Hoek.assert(options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options');
        Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

        var then = options.hasOwnProperty('then') ? this.concat(Cast.schema(this._currentJoi, options.then)) : undefined;
        var otherwise = options.hasOwnProperty('otherwise') ? this.concat(Cast.schema(this._currentJoi, options.otherwise)) : undefined;

        Alternatives = Alternatives || __webpack_require__(10);

        var alternativeOptions = { then: then, otherwise: otherwise };
        if (Object.prototype.hasOwnProperty.call(options, 'is')) {
            alternativeOptions.is = options.is;
        }
        var obj = Alternatives.when(condition, alternativeOptions);
        obj._flags.presence = 'ignore';
        obj._baseType = this;

        return obj;
    };

    _class.prototype.description = function description(desc) {

        Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');

        var obj = this.clone();
        obj._description = desc;
        return obj;
    };

    _class.prototype.notes = function notes(_notes) {

        Hoek.assert(_notes && (typeof _notes === 'string' || Array.isArray(_notes)), 'Notes must be a non-empty string or array');

        var obj = this.clone();
        obj._notes = obj._notes.concat(_notes);
        return obj;
    };

    _class.prototype.tags = function tags(_tags) {

        Hoek.assert(_tags && (typeof _tags === 'string' || Array.isArray(_tags)), 'Tags must be a non-empty string or array');

        var obj = this.clone();
        obj._tags = obj._tags.concat(_tags);
        return obj;
    };

    _class.prototype.meta = function meta(_meta) {

        Hoek.assert(_meta !== undefined, 'Meta cannot be undefined');

        var obj = this.clone();
        obj._meta = obj._meta.concat(_meta);
        return obj;
    };

    _class.prototype.example = function example() {

        Hoek.assert(arguments.length === 1, 'Missing example');
        var value = arguments.length <= 0 ? undefined : arguments[0];

        var obj = this.clone();
        obj._examples.push(value);
        return obj;
    };

    _class.prototype.unit = function unit(name) {

        Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');

        var obj = this.clone();
        obj._unit = name;
        return obj;
    };

    _class.prototype._prepareEmptyValue = function _prepareEmptyValue(value) {

        if (typeof value === 'string' && this._flags.trim) {
            return value.trim();
        }

        return value;
    };

    _class.prototype._validate = function _validate(value, state, options, reference) {
        var _this = this;

        var originalValue = value;

        // Setup state and settings

        state = state || { key: '', path: [], parent: null, reference: reference };

        if (this._settings) {
            options = Settings.concat(options, this._settings);
        }

        var errors = [];
        var finish = function finish() {

            var finalValue = void 0;

            if (value !== undefined) {
                finalValue = _this._flags.raw ? originalValue : value;
            } else if (options.noDefaults) {
                finalValue = value;
            } else if (Ref.isRef(_this._flags.default)) {
                finalValue = _this._flags.default(state.parent, options);
            } else if (typeof _this._flags.default === 'function' && !(_this._flags.func && !_this._flags.default.description)) {

                var args = void 0;

                if (state.parent !== null && _this._flags.default.length > 0) {

                    args = [Hoek.clone(state.parent), options];
                }

                var defaultValue = internals._try(_this._flags.default, args);
                finalValue = defaultValue.value;
                if (defaultValue.error) {
                    errors.push(_this.createError('any.default', { error: defaultValue.error }, state, options));
                }
            } else {
                finalValue = Hoek.clone(_this._flags.default);
            }

            if (errors.length && typeof _this._flags.error === 'function') {
                var change = _this._flags.error.call(_this, errors);

                if (typeof change === 'string') {
                    errors = [_this.createOverrideError('override', { reason: errors }, state, options, change)];
                } else {
                    errors = [].concat(change).map(function (err) {

                        return err instanceof Error ? err : _this.createOverrideError(err.type || 'override', err.context, state, options, err.message, err.template);
                    });
                }
            }

            return {
                value: _this._flags.strip ? undefined : finalValue,
                finalValue: finalValue,
                errors: errors.length ? errors : null
            };
        };

        if (this._coerce) {
            var coerced = this._coerce.call(this, value, state, options);
            if (coerced.errors) {
                value = coerced.value;
                errors = errors.concat(coerced.errors);
                return finish(); // Coerced error always aborts early
            }

            value = coerced.value;
        }

        if (this._flags.empty && !this._flags.empty._validate(this._prepareEmptyValue(value), null, internals.defaults).errors) {
            value = undefined;
        }

        // Check presence requirements

        var presence = this._flags.presence || options.presence;
        if (presence === 'optional') {
            if (value === undefined) {
                var isDeepDefault = this._flags.hasOwnProperty('default') && this._flags.default === undefined;
                if (isDeepDefault && this._type === 'object') {
                    value = {};
                } else {
                    return finish();
                }
            }
        } else if (presence === 'required' && value === undefined) {

            errors.push(this.createError('any.required', null, state, options));
            return finish();
        } else if (presence === 'forbidden') {
            if (value === undefined) {
                return finish();
            }

            errors.push(this.createError('any.unknown', null, state, options));
            return finish();
        }

        // Check allowed and denied values using the original value

        if (this._valids.has(value, state, options, this._flags.insensitive)) {
            return finish();
        }

        if (this._invalids.has(value, state, options, this._flags.insensitive)) {
            errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', { value: value, invalids: this._invalids.values({ stripUndefined: true }) }, state, options));
            if (options.abortEarly || value === undefined) {
                // No reason to keep validating missing value

                return finish();
            }
        }

        // Convert value and validate type

        if (this._base) {
            var base = this._base.call(this, value, state, options);
            if (base.errors) {
                value = base.value;
                errors = errors.concat(base.errors);
                return finish(); // Base error always aborts early
            }

            if (base.value !== value) {
                value = base.value;

                // Check allowed and denied values using the converted value

                if (this._valids.has(value, state, options, this._flags.insensitive)) {
                    return finish();
                }

                if (this._invalids.has(value, state, options, this._flags.insensitive)) {
                    errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', { value: value, invalids: this._invalids.values({ stripUndefined: true }) }, state, options));
                    if (options.abortEarly) {
                        return finish();
                    }
                }
            }
        }

        // Required values did not match

        if (this._flags.allowOnly) {
            errors.push(this.createError('any.allowOnly', { value: value, valids: this._valids.values({ stripUndefined: true }) }, state, options));
            if (options.abortEarly) {
                return finish();
            }
        }

        // Validate tests

        for (var i = 0; i < this._tests.length; ++i) {
            var test = this._tests[i];
            var ret = test.func.call(this, value, state, options);
            if (ret instanceof Errors.Err) {
                errors.push(ret);
                if (options.abortEarly) {
                    return finish();
                }
            } else {
                value = ret;
            }
        }

        return finish();
    };

    _class.prototype._validateWithOptions = function _validateWithOptions(value, options, callback) {

        if (options) {
            this.checkOptions(options);
        }

        var settings = Settings.concat(internals.defaults, options);
        var result = this._validate(value, null, settings);
        var errors = Errors.process(result.errors, value);

        if (callback) {
            return callback(errors, result.value);
        }

        return {
            error: errors,
            value: result.value,
            then: function then(resolve, reject) {

                if (errors) {
                    return Promise.reject(errors).catch(reject);
                }

                return Promise.resolve(result.value).then(resolve);
            },
            catch: function _catch(reject) {

                if (errors) {
                    return Promise.reject(errors).catch(reject);
                }

                return Promise.resolve(result.value);
            }
        };
    };

    _class.prototype.validate = function validate(value, options, callback) {

        if (typeof options === 'function') {
            return this._validateWithOptions(value, null, options);
        }

        return this._validateWithOptions(value, options, callback);
    };

    _class.prototype.describe = function describe() {
        var _this2 = this;

        var description = {
            type: this._type
        };

        var flags = Object.keys(this._flags);
        if (flags.length) {
            if (['empty', 'default', 'lazy', 'label'].some(function (flag) {
                return _this2._flags.hasOwnProperty(flag);
            })) {
                description.flags = {};
                for (var i = 0; i < flags.length; ++i) {
                    var flag = flags[i];
                    if (flag === 'empty') {
                        description.flags[flag] = this._flags[flag].describe();
                    } else if (flag === 'default') {
                        if (Ref.isRef(this._flags[flag])) {
                            description.flags[flag] = this._flags[flag].toString();
                        } else if (typeof this._flags[flag] === 'function') {
                            description.flags[flag] = {
                                description: this._flags[flag].description,
                                function: this._flags[flag]
                            };
                        } else {
                            description.flags[flag] = this._flags[flag];
                        }
                    } else if (flag === 'lazy' || flag === 'label') ; else {
                        description.flags[flag] = this._flags[flag];
                    }
                }
            } else {
                description.flags = this._flags;
            }
        }

        if (this._settings) {
            description.options = Hoek.clone(this._settings);
        }

        if (this._baseType) {
            description.base = this._baseType.describe();
        }

        if (this._description) {
            description.description = this._description;
        }

        if (this._notes.length) {
            description.notes = this._notes;
        }

        if (this._tags.length) {
            description.tags = this._tags;
        }

        if (this._meta.length) {
            description.meta = this._meta;
        }

        if (this._examples.length) {
            description.examples = this._examples;
        }

        if (this._unit) {
            description.unit = this._unit;
        }

        var valids = this._valids.values();
        if (valids.length) {
            description.valids = valids.map(function (v) {

                return Ref.isRef(v) ? v.toString() : v;
            });
        }

        var invalids = this._invalids.values();
        if (invalids.length) {
            description.invalids = invalids.map(function (v) {

                return Ref.isRef(v) ? v.toString() : v;
            });
        }

        description.rules = [];

        for (var _i2 = 0; _i2 < this._tests.length; ++_i2) {
            var validator = this._tests[_i2];
            var item = { name: validator.name };

            if (validator.arg !== void 0) {
                item.arg = Ref.isRef(validator.arg) ? validator.arg.toString() : validator.arg;
            }

            var options = validator.options;
            if (options) {
                if (options.hasRef) {
                    item.arg = {};
                    var keys = Object.keys(validator.arg);
                    for (var j = 0; j < keys.length; ++j) {
                        var key = keys[j];
                        var value = validator.arg[key];
                        item.arg[key] = Ref.isRef(value) ? value.toString() : value;
                    }
                }

                if (typeof options.description === 'string') {
                    item.description = options.description;
                } else if (typeof options.description === 'function') {
                    item.description = options.description(item.arg);
                }
            }

            description.rules.push(item);
        }

        if (!description.rules.length) {
            delete description.rules;
        }

        var label = this._getLabel();
        if (label) {
            description.label = label;
        }

        return description;
    };

    _class.prototype.label = function label(name) {

        Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');

        var obj = this.clone();
        obj._flags.label = name;
        return obj;
    };

    _class.prototype._getLabel = function _getLabel(def) {

        return this._flags.label || def;
    };

    _createClass(_class, [{
        key: 'schemaType',
        get: function get() {

            return this._type;
        }
    }]);

    return _class;
}();

internals.Any.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects

// Aliases

internals.Any.prototype.only = internals.Any.prototype.equal = internals.Any.prototype.valid;
internals.Any.prototype.disallow = internals.Any.prototype.not = internals.Any.prototype.invalid;
internals.Any.prototype.exist = internals.Any.prototype.required;

internals._try = function (fn, args) {

    var err = void 0;
    var result = void 0;

    try {
        result = fn.apply(null, args);
    } catch (e) {
        err = e;
    }

    return {
        value: result,
        error: err
    };
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(33);
var ieee754 = __webpack_require__(34);
var isArray = __webpack_require__(35);

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr
};

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
};

function allocUnsafe (that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
};

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len);
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
};

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer
};

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  var length = this.length | 0;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>'
};

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = (value & 0xff);
  return offset + 1
};

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24);
    this[offset + 2] = (value >>> 16);
    this[offset + 1] = (value >>> 8);
    this[offset] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    this[offset + 2] = (value >>> 16);
    this[offset + 3] = (value >>> 24);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)));

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Hoek = __webpack_require__(0);
var Ref = __webpack_require__(1);

exports.schema = function (Joi, config) {

    if (config !== undefined && config !== null && (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {

        if (config.isJoi) {
            return config;
        }

        if (Array.isArray(config)) {
            return Joi.alternatives().try(config);
        }

        if (config instanceof RegExp) {
            return Joi.string().regex(config);
        }

        if (config instanceof Date) {
            return Joi.date().valid(config);
        }

        return Joi.object().keys(config);
    }

    if (typeof config === 'string') {
        return Joi.string().valid(config);
    }

    if (typeof config === 'number') {
        return Joi.number().valid(config);
    }

    if (typeof config === 'boolean') {
        return Joi.boolean().valid(config);
    }

    if (Ref.isRef(config)) {
        return Joi.valid(config);
    }

    Hoek.assert(config === null, 'Invalid schema content:', config);

    return Joi.valid(null);
};

exports.ref = function (id) {

    return Ref.isRef(id) ? id : Ref.create(id);
};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Hoek = __webpack_require__(0);
var Language = __webpack_require__(20);

// Declare internals

var internals = {
    annotations: Symbol('joi-annotations')
};

internals.stringify = function (value, wrapArrays) {

    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

    if (value === null) {
        return 'null';
    }

    if (type === 'string') {
        return value;
    }

    if (value instanceof exports.Err || type === 'function' || type === 'symbol') {
        return value.toString();
    }

    if (type === 'object') {
        if (Array.isArray(value)) {
            var partial = '';

            for (var i = 0; i < value.length; ++i) {
                partial = partial + (partial.length ? ', ' : '') + internals.stringify(value[i], wrapArrays);
            }

            return wrapArrays ? '[' + partial + ']' : partial;
        }

        return value.toString();
    }

    return JSON.stringify(value);
};

exports.Err = function () {
    function _class(type, context, state, options, flags, message, template) {
        _classCallCheck(this, _class);

        this.isJoi = true;
        this.type = type;
        this.context = context || {};
        this.context.key = state.path[state.path.length - 1];
        this.context.label = state.key;
        this.path = state.path;
        this.options = options;
        this.flags = flags;
        this.message = message;
        this.template = template;

        var localized = this.options.language;

        if (this.flags.label) {
            this.context.label = this.flags.label;
        } else if (localized && ( // language can be null for arrays exclusion check
        this.context.label === '' || this.context.label === null)) {
            this.context.label = localized.root || Language.errors.root;
        }
    }

    _class.prototype.toString = function toString() {
        var _this = this;

        if (this.message) {
            return this.message;
        }

        var format = void 0;

        if (this.template) {
            format = this.template;
        }

        var localized = this.options.language;

        format = format || Hoek.reach(localized, this.type) || Hoek.reach(Language.errors, this.type);

        if (format === undefined) {
            return 'Error code "' + this.type + '" is not defined, your custom type is missing the correct language definition';
        }

        var wrapArrays = Hoek.reach(localized, 'messages.wrapArrays');
        if (typeof wrapArrays !== 'boolean') {
            wrapArrays = Language.errors.messages.wrapArrays;
        }

        if (format === null) {
            var childrenString = internals.stringify(this.context.reason, wrapArrays);
            if (wrapArrays) {
                return childrenString.slice(1, -1);
            }
            return childrenString;
        }

        var hasKey = /\{\{\!?label\}\}/.test(format);
        var skipKey = format.length > 2 && format[0] === '!' && format[1] === '!';

        if (skipKey) {
            format = format.slice(2);
        }

        if (!hasKey && !skipKey) {
            var localizedKey = Hoek.reach(localized, 'key');
            if (typeof localizedKey === 'string') {
                format = localizedKey + format;
            } else {
                format = Hoek.reach(Language.errors, 'key') + format;
            }
        }

        return format.replace(/\{\{(\!?)([^}]+)\}\}/g, function ($0, isSecure, name) {

            var value = Hoek.reach(_this.context, name);
            var normalized = internals.stringify(value, wrapArrays);
            return isSecure && _this.options.escapeHtml ? Hoek.escapeHtml(normalized) : normalized;
        });
    };

    return _class;
}();

exports.create = function (type, context, state, options, flags, message, template) {

    return new exports.Err(type, context, state, options, flags, message, template);
};

exports.process = function (errors, object) {

    if (!errors || !errors.length) {
        return null;
    }

    // Construct error

    var message = '';
    var details = [];

    var processErrors = function processErrors(localErrors, parent) {

        for (var i = 0; i < localErrors.length; ++i) {
            var item = localErrors[i];

            if (item instanceof Error) {
                return item;
            }

            if (item.flags.error && typeof item.flags.error !== 'function') {
                return item.flags.error;
            }

            var itemMessage = void 0;
            if (parent === undefined) {
                itemMessage = item.toString();
                message = message + (message ? '. ' : '') + itemMessage;
            }

            // Do not push intermediate errors, we're only interested in leafs

            if (item.context.reason && item.context.reason.length) {
                var _override = processErrors(item.context.reason, item.path);
                if (_override) {
                    return _override;
                }
            } else {
                details.push({
                    message: itemMessage || item.toString(),
                    path: item.path,
                    type: item.type,
                    context: item.context
                });
            }
        }
    };

    var override = processErrors(errors);
    if (override) {
        return override;
    }

    var error = new Error(message);
    error.isJoi = true;
    error.name = 'ValidationError';
    error.details = details;
    error._object = object;
    error.annotate = internals.annotate;
    return error;
};

// Inspired by json-stringify-safe
internals.safeStringify = function (obj, spaces) {

    return JSON.stringify(obj, internals.serializer(), spaces);
};

internals.serializer = function () {

    var keys = [];
    var stack = [];

    var cycleReplacer = function cycleReplacer(key, value) {

        if (stack[0] === value) {
            return '[Circular ~]';
        }

        return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
    };

    return function (key, value) {

        if (stack.length > 0) {
            var thisPos = stack.indexOf(this);
            if (~thisPos) {
                stack.length = thisPos + 1;
                keys.length = thisPos + 1;
                keys[thisPos] = key;
            } else {
                stack.push(this);
                keys.push(key);
            }

            if (~stack.indexOf(value)) {
                value = cycleReplacer.call(this, key, value);
            }
        } else {
            stack.push(value);
        }

        if (value) {
            var annotations = value[internals.annotations];
            if (annotations) {
                if (Array.isArray(value)) {
                    var annotated = [];

                    for (var i = 0; i < value.length; ++i) {
                        if (annotations.errors[i]) {
                            annotated.push('_$idx$_' + annotations.errors[i].sort().join(', ') + '_$end$_');
                        }
                        annotated.push(value[i]);
                    }

                    value = annotated;
                } else {
                    var errorKeys = Object.keys(annotations.errors);
                    for (var _i = 0; _i < errorKeys.length; ++_i) {
                        var errorKey = errorKeys[_i];
                        value[errorKey + '_$key$_' + annotations.errors[errorKey].sort().join(', ') + '_$end$_'] = value[errorKey];
                        value[errorKey] = undefined;
                    }

                    var missingKeys = Object.keys(annotations.missing);
                    for (var _i2 = 0; _i2 < missingKeys.length; ++_i2) {
                        var missingKey = missingKeys[_i2];
                        value['_$miss$_' + missingKey + '|' + annotations.missing[missingKey] + '_$end$_'] = '__missing__';
                    }
                }

                return value;
            }
        }

        if (value === Infinity || value === -Infinity || Number.isNaN(value) || typeof value === 'function' || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol') {
            return '[' + value.toString() + ']';
        }

        return value;
    };
};

internals.annotate = function (stripColorCodes) {

    var redFgEscape = stripColorCodes ? '' : '\x1B[31m';
    var redBgEscape = stripColorCodes ? '' : '\x1B[41m';
    var endColor = stripColorCodes ? '' : '\x1B[0m';

    if (_typeof(this._object) !== 'object') {
        return this.details[0].message;
    }

    var obj = Hoek.clone(this._object || {});

    for (var i = this.details.length - 1; i >= 0; --i) {
        // Reverse order to process deepest child first
        var pos = i + 1;
        var error = this.details[i];
        var path = error.path;
        var ref = obj;
        for (var j = 0;; ++j) {
            var seg = path[j];

            if (ref.isImmutable) {
                ref = ref.clone(); // joi schemas are not cloned by hoek, we have to take this extra step
            }

            if (j + 1 < path.length && ref[seg] && typeof ref[seg] !== 'string') {

                ref = ref[seg];
            } else {
                var refAnnotations = ref[internals.annotations] = ref[internals.annotations] || { errors: {}, missing: {} };
                var value = ref[seg];
                var cacheKey = seg || error.context.label;

                if (value !== undefined) {
                    refAnnotations.errors[cacheKey] = refAnnotations.errors[cacheKey] || [];
                    refAnnotations.errors[cacheKey].push(pos);
                } else {
                    refAnnotations.missing[cacheKey] = pos;
                }

                break;
            }
        }
    }

    var replacers = {
        key: /_\$key\$_([, \d]+)_\$end\$_\"/g,
        missing: /\"_\$miss\$_([^\|]+)\|(\d+)_\$end\$_\"\: \"__missing__\"/g,
        arrayIndex: /\s*\"_\$idx\$_([, \d]+)_\$end\$_\",?\n(.*)/g,
        specials: /"\[(NaN|Symbol.*|-?Infinity|function.*|\(.*)\]"/g
    };

    var message = internals.safeStringify(obj, 2).replace(replacers.key, function ($0, $1) {
        return '" ' + redFgEscape + '[' + $1 + ']' + endColor;
    }).replace(replacers.missing, function ($0, $1, $2) {
        return redBgEscape + '"' + $1 + '"' + endColor + redFgEscape + ' [' + $2 + ']: -- missing --' + endColor;
    }).replace(replacers.arrayIndex, function ($0, $1, $2) {
        return '\n' + $2 + ' ' + redFgEscape + '[' + $1 + ']' + endColor;
    }).replace(replacers.specials, function ($0, $1) {
        return $1;
    });

    message = message + '\n' + redFgEscape;

    for (var _i3 = 0; _i3 < this.details.length; ++_i3) {
        var _pos = _i3 + 1;
        message = message + '\n[' + _pos + '] ' + this.details[_i3].message;
    }

    message = message + endColor;

    return message;
};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ());
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] };

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Hoek = __webpack_require__(0);
var Any = __webpack_require__(2);
var Cast = __webpack_require__(4);
var Errors = __webpack_require__(6);
var Lazy = __webpack_require__(26);
var Ref = __webpack_require__(1);
var Settings = __webpack_require__(11);

// Declare internals

var internals = {
    alternatives: __webpack_require__(10),
    array: __webpack_require__(22),
    boolean: __webpack_require__(24),
    binary: __webpack_require__(23),
    date: __webpack_require__(12),
    func: __webpack_require__(25),
    number: __webpack_require__(27),
    object: __webpack_require__(13),
    string: __webpack_require__(28)
};

internals.callWithDefaults = function (schema, args) {
    var _schema;

    Hoek.assert(this, 'Must be invoked on a Joi instance.');

    if (this._defaults) {
        schema = this._defaults(schema);
    }

    schema._currentJoi = this;

    return (_schema = schema)._init.apply(_schema, _toConsumableArray(args));
};

internals.root = function () {

    var any = new Any();

    var root = any.clone();
    Any.prototype._currentJoi = root;
    root._currentJoi = root;

    root.any = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        Hoek.assert(args.length === 0, 'Joi.any() does not allow arguments.');

        return internals.callWithDefaults.call(this, any, args);
    };

    root.alternatives = root.alt = function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return internals.callWithDefaults.call(this, internals.alternatives, args);
    };

    root.array = function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        Hoek.assert(args.length === 0, 'Joi.array() does not allow arguments.');

        return internals.callWithDefaults.call(this, internals.array, args);
    };

    root.boolean = root.bool = function () {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        Hoek.assert(args.length === 0, 'Joi.boolean() does not allow arguments.');

        return internals.callWithDefaults.call(this, internals.boolean, args);
    };

    root.binary = function () {
        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
        }

        Hoek.assert(args.length === 0, 'Joi.binary() does not allow arguments.');

        return internals.callWithDefaults.call(this, internals.binary, args);
    };

    root.date = function () {
        for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
        }

        Hoek.assert(args.length === 0, 'Joi.date() does not allow arguments.');

        return internals.callWithDefaults.call(this, internals.date, args);
    };

    root.func = function () {
        for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
        }

        Hoek.assert(args.length === 0, 'Joi.func() does not allow arguments.');

        return internals.callWithDefaults.call(this, internals.func, args);
    };

    root.number = function () {
        for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
        }

        Hoek.assert(args.length === 0, 'Joi.number() does not allow arguments.');

        return internals.callWithDefaults.call(this, internals.number, args);
    };

    root.object = function () {
        for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
        }

        return internals.callWithDefaults.call(this, internals.object, args);
    };

    root.string = function () {
        for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
        }

        Hoek.assert(args.length === 0, 'Joi.string() does not allow arguments.');

        return internals.callWithDefaults.call(this, internals.string, args);
    };

    root.ref = function () {

        return Ref.create.apply(Ref, arguments);
    };

    root.isRef = function (ref) {

        return Ref.isRef(ref);
    };

    root.validate = function (value) /*, [schema], [options], callback */{
        var _ref;

        var last = (_ref = (arguments.length <= 1 ? 0 : arguments.length - 1) - 1 + 1, arguments.length <= _ref ? undefined : arguments[_ref]);
        var callback = typeof last === 'function' ? last : null;

        var count = (arguments.length <= 1 ? 0 : arguments.length - 1) - (callback ? 1 : 0);
        if (count === 0) {
            return any.validate(value, callback);
        }

        var options = count === 2 ? arguments.length <= 2 ? undefined : arguments[2] : {};
        var schema = root.compile(arguments.length <= 1 ? undefined : arguments[1]);

        return schema._validateWithOptions(value, options, callback);
    };

    root.describe = function () {

        var schema = arguments.length ? root.compile(arguments.length <= 0 ? undefined : arguments[0]) : any;
        return schema.describe();
    };

    root.compile = function (schema) {

        try {
            return Cast.schema(this, schema);
        } catch (err) {
            if (err.hasOwnProperty('path')) {
                err.message = err.message + '(' + err.path + ')';
            }
            throw err;
        }
    };

    root.assert = function (value, schema, message) {

        root.attempt(value, schema, message);
    };

    root.attempt = function (value, schema, message) {

        var result = root.validate(value, schema);
        var error = result.error;
        if (error) {
            if (!message) {
                if (typeof error.annotate === 'function') {
                    error.message = error.annotate();
                }
                throw error;
            }

            if (!(message instanceof Error)) {
                if (typeof error.annotate === 'function') {
                    error.message = message + ' ' + error.annotate();
                }
                throw error;
            }

            throw message;
        }

        return result.value;
    };

    root.reach = function (schema, path) {

        Hoek.assert(schema && schema instanceof Any, 'you must provide a joi schema');
        Hoek.assert(Array.isArray(path) || typeof path === 'string', 'path must be a string or an array of strings');

        var reach = function reach(sourceSchema, schemaPath) {

            if (!schemaPath.length) {
                return sourceSchema;
            }

            var children = sourceSchema._inner.children;
            if (!children) {
                return;
            }

            var key = schemaPath.shift();
            for (var i = 0; i < children.length; ++i) {
                var child = children[i];
                if (child.key === key) {
                    return reach(child.schema, schemaPath);
                }
            }
        };

        var schemaPath = typeof path === 'string' ? path ? path.split('.') : [] : path.slice();

        return reach(schema, schemaPath);
    };

    root.lazy = function (fn) {

        return Lazy.set(fn);
    };

    root.defaults = function (fn) {
        var _this = this;

        Hoek.assert(typeof fn === 'function', 'Defaults must be a function');

        var joi = Object.create(this.any());
        joi = fn(joi);

        Hoek.assert(joi && joi instanceof this.constructor, 'defaults() must return a schema');

        _extends(joi, this, joi.clone()); // Re-add the types from `this` but also keep the settings from joi's potential new defaults

        joi._defaults = function (schema) {

            if (_this._defaults) {
                schema = _this._defaults(schema);
                Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');
            }

            schema = fn(schema);
            Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');
            return schema;
        };

        return joi;
    };

    root.extend = function () {
        var _this2 = this;

        for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
        }

        var extensions = Hoek.flatten(args);
        Hoek.assert(extensions.length > 0, 'You need to provide at least one extension');

        this.assert(extensions, root.extensionsSchema);

        var joi = Object.create(this.any());
        _extends(joi, this);

        var _loop = function _loop(i) {
            var extension = extensions[i];

            if (typeof extension === 'function') {
                extension = extension(joi);
            }

            _this2.assert(extension, root.extensionSchema);

            var base = (extension.base || _this2.any()).clone(); // Cloning because we're going to override language afterwards
            var ctor = base.constructor;
            var type = function (_ctor) {
                _inherits(type, _ctor);

                // eslint-disable-line no-loop-func

                function type() {
                    _classCallCheck(this, type);

                    var _this3 = _possibleConstructorReturn(this, _ctor.call(this));

                    if (extension.base) {
                        _extends(_this3, base);
                    }

                    _this3._type = extension.name;

                    if (extension.language) {
                        _this3._settings = Settings.concat(_this3._settings, {
                            language: _defineProperty({}, extension.name, extension.language)
                        });
                    }
                    return _this3;
                }

                return type;
            }(ctor);

            if (extension.coerce) {
                type.prototype._coerce = function (value, state, options) {

                    if (ctor.prototype._coerce) {
                        var baseRet = ctor.prototype._coerce.call(this, value, state, options);

                        if (baseRet.errors) {
                            return baseRet;
                        }

                        value = baseRet.value;
                    }

                    var ret = extension.coerce.call(this, value, state, options);
                    if (ret instanceof Errors.Err) {
                        return { value: value, errors: ret };
                    }

                    return { value: ret };
                };
            }
            if (extension.pre) {
                type.prototype._base = function (value, state, options) {

                    if (ctor.prototype._base) {
                        var baseRet = ctor.prototype._base.call(this, value, state, options);

                        if (baseRet.errors) {
                            return baseRet;
                        }

                        value = baseRet.value;
                    }

                    var ret = extension.pre.call(this, value, state, options);
                    if (ret instanceof Errors.Err) {
                        return { value: value, errors: ret };
                    }

                    return { value: ret };
                };
            }

            if (extension.rules) {
                var _loop2 = function _loop2(j) {
                    var rule = extension.rules[j];
                    var ruleArgs = rule.params ? rule.params instanceof Any ? rule.params._inner.children.map(function (k) {
                        return k.key;
                    }) : Object.keys(rule.params) : [];
                    var validateArgs = rule.params ? Cast.schema(_this2, rule.params) : null;

                    type.prototype[rule.name] = function () {
                        for (var _len12 = arguments.length, rArgs = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
                            rArgs[_key12] = arguments[_key12];
                        }

                        // eslint-disable-line no-loop-func

                        if (rArgs.length > ruleArgs.length) {
                            throw new Error('Unexpected number of arguments');
                        }

                        var hasRef = false;
                        var arg = {};

                        for (var k = 0; k < ruleArgs.length; ++k) {
                            arg[ruleArgs[k]] = rArgs[k];
                            if (!hasRef && Ref.isRef(rArgs[k])) {
                                hasRef = true;
                            }
                        }

                        if (validateArgs) {
                            arg = joi.attempt(arg, validateArgs);
                        }

                        var schema = void 0;
                        if (rule.validate) {
                            var validate = function validate(value, state, options) {

                                return rule.validate.call(this, arg, value, state, options);
                            };

                            schema = this._test(rule.name, arg, validate, {
                                description: rule.description,
                                hasRef: hasRef
                            });
                        } else {
                            schema = this.clone();
                        }

                        if (rule.setup) {
                            var newSchema = rule.setup.call(schema, arg);
                            if (newSchema !== undefined) {
                                Hoek.assert(newSchema instanceof Any, 'Setup of extension Joi.' + this._type + '().' + rule.name + '() must return undefined or a Joi object');
                                schema = newSchema;
                            }
                        }

                        return schema;
                    };
                };

                for (var j = 0; j < extension.rules.length; ++j) {
                    _loop2(j);
                }
            }

            if (extension.describe) {
                type.prototype.describe = function () {

                    var description = ctor.prototype.describe.call(this);
                    return extension.describe.call(this, description);
                };
            }

            var instance = new type();
            joi[extension.name] = function () {
                for (var _len13 = arguments.length, extArgs = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
                    extArgs[_key13] = arguments[_key13];
                }

                return internals.callWithDefaults.call(this, instance, extArgs);
            };
        };

        for (var i = 0; i < extensions.length; ++i) {
            _loop(i);
        }

        return joi;
    };

    root.extensionSchema = internals.object.keys({
        base: internals.object.type(Any, 'Joi object'),
        name: internals.string.required(),
        coerce: internals.func.arity(3),
        pre: internals.func.arity(3),
        language: internals.object,
        describe: internals.func.arity(1),
        rules: internals.array.items(internals.object.keys({
            name: internals.string.required(),
            setup: internals.func.arity(1),
            validate: internals.func.arity(4),
            params: [internals.object.pattern(/.*/, internals.object.type(Any, 'Joi object')), internals.object.type(internals.object.constructor, 'Joi object')],
            description: [internals.string, internals.func.arity(1)]
        }).or('setup', 'validate'))
    }).strict();

    root.extensionsSchema = internals.array.items([internals.object, internals.func.arity(1)]).strict();

    root.version = __webpack_require__(36).version;

    return root;
};

module.exports = internals.root();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Ref = __webpack_require__(1);

var internals = {};

internals.extendedCheckForValue = function (value, insensitive) {

    var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);

    if (valueType === 'object') {
        if (value instanceof Date) {
            return function (item) {

                return item instanceof Date && value.getTime() === item.getTime();
            };
        }
        if (Buffer.isBuffer(value)) {
            return function (item) {

                return Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary');
            };
        }
    } else if (insensitive && valueType === 'string') {
        var lowercaseValue = value.toLowerCase();
        return function (item) {

            return typeof item === 'string' && lowercaseValue === item.toLowerCase();
        };
    }

    return null;
};

module.exports = function () {
    function InternalSet(from) {
        _classCallCheck(this, InternalSet);

        this._set = new Set(from);
        this._hasRef = false;
    }

    InternalSet.prototype.add = function add(value, refs) {

        var isRef = Ref.isRef(value);
        if (!isRef && this.has(value, null, null, false)) {

            return this;
        }

        if (refs !== undefined) {
            // If it's a merge, we don't have any refs
            Ref.push(refs, value);
        }

        this._set.add(value);

        this._hasRef |= isRef;

        return this;
    };

    InternalSet.prototype.merge = function merge(add, remove) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {

            for (var _iterator = add._set[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var item = _step.value;

                this.add(item);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = remove._set[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _item = _step2.value;

                this.remove(_item);
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        return this;
    };

    InternalSet.prototype.remove = function remove(value) {

        this._set.delete(value);
        return this;
    };

    InternalSet.prototype.has = function has(value, state, options, insensitive) {

        if (!this._set.size) {
            return false;
        }

        var hasValue = this._set.has(value);
        if (hasValue) {
            return hasValue;
        }

        var extendedCheck = internals.extendedCheckForValue(value, insensitive);
        if (!extendedCheck) {
            if (state && this._hasRef) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = this._set[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var item = _step3.value;

                        if (Ref.isRef(item)) {
                            item = item(state.reference || state.parent, options);
                            if (value === item || Array.isArray(item) && item.includes(value)) {
                                return true;
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }

            return false;
        }

        return this._has(value, state, options, extendedCheck);
    };

    InternalSet.prototype._has = function _has(value, state, options, check) {

        var checkRef = !!(state && this._hasRef);

        var isReallyEqual = function isReallyEqual(item) {

            if (value === item) {
                return true;
            }

            return check(item);
        };

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = this._set[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var item = _step4.value;

                if (checkRef && Ref.isRef(item)) {
                    // Only resolve references if there is a state, otherwise it's a merge
                    item = item(state.reference || state.parent, options);

                    if (Array.isArray(item)) {
                        if (item.find(isReallyEqual)) {
                            return true;
                        }
                        continue;
                    }
                }

                if (isReallyEqual(item)) {
                    return true;
                }
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }

        return false;
    };

    InternalSet.prototype.values = function values(options) {

        if (options && options.stripUndefined) {
            var values = [];

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this._set[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var item = _step5.value;

                    if (item !== undefined) {
                        values.push(item);
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return values;
        }

        return Array.from(this._set);
    };

    InternalSet.prototype.slice = function slice() {

        var set = new InternalSet(this._set);
        set._hasRef = this._hasRef;
        return set;
    };

    InternalSet.prototype.concat = function concat(source) {

        var set = new InternalSet([].concat(_toConsumableArray(this._set), _toConsumableArray(source._set)));
        set._hasRef = !!(this._hasRef | source._hasRef);
        return set;
    };

    return InternalSet;
}();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer));

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Hoek = __webpack_require__(0);
var Any = __webpack_require__(2);
var Cast = __webpack_require__(4);
var Ref = __webpack_require__(1);

// Declare internals

var internals = {};

internals.Alternatives = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'alternatives';
        _this._invalids.remove(null);
        _this._inner.matches = [];
        return _this;
    }

    _class.prototype._init = function _init() {

        return arguments.length ? this.try.apply(this, arguments) : this;
    };

    _class.prototype._base = function _base(value, state, options) {

        var errors = [];
        var il = this._inner.matches.length;
        var baseType = this._baseType;

        for (var i = 0; i < il; ++i) {
            var item = this._inner.matches[i];
            if (!item.schema) {
                var schema = item.peek || item.is;
                var input = item.is ? item.ref(state.reference || state.parent, options) : value;
                var failed = schema._validate(input, null, options, state.parent).errors;

                if (failed) {
                    if (item.otherwise) {
                        return item.otherwise._validate(value, state, options);
                    }
                } else if (item.then) {
                    return item.then._validate(value, state, options);
                }

                if (i === il - 1 && baseType) {
                    return baseType._validate(value, state, options);
                }

                continue;
            }

            var result = item.schema._validate(value, state, options);
            if (!result.errors) {
                // Found a valid match
                return result;
            }

            errors = errors.concat(result.errors);
        }

        if (errors.length) {
            return { errors: this.createError('alternatives.child', { reason: errors }, state, options) };
        }

        return { errors: this.createError('alternatives.base', null, state, options) };
    };

    _class.prototype.try = function _try() {
        for (var _len = arguments.length, schemas = Array(_len), _key = 0; _key < _len; _key++) {
            schemas[_key] = arguments[_key];
        }

        schemas = Hoek.flatten(schemas);
        Hoek.assert(schemas.length, 'Cannot add other alternatives without at least one schema');

        var obj = this.clone();

        for (var i = 0; i < schemas.length; ++i) {
            var cast = Cast.schema(this._currentJoi, schemas[i]);
            if (cast._refs.length) {
                obj._refs = obj._refs.concat(cast._refs);
            }
            obj._inner.matches.push({ schema: cast });
        }

        return obj;
    };

    _class.prototype.when = function when(condition, options) {

        var schemaCondition = false;
        Hoek.assert(Ref.isRef(condition) || typeof condition === 'string' || (schemaCondition = condition instanceof Any), 'Invalid condition:', condition);
        Hoek.assert(options, 'Missing options');
        Hoek.assert((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options');
        if (schemaCondition) {
            Hoek.assert(!options.hasOwnProperty('is'), '"is" can not be used with a schema condition');
        } else {
            Hoek.assert(options.hasOwnProperty('is'), 'Missing "is" directive');
        }
        Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

        var obj = this.clone();
        var is = void 0;
        if (!schemaCondition) {
            is = Cast.schema(this._currentJoi, options.is);

            if (options.is === null || !(Ref.isRef(options.is) || options.is instanceof Any)) {

                // Only apply required if this wasn't already a schema or a ref, we'll suppose people know what they're doing
                is = is.required();
            }
        }

        var item = {
            ref: schemaCondition ? null : Cast.ref(condition),
            peek: schemaCondition ? condition : null,
            is: is,
            then: options.then !== undefined ? Cast.schema(this._currentJoi, options.then) : undefined,
            otherwise: options.otherwise !== undefined ? Cast.schema(this._currentJoi, options.otherwise) : undefined
        };

        if (obj._baseType) {

            item.then = item.then && obj._baseType.concat(item.then);
            item.otherwise = item.otherwise && obj._baseType.concat(item.otherwise);
        }

        if (!schemaCondition) {
            Ref.push(obj._refs, item.ref);
            obj._refs = obj._refs.concat(item.is._refs);
        }

        if (item.then && item.then._refs) {
            obj._refs = obj._refs.concat(item.then._refs);
        }

        if (item.otherwise && item.otherwise._refs) {
            obj._refs = obj._refs.concat(item.otherwise._refs);
        }

        obj._inner.matches.push(item);

        return obj;
    };

    _class.prototype.describe = function describe() {

        var description = Any.prototype.describe.call(this);
        var alternatives = [];
        for (var i = 0; i < this._inner.matches.length; ++i) {
            var item = this._inner.matches[i];
            if (item.schema) {

                // try()

                alternatives.push(item.schema.describe());
            } else {

                // when()

                var when = item.is ? {
                    ref: item.ref.toString(),
                    is: item.is.describe()
                } : {
                    peek: item.peek.describe()
                };

                if (item.then) {
                    when.then = item.then.describe();
                }

                if (item.otherwise) {
                    when.otherwise = item.otherwise.describe();
                }

                alternatives.push(when);
            }
        }

        description.alternatives = alternatives;
        return description;
    };

    return _class;
}(Any);

module.exports = new internals.Alternatives();

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Hoek = __webpack_require__(0);

exports.concat = function (target, source) {

    if (!source) {
        return target;
    }

    var obj = _extends({}, target);

    var sKeys = Object.keys(source);
    for (var i = 0; i < sKeys.length; ++i) {
        var key = sKeys[i];
        if (key !== 'language' || !obj.hasOwnProperty(key)) {

            obj[key] = source[key];
        } else {
            obj[key] = Hoek.applyToDefaults(obj[key], source[key]);
        }
    }

    return obj;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Any = __webpack_require__(2);
var Ref = __webpack_require__(1);
var Hoek = __webpack_require__(0);

// Declare internals

var internals = {};

internals.isoDate = /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/;
internals.invalidDate = new Date('');
internals.isIsoDate = function () {

    var isoString = internals.isoDate.toString();

    return function (date) {

        return date && date.toString() === isoString;
    };
}();

internals.Date = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'date';
        return _this;
    }

    _class.prototype._base = function _base(value, state, options) {

        var result = {
            value: options.convert && internals.Date.toDate(value, this._flags.format, this._flags.timestamp, this._flags.multiplier) || value
        };

        if (result.value instanceof Date && !isNaN(result.value.getTime())) {
            result.errors = null;
        } else if (!options.convert) {
            result.errors = this.createError('date.strict', null, state, options);
        } else {
            var type = void 0;
            if (internals.isIsoDate(this._flags.format)) {
                type = 'isoDate';
            } else if (this._flags.timestamp) {
                type = 'timestamp.' + this._flags.timestamp;
            } else {
                type = 'base';
            }

            result.errors = this.createError('date.' + type, null, state, options);
        }

        return result;
    };

    _class.toDate = function toDate(value, format, timestamp, multiplier) {

        if (value instanceof Date) {
            return value;
        }

        if (typeof value === 'string' || typeof value === 'number' && !isNaN(value) && isFinite(value)) {

            if (typeof value === 'string' && /^[+-]?\d+(\.\d+)?$/.test(value)) {

                value = parseFloat(value);
            }

            var date = void 0;
            if (format && internals.isIsoDate(format)) {
                date = format.test(value) ? new Date(value) : internals.invalidDate;
            } else if (timestamp && multiplier) {
                date = /^\s*$/.test(value) ? internals.invalidDate : new Date(value * multiplier);
            } else {
                date = new Date(value);
            }

            if (!isNaN(date.getTime())) {
                return date;
            }
        }

        return null;
    };

    _class.prototype.iso = function iso() {

        if (this._flags.format === internals.isoDate) {
            return this;
        }

        var obj = this.clone();
        obj._flags.format = internals.isoDate;
        return obj;
    };

    _class.prototype.timestamp = function timestamp() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'javascript';


        var allowed = ['javascript', 'unix'];
        Hoek.assert(allowed.includes(type), '"type" must be one of "' + allowed.join('", "') + '"');

        if (this._flags.timestamp === type) {
            return this;
        }

        var obj = this.clone();
        obj._flags.timestamp = type;
        obj._flags.multiplier = type === 'unix' ? 1000 : 1;
        return obj;
    };

    _class.prototype._isIsoDate = function _isIsoDate(value) {

        return internals.isoDate.test(value);
    };

    return _class;
}(Any);

internals.compare = function (type, compare) {

    return function (date) {

        var isNow = date === 'now';
        var isRef = Ref.isRef(date);

        if (!isNow && !isRef) {
            date = internals.Date.toDate(date);
        }

        Hoek.assert(date, 'Invalid date format');

        return this._test(type, date, function (value, state, options) {

            var compareTo = void 0;
            if (isNow) {
                compareTo = Date.now();
            } else if (isRef) {
                compareTo = internals.Date.toDate(date(state.reference || state.parent, options));

                if (!compareTo) {
                    return this.createError('date.ref', { ref: date.key }, state, options);
                }

                compareTo = compareTo.getTime();
            } else {
                compareTo = date.getTime();
            }

            if (compare(value.getTime(), compareTo)) {
                return value;
            }

            return this.createError('date.' + type, { limit: new Date(compareTo) }, state, options);
        });
    };
};

internals.Date.prototype.min = internals.compare('min', function (value, date) {
    return value >= date;
});
internals.Date.prototype.max = internals.compare('max', function (value, date) {
    return value <= date;
});
internals.Date.prototype.greater = internals.compare('greater', function (value, date) {
    return value > date;
});
internals.Date.prototype.less = internals.compare('less', function (value, date) {
    return value < date;
});

module.exports = new internals.Date();

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Hoek = __webpack_require__(0);
var Topo = __webpack_require__(31);
var Any = __webpack_require__(2);
var Errors = __webpack_require__(6);
var Cast = __webpack_require__(4);

// Declare internals

var internals = {};

internals.Object = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'object';
        _this._inner.children = null;
        _this._inner.renames = [];
        _this._inner.dependencies = [];
        _this._inner.patterns = [];
        return _this;
    }

    _class.prototype._init = function _init() {

        return arguments.length ? this.keys.apply(this, arguments) : this;
    };

    _class.prototype._base = function _base(value, state, options) {

        var target = value;
        var errors = [];
        var finish = function finish() {

            return {
                value: target,
                errors: errors.length ? errors : null
            };
        };

        if (typeof value === 'string' && options.convert) {

            value = internals.safeParse(value);
        }

        var type = this._flags.func ? 'function' : 'object';
        if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== type || Array.isArray(value)) {

            errors.push(this.createError(type + '.base', null, state, options));
            return finish();
        }

        // Skip if there are no other rules to test

        if (!this._inner.renames.length && !this._inner.dependencies.length && !this._inner.children && // null allows any keys
        !this._inner.patterns.length) {

            target = value;
            return finish();
        }

        // Ensure target is a local copy (parsed) or shallow copy

        if (target === value) {
            if (type === 'object') {
                target = Object.create(Object.getPrototypeOf(value));
            } else {
                target = function target() {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return value.apply(this, args);
                };

                target.prototype = Hoek.clone(value.prototype);
            }

            var valueKeys = Object.keys(value);
            for (var i = 0; i < valueKeys.length; ++i) {
                target[valueKeys[i]] = value[valueKeys[i]];
            }
        } else {
            target = value;
        }

        // Rename keys

        var renamed = {};
        for (var _i = 0; _i < this._inner.renames.length; ++_i) {
            var rename = this._inner.renames[_i];

            if (rename.isRegExp) {
                var targetKeys = Object.keys(target);
                var matchedTargetKeys = [];

                for (var j = 0; j < targetKeys.length; ++j) {
                    if (rename.from.test(targetKeys[j])) {
                        matchedTargetKeys.push(targetKeys[j]);
                    }
                }

                var allUndefined = matchedTargetKeys.every(function (key) {
                    return target[key] === undefined;
                });
                if (rename.options.ignoreUndefined && allUndefined) {
                    continue;
                }

                if (!rename.options.multiple && renamed[rename.to]) {

                    errors.push(this.createError('object.rename.regex.multiple', { from: matchedTargetKeys, to: rename.to }, state, options));
                    if (options.abortEarly) {
                        return finish();
                    }
                }

                if (Object.prototype.hasOwnProperty.call(target, rename.to) && !rename.options.override && !renamed[rename.to]) {

                    errors.push(this.createError('object.rename.regex.override', { from: matchedTargetKeys, to: rename.to }, state, options));
                    if (options.abortEarly) {
                        return finish();
                    }
                }

                if (allUndefined) {
                    delete target[rename.to];
                } else {
                    target[rename.to] = target[matchedTargetKeys[matchedTargetKeys.length - 1]];
                }

                renamed[rename.to] = true;

                if (!rename.options.alias) {
                    for (var _j = 0; _j < matchedTargetKeys.length; ++_j) {
                        delete target[matchedTargetKeys[_j]];
                    }
                }
            } else {
                if (rename.options.ignoreUndefined && target[rename.from] === undefined) {
                    continue;
                }

                if (!rename.options.multiple && renamed[rename.to]) {

                    errors.push(this.createError('object.rename.multiple', { from: rename.from, to: rename.to }, state, options));
                    if (options.abortEarly) {
                        return finish();
                    }
                }

                if (Object.prototype.hasOwnProperty.call(target, rename.to) && !rename.options.override && !renamed[rename.to]) {

                    errors.push(this.createError('object.rename.override', { from: rename.from, to: rename.to }, state, options));
                    if (options.abortEarly) {
                        return finish();
                    }
                }

                if (target[rename.from] === undefined) {
                    delete target[rename.to];
                } else {
                    target[rename.to] = target[rename.from];
                }

                renamed[rename.to] = true;

                if (!rename.options.alias) {
                    delete target[rename.from];
                }
            }
        }

        // Validate schema

        if (!this._inner.children && // null allows any keys
        !this._inner.patterns.length && !this._inner.dependencies.length) {

            return finish();
        }

        var unprocessed = new Set(Object.keys(target));

        if (this._inner.children) {
            var stripProps = [];

            for (var _i2 = 0; _i2 < this._inner.children.length; ++_i2) {
                var child = this._inner.children[_i2];
                var key = child.key;
                var item = target[key];

                unprocessed.delete(key);

                var localState = { key: key, path: state.path.concat(key), parent: target, reference: state.reference };
                var result = child.schema._validate(item, localState, options);
                if (result.errors) {
                    errors.push(this.createError('object.child', { key: key, child: child.schema._getLabel(key), reason: result.errors }, localState, options));

                    if (options.abortEarly) {
                        return finish();
                    }
                } else {
                    if (child.schema._flags.strip || result.value === undefined && result.value !== item) {
                        stripProps.push(key);
                        target[key] = result.finalValue;
                    } else if (result.value !== undefined) {
                        target[key] = result.value;
                    }
                }
            }

            for (var _i3 = 0; _i3 < stripProps.length; ++_i3) {
                delete target[stripProps[_i3]];
            }
        }

        // Unknown keys

        if (unprocessed.size && this._inner.patterns.length) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {

                for (var _iterator = unprocessed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _key2 = _step.value;

                    var _localState = {
                        key: _key2,
                        path: state.path.concat(_key2),
                        parent: target,
                        reference: state.reference
                    };
                    var _item = target[_key2];

                    for (var _i4 = 0; _i4 < this._inner.patterns.length; ++_i4) {
                        var pattern = this._inner.patterns[_i4];

                        if (pattern.regex ? pattern.regex.test(_key2) : !pattern.schema.validate(_key2).error) {

                            unprocessed.delete(_key2);

                            var _result = pattern.rule._validate(_item, _localState, options);
                            if (_result.errors) {
                                errors.push(this.createError('object.child', {
                                    key: _key2,
                                    child: pattern.rule._getLabel(_key2),
                                    reason: _result.errors
                                }, _localState, options));

                                if (options.abortEarly) {
                                    return finish();
                                }
                            }

                            target[_key2] = _result.value;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        if (unprocessed.size && (this._inner.children || this._inner.patterns.length)) {
            if (options.stripUnknown && this._flags.allowUnknown !== true || options.skipFunctions) {

                var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.objects : false;

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = unprocessed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var _key3 = _step2.value;

                        if (stripUnknown) {
                            delete target[_key3];
                            unprocessed.delete(_key3);
                        } else if (typeof target[_key3] === 'function') {
                            unprocessed.delete(_key3);
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }

            if (this._flags.allowUnknown !== undefined ? !this._flags.allowUnknown : !options.allowUnknown) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {

                    for (var _iterator3 = unprocessed[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var unprocessedKey = _step3.value;

                        errors.push(this.createError('object.allowUnknown', { child: unprocessedKey }, {
                            key: unprocessedKey,
                            path: state.path.concat(unprocessedKey)
                        }, options, {}));
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }
        }

        // Validate dependencies

        for (var _i5 = 0; _i5 < this._inner.dependencies.length; ++_i5) {
            var dep = this._inner.dependencies[_i5];
            var err = internals[dep.type].call(this, dep.key !== null && target[dep.key], dep.peers, target, { key: dep.key, path: dep.key === null ? state.path : state.path.concat(dep.key) }, options);
            if (err instanceof Errors.Err) {
                errors.push(err);
                if (options.abortEarly) {
                    return finish();
                }
            }
        }

        return finish();
    };

    _class.prototype.keys = function keys(schema) {

        Hoek.assert(schema === null || schema === undefined || (typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) === 'object', 'Object schema must be a valid object');
        Hoek.assert(!schema || !(schema instanceof Any), 'Object schema cannot be a joi schema');

        var obj = this.clone();

        if (!schema) {
            obj._inner.children = null;
            return obj;
        }

        var children = Object.keys(schema);

        if (!children.length) {
            obj._inner.children = [];
            return obj;
        }

        var topo = new Topo();
        if (obj._inner.children) {
            for (var i = 0; i < obj._inner.children.length; ++i) {
                var child = obj._inner.children[i];

                // Only add the key if we are not going to replace it later
                if (!children.includes(child.key)) {
                    topo.add(child, { after: child._refs, group: child.key });
                }
            }
        }

        for (var _i6 = 0; _i6 < children.length; ++_i6) {
            var key = children[_i6];
            var _child = schema[key];
            try {
                var cast = Cast.schema(this._currentJoi, _child);
                topo.add({ key: key, schema: cast }, { after: cast._refs, group: key });
            } catch (castErr) {
                if (castErr.hasOwnProperty('path')) {
                    castErr.path = key + '.' + castErr.path;
                } else {
                    castErr.path = key;
                }
                throw castErr;
            }
        }

        obj._inner.children = topo.nodes;

        return obj;
    };

    _class.prototype.append = function append(schema) {
        // Skip any changes
        if (schema === null || schema === undefined || Object.keys(schema).length === 0) {
            return this;
        }

        return this.keys(schema);
    };

    _class.prototype.unknown = function unknown(allow) {

        var value = allow !== false;

        if (this._flags.allowUnknown === value) {
            return this;
        }

        var obj = this.clone();
        obj._flags.allowUnknown = value;
        return obj;
    };

    _class.prototype.length = function length(limit) {

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

        return this._test('length', limit, function (value, state, options) {

            if (Object.keys(value).length === limit) {
                return value;
            }

            return this.createError('object.length', { limit: limit }, state, options);
        });
    };

    _class.prototype.min = function min(limit) {

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

        return this._test('min', limit, function (value, state, options) {

            if (Object.keys(value).length >= limit) {
                return value;
            }

            return this.createError('object.min', { limit: limit }, state, options);
        });
    };

    _class.prototype.max = function max(limit) {

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

        return this._test('max', limit, function (value, state, options) {

            if (Object.keys(value).length <= limit) {
                return value;
            }

            return this.createError('object.max', { limit: limit }, state, options);
        });
    };

    _class.prototype.pattern = function pattern(_pattern, schema) {

        var isRegExp = _pattern instanceof RegExp;
        Hoek.assert(isRegExp || _pattern instanceof Any, 'pattern must be a regex or schema');
        Hoek.assert(schema !== undefined, 'Invalid rule');

        if (isRegExp) {
            _pattern = new RegExp(_pattern.source, _pattern.ignoreCase ? 'i' : undefined); // Future version should break this and forbid unsupported regex flags
        }

        try {
            schema = Cast.schema(this._currentJoi, schema);
        } catch (castErr) {
            if (castErr.hasOwnProperty('path')) {
                castErr.message = castErr.message + '(' + castErr.path + ')';
            }

            throw castErr;
        }

        var obj = this.clone();
        if (isRegExp) {
            obj._inner.patterns.push({ regex: _pattern, rule: schema });
        } else {
            obj._inner.patterns.push({ schema: _pattern, rule: schema });
        }
        return obj;
    };

    _class.prototype.schema = function schema() {

        return this._test('schema', null, function (value, state, options) {

            if (value instanceof Any) {
                return value;
            }

            return this.createError('object.schema', null, state, options);
        });
    };

    _class.prototype.with = function _with(key, peers) {

        Hoek.assert(arguments.length === 2, 'Invalid number of arguments, expected 2.');

        return this._dependency('with', key, peers);
    };

    _class.prototype.without = function without(key, peers) {

        Hoek.assert(arguments.length === 2, 'Invalid number of arguments, expected 2.');

        return this._dependency('without', key, peers);
    };

    _class.prototype.xor = function xor() {
        for (var _len2 = arguments.length, peers = Array(_len2), _key4 = 0; _key4 < _len2; _key4++) {
            peers[_key4] = arguments[_key4];
        }

        peers = Hoek.flatten(peers);
        return this._dependency('xor', null, peers);
    };

    _class.prototype.or = function or() {
        for (var _len3 = arguments.length, peers = Array(_len3), _key5 = 0; _key5 < _len3; _key5++) {
            peers[_key5] = arguments[_key5];
        }

        peers = Hoek.flatten(peers);
        return this._dependency('or', null, peers);
    };

    _class.prototype.and = function and() {
        for (var _len4 = arguments.length, peers = Array(_len4), _key6 = 0; _key6 < _len4; _key6++) {
            peers[_key6] = arguments[_key6];
        }

        peers = Hoek.flatten(peers);
        return this._dependency('and', null, peers);
    };

    _class.prototype.nand = function nand() {
        for (var _len5 = arguments.length, peers = Array(_len5), _key7 = 0; _key7 < _len5; _key7++) {
            peers[_key7] = arguments[_key7];
        }

        peers = Hoek.flatten(peers);
        return this._dependency('nand', null, peers);
    };

    _class.prototype.requiredKeys = function requiredKeys() {
        for (var _len6 = arguments.length, children = Array(_len6), _key8 = 0; _key8 < _len6; _key8++) {
            children[_key8] = arguments[_key8];
        }

        children = Hoek.flatten(children);
        return this.applyFunctionToChildren(children, 'required');
    };

    _class.prototype.optionalKeys = function optionalKeys() {
        for (var _len7 = arguments.length, children = Array(_len7), _key9 = 0; _key9 < _len7; _key9++) {
            children[_key9] = arguments[_key9];
        }

        children = Hoek.flatten(children);
        return this.applyFunctionToChildren(children, 'optional');
    };

    _class.prototype.forbiddenKeys = function forbiddenKeys() {
        for (var _len8 = arguments.length, children = Array(_len8), _key10 = 0; _key10 < _len8; _key10++) {
            children[_key10] = arguments[_key10];
        }

        children = Hoek.flatten(children);
        return this.applyFunctionToChildren(children, 'forbidden');
    };

    _class.prototype.rename = function rename(from, to, options) {

        Hoek.assert(typeof from === 'string' || from instanceof RegExp, 'Rename missing the from argument');
        Hoek.assert(typeof to === 'string', 'Rename missing the to argument');
        Hoek.assert(to !== from, 'Cannot rename key to same name:', from);

        for (var i = 0; i < this._inner.renames.length; ++i) {
            Hoek.assert(this._inner.renames[i].from !== from, 'Cannot rename the same key multiple times');
        }

        var obj = this.clone();

        obj._inner.renames.push({
            from: from,
            to: to,
            options: Hoek.applyToDefaults(internals.renameDefaults, options || {}),
            isRegExp: from instanceof RegExp
        });

        return obj;
    };

    _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {

        children = [].concat(children);
        Hoek.assert(children.length > 0, 'expected at least one children');

        var groupedChildren = internals.groupChildren(children);
        var obj = void 0;

        if ('' in groupedChildren) {
            obj = this[fn].apply(this, args);
            delete groupedChildren[''];
        } else {
            obj = this.clone();
        }

        if (obj._inner.children) {
            root = root ? root + '.' : '';

            for (var i = 0; i < obj._inner.children.length; ++i) {
                var child = obj._inner.children[i];
                var group = groupedChildren[child.key];

                if (group) {
                    obj._inner.children[i] = {
                        key: child.key,
                        _refs: child._refs,
                        schema: child.schema.applyFunctionToChildren(group, fn, args, root + child.key)
                    };

                    delete groupedChildren[child.key];
                }
            }
        }

        var remaining = Object.keys(groupedChildren);
        Hoek.assert(remaining.length === 0, 'unknown key(s)', remaining.join(', '));

        return obj;
    };

    _class.prototype._dependency = function _dependency(type, key, peers) {

        peers = [].concat(peers);
        for (var i = 0; i < peers.length; ++i) {
            Hoek.assert(typeof peers[i] === 'string', type, 'peers must be a string or array of strings');
        }

        var obj = this.clone();
        obj._inner.dependencies.push({ type: type, key: key, peers: peers });
        return obj;
    };

    _class.prototype.describe = function describe(shallow) {

        var description = Any.prototype.describe.call(this);

        if (description.rules) {
            for (var i = 0; i < description.rules.length; ++i) {
                var rule = description.rules[i];
                // Coverage off for future-proof descriptions, only object().assert() is use right now
                if ( /* $lab:coverage:off$ */rule.arg && _typeof(rule.arg) === 'object' && rule.arg.schema && rule.arg.ref /* $lab:coverage:on$ */) {
                        rule.arg = {
                            schema: rule.arg.schema.describe(),
                            ref: rule.arg.ref.toString()
                        };
                    }
            }
        }

        if (this._inner.children && !shallow) {

            description.children = {};
            for (var _i7 = 0; _i7 < this._inner.children.length; ++_i7) {
                var child = this._inner.children[_i7];
                description.children[child.key] = child.schema.describe();
            }
        }

        if (this._inner.dependencies.length) {
            description.dependencies = Hoek.clone(this._inner.dependencies);
        }

        if (this._inner.patterns.length) {
            description.patterns = [];

            for (var _i8 = 0; _i8 < this._inner.patterns.length; ++_i8) {
                var pattern = this._inner.patterns[_i8];
                if (pattern.regex) {
                    description.patterns.push({ regex: pattern.regex.toString(), rule: pattern.rule.describe() });
                } else {
                    description.patterns.push({ schema: pattern.schema.describe(), rule: pattern.rule.describe() });
                }
            }
        }

        if (this._inner.renames.length > 0) {
            description.renames = Hoek.clone(this._inner.renames);
        }

        return description;
    };

    _class.prototype.assert = function assert(ref, schema, message) {

        ref = Cast.ref(ref);
        Hoek.assert(ref.isContext || ref.depth > 1, 'Cannot use assertions for root level references - use direct key rules instead');
        message = message || 'pass the assertion test';

        try {
            schema = Cast.schema(this._currentJoi, schema);
        } catch (castErr) {
            if (castErr.hasOwnProperty('path')) {
                castErr.message = castErr.message + '(' + castErr.path + ')';
            }

            throw castErr;
        }

        var key = ref.path[ref.path.length - 1];
        var path = ref.path.join('.');

        return this._test('assert', { schema: schema, ref: ref }, function (value, state, options) {

            var result = schema._validate(ref(value), null, options, value);
            if (!result.errors) {
                return value;
            }

            var localState = Hoek.merge({}, state);
            localState.key = key;
            localState.path = ref.path;
            return this.createError('object.assert', { ref: path, message: message }, localState, options);
        });
    };

    _class.prototype.type = function type(constructor) {
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constructor.name;


        Hoek.assert(typeof constructor === 'function', 'type must be a constructor function');
        var typeData = {
            name: name,
            ctor: constructor
        };

        return this._test('type', typeData, function (value, state, options) {

            if (value instanceof constructor) {
                return value;
            }

            return this.createError('object.type', { type: typeData.name }, state, options);
        });
    };

    return _class;
}(Any);

internals.safeParse = function (value) {

    try {
        return JSON.parse(value);
    } catch (parseErr) {}

    return value;
};

internals.renameDefaults = {
    alias: false, // Keep old value in place
    multiple: false, // Allow renaming multiple keys into the same target
    override: false // Overrides an existing key
};

internals.groupChildren = function (children) {

    children.sort();

    var grouped = {};

    for (var i = 0; i < children.length; ++i) {
        var child = children[i];
        Hoek.assert(typeof child === 'string', 'children must be strings');
        var group = child.split('.')[0];
        var childGroup = grouped[group] = grouped[group] || [];
        childGroup.push(child.substring(group.length + 1));
    }

    return grouped;
};

internals.keysToLabels = function (schema, keys) {

    var children = schema._inner.children;

    if (!children) {
        return keys;
    }

    var findLabel = function findLabel(key) {

        var matchingChild = children.find(function (child) {
            return child.key === key;
        });
        return matchingChild ? matchingChild.schema._getLabel(key) : key;
    };

    if (Array.isArray(keys)) {
        return keys.map(findLabel);
    }

    return findLabel(keys);
};

internals.with = function (value, peers, parent, state, options) {

    if (value === undefined) {
        return value;
    }

    for (var i = 0; i < peers.length; ++i) {
        var peer = peers[i];
        if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {

            return this.createError('object.with', {
                main: state.key,
                mainWithLabel: internals.keysToLabels(this, state.key),
                peer: peer,
                peerWithLabel: internals.keysToLabels(this, peer)
            }, state, options);
        }
    }

    return value;
};

internals.without = function (value, peers, parent, state, options) {

    if (value === undefined) {
        return value;
    }

    for (var i = 0; i < peers.length; ++i) {
        var peer = peers[i];
        if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {

            return this.createError('object.without', {
                main: state.key,
                mainWithLabel: internals.keysToLabels(this, state.key),
                peer: peer,
                peerWithLabel: internals.keysToLabels(this, peer)
            }, state, options);
        }
    }

    return value;
};

internals.xor = function (value, peers, parent, state, options) {

    var present = [];
    for (var i = 0; i < peers.length; ++i) {
        var peer = peers[i];
        if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {

            present.push(peer);
        }
    }

    if (present.length === 1) {
        return value;
    }

    var context = { peers: peers, peersWithLabels: internals.keysToLabels(this, peers) };

    if (present.length === 0) {
        return this.createError('object.missing', context, state, options);
    }

    return this.createError('object.xor', context, state, options);
};

internals.or = function (value, peers, parent, state, options) {

    for (var i = 0; i < peers.length; ++i) {
        var peer = peers[i];
        if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            return value;
        }
    }

    return this.createError('object.missing', {
        peers: peers,
        peersWithLabels: internals.keysToLabels(this, peers)
    }, state, options);
};

internals.and = function (value, peers, parent, state, options) {

    var missing = [];
    var present = [];
    var count = peers.length;
    for (var i = 0; i < count; ++i) {
        var peer = peers[i];
        if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {

            missing.push(peer);
        } else {
            present.push(peer);
        }
    }

    var aon = missing.length === count || present.length === count;

    if (!aon) {

        return this.createError('object.and', {
            present: present,
            presentWithLabels: internals.keysToLabels(this, present),
            missing: missing,
            missingWithLabels: internals.keysToLabels(this, missing)
        }, state, options);
    }
};

internals.nand = function (value, peers, parent, state, options) {

    var present = [];
    for (var i = 0; i < peers.length; ++i) {
        var peer = peers[i];
        if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {

            present.push(peer);
        }
    }

    var values = Hoek.clone(peers);
    var main = values.splice(0, 1)[0];
    var allPresent = present.length === peers.length;
    return allPresent ? this.createError('object.nand', {
        main: main,
        mainWithLabel: internals.keysToLabels(this, main),
        peers: values,
        peersWithLabels: internals.keysToLabels(this, values)
    }, state, options) : null;
};

module.exports = new internals.Object();

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules


// Delcare internals

var internals = {
  rfc3986: {}
};

internals.generate = function () {

  /**
   * elements separated by forward slash ("/") are alternatives.
   */
  var or = '|';

  /**
   * Rule to support zero-padded addresses.
   */
  var zeroPad = '0?';

  /**
   * DIGIT = %x30-39 ; 0-9
   */
  var digit = '0-9';
  var digitOnly = '[' + digit + ']';

  /**
   * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z
   */
  var alpha = 'a-zA-Z';
  var alphaOnly = '[' + alpha + ']';

  /**
   * IPv4
   * cidr       = DIGIT                ; 0-9
   *            / %x31-32 DIGIT         ; 10-29
   *            / "3" %x30-32           ; 30-32
   */
  internals.rfc3986.ipv4Cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';

  /**
   * IPv6
   * cidr       = DIGIT                 ; 0-9
   *            / %x31-39 DIGIT         ; 10-99
   *            / "1" %x0-1 DIGIT       ; 100-119
   *            / "12" %x0-8            ; 120-128
   */
  internals.rfc3986.ipv6Cidr = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + '[01]' + digitOnly + or + '12[0-8])';

  /**
   * HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
   */
  var hexDigit = digit + 'A-Fa-f';
  var hexDigitOnly = '[' + hexDigit + ']';

  /**
   * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
   */
  var unreserved = alpha + digit + '-\\._~';

  /**
   * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
   */
  var subDelims = '!\\$&\'\\(\\)\\*\\+,;=';

  /**
   * pct-encoded = "%" HEXDIG HEXDIG
   */
  var pctEncoded = '%' + hexDigit;

  /**
   * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
   */
  var pchar = unreserved + pctEncoded + subDelims + ':@';
  var pcharOnly = '[' + pchar + ']';

  /**
   * dec-octet   = DIGIT                 ; 0-9
   *            / %x31-39 DIGIT         ; 10-99
   *            / "1" 2DIGIT            ; 100-199
   *            / "2" %x30-34 DIGIT     ; 200-249
   *            / "25" %x30-35          ; 250-255
   */
  var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';

  /**
   * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
   */
  internals.rfc3986.IPv4address = '(?:' + decOctect + '\\.){3}' + decOctect;

  /**
   * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal
   * ls32 = ( h16 ":" h16 ) / IPv4address ; least-significant 32 bits of address
   * IPv6address =                            6( h16 ":" ) ls32
   *             /                       "::" 5( h16 ":" ) ls32
   *             / [               h16 ] "::" 4( h16 ":" ) ls32
   *             / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
   *             / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
   *             / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
   *             / [ *4( h16 ":" ) h16 ] "::"              ls32
   *             / [ *5( h16 ":" ) h16 ] "::"              h16
   *             / [ *6( h16 ":" ) h16 ] "::"
   */
  var h16 = hexDigitOnly + '{1,4}';
  var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';
  var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;
  var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;
  var IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;
  var IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;
  var IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;
  var IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;
  var IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;
  var IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;
  var IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';
  internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';

  /**
   * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
   */
  internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\.[' + unreserved + subDelims + ':]+';

  /**
   * scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
   */
  internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\.]*';

  /**
   * userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
   */
  var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';

  /**
   * IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
   */
  var IPLiteral = '\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\]';

  /**
   * reg-name = *( unreserved / pct-encoded / sub-delims )
   */
  var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';

  /**
   * host = IP-literal / IPv4address / reg-name
   */
  var host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';

  /**
   * port = *DIGIT
   */
  var port = digitOnly + '*';

  /**
   * authority   = [ userinfo "@" ] host [ ":" port ]
   */
  var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';

  /**
   * segment       = *pchar
   * segment-nz    = 1*pchar
   * path          = path-abempty    ; begins with "/" or is empty
   *               / path-absolute   ; begins with "/" but not "//"
   *               / path-noscheme   ; begins with a non-colon segment
   *               / path-rootless   ; begins with a segment
   *               / path-empty      ; zero characters
   * path-abempty  = *( "/" segment )
   * path-absolute = "/" [ segment-nz *( "/" segment ) ]
   * path-rootless = segment-nz *( "/" segment )
   */
  var segment = pcharOnly + '*';
  var segmentNz = pcharOnly + '+';
  var segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';
  var pathEmpty = '';
  var pathAbEmpty = '(?:\\/' + segment + ')*';
  var pathAbsolute = '\\/(?:' + segmentNz + pathAbEmpty + ')?';
  var pathRootless = segmentNz + pathAbEmpty;
  var pathNoScheme = segmentNzNc + pathAbEmpty;

  /**
   * hier-part = "//" authority path
   */
  internals.rfc3986.hierPart = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathRootless + ')';

  /**
   * relative-part = "//" authority path-abempty
   *                 / path-absolute
   *                 / path-noscheme
   *                 / path-empty
   */
  internals.rfc3986.relativeRef = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathNoScheme + or + pathEmpty + ')';

  /**
   * query = *( pchar / "/" / "?" )
   */
  internals.rfc3986.query = '[' + pchar + '\\/\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.

  /**
   * fragment = *( pchar / "/" / "?" )
   */
  internals.rfc3986.fragment = '[' + pchar + '\\/\\?]*';
};

internals.generate();

module.exports = internals.rfc3986;

/***/ }),
/* 15 */
/***/ (function(module, exports) {



/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(40);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(39);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7)));

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(16);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)));

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(Buffer) {

// Declare internals

var internals = {};

exports.escapeJavaScript = function (input) {

    if (!input) {
        return '';
    }

    var escaped = '';

    for (var i = 0; i < input.length; ++i) {

        var charCode = input.charCodeAt(i);

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        } else {
            escaped += internals.escapeJavaScriptChar(charCode);
        }
    }

    return escaped;
};

exports.escapeHtml = function (input) {

    if (!input) {
        return '';
    }

    var escaped = '';

    for (var i = 0; i < input.length; ++i) {

        var charCode = input.charCodeAt(i);

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        } else {
            escaped += internals.escapeHtmlChar(charCode);
        }
    }

    return escaped;
};

exports.escapeJson = function (input) {

    if (!input) {
        return '';
    }

    var lessThan = 0x3C;
    var greaterThan = 0x3E;
    var andSymbol = 0x26;
    var lineSeperator = 0x2028;

    // replace method
    var charCode = void 0;
    return input.replace(/[<>&\u2028\u2029]/g, function (match) {

        charCode = match.charCodeAt(0);

        if (charCode === lessThan) {
            return '\\u003c';
        } else if (charCode === greaterThan) {
            return '\\u003e';
        } else if (charCode === andSymbol) {
            return '\\u0026';
        } else if (charCode === lineSeperator) {
            return '\\u2028';
        }
        return '\\u2029';
    });
};

internals.escapeJavaScriptChar = function (charCode) {

    if (charCode >= 256) {
        return '\\u' + internals.padLeft('' + charCode, 4);
    }

    var hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '\\x' + internals.padLeft(hexValue, 2);
};

internals.escapeHtmlChar = function (charCode) {

    var namedEscape = internals.namedHtml[charCode];
    if (typeof namedEscape !== 'undefined') {
        return namedEscape;
    }

    if (charCode >= 256) {
        return '&#' + charCode + ';';
    }

    var hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '&#x' + internals.padLeft(hexValue, 2) + ';';
};

internals.padLeft = function (str, len) {

    while (str.length < len) {
        str = '0' + str;
    }

    return str;
};

internals.isSafe = function (charCode) {

    return typeof internals.safeCharCodes[charCode] !== 'undefined';
};

internals.namedHtml = {
    '38': '&amp;',
    '60': '&lt;',
    '62': '&gt;',
    '34': '&quot;',
    '160': '&nbsp;',
    '162': '&cent;',
    '163': '&pound;',
    '164': '&curren;',
    '169': '&copy;',
    '174': '&reg;'
};

internals.safeCharCodes = function () {

    var safe = {};

    for (var i = 32; i < 123; ++i) {

        if (i >= 97 || // a-z
        i >= 65 && i <= 90 || // A-Z
        i >= 48 && i <= 57 || // 0-9
        i === 32 || // space
        i === 46 || // .
        i === 44 || // ,
        i === 45 || // -
        i === 58 || // :
        i === 95) {
            // _

            safe[i] = null;
        }
    }

    return safe;
}();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer));

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(Buffer) {

// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Punycode = __webpack_require__(38);

// Declare internals

var internals = {
    hasOwn: Object.prototype.hasOwnProperty,
    indexOf: Array.prototype.indexOf,
    defaultThreshold: 16,
    maxIPv6Groups: 8,

    categories: {
        valid: 1,
        dnsWarn: 7,
        rfc5321: 15,
        cfws: 31,
        deprecated: 63,
        rfc5322: 127,
        error: 255
    },

    diagnoses: {

        // Address is valid

        valid: 0,

        // Address is valid for SMTP but has unusual elements

        rfc5321TLD: 9,
        rfc5321TLDNumeric: 10,
        rfc5321QuotedString: 11,
        rfc5321AddressLiteral: 12,

        // Address is valid for message, but must be modified for envelope

        cfwsComment: 17,
        cfwsFWS: 18,

        // Address contains non-ASCII when the allowUnicode option is false
        // Has to be > internals.defaultThreshold so that it's rejected
        // without an explicit errorLevel:
        undesiredNonAscii: 25,

        // Address contains deprecated elements, but may still be valid in some contexts

        deprecatedLocalPart: 33,
        deprecatedFWS: 34,
        deprecatedQTEXT: 35,
        deprecatedQP: 36,
        deprecatedComment: 37,
        deprecatedCTEXT: 38,
        deprecatedIPv6: 39,
        deprecatedCFWSNearAt: 49,

        // Address is only valid according to broad definition in RFC 5322, but is otherwise invalid

        rfc5322Domain: 65,
        rfc5322TooLong: 66,
        rfc5322LocalTooLong: 67,
        rfc5322DomainTooLong: 68,
        rfc5322LabelTooLong: 69,
        rfc5322DomainLiteral: 70,
        rfc5322DomainLiteralOBSDText: 71,
        rfc5322IPv6GroupCount: 72,
        rfc5322IPv62x2xColon: 73,
        rfc5322IPv6BadCharacter: 74,
        rfc5322IPv6MaxGroups: 75,
        rfc5322IPv6ColonStart: 76,
        rfc5322IPv6ColonEnd: 77,

        // Address is invalid for any purpose

        errExpectingDTEXT: 129,
        errNoLocalPart: 130,
        errNoDomain: 131,
        errConsecutiveDots: 132,
        errATEXTAfterCFWS: 133,
        errATEXTAfterQS: 134,
        errATEXTAfterDomainLiteral: 135,
        errExpectingQPair: 136,
        errExpectingATEXT: 137,
        errExpectingQTEXT: 138,
        errExpectingCTEXT: 139,
        errBackslashEnd: 140,
        errDotStart: 141,
        errDotEnd: 142,
        errDomainHyphenStart: 143,
        errDomainHyphenEnd: 144,
        errUnclosedQuotedString: 145,
        errUnclosedComment: 146,
        errUnclosedDomainLiteral: 147,
        errFWSCRLFx2: 148,
        errFWSCRLFEnd: 149,
        errCRNoLF: 150,
        errUnknownTLD: 160,
        errDomainTooShort: 161
    },

    components: {
        localpart: 0,
        domain: 1,
        literal: 2,
        contextComment: 3,
        contextFWS: 4,
        contextQuotedString: 5,
        contextQuotedPair: 6
    }
};

internals.specials = function () {

    var specials = '()<>[]:;@\\,."'; // US-ASCII visible characters not valid for atext (http://tools.ietf.org/html/rfc5322#section-3.2.3)
    var lookup = new Array(0x100);
    lookup.fill(false);

    for (var i = 0; i < specials.length; ++i) {
        lookup[specials.codePointAt(i)] = true;
    }

    return function (code) {

        return lookup[code];
    };
}();

internals.c0Controls = function () {

    var lookup = new Array(0x100);
    lookup.fill(false);

    // add C0 control characters

    for (var i = 0; i < 33; ++i) {
        lookup[i] = true;
    }

    return function (code) {

        return lookup[code];
    };
}();

internals.c1Controls = function () {

    var lookup = new Array(0x100);
    lookup.fill(false);

    // add C1 control characters

    for (var i = 127; i < 160; ++i) {
        lookup[i] = true;
    }

    return function (code) {

        return lookup[code];
    };
}();

internals.regex = {
    ipV4: /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    ipV6: /^[a-fA-F\d]{0,4}$/
};

internals.normalizeSupportsNul = '\0'.normalize('NFC') === '\0';

// $lab:coverage:off$
internals.nulNormalize = function (email) {

    return email.split('\0').map(function (part) {
        return part.normalize('NFC');
    }).join('\0');
};
// $lab:coverage:on$


internals.normalize = function (email) {

    // $lab:coverage:off$
    if (!internals.normalizeSupportsNul && email.indexOf('\0') >= 0) {
        return internals.nulNormalize(email);
    }
    // $lab:coverage:on$

    return email.normalize('NFC');
};

internals.checkIpV6 = function (items) {

    return items.every(function (value) {
        return internals.regex.ipV6.test(value);
    });
};

internals.validDomain = function (tldAtom, options) {

    if (options.tldBlacklist) {
        if (Array.isArray(options.tldBlacklist)) {
            return internals.indexOf.call(options.tldBlacklist, tldAtom) === -1;
        }

        return !internals.hasOwn.call(options.tldBlacklist, tldAtom);
    }

    if (Array.isArray(options.tldWhitelist)) {
        return internals.indexOf.call(options.tldWhitelist, tldAtom) !== -1;
    }

    return internals.hasOwn.call(options.tldWhitelist, tldAtom);
};

/**
 * Check that an email address conforms to RFCs 5321, 5322, 6530 and others
 *
 * We distinguish clearly between a Mailbox as defined by RFC 5321 and an
 * addr-spec as defined by RFC 5322. Depending on the context, either can be
 * regarded as a valid email address. The RFC 5321 Mailbox specification is
 * more restrictive (comments, white space and obsolete forms are not allowed).
 *
 * @param {string} email The email address to check. See README for specifics.
 * @param {Object} options The (optional) options:
 *   {*} errorLevel Determines the boundary between valid and invalid
 *     addresses.
 *   {*} tldBlacklist The set of domains to consider invalid.
 *   {*} tldWhitelist The set of domains to consider valid.
 *   {*} allowUnicode Whether to allow non-ASCII characters, defaults to true.
 *   {*} minDomainAtoms The minimum number of domain atoms which must be present
 *     for the address to be valid.
 * @param {function(number|boolean)} callback The (optional) callback handler.
 * @return {*}
 */

exports.validate = internals.validate = function (email, options, callback) {

    options = options || {};
    email = internals.normalize(email);

    // The callback function is deprecated.
    // $lab:coverage:off$
    if (typeof options === 'function') {
        callback = options;
        options = {};
    }

    if (typeof callback !== 'function') {
        callback = null;
    }
    // $lab:coverage:on$

    var diagnose = void 0;
    var threshold = void 0;

    if (typeof options.errorLevel === 'number') {
        diagnose = true;
        threshold = options.errorLevel;
    } else {
        diagnose = !!options.errorLevel;
        threshold = internals.diagnoses.valid;
    }

    if (options.tldWhitelist) {
        if (typeof options.tldWhitelist === 'string') {
            options.tldWhitelist = [options.tldWhitelist];
        } else if (_typeof(options.tldWhitelist) !== 'object') {
            throw new TypeError('expected array or object tldWhitelist');
        }
    }

    if (options.tldBlacklist) {
        if (typeof options.tldBlacklist === 'string') {
            options.tldBlacklist = [options.tldBlacklist];
        } else if (_typeof(options.tldBlacklist) !== 'object') {
            throw new TypeError('expected array or object tldBlacklist');
        }
    }

    if (options.minDomainAtoms && (options.minDomainAtoms !== (+options.minDomainAtoms | 0) || options.minDomainAtoms < 0)) {
        throw new TypeError('expected positive integer minDomainAtoms');
    }

    var maxResult = internals.diagnoses.valid;
    var updateResult = function updateResult(value) {

        if (value > maxResult) {
            maxResult = value;
        }
    };

    var allowUnicode = options.allowUnicode === undefined || !!options.allowUnicode;
    if (!allowUnicode && /[^\x00-\x7f]/.test(email)) {
        updateResult(internals.diagnoses.undesiredNonAscii);
    }

    var context = {
        now: internals.components.localpart,
        prev: internals.components.localpart,
        stack: [internals.components.localpart]
    };

    var prevToken = '';

    var parseData = {
        local: '',
        domain: ''
    };
    var atomData = {
        locals: [''],
        domains: ['']
    };

    var elementCount = 0;
    var elementLength = 0;
    var crlfCount = 0;
    var charCode = void 0;

    var hyphenFlag = false;
    var assertEnd = false;

    var emailLength = email.length;

    var token = void 0; // Token is used outside the loop, must declare similarly
    for (var i = 0; i < emailLength; i += token.length) {
        // Utilize codepoints to account for Unicode surrogate pairs
        token = String.fromCodePoint(email.codePointAt(i));

        switch (context.now) {
            // Local-part
            case internals.components.localpart:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   local-part      =   dot-atom / quoted-string / obs-local-part
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   quoted-string   =   [CFWS]
                //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                       [CFWS]
                //
                //   obs-local-part  =   word *("." word)
                //
                //   word            =   atom / quoted-string
                //
                //   atom            =   [CFWS] 1*atext [CFWS]
                switch (token) {
                    // Comment
                    case '(':
                        if (elementLength === 0) {
                            // Comments are OK at the beginning of an element
                            updateResult(elementCount === 0 ? internals.diagnoses.cfwsComment : internals.diagnoses.deprecatedComment);
                        } else {
                            updateResult(internals.diagnoses.cfwsComment);
                            // Cannot start a comment in an element, should be end
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // Next dot-atom element
                    case '.':
                        if (elementLength === 0) {
                            // Another dot, already?
                            updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                        } else {
                            // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                            if (assertEnd) {
                                updateResult(internals.diagnoses.deprecatedLocalPart);
                            }

                            // CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)
                            assertEnd = false;
                            elementLength = 0;
                            ++elementCount;
                            parseData.local += token;
                            atomData.locals[elementCount] = '';
                        }

                        break;

                    // Quoted string
                    case '"':
                        if (elementLength === 0) {
                            // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                            updateResult(elementCount === 0 ? internals.diagnoses.rfc5321QuotedString : internals.diagnoses.deprecatedLocalPart);

                            parseData.local += token;
                            atomData.locals[elementCount] += token;
                            elementLength += Buffer.byteLength(token, 'utf8');

                            // Quoted string must be the entire element
                            assertEnd = true;
                            context.stack.push(context.now);
                            context.now = internals.components.contextQuotedString;
                        } else {
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }

                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                    // Fallthrough

                    case ' ':
                    case '\t':
                        if (elementLength === 0) {
                            updateResult(elementCount === 0 ? internals.diagnoses.cfwsFWS : internals.diagnoses.deprecatedFWS);
                        } else {
                            // We can't start FWS in the middle of an element, better be end
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    case '@':
                        // At this point we should have a valid local-part
                        // $lab:coverage:off$
                        if (context.stack.length !== 1) {
                            throw new Error('unexpected item on context stack');
                        }
                        // $lab:coverage:on$

                        if (parseData.local.length === 0) {
                            // Fatal error
                            updateResult(internals.diagnoses.errNoLocalPart);
                        } else if (elementLength === 0) {
                            // Fatal error
                            updateResult(internals.diagnoses.errDotEnd);
                        }
                        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64
                        //    octets
                        else if (Buffer.byteLength(parseData.local, 'utf8') > 64) {
                                updateResult(internals.diagnoses.rfc5322LocalTooLong);
                            }
                            // http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around "@" in the
                            //    addr-spec
                            //
                            // http://tools.ietf.org/html/rfc2119
                            // 4. SHOULD NOT this phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
                            //    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood
                            //    and the case carefully weighed before implementing any behavior described with this label.
                            else if (context.prev === internals.components.contextComment || context.prev === internals.components.contextFWS) {
                                    updateResult(internals.diagnoses.deprecatedCFWSNearAt);
                                }

                        // Clear everything down for the domain parsing
                        context.now = internals.components.domain;
                        context.stack[0] = internals.components.domain;
                        elementCount = 0;
                        elementLength = 0;
                        assertEnd = false; // CFWS can only appear at the end of the element
                        break;

                    // ATEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                        //            "!" / "#" /     ;  characters not including
                        //            "$" / "%" /     ;  specials.  Used for atoms.
                        //            "&" / "'" /
                        //            "*" / "+" /
                        //            "-" / "/" /
                        //            "=" / "?" /
                        //            "^" / "_" /
                        //            "`" / "{" /
                        //            "|" / "}" /
                        //            "~"
                        if (assertEnd) {
                            // We have encountered atext where it is no longer valid
                            switch (context.prev) {
                                case internals.components.contextComment:
                                case internals.components.contextFWS:
                                    updateResult(internals.diagnoses.errATEXTAfterCFWS);
                                    break;

                                case internals.components.contextQuotedString:
                                    updateResult(internals.diagnoses.errATEXTAfterQS);
                                    break;

                                // $lab:coverage:off$
                                default:
                                    throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                                // $lab:coverage:on$
                            }
                        } else {
                            context.prev = context.now;
                            charCode = token.codePointAt(0);

                            // Especially if charCode == 10
                            if (internals.specials(charCode) || internals.c0Controls(charCode) || internals.c1Controls(charCode)) {

                                // Fatal error
                                updateResult(internals.diagnoses.errExpectingATEXT);
                            }

                            parseData.local += token;
                            atomData.locals[elementCount] += token;
                            elementLength += Buffer.byteLength(token, 'utf8');
                        }
                }

                break;

            case internals.components.domain:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain          =   dot-atom / domain-literal / obs-domain
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-domain      =   atom *("." atom)
                //
                //   atom            =   [CFWS] 1*atext [CFWS]

                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Mailbox        = Local-part "@" ( Domain / address-literal )
                //
                //   Domain         = sub-domain *("." sub-domain)
                //
                //   address-literal  = "[" ( IPv4-address-literal /
                //                    IPv6-address-literal /
                //                    General-address-literal ) "]"
                //                    ; See Section 4.1.3

                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //      Note: A liberal syntax for the domain portion of addr-spec is
                //      given here.  However, the domain portion contains addressing
                //      information specified by and used in other protocols (e.g.,
                //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
                //      incumbent upon implementations to conform to the syntax of
                //      addresses for the context in which they are used.
                //
                // is_email() author's note: it's not clear how to interpret this in
                // he context of a general email address validator. The conclusion I
                // have reached is this: "addressing information" must comply with
                // RFC 5321 (and in turn RFC 1035), anything that is "semantically
                // invisible" must comply only with RFC 5322.
                switch (token) {
                    // Comment
                    case '(':
                        if (elementLength === 0) {
                            // Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain
                            // http://tools.ietf.org/html/rfc5322#section-3.4.1
                            updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedComment);
                        } else {
                            // We can't start a comment mid-element, better be at the end
                            assertEnd = true;
                            updateResult(internals.diagnoses.cfwsComment);
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // Next dot-atom element
                    case '.':
                        var punycodeLength = Punycode.encode(atomData.domains[elementCount]).length;
                        if (elementLength === 0) {
                            // Another dot, already? Fatal error.
                            updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                        } else if (hyphenFlag) {
                            // Previous subdomain ended in a hyphen. Fatal error.
                            updateResult(internals.diagnoses.errDomainHyphenEnd);
                        } else if (punycodeLength > 63) {
                            // RFC 5890 specifies that domain labels that are encoded using the Punycode algorithm
                            // must adhere to the <= 63 octet requirement.
                            // This includes string prefixes from the Punycode algorithm.
                            //
                            // https://tools.ietf.org/html/rfc5890#section-2.3.2.1
                            // labels          63 octets or less

                            updateResult(internals.diagnoses.rfc5322LabelTooLong);
                        }

                        // CFWS is OK again now we're at the beginning of an element (although
                        // it may be obsolete CFWS)
                        assertEnd = false;
                        elementLength = 0;
                        ++elementCount;
                        atomData.domains[elementCount] = '';
                        parseData.domain += token;

                        break;

                    // Domain literal
                    case '[':
                        if (parseData.domain.length === 0) {
                            // Domain literal must be the only component
                            assertEnd = true;
                            elementLength += Buffer.byteLength(token, 'utf8');
                            context.stack.push(context.now);
                            context.now = internals.components.literal;
                            parseData.domain += token;
                            atomData.domains[elementCount] += token;
                            parseData.literal = '';
                        } else {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }

                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                    // Fallthrough

                    case ' ':
                    case '\t':
                        if (elementLength === 0) {
                            updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedFWS);
                        } else {
                            // We can't start FWS in the middle of an element, so this better be the end
                            updateResult(internals.diagnoses.cfwsFWS);
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // This must be ATEXT
                    default:
                        // RFC 5322 allows any atext...
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                        //            "!" / "#" /     ;  characters not including
                        //            "$" / "%" /     ;  specials.  Used for atoms.
                        //            "&" / "'" /
                        //            "*" / "+" /
                        //            "-" / "/" /
                        //            "=" / "?" /
                        //            "^" / "_" /
                        //            "`" / "{" /
                        //            "|" / "}" /
                        //            "~"

                        // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
                        //   (RFCs 1034 & 1123)
                        // http://tools.ietf.org/html/rfc5321#section-4.1.2
                        //   sub-domain     = Let-dig [Ldh-str]
                        //
                        //   Let-dig        = ALPHA / DIGIT
                        //
                        //   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
                        //
                        if (assertEnd) {
                            // We have encountered ATEXT where it is no longer valid
                            switch (context.prev) {
                                case internals.components.contextComment:
                                case internals.components.contextFWS:
                                    updateResult(internals.diagnoses.errATEXTAfterCFWS);
                                    break;

                                case internals.components.literal:
                                    updateResult(internals.diagnoses.errATEXTAfterDomainLiteral);
                                    break;

                                // $lab:coverage:off$
                                default:
                                    throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                                // $lab:coverage:on$
                            }
                        }

                        charCode = token.codePointAt(0);
                        // Assume this token isn't a hyphen unless we discover it is
                        hyphenFlag = false;

                        if (internals.specials(charCode) || internals.c0Controls(charCode) || internals.c1Controls(charCode)) {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        } else if (token === '-') {
                            if (elementLength === 0) {
                                // Hyphens cannot be at the beginning of a subdomain, fatal error
                                updateResult(internals.diagnoses.errDomainHyphenStart);
                            }

                            hyphenFlag = true;
                        }
                        // Check if it's a neither a number nor a latin/unicode letter
                        else if (charCode < 48 || charCode > 122 && charCode < 192 || charCode > 57 && charCode < 65 || charCode > 90 && charCode < 97) {
                                // This is not an RFC 5321 subdomain, but still OK by RFC 5322
                                updateResult(internals.diagnoses.rfc5322Domain);
                            }

                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        elementLength += Buffer.byteLength(token, 'utf8');
                }

                break;

            // Domain literal
            case internals.components.literal:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
                switch (token) {
                    // End of domain literal
                    case ']':
                        if (maxResult < internals.categories.deprecated) {
                            // Could be a valid RFC 5321 address literal, so let's check

                            // http://tools.ietf.org/html/rfc5321#section-4.1.2
                            //   address-literal  = "[" ( IPv4-address-literal /
                            //                    IPv6-address-literal /
                            //                    General-address-literal ) "]"
                            //                    ; See Section 4.1.3
                            //
                            // http://tools.ietf.org/html/rfc5321#section-4.1.3
                            //   IPv4-address-literal  = Snum 3("."  Snum)
                            //
                            //   IPv6-address-literal  = "IPv6:" IPv6-addr
                            //
                            //   General-address-literal  = Standardized-tag ":" 1*dcontent
                            //
                            //   Standardized-tag  = Ldh-str
                            //                     ; Standardized-tag MUST be specified in a
                            //                     ; Standards-Track RFC and registered with IANA
                            //
                            //   dcontent      = %d33-90 / ; Printable US-ASCII
                            //                 %d94-126 ; excl. "[", "\", "]"
                            //
                            //   Snum          = 1*3DIGIT
                            //                 ; representing a decimal integer
                            //                 ; value in the range 0 through 255
                            //
                            //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
                            //
                            //   IPv6-hex      = 1*4HEXDIG
                            //
                            //   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
                            //
                            //   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
                            //                 [IPv6-hex *5(":" IPv6-hex)]
                            //                 ; The "::" represents at least 2 16-bit groups of
                            //                 ; zeros.  No more than 6 groups in addition to the
                            //                 ; "::" may be present.
                            //
                            //   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
                            //
                            //   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
                            //                 [IPv6-hex *3(":" IPv6-hex) ":"]
                            //                 IPv4-address-literal
                            //                 ; The "::" represents at least 2 16-bit groups of
                            //                 ; zeros.  No more than 4 groups in addition to the
                            //                 ; "::" and IPv4-address-literal may be present.

                            var index = -1;
                            var addressLiteral = parseData.literal;
                            var matchesIP = internals.regex.ipV4.exec(addressLiteral);

                            // Maybe extract IPv4 part from the end of the address-literal
                            if (matchesIP) {
                                index = matchesIP.index;
                                if (index !== 0) {
                                    // Convert IPv4 part to IPv6 format for futher testing
                                    addressLiteral = addressLiteral.slice(0, index) + '0:0';
                                }
                            }

                            if (index === 0) {
                                // Nothing there except a valid IPv4 address, so...
                                updateResult(internals.diagnoses.rfc5321AddressLiteral);
                            } else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {
                                updateResult(internals.diagnoses.rfc5322DomainLiteral);
                            } else {
                                var match = addressLiteral.slice(5);
                                var maxGroups = internals.maxIPv6Groups;
                                var groups = match.split(':');
                                index = match.indexOf('::');

                                if (!~index) {
                                    // Need exactly the right number of groups
                                    if (groups.length !== maxGroups) {
                                        updateResult(internals.diagnoses.rfc5322IPv6GroupCount);
                                    }
                                } else if (index !== match.lastIndexOf('::')) {
                                    updateResult(internals.diagnoses.rfc5322IPv62x2xColon);
                                } else {
                                    if (index === 0 || index === match.length - 2) {
                                        // RFC 4291 allows :: at the start or end of an address with 7 other groups in addition
                                        ++maxGroups;
                                    }

                                    if (groups.length > maxGroups) {
                                        updateResult(internals.diagnoses.rfc5322IPv6MaxGroups);
                                    } else if (groups.length === maxGroups) {
                                        // Eliding a single "::"
                                        updateResult(internals.diagnoses.deprecatedIPv6);
                                    }
                                }

                                // IPv6 testing strategy
                                if (match[0] === ':' && match[1] !== ':') {
                                    updateResult(internals.diagnoses.rfc5322IPv6ColonStart);
                                } else if (match[match.length - 1] === ':' && match[match.length - 2] !== ':') {
                                    updateResult(internals.diagnoses.rfc5322IPv6ColonEnd);
                                } else if (internals.checkIpV6(groups)) {
                                    updateResult(internals.diagnoses.rfc5321AddressLiteral);
                                } else {
                                    updateResult(internals.diagnoses.rfc5322IPv6BadCharacter);
                                }
                            }
                        } else {
                            updateResult(internals.diagnoses.rfc5322DomainLiteral);
                        }

                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        elementLength += Buffer.byteLength(token, 'utf8');
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    case '\\':
                        updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                    // Fallthrough

                    case ' ':
                    case '\t':
                        updateResult(internals.diagnoses.cfwsFWS);

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // DTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.4.1
                        //   dtext         =   %d33-90 /  ; Printable US-ASCII
                        //                     %d94-126 / ;  characters not including
                        //                     obs-dtext  ;  "[", "]", or "\"
                        //
                        //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
                        //
                        //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
                        //                     %d11 /     ;  characters that do not
                        //                     %d12 /     ;  include the carriage
                        //                     %d14-31 /  ;  return, line feed, and
                        //                     %d127      ;  white space characters
                        charCode = token.codePointAt(0);

                        // '\r', '\n', ' ', and '\t' have already been parsed above
                        if (charCode !== 127 && internals.c1Controls(charCode) || charCode === 0 || token === '[') {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingDTEXT);
                            break;
                        } else if (internals.c0Controls(charCode) || charCode === 127) {
                            updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                        }

                        parseData.literal += token;
                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        elementLength += Buffer.byteLength(token, 'utf8');
                }

                break;

            // Quoted string
            case internals.components.contextQuotedString:
                // http://tools.ietf.org/html/rfc5322#section-3.2.4
                //   quoted-string = [CFWS]
                //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                   [CFWS]
                //
                //   qcontent      = qtext / quoted-pair
                switch (token) {
                    // Quoted pair
                    case '\\':
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\t' or '\r\n'
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                    // Fallthrough

                    case '\t':
                        // http://tools.ietf.org/html/rfc5322#section-3.2.2
                        //   Runs of FWS, comment, or CFWS that occur between lexical tokens in
                        //   a structured header field are semantically interpreted as a single
                        //   space character.

                        // http://tools.ietf.org/html/rfc5322#section-3.2.4
                        //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
                        //   semantically "invisible" and therefore not part of the
                        //   quoted-string

                        parseData.local += ' ';
                        atomData.locals[elementCount] += ' ';
                        elementLength += Buffer.byteLength(token, 'utf8');

                        updateResult(internals.diagnoses.cfwsFWS);
                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // End of quoted string
                    case '"':
                        parseData.local += token;
                        atomData.locals[elementCount] += token;
                        elementLength += Buffer.byteLength(token, 'utf8');
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    // QTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.4
                        //   qtext          =   %d33 /             ; Printable US-ASCII
                        //                      %d35-91 /          ;  characters not including
                        //                      %d93-126 /         ;  "\" or the quote character
                        //                      obs-qtext
                        //
                        //   obs-qtext      =   obs-NO-WS-CTL
                        //
                        //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
                        //                      %d11 /             ;  characters that do not
                        //                      %d12 /             ;  include the carriage
                        //                      %d14-31 /          ;  return, line feed, and
                        //                      %d127              ;  white space characters
                        charCode = token.codePointAt(0);

                        if (charCode !== 127 && internals.c1Controls(charCode) || charCode === 0 || charCode === 10) {
                            updateResult(internals.diagnoses.errExpectingQTEXT);
                        } else if (internals.c0Controls(charCode) || charCode === 127) {
                            updateResult(internals.diagnoses.deprecatedQTEXT);
                        }

                        parseData.local += token;
                        atomData.locals[elementCount] += token;
                        elementLength += Buffer.byteLength(token, 'utf8');
                }

                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   If the string can be represented as a dot-atom (that is, it contains
                //   no characters other than atext characters or "." surrounded by atext
                //   characters), then the dot-atom form SHOULD be used and the quoted-
                //   string form SHOULD NOT be used.

                break;
            // Quoted pair
            case internals.components.contextQuotedPair:
                // http://tools.ietf.org/html/rfc5322#section-3.2.1
                //   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
                //
                //   VCHAR           =  %d33-126   ; visible (printing) characters
                //   WSP             =  SP / HTAB  ; white space
                //
                //   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
                //
                //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
                //                       %d11 /    ;  characters that do not
                //                       %d12 /    ;  include the carriage
                //                       %d14-31 / ;  return, line feed, and
                //                       %d127     ;  white space characters
                //
                // i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
                charCode = token.codePointAt(0);

                if (charCode !== 127 && internals.c1Controls(charCode)) {
                    // Fatal error
                    updateResult(internals.diagnoses.errExpectingQPair);
                } else if (charCode < 31 && charCode !== 9 || charCode === 127) {
                    // ' ' and '\t' are allowed
                    updateResult(internals.diagnoses.deprecatedQP);
                }

                // At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   the sending system SHOULD transmit the form that uses the minimum quoting possible.

                context.prev = context.now;
                // End of qpair
                context.now = context.stack.pop();
                var escapeToken = '\\' + token;

                switch (context.now) {
                    case internals.components.contextComment:
                        break;

                    case internals.components.contextQuotedString:
                        parseData.local += escapeToken;
                        atomData.locals[elementCount] += escapeToken;

                        // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                        elementLength += 2;
                        break;

                    case internals.components.literal:
                        parseData.domain += escapeToken;
                        atomData.domains[elementCount] += escapeToken;

                        // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                        elementLength += 2;
                        break;

                    // $lab:coverage:off$
                    default:
                        throw new Error('quoted pair logic invoked in an invalid context: ' + context.now);
                    // $lab:coverage:on$
                }
                break;

            // Comment
            case internals.components.contextComment:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   comment  = "(" *([FWS] ccontent) [FWS] ")"
                //
                //   ccontent = ctext / quoted-pair / comment
                switch (token) {
                    // Nested comment
                    case '(':
                        // Nested comments are ok
                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // End of comment
                    case ')':
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    // Quoted pair
                    case '\\':
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                    // Fallthrough

                    case ' ':
                    case '\t':
                        updateResult(internals.diagnoses.cfwsFWS);

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // CTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //   ctext         = %d33-39 /  ; Printable US-ASCII
                        //                   %d42-91 /  ;  characters not including
                        //                   %d93-126 / ;  "(", ")", or "\"
                        //                   obs-ctext
                        //
                        //   obs-ctext     = obs-NO-WS-CTL
                        //
                        //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
                        //                   %d11 /     ;  characters that do not
                        //                   %d12 /     ;  include the carriage
                        //                   %d14-31 /  ;  return, line feed, and
                        //                   %d127      ;  white space characters
                        charCode = token.codePointAt(0);

                        if (charCode === 0 || charCode === 10 || charCode !== 127 && internals.c1Controls(charCode)) {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingCTEXT);
                            break;
                        } else if (internals.c0Controls(charCode) || charCode === 127) {
                            updateResult(internals.diagnoses.deprecatedCTEXT);
                        }
                }

                break;

            // Folding white space
            case internals.components.contextFWS:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
                //                                   ; Folding white space

                // But note the erratum:
                // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
                //   In the obsolete syntax, any amount of folding white space MAY be
                //   inserted where the obs-FWS rule is allowed.  This creates the
                //   possibility of having two consecutive "folds" in a line, and
                //   therefore the possibility that a line which makes up a folded header
                //   field could be composed entirely of white space.
                //
                //   obs-FWS =   1*([CRLF] WSP)

                if (prevToken === '\r') {
                    if (token === '\r') {
                        // Fatal error
                        updateResult(internals.diagnoses.errFWSCRLFx2);
                        break;
                    }

                    if (++crlfCount > 1) {
                        // Multiple folds => obsolete FWS
                        updateResult(internals.diagnoses.deprecatedFWS);
                    } else {
                        crlfCount = 1;
                    }
                }

                switch (token) {
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                        }

                        break;

                    case ' ':
                    case '\t':
                        break;

                    default:
                        if (prevToken === '\r') {
                            // Fatal error
                            updateResult(internals.diagnoses.errFWSCRLFEnd);
                        }

                        crlfCount = 0;

                        // End of FWS
                        context.prev = context.now;
                        context.now = context.stack.pop();

                        // Look at this token again in the parent context
                        --i;
                }

                prevToken = token;
                break;

            // Unexpected context
            // $lab:coverage:off$
            default:
                throw new Error('unknown context: ' + context.now);
            // $lab:coverage:on$
        } // Primary state machine

        if (maxResult > internals.categories.rfc5322) {
            // Fatal error, no point continuing
            break;
        }
    } // Token loop

    // Check for errors
    if (maxResult < internals.categories.rfc5322) {
        var _punycodeLength = Punycode.encode(parseData.domain).length;
        // Fatal errors
        if (context.now === internals.components.contextQuotedString) {
            updateResult(internals.diagnoses.errUnclosedQuotedString);
        } else if (context.now === internals.components.contextQuotedPair) {
            updateResult(internals.diagnoses.errBackslashEnd);
        } else if (context.now === internals.components.contextComment) {
            updateResult(internals.diagnoses.errUnclosedComment);
        } else if (context.now === internals.components.literal) {
            updateResult(internals.diagnoses.errUnclosedDomainLiteral);
        } else if (token === '\r') {
            updateResult(internals.diagnoses.errFWSCRLFEnd);
        } else if (parseData.domain.length === 0) {
            updateResult(internals.diagnoses.errNoDomain);
        } else if (elementLength === 0) {
            updateResult(internals.diagnoses.errDotEnd);
        } else if (hyphenFlag) {
            updateResult(internals.diagnoses.errDomainHyphenEnd);
        }

        // Other errors
        else if (_punycodeLength > 255) {
                // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
                //   The maximum total length of a domain name or number is 255 octets.
                updateResult(internals.diagnoses.rfc5322DomainTooLong);
            } else if (Buffer.byteLength(parseData.local, 'utf8') + _punycodeLength + /* '@' */1 > 254) {
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Forward-path   = Path
                //
                //   Path           = "<" [ A-d-l ":" ] Mailbox ">"
                //
                // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
                //   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).
                //
                // Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified
                // erratum to RFC 3696:
                //
                // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
                //   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since
                //   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered
                //   to be 254.
                updateResult(internals.diagnoses.rfc5322TooLong);
            } else if (elementLength > 63) {
                // http://tools.ietf.org/html/rfc1035#section-2.3.4
                // labels   63 octets or less
                updateResult(internals.diagnoses.rfc5322LabelTooLong);
            } else if (options.minDomainAtoms && atomData.domains.length < options.minDomainAtoms) {
                updateResult(internals.diagnoses.errDomainTooShort);
            } else if (options.tldWhitelist || options.tldBlacklist) {
                var tldAtom = atomData.domains[elementCount];

                if (!internals.validDomain(tldAtom, options)) {
                    updateResult(internals.diagnoses.errUnknownTLD);
                }
            }
    } // Check for errors

    // Finish
    if (maxResult < internals.categories.dnsWarn) {
        // Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit
        var code = atomData.domains[elementCount].codePointAt(0);

        if (code <= 57) {
            updateResult(internals.diagnoses.rfc5321TLDNumeric);
        }
    }

    if (maxResult < threshold) {
        maxResult = internals.diagnoses.valid;
    }

    var finishResult = diagnose ? maxResult : maxResult < internals.defaultThreshold;

    // $lab:coverage:off$
    if (callback) {
        callback(finishResult);
    }
    // $lab:coverage:on$

    return finishResult;
};

exports.diagnoses = internals.validate.diagnoses = function () {

    var diag = {};
    var keys = Object.keys(internals.diagnoses);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        diag[key] = internals.diagnoses[key];
    }

    return diag;
}();

exports.normalize = internals.normalize;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer));

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

exports.errors = {
    root: 'value',
    key: '"{{!label}}" ',
    messages: {
        wrapArrays: true
    },
    any: {
        unknown: 'is not allowed',
        invalid: 'contains an invalid value',
        empty: 'is not allowed to be empty',
        required: 'is required',
        allowOnly: 'must be one of {{valids}}',
        default: 'threw an error when running default method'
    },
    alternatives: {
        base: 'not matching any of the allowed alternatives',
        child: null
    },
    array: {
        base: 'must be an array',
        includes: 'at position {{pos}} does not match any of the allowed types',
        includesSingle: 'single value of "{{!label}}" does not match any of the allowed types',
        includesOne: 'at position {{pos}} fails because {{reason}}',
        includesOneSingle: 'single value of "{{!label}}" fails because {{reason}}',
        includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',
        includesRequiredKnowns: 'does not contain {{knownMisses}}',
        includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',
        excludes: 'at position {{pos}} contains an excluded value',
        excludesSingle: 'single value of "{{!label}}" contains an excluded value',
        min: 'must contain at least {{limit}} items',
        max: 'must contain less than or equal to {{limit}} items',
        length: 'must contain {{limit}} items',
        ordered: 'at position {{pos}} fails because {{reason}}',
        orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',
        ref: 'references "{{ref}}" which is not a positive integer',
        sparse: 'must not be a sparse array',
        unique: 'position {{pos}} contains a duplicate value'
    },
    boolean: {
        base: 'must be a boolean'
    },
    binary: {
        base: 'must be a buffer or a string',
        min: 'must be at least {{limit}} bytes',
        max: 'must be less than or equal to {{limit}} bytes',
        length: 'must be {{limit}} bytes'
    },
    date: {
        base: 'must be a number of milliseconds or valid date string',
        format: 'must be a string with one of the following formats {{format}}',
        strict: 'must be a valid date',
        min: 'must be larger than or equal to "{{limit}}"',
        max: 'must be less than or equal to "{{limit}}"',
        less: 'must be less than "{{limit}}"',
        greater: 'must be greater than "{{limit}}"',
        isoDate: 'must be a valid ISO 8601 date',
        timestamp: {
            javascript: 'must be a valid timestamp or number of milliseconds',
            unix: 'must be a valid timestamp or number of seconds'
        },
        ref: 'references "{{ref}}" which is not a date'
    },
    function: {
        base: 'must be a Function',
        arity: 'must have an arity of {{n}}',
        minArity: 'must have an arity greater or equal to {{n}}',
        maxArity: 'must have an arity lesser or equal to {{n}}',
        ref: 'must be a Joi reference',
        class: 'must be a class'
    },
    lazy: {
        base: '!!schema error: lazy schema must be set',
        schema: '!!schema error: lazy schema function must return a schema'
    },
    object: {
        base: 'must be an object',
        child: '!!child "{{!child}}" fails because {{reason}}',
        min: 'must have at least {{limit}} children',
        max: 'must have less than or equal to {{limit}} children',
        length: 'must have {{limit}} children',
        allowUnknown: '!!"{{!child}}" is not allowed',
        with: '!!"{{mainWithLabel}}" missing required peer "{{peerWithLabel}}"',
        without: '!!"{{mainWithLabel}}" conflict with forbidden peer "{{peerWithLabel}}"',
        missing: 'must contain at least one of {{peersWithLabels}}',
        xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',
        or: 'must contain at least one of {{peersWithLabels}}',
        and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',
        nand: '!!"{{mainWithLabel}}" must not exist simultaneously with {{peersWithLabels}}',
        assert: '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}',
        rename: {
            multiple: 'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"',
            override: 'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists',
            regex: {
                multiple: 'cannot rename children {{from}} because multiple renames are disabled and another key was already renamed to "{{to}}"',
                override: 'cannot rename children {{from}} because override is disabled and target "{{to}}" exists'
            }
        },
        type: 'must be an instance of "{{type}}"',
        schema: 'must be a Joi instance'
    },
    number: {
        base: 'must be a number',
        min: 'must be larger than or equal to {{limit}}',
        max: 'must be less than or equal to {{limit}}',
        less: 'must be less than {{limit}}',
        greater: 'must be greater than {{limit}}',
        float: 'must be a float or double',
        integer: 'must be an integer',
        negative: 'must be a negative number',
        positive: 'must be a positive number',
        precision: 'must have no more than {{limit}} decimal places',
        ref: 'references "{{ref}}" which is not a number',
        multiple: 'must be a multiple of {{multiple}}',
        port: 'must be a valid port'
    },
    string: {
        base: 'must be a string',
        min: 'length must be at least {{limit}} characters long',
        max: 'length must be less than or equal to {{limit}} characters long',
        length: 'length must be {{limit}} characters long',
        alphanum: 'must only contain alpha-numeric characters',
        token: 'must only contain alpha-numeric and underscore characters',
        regex: {
            base: 'with value "{{!value}}" fails to match the required pattern: {{pattern}}',
            name: 'with value "{{!value}}" fails to match the {{name}} pattern',
            invert: {
                base: 'with value "{{!value}}" matches the inverted pattern: {{pattern}}',
                name: 'with value "{{!value}}" matches the inverted {{name}} pattern'
            }
        },
        email: 'must be a valid email',
        uri: 'must be a valid uri',
        uriRelativeOnly: 'must be a valid relative uri',
        uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',
        isoDate: 'must be a valid ISO 8601 date',
        guid: 'must be a valid GUID',
        hex: 'must only contain hexadecimal characters',
        hexAlign: 'hex decoded representation must be byte aligned',
        base64: 'must be a valid base64 string',
        hostname: 'must be a valid hostname',
        normalize: 'must be unicode normalized in the {{form}} form',
        lowercase: 'must only contain lowercase characters',
        uppercase: 'must only contain uppercase characters',
        trim: 'must not have leading or trailing whitespace',
        creditCard: 'must be a credit card',
        ref: 'references "{{ref}}" which is not a number',
        ip: 'must be a valid ip address with a {{cidr}} CIDR',
        ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'
    }
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var Joi = __webpack_require__(8);

exports.options = Joi.object({
    abortEarly: Joi.boolean(),
    convert: Joi.boolean(),
    allowUnknown: Joi.boolean(),
    skipFunctions: Joi.boolean(),
    stripUnknown: [Joi.boolean(), Joi.object({ arrays: Joi.boolean(), objects: Joi.boolean() }).or('arrays', 'objects')],
    language: Joi.object(),
    presence: Joi.string().only('required', 'optional', 'forbidden', 'ignore'),
    raw: Joi.boolean(),
    context: Joi.object(),
    strip: Joi.boolean(),
    noDefaults: Joi.boolean(),
    escapeHtml: Joi.boolean()
}).strict();

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Any = __webpack_require__(2);
var Cast = __webpack_require__(4);
var Ref = __webpack_require__(1);
var Hoek = __webpack_require__(0);

// Declare internals

var internals = {};

internals.fastSplice = function (arr, i) {

    var pos = i;
    while (pos < arr.length) {
        arr[pos++] = arr[pos];
    }

    --arr.length;
};

internals.Array = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'array';
        _this._inner.items = [];
        _this._inner.ordereds = [];
        _this._inner.inclusions = [];
        _this._inner.exclusions = [];
        _this._inner.requireds = [];
        _this._flags.sparse = false;
        return _this;
    }

    _class.prototype._base = function _base(value, state, options) {

        var result = {
            value: value
        };

        if (typeof value === 'string' && options.convert) {

            internals.safeParse(value, result);
        }

        var isArray = Array.isArray(result.value);
        var wasArray = isArray;
        if (options.convert && this._flags.single && !isArray) {
            result.value = [result.value];
            isArray = true;
        }

        if (!isArray) {
            result.errors = this.createError('array.base', null, state, options);
            return result;
        }

        if (this._inner.inclusions.length || this._inner.exclusions.length || this._inner.requireds.length || this._inner.ordereds.length || !this._flags.sparse) {

            // Clone the array so that we don't modify the original
            if (wasArray) {
                result.value = result.value.slice(0);
            }

            result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

            if (result.errors && wasArray && options.convert && this._flags.single) {

                // Attempt a 2nd pass by putting the array inside one.
                var previousErrors = result.errors;

                result.value = [result.value];
                result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

                if (result.errors) {

                    // Restore previous errors and value since this didn't validate either.
                    result.errors = previousErrors;
                    result.value = result.value[0];
                }
            }
        }

        return result;
    };

    _class.prototype._checkItems = function _checkItems(items, wasArray, state, options) {

        var errors = [];
        var errored = void 0;

        var requireds = this._inner.requireds.slice();
        var ordereds = this._inner.ordereds.slice();
        var inclusions = this._inner.inclusions.concat(requireds);

        var il = items.length;
        for (var i = 0; i < il; ++i) {
            errored = false;
            var item = items[i];
            var isValid = false;
            var key = wasArray ? i : state.key;
            var path = wasArray ? state.path.concat(i) : state.path;
            var localState = { key: key, path: path, parent: state.parent, reference: state.reference };
            var res = void 0;

            // Sparse

            if (!this._flags.sparse && item === undefined) {
                errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));

                if (options.abortEarly) {
                    return errors;
                }

                ordereds.shift();

                continue;
            }

            // Exclusions

            for (var j = 0; j < this._inner.exclusions.length; ++j) {
                res = this._inner.exclusions[j]._validate(item, localState, {}); // Not passing options to use defaults

                if (!res.errors) {
                    errors.push(this.createError(wasArray ? 'array.excludes' : 'array.excludesSingle', { pos: i, value: item }, { key: state.key, path: localState.path }, options));
                    errored = true;

                    if (options.abortEarly) {
                        return errors;
                    }

                    ordereds.shift();

                    break;
                }
            }

            if (errored) {
                continue;
            }

            // Ordered
            if (this._inner.ordereds.length) {
                if (ordereds.length > 0) {
                    var ordered = ordereds.shift();
                    res = ordered._validate(item, localState, options);
                    if (!res.errors) {
                        if (ordered._flags.strip) {
                            internals.fastSplice(items, i);
                            --i;
                            --il;
                        } else if (!this._flags.sparse && res.value === undefined) {
                            errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));

                            if (options.abortEarly) {
                                return errors;
                            }

                            continue;
                        } else {
                            items[i] = res.value;
                        }
                    } else {
                        errors.push(this.createError('array.ordered', { pos: i, reason: res.errors, value: item }, { key: state.key, path: localState.path }, options));
                        if (options.abortEarly) {
                            return errors;
                        }
                    }
                    continue;
                } else if (!this._inner.items.length) {
                    errors.push(this.createError('array.orderedLength', { pos: i, limit: this._inner.ordereds.length }, { key: state.key, path: localState.path }, options));
                    if (options.abortEarly) {
                        return errors;
                    }
                    continue;
                }
            }

            // Requireds

            var requiredChecks = [];
            var jl = requireds.length;
            for (var _j = 0; _j < jl; ++_j) {
                res = requiredChecks[_j] = requireds[_j]._validate(item, localState, options);
                if (!res.errors) {
                    items[i] = res.value;
                    isValid = true;
                    internals.fastSplice(requireds, _j);
                    --_j;
                    --jl;

                    if (!this._flags.sparse && res.value === undefined) {
                        errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));

                        if (options.abortEarly) {
                            return errors;
                        }
                    }

                    break;
                }
            }

            if (isValid) {
                continue;
            }

            // Inclusions

            var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.arrays : false;

            jl = inclusions.length;
            for (var _j2 = 0; _j2 < jl; ++_j2) {
                var inclusion = inclusions[_j2];

                // Avoid re-running requireds that already didn't match in the previous loop
                var previousCheck = requireds.indexOf(inclusion);
                if (previousCheck !== -1) {
                    res = requiredChecks[previousCheck];
                } else {
                    res = inclusion._validate(item, localState, options);

                    if (!res.errors) {
                        if (inclusion._flags.strip) {
                            internals.fastSplice(items, i);
                            --i;
                            --il;
                        } else if (!this._flags.sparse && res.value === undefined) {
                            errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));
                            errored = true;
                        } else {
                            items[i] = res.value;
                        }
                        isValid = true;
                        break;
                    }
                }

                // Return the actual error if only one inclusion defined
                if (jl === 1) {
                    if (stripUnknown) {
                        internals.fastSplice(items, i);
                        --i;
                        --il;
                        isValid = true;
                        break;
                    }

                    errors.push(this.createError(wasArray ? 'array.includesOne' : 'array.includesOneSingle', { pos: i, reason: res.errors, value: item }, { key: state.key, path: localState.path }, options));
                    errored = true;

                    if (options.abortEarly) {
                        return errors;
                    }

                    break;
                }
            }

            if (errored) {
                continue;
            }

            if (this._inner.inclusions.length && !isValid) {
                if (stripUnknown) {
                    internals.fastSplice(items, i);
                    --i;
                    --il;
                    continue;
                }

                errors.push(this.createError(wasArray ? 'array.includes' : 'array.includesSingle', { pos: i, value: item }, { key: state.key, path: localState.path }, options));

                if (options.abortEarly) {
                    return errors;
                }
            }
        }

        if (requireds.length) {
            this._fillMissedErrors.call(this, errors, requireds, state, options);
        }

        if (ordereds.length) {
            this._fillOrderedErrors.call(this, errors, ordereds, state, options);
        }

        return errors.length ? errors : null;
    };

    _class.prototype.describe = function describe() {

        var description = Any.prototype.describe.call(this);

        if (this._inner.ordereds.length) {
            description.orderedItems = [];

            for (var i = 0; i < this._inner.ordereds.length; ++i) {
                description.orderedItems.push(this._inner.ordereds[i].describe());
            }
        }

        if (this._inner.items.length) {
            description.items = [];

            for (var _i = 0; _i < this._inner.items.length; ++_i) {
                description.items.push(this._inner.items[_i].describe());
            }
        }

        return description;
    };

    _class.prototype.items = function items() {
        var _this2 = this;

        var obj = this.clone();

        for (var _len = arguments.length, schemas = Array(_len), _key = 0; _key < _len; _key++) {
            schemas[_key] = arguments[_key];
        }

        Hoek.flatten(schemas).forEach(function (type, index) {

            try {
                type = Cast.schema(_this2._currentJoi, type);
            } catch (castErr) {
                if (castErr.hasOwnProperty('path')) {
                    castErr.path = index + '.' + castErr.path;
                } else {
                    castErr.path = index;
                }
                castErr.message = castErr.message + '(' + castErr.path + ')';
                throw castErr;
            }

            obj._inner.items.push(type);

            if (type._flags.presence === 'required') {
                obj._inner.requireds.push(type);
            } else if (type._flags.presence === 'forbidden') {
                obj._inner.exclusions.push(type.optional());
            } else {
                obj._inner.inclusions.push(type);
            }
        });

        return obj;
    };

    _class.prototype.ordered = function ordered() {
        var _this3 = this;

        var obj = this.clone();

        for (var _len2 = arguments.length, schemas = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            schemas[_key2] = arguments[_key2];
        }

        Hoek.flatten(schemas).forEach(function (type, index) {

            try {
                type = Cast.schema(_this3._currentJoi, type);
            } catch (castErr) {
                if (castErr.hasOwnProperty('path')) {
                    castErr.path = index + '.' + castErr.path;
                } else {
                    castErr.path = index;
                }
                castErr.message = castErr.message + '(' + castErr.path + ')';
                throw castErr;
            }
            obj._inner.ordereds.push(type);
        });

        return obj;
    };

    _class.prototype.min = function min(limit) {

        var isRef = Ref.isRef(limit);

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');

        return this._test('min', limit, function (value, state, options) {

            var compareTo = void 0;
            if (isRef) {
                compareTo = limit(state.reference || state.parent, options);

                if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                    return this.createError('array.ref', { ref: limit.key }, state, options);
                }
            } else {
                compareTo = limit;
            }

            if (value.length >= compareTo) {
                return value;
            }

            return this.createError('array.min', { limit: limit, value: value }, state, options);
        });
    };

    _class.prototype.max = function max(limit) {

        var isRef = Ref.isRef(limit);

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');

        return this._test('max', limit, function (value, state, options) {

            var compareTo = void 0;
            if (isRef) {
                compareTo = limit(state.reference || state.parent, options);

                if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                    return this.createError('array.ref', { ref: limit.key }, state, options);
                }
            } else {
                compareTo = limit;
            }

            if (value.length <= compareTo) {
                return value;
            }

            return this.createError('array.max', { limit: limit, value: value }, state, options);
        });
    };

    _class.prototype.length = function length(limit) {

        var isRef = Ref.isRef(limit);

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');

        return this._test('length', limit, function (value, state, options) {

            var compareTo = void 0;
            if (isRef) {
                compareTo = limit(state.reference || state.parent, options);

                if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                    return this.createError('array.ref', { ref: limit.key }, state, options);
                }
            } else {
                compareTo = limit;
            }

            if (value.length === compareTo) {
                return value;
            }

            return this.createError('array.length', { limit: limit, value: value }, state, options);
        });
    };

    _class.prototype.unique = function unique(comparator) {

        Hoek.assert(comparator === undefined || typeof comparator === 'function' || typeof comparator === 'string', 'comparator must be a function or a string');

        var settings = {};

        if (typeof comparator === 'string') {
            settings.path = comparator;
        } else if (typeof comparator === 'function') {
            settings.comparator = comparator;
        }

        return this._test('unique', settings, function (value, state, options) {

            var found = {
                string: Object.create(null),
                number: Object.create(null),
                undefined: Object.create(null),
                boolean: Object.create(null),
                object: new Map(),
                function: new Map(),
                custom: new Map()
            };

            var compare = settings.comparator || Hoek.deepEqual;

            for (var i = 0; i < value.length; ++i) {
                var item = settings.path ? Hoek.reach(value[i], settings.path) : value[i];
                var records = settings.comparator ? found.custom : found[typeof item === 'undefined' ? 'undefined' : _typeof(item)];

                // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.
                // I still want to keep the test for future js versions with new types (eg. Symbol).
                if ( /* $lab:coverage:off$ */records /* $lab:coverage:on$ */) {
                        if (records instanceof Map) {
                            var entries = records.entries();
                            var current = void 0;
                            while (!(current = entries.next()).done) {
                                if (compare(current.value[0], item)) {
                                    var localState = {
                                        key: state.key,
                                        path: state.path.concat(i),
                                        parent: state.parent,
                                        reference: state.reference
                                    };

                                    var context = {
                                        pos: i,
                                        value: value[i],
                                        dupePos: current.value[1],
                                        dupeValue: value[current.value[1]]
                                    };

                                    if (settings.path) {
                                        context.path = settings.path;
                                    }

                                    return this.createError('array.unique', context, localState, options);
                                }
                            }

                            records.set(item, i);
                        } else {
                            if (records[item] !== undefined) {
                                var _localState = {
                                    key: state.key,
                                    path: state.path.concat(i),
                                    parent: state.parent,
                                    reference: state.reference
                                };

                                var _context = {
                                    pos: i,
                                    value: value[i],
                                    dupePos: records[item],
                                    dupeValue: value[records[item]]
                                };

                                if (settings.path) {
                                    _context.path = settings.path;
                                }

                                return this.createError('array.unique', _context, _localState, options);
                            }

                            records[item] = i;
                        }
                    }
            }

            return value;
        });
    };

    _class.prototype.sparse = function sparse(enabled) {

        var value = enabled === undefined ? true : !!enabled;

        if (this._flags.sparse === value) {
            return this;
        }

        var obj = this.clone();
        obj._flags.sparse = value;
        return obj;
    };

    _class.prototype.single = function single(enabled) {

        var value = enabled === undefined ? true : !!enabled;

        if (this._flags.single === value) {
            return this;
        }

        var obj = this.clone();
        obj._flags.single = value;
        return obj;
    };

    _class.prototype._fillMissedErrors = function _fillMissedErrors(errors, requireds, state, options) {

        var knownMisses = [];
        var unknownMisses = 0;
        for (var i = 0; i < requireds.length; ++i) {
            var label = requireds[i]._getLabel();
            if (label) {
                knownMisses.push(label);
            } else {
                ++unknownMisses;
            }
        }

        if (knownMisses.length) {
            if (unknownMisses) {
                errors.push(this.createError('array.includesRequiredBoth', { knownMisses: knownMisses, unknownMisses: unknownMisses }, { key: state.key, path: state.path }, options));
            } else {
                errors.push(this.createError('array.includesRequiredKnowns', { knownMisses: knownMisses }, { key: state.key, path: state.path }, options));
            }
        } else {
            errors.push(this.createError('array.includesRequiredUnknowns', { unknownMisses: unknownMisses }, { key: state.key, path: state.path }, options));
        }
    };

    _class.prototype._fillOrderedErrors = function _fillOrderedErrors(errors, ordereds, state, options) {

        var requiredOrdereds = [];

        for (var i = 0; i < ordereds.length; ++i) {
            var presence = Hoek.reach(ordereds[i], '_flags.presence');
            if (presence === 'required') {
                requiredOrdereds.push(ordereds[i]);
            }
        }

        if (requiredOrdereds.length) {
            this._fillMissedErrors.call(this, errors, requiredOrdereds, state, options);
        }
    };

    return _class;
}(Any);

internals.safeParse = function (value, result) {

    try {
        var converted = JSON.parse(value);
        if (Array.isArray(converted)) {
            result.value = converted;
        }
    } catch (e) {}
};

module.exports = new internals.Array();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(Buffer) {

// Load modules

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Any = __webpack_require__(2);
var Hoek = __webpack_require__(0);

// Declare internals

var internals = {};

internals.Binary = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'binary';
        return _this;
    }

    _class.prototype._base = function _base(value, state, options) {

        var result = {
            value: value
        };

        if (typeof value === 'string' && options.convert) {

            try {
                result.value = Buffer.from(value, this._flags.encoding);
            } catch (e) {}
        }

        result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);
        return result;
    };

    _class.prototype.encoding = function encoding(_encoding) {

        Hoek.assert(Buffer.isEncoding(_encoding), 'Invalid encoding:', _encoding);

        if (this._flags.encoding === _encoding) {
            return this;
        }

        var obj = this.clone();
        obj._flags.encoding = _encoding;
        return obj;
    };

    _class.prototype.min = function min(limit) {

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

        return this._test('min', limit, function (value, state, options) {

            if (value.length >= limit) {
                return value;
            }

            return this.createError('binary.min', { limit: limit, value: value }, state, options);
        });
    };

    _class.prototype.max = function max(limit) {

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

        return this._test('max', limit, function (value, state, options) {

            if (value.length <= limit) {
                return value;
            }

            return this.createError('binary.max', { limit: limit, value: value }, state, options);
        });
    };

    _class.prototype.length = function length(limit) {

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

        return this._test('length', limit, function (value, state, options) {

            if (value.length === limit) {
                return value;
            }

            return this.createError('binary.length', { limit: limit, value: value }, state, options);
        });
    };

    return _class;
}(Any);

module.exports = new internals.Binary();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer));

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Any = __webpack_require__(2);
var Hoek = __webpack_require__(0);

// Declare internals

var internals = {
    Set: __webpack_require__(9)
};

internals.Boolean = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'boolean';
        _this._flags.insensitive = true;
        _this._inner.truthySet = new internals.Set();
        _this._inner.falsySet = new internals.Set();
        return _this;
    }

    _class.prototype._base = function _base(value, state, options) {

        var result = {
            value: value
        };

        if (typeof value === 'string' && options.convert) {

            var normalized = this._flags.insensitive ? value.toLowerCase() : value;
            result.value = normalized === 'true' ? true : normalized === 'false' ? false : value;
        }

        if (typeof result.value !== 'boolean') {
            result.value = this._inner.truthySet.has(value, null, null, this._flags.insensitive) ? true : this._inner.falsySet.has(value, null, null, this._flags.insensitive) ? false : value;
        }

        result.errors = typeof result.value === 'boolean' ? null : this.createError('boolean.base', null, state, options);
        return result;
    };

    _class.prototype.truthy = function truthy() {
        for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
            values[_key] = arguments[_key];
        }

        var obj = this.clone();
        values = Hoek.flatten(values);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];

            Hoek.assert(value !== undefined, 'Cannot call truthy with undefined');
            obj._inner.truthySet.add(value);
        }
        return obj;
    };

    _class.prototype.falsy = function falsy() {
        for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
        }

        var obj = this.clone();
        values = Hoek.flatten(values);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];

            Hoek.assert(value !== undefined, 'Cannot call falsy with undefined');
            obj._inner.falsySet.add(value);
        }
        return obj;
    };

    _class.prototype.insensitive = function insensitive(enabled) {

        var insensitive = enabled === undefined ? true : !!enabled;

        if (this._flags.insensitive === insensitive) {
            return this;
        }

        var obj = this.clone();
        obj._flags.insensitive = insensitive;
        return obj;
    };

    _class.prototype.describe = function describe() {

        var description = Any.prototype.describe.call(this);
        description.truthy = [true].concat(this._inner.truthySet.values());
        description.falsy = [false].concat(this._inner.falsySet.values());
        return description;
    };

    return _class;
}(Any);

module.exports = new internals.Boolean();

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Hoek = __webpack_require__(0);
var ObjectType = __webpack_require__(13);
var Ref = __webpack_require__(1);

// Declare internals

var internals = {};

internals.Func = function (_ObjectType$construct) {
    _inherits(_class, _ObjectType$construct);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _ObjectType$construct.call(this));

        _this._flags.func = true;
        return _this;
    }

    _class.prototype.arity = function arity(n) {

        Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');

        return this._test('arity', n, function (value, state, options) {

            if (value.length === n) {
                return value;
            }

            return this.createError('function.arity', { n: n }, state, options);
        });
    };

    _class.prototype.minArity = function minArity(n) {

        Hoek.assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');

        return this._test('minArity', n, function (value, state, options) {

            if (value.length >= n) {
                return value;
            }

            return this.createError('function.minArity', { n: n }, state, options);
        });
    };

    _class.prototype.maxArity = function maxArity(n) {

        Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');

        return this._test('maxArity', n, function (value, state, options) {

            if (value.length <= n) {
                return value;
            }

            return this.createError('function.maxArity', { n: n }, state, options);
        });
    };

    _class.prototype.ref = function ref() {

        return this._test('ref', null, function (value, state, options) {

            if (Ref.isRef(value)) {
                return value;
            }

            return this.createError('function.ref', null, state, options);
        });
    };

    _class.prototype.class = function _class() {

        return this._test('class', null, function (value, state, options) {

            if (/^\s*class\s/.test(value.toString())) {
                return value;
            }

            return this.createError('function.class', null, state, options);
        });
    };

    return _class;
}(ObjectType.constructor);

module.exports = new internals.Func();

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Any = __webpack_require__(2);
var Hoek = __webpack_require__(0);

// Declare internals

var internals = {};

internals.Lazy = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'lazy';
        return _this;
    }

    _class.prototype._base = function _base(value, state, options) {

        var result = { value: value };
        var lazy = this._flags.lazy;

        if (!lazy) {
            result.errors = this.createError('lazy.base', null, state, options);
            return result;
        }

        var schema = lazy();

        if (!(schema instanceof Any)) {
            result.errors = this.createError('lazy.schema', null, state, options);
            return result;
        }

        return schema._validate(value, state, options);
    };

    _class.prototype.set = function set(fn) {

        Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');

        var obj = this.clone();
        obj._flags.lazy = fn;
        return obj;
    };

    return _class;
}(Any);

module.exports = new internals.Lazy();

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Any = __webpack_require__(2);
var Ref = __webpack_require__(1);
var Hoek = __webpack_require__(0);

// Declare internals

var internals = {
    precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
};

internals.Number = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'number';
        _this._invalids.add(Infinity);
        _this._invalids.add(-Infinity);
        return _this;
    }

    _class.prototype._base = function _base(value, state, options) {

        var result = {
            errors: null,
            value: value
        };

        if (typeof value === 'string' && options.convert) {

            var number = parseFloat(value);
            result.value = isNaN(number) || !isFinite(value) ? NaN : number;
        }

        var isNumber = typeof result.value === 'number' && !isNaN(result.value);

        if (options.convert && 'precision' in this._flags && isNumber) {

            // This is conceptually equivalent to using toFixed but it should be much faster
            var precision = Math.pow(10, this._flags.precision);
            result.value = Math.round(result.value * precision) / precision;
        }

        result.errors = isNumber ? null : this.createError('number.base', null, state, options);
        return result;
    };

    _class.prototype.multiple = function multiple(base) {

        var isRef = Ref.isRef(base);

        if (!isRef) {
            Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');
            Hoek.assert(base > 0, 'multiple must be greater than 0');
        }

        return this._test('multiple', base, function (value, state, options) {

            var divisor = isRef ? base(state.reference || state.parent, options) : base;

            if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {
                return this.createError('number.ref', { ref: base.key }, state, options);
            }

            if (value % divisor === 0) {
                return value;
            }

            return this.createError('number.multiple', { multiple: base, value: value }, state, options);
        });
    };

    _class.prototype.integer = function integer() {

        return this._test('integer', undefined, function (value, state, options) {

            return Number.isSafeInteger(value) ? value : this.createError('number.integer', { value: value }, state, options);
        });
    };

    _class.prototype.negative = function negative() {

        return this._test('negative', undefined, function (value, state, options) {

            if (value < 0) {
                return value;
            }

            return this.createError('number.negative', { value: value }, state, options);
        });
    };

    _class.prototype.positive = function positive() {

        return this._test('positive', undefined, function (value, state, options) {

            if (value > 0) {
                return value;
            }

            return this.createError('number.positive', { value: value }, state, options);
        });
    };

    _class.prototype.precision = function precision(limit) {

        Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');
        Hoek.assert(!('precision' in this._flags), 'precision already set');

        var obj = this._test('precision', limit, function (value, state, options) {

            var places = value.toString().match(internals.precisionRx);
            var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);
            if (decimals <= limit) {
                return value;
            }

            return this.createError('number.precision', { limit: limit, value: value }, state, options);
        });

        obj._flags.precision = limit;
        return obj;
    };

    _class.prototype.port = function port() {

        return this._test('port', undefined, function (value, state, options) {

            if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {
                return this.createError('number.port', { value: value }, state, options);
            }

            return value;
        });
    };

    return _class;
}(Any);

internals.compare = function (type, compare) {

    return function (limit) {

        var isRef = Ref.isRef(limit);
        var isNumber = typeof limit === 'number' && !isNaN(limit);

        Hoek.assert(isNumber || isRef, 'limit must be a number or reference');

        return this._test(type, limit, function (value, state, options) {

            var compareTo = void 0;
            if (isRef) {
                compareTo = limit(state.reference || state.parent, options);

                if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {
                    return this.createError('number.ref', { ref: limit.key }, state, options);
                }
            } else {
                compareTo = limit;
            }

            if (compare(value, compareTo)) {
                return value;
            }

            return this.createError('number.' + type, { limit: compareTo, value: value }, state, options);
        });
    };
};

internals.Number.prototype.min = internals.compare('min', function (value, limit) {
    return value >= limit;
});
internals.Number.prototype.max = internals.compare('max', function (value, limit) {
    return value <= limit;
});
internals.Number.prototype.greater = internals.compare('greater', function (value, limit) {
    return value > limit;
});
internals.Number.prototype.less = internals.compare('less', function (value, limit) {
    return value < limit;
});

module.exports = new internals.Number();

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {
/* WEBPACK VAR INJECTION */(function(Buffer) {

// Load modules

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Net = __webpack_require__(15);
var Hoek = __webpack_require__(0);
var Isemail = void 0; // Loaded on demand
var Any = __webpack_require__(2);
var Ref = __webpack_require__(1);
var JoiDate = __webpack_require__(12);
var Uri = __webpack_require__(30);
var Ip = __webpack_require__(29);

// Declare internals

var internals = {
    uriRegex: Uri.createUriRegex(),
    ipRegex: Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], 'optional'),
    guidBrackets: {
        '{': '}', '[': ']', '(': ')', '': ''
    },
    guidVersions: {
        uuidv1: '1',
        uuidv2: '2',
        uuidv3: '3',
        uuidv4: '4',
        uuidv5: '5'
    },
    cidrPresences: ['required', 'optional', 'forbidden'],
    normalizationForms: ['NFC', 'NFD', 'NFKC', 'NFKD']
};

internals.String = function (_Any) {
    _inherits(_class, _Any);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, _Any.call(this));

        _this._type = 'string';
        _this._invalids.add('');
        return _this;
    }

    _class.prototype._base = function _base(value, state, options) {

        if (typeof value === 'string' && options.convert) {

            if (this._flags.normalize) {
                value = value.normalize(this._flags.normalize);
            }

            if (this._flags.case) {
                value = this._flags.case === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase();
            }

            if (this._flags.trim) {
                value = value.trim();
            }

            if (this._inner.replacements) {

                for (var i = 0; i < this._inner.replacements.length; ++i) {
                    var replacement = this._inner.replacements[i];
                    value = value.replace(replacement.pattern, replacement.replacement);
                }
            }

            if (this._flags.truncate) {
                for (var _i = 0; _i < this._tests.length; ++_i) {
                    var test = this._tests[_i];
                    if (test.name === 'max') {
                        value = value.slice(0, test.arg);
                        break;
                    }
                }
            }

            if (this._flags.byteAligned && value.length % 2 !== 0) {
                value = '0' + value;
            }
        }

        return {
            value: value,
            errors: typeof value === 'string' ? null : this.createError('string.base', { value: value }, state, options)
        };
    };

    _class.prototype.insensitive = function insensitive() {

        if (this._flags.insensitive) {
            return this;
        }

        var obj = this.clone();
        obj._flags.insensitive = true;
        return obj;
    };

    _class.prototype.creditCard = function creditCard() {

        return this._test('creditCard', undefined, function (value, state, options) {

            var i = value.length;
            var sum = 0;
            var mul = 1;

            while (i--) {
                var char = value.charAt(i) * mul;
                sum = sum + (char - (char > 9) * 9);
                mul = mul ^ 3;
            }

            var check = sum % 10 === 0 && sum > 0;
            return check ? value : this.createError('string.creditCard', { value: value }, state, options);
        });
    };

    _class.prototype.regex = function regex(pattern, patternOptions) {

        Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');

        var patternObject = {
            pattern: new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined) // Future version should break this and forbid unsupported regex flags
        };

        if (typeof patternOptions === 'string') {
            patternObject.name = patternOptions;
        } else if ((typeof patternOptions === 'undefined' ? 'undefined' : _typeof(patternOptions)) === 'object') {
            patternObject.invert = !!patternOptions.invert;

            if (patternOptions.name) {
                patternObject.name = patternOptions.name;
            }
        }

        var errorCode = ['string.regex', patternObject.invert ? '.invert' : '', patternObject.name ? '.name' : '.base'].join('');

        return this._test('regex', patternObject, function (value, state, options) {

            var patternMatch = patternObject.pattern.test(value);

            if (patternMatch ^ patternObject.invert) {
                return value;
            }

            return this.createError(errorCode, { name: patternObject.name, pattern: patternObject.pattern, value: value }, state, options);
        });
    };

    _class.prototype.alphanum = function alphanum() {

        return this._test('alphanum', undefined, function (value, state, options) {

            if (/^[a-zA-Z0-9]+$/.test(value)) {
                return value;
            }

            return this.createError('string.alphanum', { value: value }, state, options);
        });
    };

    _class.prototype.token = function token() {

        return this._test('token', undefined, function (value, state, options) {

            if (/^\w+$/.test(value)) {
                return value;
            }

            return this.createError('string.token', { value: value }, state, options);
        });
    };

    _class.prototype.email = function email(isEmailOptions) {

        if (isEmailOptions) {
            Hoek.assert((typeof isEmailOptions === 'undefined' ? 'undefined' : _typeof(isEmailOptions)) === 'object', 'email options must be an object');
            Hoek.assert(typeof isEmailOptions.checkDNS === 'undefined', 'checkDNS option is not supported');
            Hoek.assert(typeof isEmailOptions.tldWhitelist === 'undefined' || _typeof(isEmailOptions.tldWhitelist) === 'object', 'tldWhitelist must be an array or object');
            Hoek.assert(typeof isEmailOptions.minDomainAtoms === 'undefined' || Number.isSafeInteger(isEmailOptions.minDomainAtoms) && isEmailOptions.minDomainAtoms > 0, 'minDomainAtoms must be a positive integer');
            Hoek.assert(typeof isEmailOptions.errorLevel === 'undefined' || typeof isEmailOptions.errorLevel === 'boolean' || Number.isSafeInteger(isEmailOptions.errorLevel) && isEmailOptions.errorLevel >= 0, 'errorLevel must be a non-negative integer or boolean');
        }

        return this._test('email', isEmailOptions, function (value, state, options) {

            Isemail = Isemail || __webpack_require__(19);

            try {
                var result = Isemail.validate(value, isEmailOptions);
                if (result === true || result === 0) {
                    return value;
                }
            } catch (e) {}

            return this.createError('string.email', { value: value }, state, options);
        });
    };

    _class.prototype.ip = function ip() {
        var ipOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


        var regex = internals.ipRegex;
        Hoek.assert((typeof ipOptions === 'undefined' ? 'undefined' : _typeof(ipOptions)) === 'object', 'options must be an object');

        if (ipOptions.cidr) {
            Hoek.assert(typeof ipOptions.cidr === 'string', 'cidr must be a string');
            ipOptions.cidr = ipOptions.cidr.toLowerCase();

            Hoek.assert(Hoek.contain(internals.cidrPresences, ipOptions.cidr), 'cidr must be one of ' + internals.cidrPresences.join(', '));

            // If we only received a `cidr` setting, create a regex for it. But we don't need to create one if `cidr` is "optional" since that is the default
            if (!ipOptions.version && ipOptions.cidr !== 'optional') {
                regex = Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], ipOptions.cidr);
            }
        } else {

            // Set our default cidr strategy
            ipOptions.cidr = 'optional';
        }

        var versions = void 0;
        if (ipOptions.version) {
            if (!Array.isArray(ipOptions.version)) {
                ipOptions.version = [ipOptions.version];
            }

            Hoek.assert(ipOptions.version.length >= 1, 'version must have at least 1 version specified');

            versions = [];
            for (var i = 0; i < ipOptions.version.length; ++i) {
                var version = ipOptions.version[i];
                Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
                version = version.toLowerCase();
                Hoek.assert(Ip.versions[version], 'version at position ' + i + ' must be one of ' + Object.keys(Ip.versions).join(', '));
                versions.push(version);
            }

            // Make sure we have a set of versions
            versions = Hoek.unique(versions);

            regex = Ip.createIpRegex(versions, ipOptions.cidr);
        }

        return this._test('ip', ipOptions, function (value, state, options) {

            if (regex.test(value)) {
                return value;
            }

            if (versions) {
                return this.createError('string.ipVersion', { value: value, cidr: ipOptions.cidr, version: versions }, state, options);
            }

            return this.createError('string.ip', { value: value, cidr: ipOptions.cidr }, state, options);
        });
    };

    _class.prototype.uri = function uri(uriOptions) {

        var customScheme = '';
        var allowRelative = false;
        var relativeOnly = false;
        var regex = internals.uriRegex;

        if (uriOptions) {
            Hoek.assert((typeof uriOptions === 'undefined' ? 'undefined' : _typeof(uriOptions)) === 'object', 'options must be an object');

            if (uriOptions.scheme) {
                Hoek.assert(uriOptions.scheme instanceof RegExp || typeof uriOptions.scheme === 'string' || Array.isArray(uriOptions.scheme), 'scheme must be a RegExp, String, or Array');

                if (!Array.isArray(uriOptions.scheme)) {
                    uriOptions.scheme = [uriOptions.scheme];
                }

                Hoek.assert(uriOptions.scheme.length >= 1, 'scheme must have at least 1 scheme specified');

                // Flatten the array into a string to be used to match the schemes.
                for (var i = 0; i < uriOptions.scheme.length; ++i) {
                    var scheme = uriOptions.scheme[i];
                    Hoek.assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String');

                    // Add OR separators if a value already exists
                    customScheme = customScheme + (customScheme ? '|' : '');

                    // If someone wants to match HTTP or HTTPS for example then we need to support both RegExp and String so we don't escape their pattern unknowingly.
                    if (scheme instanceof RegExp) {
                        customScheme = customScheme + scheme.source;
                    } else {
                        Hoek.assert(/[a-zA-Z][a-zA-Z0-9+-\.]*/.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');
                        customScheme = customScheme + Hoek.escapeRegex(scheme);
                    }
                }
            }

            if (uriOptions.allowRelative) {
                allowRelative = true;
            }

            if (uriOptions.relativeOnly) {
                relativeOnly = true;
            }
        }

        if (customScheme || allowRelative || relativeOnly) {
            regex = Uri.createUriRegex(customScheme, allowRelative, relativeOnly);
        }

        return this._test('uri', uriOptions, function (value, state, options) {

            if (regex.test(value)) {
                return value;
            }

            if (relativeOnly) {
                return this.createError('string.uriRelativeOnly', { value: value }, state, options);
            }

            if (customScheme) {
                return this.createError('string.uriCustomScheme', { scheme: customScheme, value: value }, state, options);
            }

            return this.createError('string.uri', { value: value }, state, options);
        });
    };

    _class.prototype.isoDate = function isoDate() {

        return this._test('isoDate', undefined, function (value, state, options) {

            if (JoiDate._isIsoDate(value)) {
                if (!options.convert) {
                    return value;
                }

                var d = new Date(value);
                if (!isNaN(d.getTime())) {
                    return d.toISOString();
                }
            }

            return this.createError('string.isoDate', { value: value }, state, options);
        });
    };

    _class.prototype.guid = function guid(guidOptions) {

        var versionNumbers = '';

        if (guidOptions && guidOptions.version) {
            if (!Array.isArray(guidOptions.version)) {
                guidOptions.version = [guidOptions.version];
            }

            Hoek.assert(guidOptions.version.length >= 1, 'version must have at least 1 valid version specified');
            var versions = new Set();

            for (var i = 0; i < guidOptions.version.length; ++i) {
                var version = guidOptions.version[i];
                Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
                version = version.toLowerCase();
                var versionNumber = internals.guidVersions[version];
                Hoek.assert(versionNumber, 'version at position ' + i + ' must be one of ' + Object.keys(internals.guidVersions).join(', '));
                Hoek.assert(!versions.has(versionNumber), 'version at position ' + i + ' must not be a duplicate.');

                versionNumbers += versionNumber;
                versions.add(versionNumber);
            }
        }

        var guidRegex = new RegExp('^([\\[{\\(]?)[0-9A-F]{8}([:-]?)[0-9A-F]{4}\\2?[' + (versionNumbers || '0-9A-F') + '][0-9A-F]{3}\\2?[' + (versionNumbers ? '89AB' : '0-9A-F') + '][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$', 'i');

        return this._test('guid', guidOptions, function (value, state, options) {

            var results = guidRegex.exec(value);

            if (!results) {
                return this.createError('string.guid', { value: value }, state, options);
            }

            // Matching braces
            if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {
                return this.createError('string.guid', { value: value }, state, options);
            }

            return value;
        });
    };

    _class.prototype.hex = function hex() {
        var hexOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


        Hoek.assert((typeof hexOptions === 'undefined' ? 'undefined' : _typeof(hexOptions)) === 'object', 'hex options must be an object');
        Hoek.assert(typeof hexOptions.byteAligned === 'undefined' || typeof hexOptions.byteAligned === 'boolean', 'byteAligned must be boolean');

        var byteAligned = hexOptions.byteAligned === true;
        var regex = /^[a-f0-9]+$/i;

        var obj = this._test('hex', regex, function (value, state, options) {

            if (regex.test(value)) {
                if (byteAligned && value.length % 2 !== 0) {
                    return this.createError('string.hexAlign', { value: value }, state, options);
                }
                return value;
            }

            return this.createError('string.hex', { value: value }, state, options);
        });

        if (byteAligned) {
            obj._flags.byteAligned = true;
        }

        return obj;
    };

    _class.prototype.base64 = function base64() {
        var base64Options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


        // Validation.
        Hoek.assert((typeof base64Options === 'undefined' ? 'undefined' : _typeof(base64Options)) === 'object', 'base64 options must be an object');
        Hoek.assert(typeof base64Options.paddingRequired === 'undefined' || typeof base64Options.paddingRequired === 'boolean', 'paddingRequired must be boolean');

        // Determine if padding is required.
        var paddingRequired = base64Options.paddingRequired === false ? base64Options.paddingRequired : base64Options.paddingRequired || true;

        // Set validation based on preference.
        var regex = paddingRequired ?
        // Padding is required.
        /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/
        // Padding is optional.
        : /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/;

        return this._test('base64', regex, function (value, state, options) {

            if (regex.test(value)) {
                return value;
            }

            return this.createError('string.base64', { value: value }, state, options);
        });
    };

    _class.prototype.hostname = function hostname() {

        var regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;

        return this._test('hostname', undefined, function (value, state, options) {

            if (value.length <= 255 && regex.test(value) || Net.isIPv6(value)) {

                return value;
            }

            return this.createError('string.hostname', { value: value }, state, options);
        });
    };

    _class.prototype.normalize = function normalize() {
        var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'NFC';


        Hoek.assert(Hoek.contain(internals.normalizationForms, form), 'normalization form must be one of ' + internals.normalizationForms.join(', '));

        var obj = this._test('normalize', form, function (value, state, options) {

            if (options.convert || value === value.normalize(form)) {

                return value;
            }

            return this.createError('string.normalize', { value: value, form: form }, state, options);
        });

        obj._flags.normalize = form;
        return obj;
    };

    _class.prototype.lowercase = function lowercase() {

        var obj = this._test('lowercase', undefined, function (value, state, options) {

            if (options.convert || value === value.toLocaleLowerCase()) {

                return value;
            }

            return this.createError('string.lowercase', { value: value }, state, options);
        });

        obj._flags.case = 'lower';
        return obj;
    };

    _class.prototype.uppercase = function uppercase() {

        var obj = this._test('uppercase', undefined, function (value, state, options) {

            if (options.convert || value === value.toLocaleUpperCase()) {

                return value;
            }

            return this.createError('string.uppercase', { value: value }, state, options);
        });

        obj._flags.case = 'upper';
        return obj;
    };

    _class.prototype.trim = function trim() {

        var obj = this._test('trim', undefined, function (value, state, options) {

            if (options.convert || value === value.trim()) {

                return value;
            }

            return this.createError('string.trim', { value: value }, state, options);
        });

        obj._flags.trim = true;
        return obj;
    };

    _class.prototype.replace = function replace(pattern, replacement) {

        if (typeof pattern === 'string') {
            pattern = new RegExp(Hoek.escapeRegex(pattern), 'g');
        }

        Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');
        Hoek.assert(typeof replacement === 'string', 'replacement must be a String');

        // This can not be considere a test like trim, we can't "reject"
        // anything from this rule, so just clone the current object
        var obj = this.clone();

        if (!obj._inner.replacements) {
            obj._inner.replacements = [];
        }

        obj._inner.replacements.push({
            pattern: pattern,
            replacement: replacement
        });

        return obj;
    };

    _class.prototype.truncate = function truncate(enabled) {

        var value = enabled === undefined ? true : !!enabled;

        if (this._flags.truncate === value) {
            return this;
        }

        var obj = this.clone();
        obj._flags.truncate = value;
        return obj;
    };

    return _class;
}(Any);

internals.compare = function (type, compare) {

    return function (limit, encoding) {

        var isRef = Ref.isRef(limit);

        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
        Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

        return this._test(type, limit, function (value, state, options) {

            var compareTo = void 0;
            if (isRef) {
                compareTo = limit(state.reference || state.parent, options);

                if (!Number.isSafeInteger(compareTo)) {
                    return this.createError('string.ref', { ref: limit.key }, state, options);
                }
            } else {
                compareTo = limit;
            }

            if (compare(value, compareTo, encoding)) {
                return value;
            }

            return this.createError('string.' + type, { limit: compareTo, value: value, encoding: encoding }, state, options);
        });
    };
};

internals.String.prototype.min = internals.compare('min', function (value, limit, encoding) {

    var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
    return length >= limit;
});

internals.String.prototype.max = internals.compare('max', function (value, limit, encoding) {

    var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
    return length <= limit;
});

internals.String.prototype.length = internals.compare('length', function (value, limit, encoding) {

    var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
    return length === limit;
});

// Aliases

internals.String.prototype.uuid = internals.String.prototype.guid;

module.exports = new internals.String();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer));

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var RFC3986 = __webpack_require__(14);

// Declare internals

var internals = {
    Ip: {
        cidrs: {
            ipv4: {
                required: '\\/(?:' + RFC3986.ipv4Cidr + ')',
                optional: '(?:\\/(?:' + RFC3986.ipv4Cidr + '))?',
                forbidden: ''
            },
            ipv6: {
                required: '\\/' + RFC3986.ipv6Cidr,
                optional: '(?:\\/' + RFC3986.ipv6Cidr + ')?',
                forbidden: ''
            },
            ipvfuture: {
                required: '\\/' + RFC3986.ipv6Cidr,
                optional: '(?:\\/' + RFC3986.ipv6Cidr + ')?',
                forbidden: ''
            }
        },
        versions: {
            ipv4: RFC3986.IPv4address,
            ipv6: RFC3986.IPv6address,
            ipvfuture: RFC3986.IPvFuture
        }
    }
};

internals.Ip.createIpRegex = function (versions, cidr) {

    var regex = void 0;
    for (var i = 0; i < versions.length; ++i) {
        var version = versions[i];
        if (!regex) {
            regex = '^(?:' + internals.Ip.versions[version] + internals.Ip.cidrs[version][cidr];
        } else {
            regex += '|' + internals.Ip.versions[version] + internals.Ip.cidrs[version][cidr];
        }
    }

    return new RegExp(regex + ')$');
};

module.exports = internals.Ip;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {


// Load Modules

var RFC3986 = __webpack_require__(14);

// Declare internals

var internals = {
    Uri: {
        createUriRegex: function createUriRegex(optionalScheme, allowRelative, relativeOnly) {

            var scheme = RFC3986.scheme;
            var prefix = void 0;

            if (relativeOnly) {
                prefix = '(?:' + RFC3986.relativeRef + ')';
            } else {
                // If we were passed a scheme, use it instead of the generic one
                if (optionalScheme) {

                    // Have to put this in a non-capturing group to handle the OR statements
                    scheme = '(?:' + optionalScheme + ')';
                }

                var withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';

                prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;
            }

            /**
             * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
             *
             * OR
             *
             * relative-ref = relative-part [ "?" query ] [ "#" fragment ]
             */
            return new RegExp('^' + prefix + '(?:\\?' + RFC3986.query + ')?' + '(?:#' + RFC3986.fragment + ')?$');
        }
    }
};

module.exports = internals.Uri;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {


// Load modules

var Hoek = __webpack_require__(0);

// Declare internals

var internals = {};

exports = module.exports = internals.Topo = function () {

    this._items = [];
    this.nodes = [];
};

internals.Topo.prototype.add = function (nodes, options) {
    var _this = this;

    options = options || {};

    // Validate rules

    var before = [].concat(options.before || []);
    var after = [].concat(options.after || []);
    var group = options.group || '?';
    var sort = options.sort || 0; // Used for merging only

    Hoek.assert(before.indexOf(group) === -1, 'Item cannot come before itself:', group);
    Hoek.assert(before.indexOf('?') === -1, 'Item cannot come before unassociated items');
    Hoek.assert(after.indexOf(group) === -1, 'Item cannot come after itself:', group);
    Hoek.assert(after.indexOf('?') === -1, 'Item cannot come after unassociated items');

    [].concat(nodes).forEach(function (node, i) {

        var item = {
            seq: _this._items.length,
            sort: sort,
            before: before,
            after: after,
            group: group,
            node: node
        };

        _this._items.push(item);
    });

    // Insert event

    var error = this._sort();
    Hoek.assert(!error, 'item', group !== '?' ? 'added into group ' + group : '', 'created a dependencies error');

    return this.nodes;
};

internals.Topo.prototype.merge = function (others) {

    others = [].concat(others);
    for (var i = 0; i < others.length; ++i) {
        var other = others[i];
        if (other) {
            for (var j = 0; j < other._items.length; ++j) {
                var item = Hoek.shallow(other._items[j]);
                this._items.push(item);
            }
        }
    }

    // Sort items

    this._items.sort(internals.mergeSort);
    for (var _i = 0; _i < this._items.length; ++_i) {
        this._items[_i].seq = _i;
    }

    var error = this._sort();
    Hoek.assert(!error, 'merge created a dependencies error');

    return this.nodes;
};

internals.mergeSort = function (a, b) {

    return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;
};

internals.Topo.prototype._sort = function () {

    // Construct graph

    var graph = {};
    var graphAfters = Object.create(null); // A prototype can bungle lookups w/ false positives
    var groups = Object.create(null);

    for (var i = 0; i < this._items.length; ++i) {
        var item = this._items[i];
        var seq = item.seq; // Unique across all items
        var group = item.group;

        // Determine Groups

        groups[group] = groups[group] || [];
        groups[group].push(seq);

        // Build intermediary graph using 'before'

        graph[seq] = item.before;

        // Build second intermediary graph with 'after'

        var after = item.after;
        for (var j = 0; j < after.length; ++j) {
            graphAfters[after[j]] = (graphAfters[after[j]] || []).concat(seq);
        }
    }

    // Expand intermediary graph

    var graphNodes = Object.keys(graph);
    for (var _i2 = 0; _i2 < graphNodes.length; ++_i2) {
        var node = graphNodes[_i2];
        var expandedGroups = [];

        var graphNodeItems = Object.keys(graph[node]);
        for (var _j = 0; _j < graphNodeItems.length; ++_j) {
            var _group = graph[node][graphNodeItems[_j]];
            groups[_group] = groups[_group] || [];

            for (var k = 0; k < groups[_group].length; ++k) {
                expandedGroups.push(groups[_group][k]);
            }
        }
        graph[node] = expandedGroups;
    }

    // Merge intermediary graph using graphAfters into final graph

    var afterNodes = Object.keys(graphAfters);
    for (var _i3 = 0; _i3 < afterNodes.length; ++_i3) {
        var _group2 = afterNodes[_i3];

        if (groups[_group2]) {
            for (var _j2 = 0; _j2 < groups[_group2].length; ++_j2) {
                var _node = groups[_group2][_j2];
                graph[_node] = graph[_node].concat(graphAfters[_group2]);
            }
        }
    }

    // Compile ancestors

    var children = void 0;
    var ancestors = {};
    graphNodes = Object.keys(graph);
    for (var _i4 = 0; _i4 < graphNodes.length; ++_i4) {
        var _node2 = graphNodes[_i4];
        children = graph[_node2];

        for (var _j3 = 0; _j3 < children.length; ++_j3) {
            ancestors[children[_j3]] = (ancestors[children[_j3]] || []).concat(_node2);
        }
    }

    // Topo sort

    var visited = {};
    var sorted = [];

    for (var _i5 = 0; _i5 < this._items.length; ++_i5) {
        // Really looping thru item.seq values out of order
        var next = _i5;

        if (ancestors[_i5]) {
            next = null;
            for (var _j4 = 0; _j4 < this._items.length; ++_j4) {
                // As above, these are item.seq values
                if (visited[_j4] === true) {
                    continue;
                }

                if (!ancestors[_j4]) {
                    ancestors[_j4] = [];
                }

                var shouldSeeCount = ancestors[_j4].length;
                var seenCount = 0;
                for (var _k = 0; _k < shouldSeeCount; ++_k) {
                    if (visited[ancestors[_j4][_k]]) {
                        ++seenCount;
                    }
                }

                if (seenCount === shouldSeeCount) {
                    next = _j4;
                    break;
                }
            }
        }

        if (next !== null) {
            visited[next] = true;
            sorted.push(next);
        }
    }

    if (sorted.length !== this._items.length) {
        return new Error('Invalid dependencies');
    }

    var seqIndex = {};
    for (var _i6 = 0; _i6 < this._items.length; ++_i6) {
        var _item = this._items[_i6];
        seqIndex[_item.seq] = _item;
    }

    var sortedNodes = [];
    this._items = sorted.map(function (value) {

        var sortedItem = seqIndex[value];
        sortedNodes.push(sortedItem.node);
        return sortedItem;
    });

    this.nodes = sortedNodes;
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {


var Joi = __webpack_require__(8);

module.exports = Joi;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount (b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr((len * 3 / 4) - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = (tmp >> 16) & 0xFF;
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[(tmp << 4) & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
    output += lookup[tmp >> 10];
    output += lookup[(tmp >> 4) & 0x3F];
    output += lookup[(tmp << 2) & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('')
}


/***/ }),
/* 34 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = {"_args":[["joi@13.4.0","/Users/jeff/projects/joi-browser"]],"_development":true,"_from":"joi@13.4.0","_id":"joi@13.4.0","_inBundle":false,"_integrity":"sha512-JuK4GjEu6j7zr9FuVe2MAseZ6si/8/HaY0qMAejfDFHp7jcH4OKE937mIHM5VT4xDS0q7lpQbszbxKV9rm0yUg==","_location":"/joi","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"joi@13.4.0","name":"joi","escapedName":"joi","rawSpec":"13.4.0","saveSpec":null,"fetchSpec":"13.4.0"},"_requiredBy":["#DEV:/"],"_resolved":"https://registry.npmjs.org/joi/-/joi-13.4.0.tgz","_spec":"13.4.0","_where":"/Users/jeff/projects/joi-browser","bugs":{"url":"https://github.com/hapijs/joi/issues"},"dependencies":{"hoek":"5.x.x","isemail":"3.x.x","topo":"3.x.x"},"description":"Object schema validation","devDependencies":{"code":"5.x.x","hapitoc":"1.x.x","lab":"15.x.x"},"engines":{"node":">=8.9.0"},"homepage":"https://github.com/hapijs/joi","keywords":["hapi","schema","validation"],"license":"BSD-3-Clause","main":"lib/index.js","name":"joi","repository":{"type":"git","url":"git://github.com/hapijs/joi.git"},"scripts":{"test":"lab -t 100 -a code -L","test-cov-html":"lab -r html -o coverage.html -a code","test-debug":"lab -a code","toc":"hapitoc","version":"npm run toc && git add API.md README.md"},"version":"13.4.0"};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)));

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) ;

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	{
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

}());

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module), __webpack_require__(5)));

/***/ }),
/* 39 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}


/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
};

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ })
/******/ ]);
});
});

var joi = unwrapExports(joiBrowser);

var moment = createCommonjsModule(function (module, exports) {
(function (global, factory) {
     module.exports = factory() ;
}(commonjsGlobal, (function () {
    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && ('object' !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = commonjsRequire;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));
});

var codes$1 = {"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","306":"(Unused)","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I'm a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"};

var codes$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': codes$1
});

var codes$3 = getCjsExportFromNamespace(codes$2);

/**
 * Module dependencies.
 * @private
 */



/**
 * Module exports.
 * @public
 */

var statuses = status;

// status code to message map
status.STATUS_CODES = codes$3;

// array of status codes
status.codes = populateStatusesMap(status, codes$3);

// status codes for redirects
status.redirect = {
  300: true,
  301: true,
  302: true,
  303: true,
  305: true,
  307: true,
  308: true
};

// status codes for empty bodies
status.empty = {
  204: true,
  205: true,
  304: true
};

// status codes for when you should retry the request
status.retry = {
  502: true,
  503: true,
  504: true
};

/**
 * Populate the statuses map for given codes.
 * @private
 */

function populateStatusesMap (statuses, codes) {
  var arr = [];

  Object.keys(codes).forEach(function forEachCode (code) {
    var message = codes[code];
    var status = Number(code);

    // Populate properties
    statuses[status] = message;
    statuses[message] = status;
    statuses[message.toLowerCase()] = status;

    // Add to array
    arr.push(status);
  });

  return arr
}

/**
 * Get the status code.
 *
 * Given a number, this will throw if it is not a known status
 * code, otherwise the code will be returned. Given a string,
 * the string will be parsed for a number and return the code
 * if valid, otherwise will lookup the code assuming this is
 * the status message.
 *
 * @param {string|number} code
 * @returns {number}
 * @public
 */

function status (code) {
  if (typeof code === 'number') {
    if (!status[code]) throw new Error('invalid status code: ' + code)
    return code
  }

  if (typeof code !== 'string') {
    throw new TypeError('code must be a number or string')
  }

  // '403'
  var n = parseInt(code, 10);
  if (!isNaN(n)) {
    if (!status[n]) throw new Error('invalid status code: ' + n)
    return n
  }

  n = status[code.toLowerCase()];
  if (!n) throw new Error('invalid status message: "' + code + '"')
  return n
}

var cpoMetaObject$j = Symbol["for"]('~metaObject');
function action(target, key, descriptor) {
  var isClass = target[cpoMetaObject$j] != null;
  assert_1(!isClass, 'Decorator `action` may be used with instance methods only');
  var vmFunctor = descriptor.value || descriptor.initializer && descriptor.initializer();
  var vcClass = target.constructor;
  assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Method '").concat(key, "' can not be declared")); // const wrapper = function (...args) {
  //   return vmFunctor.apply(this, args);
  // };
  // Reflect.defineProperty(wrapper, 'class', {
  //   value: vcClass,
  //   enumerable: true
  // });
  // Reflect.defineProperty(vmFunctor, 'class', {
  //   value: vcClass,
  //   enumerable: true
  // });
  // Reflect.defineProperty(wrapper, 'name', {
  //   value: key,
  //   configurable: true
  // });

  Reflect.defineProperty(vmFunctor, 'name', {
    value: key,
    configurable: true
  }); // Reflect.defineProperty(vmFunctor, 'wrapper', {
  //   value: wrapper,
  //   enumerable: true
  // });
  // Reflect.defineProperty(wrapper, 'body', {
  //   value: vmFunctor,
  //   enumerable: true
  // });

  vcClass.metaObject.addMetaData('instanceMethods', key, vmFunctor);
  vcClass.metaObject.addMetaData('actions', key, vmFunctor);
  return {
    configurable: descriptor.configurable,
    enumerable: descriptor.enumerable,
    writable: false,
    value: vmFunctor
  };
}

var JoiT = flowRuntime_umd.type("JoiT", flowRuntime_umd.object(flowRuntime_umd.property("isJoi", flowRuntime_umd["boolean"](true)), flowRuntime_umd.property("_type", flowRuntime_umd.any())));

var JoiT$1 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var TransformStaticInterface = flowRuntime_umd.type("TransformStaticInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd["return"](flowRuntime_umd.ref("object")))), flowRuntime_umd.property("schema", flowRuntime_umd.ref(JoiT$1)), flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("objectize", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))))));

var TransformStaticInterface$1 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var JoiT$2 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var AttributeOptionsT = flowRuntime_umd.type("AttributeOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(TransformStaticInterface$1))), true), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$2))), true)));

var TransformStaticInterface$2 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var JoiT$3 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var AttributeConfigT = flowRuntime_umd.type("AttributeConfigT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(TransformStaticInterface$2)))), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$3))))));

var AttributeConfigT$1 = flowRuntime_umd.tdz(function () {
  return AttributeConfigT;
});
var AttributeOptionsT$1 = flowRuntime_umd.tdz(function () {
  return AttributeOptionsT;
});
var cpoMetaObject$k = Symbol["for"]('~metaObject');
function attribute(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$k] != null;
    assert_1(!isClass, 'Decorator `attribute` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    assert_1(opts.type != null, 'option `type` is required');
    assert_1(vcClass.attributes[key] == null, "attribute `".concat(key, "` has been defined previously"));

    opts.transform = opts.transform || function () {
      switch (opts.type) {
        case 'primary_key':
          return function () {
            return vcClass.Module.NS.PrimaryKeyTransform;
          };

        case 'string':
        case 'text':
          return function () {
            return vcClass.Module.NS.StringTransform;
          };

        case 'date':
          return function () {
            return vcClass.Module.NS.DateTransform;
          };

        case 'number':
        case 'decimal':
        case 'float':
        case 'integer':
          return function () {
            return vcClass.Module.NS.NumberTransform;
          };

        case 'boolean':
          return function () {
            return vcClass.Module.NS.BooleanTransform;
          };

        case 'array':
          return function () {
            return vcClass.Module.NS.ArrayTransform;
          };

        case 'hash':
        case 'json':
          return function () {
            return vcClass.Module.NS.ObjectTransform;
          };

        default:
          return function () {
            return vcClass.Module.NS.Transform;
          };
      }
    }();

    opts.validate = opts.validate || function () {
      return opts.transform.call(this).schema;
    };

    var newDescriptor = function () {
      if (descriptor.get == null && descriptor.set == null) {
        var initialValue = descriptor.value || descriptor.initializer && descriptor.initializer();
        var pointer = Symbol("_".concat(key));
        Reflect.defineProperty(target, pointer, {
          writable: true,
          enumerable: false,
          value: initialValue
        });
        return {
          configurable: true,
          enumerable: true,
          get: function get() {
            return this[pointer];
          },
          set: function set(aoData) {
            var _opts$validate$call$v = opts.validate.call(this).validate(aoData),
                voData = _opts$validate$call$v.value;

            this[pointer] = voData;
            return voData;
          }
        };
      } else {
        return {
          configurable: true,
          enumerable: true,
          get: function get() {
            var externalGet = descriptor.get;

            if (lodash.isFunction(externalGet)) {
              return externalGet.call(this);
            }
          },
          set: function set(aoData) {
            var _opts$validate$call$v2 = opts.validate.call(this).validate(aoData),
                voData = _opts$validate$call$v2.value;

            var externalSet = descriptor.set;

            if (lodash.isFunction(externalSet)) {
              return externalSet.call(this, voData);
            }
          }
        };
      }
    }();

    var _optsType = flowRuntime_umd.ref(AttributeConfigT$1);
    vcClass.metaObject.addMetaData('attributes', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(attribute, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(AttributeOptionsT$1))));

// import type { CollectionInterface } from './CollectionInterface';
var CursorInterface = flowRuntime_umd.type("CursorInterface", function (CursorInterface) {
  var Collection = CursorInterface.typeParameter("Collection"),
      Delegate = CursorInterface.typeParameter("Delegate"),
      Iterable = CursorInterface.typeParameter("Iterable", undefined, flowRuntime_umd.array(Delegate));
  return flowRuntime_umd.object(flowRuntime_umd.property("isClosed", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("setCollection", flowRuntime_umd["function"](flowRuntime_umd.param("aoCollection", Collection), flowRuntime_umd["return"](CursorInterface))), flowRuntime_umd.property("setIterable", flowRuntime_umd["function"](flowRuntime_umd.param("alArray", Iterable), flowRuntime_umd["return"](CursorInterface))), flowRuntime_umd.property("toArray", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(Delegate))))), flowRuntime_umd.property("next", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(Delegate))))), flowRuntime_umd.property("hasNext", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("close", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("count", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number())))), flowRuntime_umd.property("forEach", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("map", flowRuntime_umd["function"](function (_fn) {
    var R = _fn.typeParameter("R");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(R, flowRuntime_umd.ref("Promise", R))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R)))];
  })), flowRuntime_umd.property("filter", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(Delegate))))), flowRuntime_umd.property("find", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(Delegate))))), flowRuntime_umd.property("compact", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(Delegate))))), flowRuntime_umd.property("reduce", flowRuntime_umd["function"](function (_fn2) {
    var I = _fn2.typeParameter("I");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", I), flowRuntime_umd.param("_arg1", Delegate), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(I, flowRuntime_umd.ref("Promise", I))))), flowRuntime_umd.param("initialValue", I), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
  })), flowRuntime_umd.property("first", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(Delegate))))));
});

// import type { RecordInterface } from './RecordInterface';
var CursorInterface$1 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var CollectionInterface = flowRuntime_umd.type("CollectionInterface", function (CollectionInterface) {
  var T = CollectionInterface.typeParameter("T");
  return flowRuntime_umd.object(flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("collectionPrefix", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("collectionFullName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("recordHasBeenChanged", flowRuntime_umd["function"](flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("generateId", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))))), flowRuntime_umd.property("build", flowRuntime_umd["function"](flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("push", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("delete", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("destroy", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("find", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(T))))), flowRuntime_umd.property("findMany", flowRuntime_umd["function"](flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$1, flowRuntime_umd.ref(CollectionInterface, T), T))))), flowRuntime_umd.property("take", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(T))))), flowRuntime_umd.property("takeMany", flowRuntime_umd["function"](flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$1, flowRuntime_umd.ref(CollectionInterface, T), T))))), flowRuntime_umd.property("takeAll", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$1, flowRuntime_umd.ref(CollectionInterface, T), T))))), flowRuntime_umd.property("update", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("override", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("clone", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("copy", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("includes", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("length", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number())))));
});

var CollectionInterface$1 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var RecordInterface = flowRuntime_umd.type("RecordInterface", function (RecordInterface) {
  var C = RecordInterface.typeParameter("C", undefined, flowRuntime_umd.ref(CollectionInterface$1));
  return flowRuntime_umd.object(flowRuntime_umd.property("collection", C), flowRuntime_umd.property("parseRecordName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.property("findRecordByName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential())))), flowRuntime_umd.property("save", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("update", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("delete", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("destroy", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("attributes", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("object")))), flowRuntime_umd.property("clone", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("copy", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("decrement", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("increment", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("toggle", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("touch", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("updateAttribute", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("value", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("updateAttributes", flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("isNew", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("reload", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("changedAttributes", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.nullable(flowRuntime_umd.any())))))))), flowRuntime_umd.property("resetAttribute", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("rollbackAttributes", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))));
});

var RelationOptionsT = flowRuntime_umd.type("RelationOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("refKey", flowRuntime_umd.string(), true), flowRuntime_umd.property("attr", flowRuntime_umd.string(), true), flowRuntime_umd.property("inverse", flowRuntime_umd.string(), true), flowRuntime_umd.property("inverseType", flowRuntime_umd.string(), true), flowRuntime_umd.property("recordName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("through", flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.exactObject(flowRuntime_umd.property("by", flowRuntime_umd.string()))), true)));

var RelationConfigT = flowRuntime_umd.type("RelationConfigT", flowRuntime_umd.exactObject(flowRuntime_umd.property("refKey", flowRuntime_umd.string()), flowRuntime_umd.property("attr", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("inverse", flowRuntime_umd.string()), flowRuntime_umd.property("inverseType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("relation", flowRuntime_umd.union(flowRuntime_umd.string("relatedTo"), flowRuntime_umd.string("belongsTo"), flowRuntime_umd.string("hasMany"), flowRuntime_umd.string("hasOne"))), flowRuntime_umd.property("recordName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("through", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.exactObject(flowRuntime_umd.property("by", flowRuntime_umd.string())))))));

var RelationConfigT$1 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$1 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var RecordInterface$1 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$l = Symbol["for"]('~metaObject'); // NOTE: отличается от relatedTo тем, что сама связь является обязательной (образуется между объектами "в иерархии"), а в @[opts.attr] обязательно должно храниться значение айдишника родительского объекта, которому "belongs to" - "принадлежит" этот объект
// NOTE: если указана опция through, то получение данных о связи будет происходить не из @[opts.attr], а из промежуточной коллекции, где помимо айдишника объекта могут храниться дополнительные атрибуты с данными о связи

function belongsTo(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$l] != null;
    assert_1(!isClass, 'Decorator `belongsTo` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.attr = opts.attr || "".concat(key, "Id");
    opts.inverse = opts.inverse || "".concat(inflect.pluralize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)));
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'belongsTo';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var recordType, BelongsToCollection, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, belongsId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                recordType = opts.inverseType && this[opts.inverseType] || null;
                BelongsToCollection = this.collection.facade.retrieveProxy(collectionName.call(this, recordType)); // NOTE: может быть ситуация, что belongsTo связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

                if (opts.through) {
                  _context.next = 10;
                  break;
                }

                _context.next = 5;
                return BelongsToCollection.takeBy(_defineProperty({}, "@doc.".concat(opts.refKey), this[opts.attr]), {
                  $limit: 1
                });

              case 5:
                _context.next = 7;
                return _context.sent.first();

              case 7:
                return _context.abrupt("return", _context.sent);

              case 10:
                // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода hasEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || undefined;
                assert_1(throughEmbed != null, "Metadata about ".concat(opts.through[0], " must be defined by `EmbeddableRecordMixin.hasEmbed` method"));
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 18;
                return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[throughEmbed.refKey]), {
                  $limit: 1
                });

              case 18:
                _context.next = 20;
                return _context.sent.first();

              case 20:
                _context.t0 = opts.through[1].by;
                belongsId = _context.sent[_context.t0];
                _context.next = 24;
                return BelongsToCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), belongsId), {
                  $limit: 1
                });

              case 24:
                _context.next = 26;
                return _context.sent.first();

              case 26:
                return _context.abrupt("return", _context.sent);

              case 27:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$1)))))
    };

    var _optsType = flowRuntime_umd.ref(RelationConfigT$1);
    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(belongsTo, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$1))));

var TransformStaticInterface$3 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var JoiT$4 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ComputedOptionsT = flowRuntime_umd.type("ComputedOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(TransformStaticInterface$3))), true), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$4))), true)));

var TransformStaticInterface$4 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var JoiT$5 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ComputedConfigT = flowRuntime_umd.type("ComputedConfigT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(TransformStaticInterface$4)))), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$5))))));

var ComputedConfigT$1 = flowRuntime_umd.tdz(function () {
  return ComputedConfigT;
});
var ComputedOptionsT$1 = flowRuntime_umd.tdz(function () {
  return ComputedOptionsT;
});
var cpoMetaObject$m = Symbol["for"]('~metaObject');
function computed(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$m] != null;
    assert_1(!isClass, 'Decorator `computed` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    assert_1(vcClass.computeds[key] == null, "computed `".concat(key, "` has been defined previously"));
    assert_1(opts.type != null, 'option `type` is required');
    assert_1(descriptor.get != null, 'getter `lambda` in descriptor is required');
    assert_1(descriptor.set == null, 'setter `lambda` in descriptor is forbidden');

    opts.transform = opts.transform || function () {
      switch (opts.type) {
        case 'primary_key':
          return function () {
            return vcClass.Module.NS.PrimaryKeyTransform;
          };

        case 'string':
        case 'text':
          return function () {
            return vcClass.Module.NS.StringTransform;
          };

        case 'date':
          return function () {
            return vcClass.Module.NS.DateTransform;
          };

        case 'number':
        case 'decimal':
        case 'float':
        case 'integer':
          return function () {
            return vcClass.Module.NS.NumberTransform;
          };

        case 'boolean':
          return function () {
            return vcClass.Module.NS.BooleanTransform;
          };

        case 'array':
          return function () {
            return vcClass.Module.NS.ArrayTransform;
          };

        case 'hash':
        case 'json':
          return function () {
            return vcClass.Module.NS.ObjectTransform;
          };

        default:
          return function () {
            return vcClass.Module.NS.Transform;
          };
      }
    }();

    opts.validate = opts.validate || function () {
      return opts.transform.call(this).schema.strip();
    };

    var _optsType = flowRuntime_umd.ref(ComputedConfigT$1);
    vcClass.metaObject.addMetaData('computeds', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, descriptor);
    return descriptor;
  };
}
flowRuntime_umd.annotate(computed, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(ComputedOptionsT$1))));

var EmbedOptionsT = flowRuntime_umd.type("EmbedOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("refKey", flowRuntime_umd.string(), true), flowRuntime_umd.property("attr", flowRuntime_umd.string(), true), flowRuntime_umd.property("inverse", flowRuntime_umd.string(), true), flowRuntime_umd.property("inverseType", flowRuntime_umd.string(), true), flowRuntime_umd.property("through", flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.exactObject(flowRuntime_umd.property("by", flowRuntime_umd.string()))), true), flowRuntime_umd.property("putOnly", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("loadOnly", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("recordName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), true)));

var JoiT$6 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var EmbedConfigT = flowRuntime_umd.type("EmbedConfigT", flowRuntime_umd.exactObject(flowRuntime_umd.property("refKey", flowRuntime_umd.string()), flowRuntime_umd.property("attr", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("inverse", flowRuntime_umd.string()), flowRuntime_umd.property("inverseType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("embedding", flowRuntime_umd.union(flowRuntime_umd.string("relatedEmbed"), flowRuntime_umd.string("relatedEmbeds"), flowRuntime_umd.string("hasEmbed"), flowRuntime_umd.string("hasEmbeds"))), flowRuntime_umd.property("through", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.exactObject(flowRuntime_umd.property("by", flowRuntime_umd.string()))))), flowRuntime_umd.property("putOnly", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("loadOnly", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("recordName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$6)))), flowRuntime_umd.property("load", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("put", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("restore", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("replicate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.array(flowRuntime_umd.ref("object"))))))));

var EmbedConfigT$1 = flowRuntime_umd.tdz(function () {
  return EmbedConfigT;
});
var EmbedOptionsT$1 = flowRuntime_umd.tdz(function () {
  return EmbedOptionsT;
});
var RecordInterface$2 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$n = Symbol["for"]('~metaObject'); // NOTE: отличается от belongsTo тем, что сама связь не является обязательной (образуется между объектами "в одной плоскости"), а в @[opts.attr] может содержаться null значение

function hasEmbed(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$n] != null;
    assert_1(!isClass, 'Decorator `hasEmbed` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS = vcClass.Module.NS,
        Pipes = _vcClass$Module$NS.Pipes,
        Record = _vcClass$Module$NS.Record,
        _vcClass$Module$NS$Ut = _vcClass$Module$NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    var _Pipes$NS$LogMessage = Pipes.NS.LogMessage,
        SEND_TO_LOG = _Pipes$NS$LogMessage.SEND_TO_LOG,
        LEVELS = _Pipes$NS$LogMessage.LEVELS,
        DEBUG = _Pipes$NS$LogMessage.DEBUG;
    opts.refKey = opts.refKey || 'id';
    opts.attr = null;
    opts.inverse = opts.inverse || "".concat(inflect.singularize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)), "Id");
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));

    opts.validate = function () {
      if (opts.inverseType != null) {
        return Record.schema.unknown(true).allow(null).optional();
      } else {
        var EmbedRecord = this.findRecordByName(opts.recordName.call(this));
        return EmbedRecord.schema.allow(null).optional();
      }
    };

    opts.embedding = 'hasEmbed';
    opts.through = opts.through || null;
    opts.putOnly = opts.putOnly || false;
    opts.loadOnly = opts.loadOnly || false;
    opts.load = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      var EmbedsCollection, res;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!opts.putOnly) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", null);

            case 2:
              EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this)); // NOTE: может быть ситуация, что hasOne связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

              _context2.next = 5;
              return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var through, ThroughCollection, ThroughRecord, inverse, embedId;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (opts.through) {
                          _context.next = 10;
                          break;
                        }

                        query = _defineProperty({}, "@doc.".concat(opts.inverse), _this[opts.refKey]);

                        if (inverseType != null) {
                          query["@doc.".concat(opts.inverseType)] = _this.type;
                        }

                        _context.next = 5;
                        return EmbedsCollection.takeBy(query, {
                          $limit: 1
                        });

                      case 5:
                        _context.next = 7;
                        return _context.sent.first();

                      case 7:
                        return _context.abrupt("return", _context.sent);

                      case 10:
                        // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода hasEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
                        through = _this.constructor.embeddings[opts.through[0]];
                        assert_1(through != null, "Metadata about ".concat(opts.through[0], " must be defined by `hasEmbed` method"));
                        ThroughCollection = _this.collection.facade.retrieveProxy(through.collectionName.call(_this));
                        ThroughRecord = _this.findRecordByName(through.recordName.call(_this));
                        inverse = ThroughRecord.relations[opts.through[1].by];
                        _context.next = 17;
                        return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(through.inverse), _this[opts.refKey]), {
                          $limit: 1
                        });

                      case 17:
                        _context.next = 19;
                        return _context.sent.first();

                      case 19:
                        _context.t0 = opts.through[1].by;
                        embedId = _context.sent[_context.t0];
                        _context.next = 23;
                        return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), embedId), {
                          $limit: 1
                        });

                      case 23:
                        _context.next = 25;
                        return _context.sent.first();

                      case 25:
                        return _context.abrupt("return", _context.sent);

                      case 26:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }))();

            case 5:
              res = _context2.sent;
              this.collection.sendNotification(SEND_TO_LOG, "hasEmbed.load ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
              return _context2.abrupt("return", res);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$2))))));
    opts.put = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      var _this2 = this;

      var EmbedsCollection, EmbedRecord, aoRecord, _query3, savedRecord, _query2, _ThroughCollection$ta2, through, ThroughCollection, ThroughRecord, inverse, savedThroughRecord, embedIds, voRecord, _through, _ThroughCollection, _ThroughRecord, _inverse, _embedIds;

      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (!opts.loadOnly) {
                _context9.next = 2;
                break;
              }

              return _context9.abrupt("return");

            case 2:
              EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));
              EmbedRecord = this.findRecordByName(opts.recordName.call(this));
              aoRecord = this[key];
              this.collection.sendNotification(SEND_TO_LOG, "hasEmbed.put ".concat(key, " embed ").concat(JSON.stringify(aoRecord)), LEVELS[DEBUG]);

              if (!(aoRecord != null)) {
                _context9.next = 93;
                break;
              }

              if (!(aoRecord.constructor === Object)) {
                _context9.next = 12;
                break;
              }

              if (aoRecord.type == null) {
                aoRecord.type = "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
              }

              _context9.next = 11;
              return EmbedsCollection.build(aoRecord);

            case 11:
              aoRecord = _context9.sent;

            case 12:
              if (opts.through) {
                _context9.next = 46;
                break;
              }

              aoRecord[opts.inverse] = this[opts.refKey];

              if (opts.inverseType != null) {
                aoRecord[opts.inverseType] = this.type;
              }

              if (this.spaceId != null) {
                aoRecord.spaceId = this.spaceId;
              }

              if (this.teamId != null) {
                aoRecord.teamId = this.teamId;
              }

              aoRecord.spaces = this.spaces;
              aoRecord.creatorId = this.creatorId;
              aoRecord.editorId = this.editorId;
              aoRecord.ownerId = this.ownerId;
              _context9.next = 23;
              return aoRecord.isNew();

            case 23:
              _context9.t0 = _context9.sent;

              if (_context9.t0) {
                _context9.next = 30;
                break;
              }

              _context9.t1 = Object;
              _context9.next = 28;
              return aoRecord.changedAttributes();

            case 28:
              _context9.t2 = _context9.sent;
              _context9.t0 = _context9.t1.keys.call(_context9.t1, _context9.t2).length;

            case 30:
              if (!_context9.t0) {
                _context9.next = 36;
                break;
              }

              _context9.next = 33;
              return aoRecord.save();

            case 33:
              _context9.t3 = _context9.sent;
              _context9.next = 37;
              break;

            case 36:
              _context9.t3 = aoRecord;

            case 37:
              savedRecord = _context9.t3;
              _query2 = (_query3 = {}, _defineProperty(_query3, "@doc.".concat(opts.inverse), this[opts.refKey]), _defineProperty(_query3, '@doc.id', {
                $ne: savedRecord.id
              }), _query3);

              if (inverseType != null) {
                _query2["@doc.".concat(opts.inverseType)] = this.type;
              }

              _context9.next = 42;
              return EmbedsCollection.takeBy(_query2);

            case 42:
              _context9.next = 44;
              return _context9.sent.forEach( /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(voRecord) {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return voRecord.destroy();

                        case 2:
                          return _context3.abrupt("return", _context3.sent);

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));

                return function (_x) {
                  return _ref4.apply(this, arguments);
                };
              }());

            case 44:
              _context9.next = 91;
              break;

            case 46:
              // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода hasEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
              through = this.constructor.embeddings[opts.through[0]];
              assert_1(through != null, "Metadata about ".concat(opts.through[0], " must be defined by `hasEmbed` method"));
              ThroughCollection = this.collection.facade.retrieveProxy(through.collectionName.call(this));
              ThroughRecord = this.findRecordByName(through.recordName.call(this));
              inverse = ThroughRecord.relations[opts.through[1].by];

              if (this.spaceId != null) {
                aoRecord.spaceId = this.spaceId;
              }

              if (this.teamId != null) {
                aoRecord.teamId = this.teamId;
              }

              aoRecord.spaces = this.spaces;
              aoRecord.creatorId = this.creatorId;
              aoRecord.editorId = this.editorId;
              aoRecord.ownerId = this.ownerId;
              _context9.next = 59;
              return aoRecord.isNew();

            case 59:
              if (!_context9.sent) {
                _context9.next = 69;
                break;
              }

              _context9.t5 = function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(sr) {
                  var _ThroughCollection$cr;

                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.next = 2;
                          return ThroughCollection.create((_ThroughCollection$cr = {}, _defineProperty(_ThroughCollection$cr, through.inverse, _this2[opts.refKey]), _defineProperty(_ThroughCollection$cr, opts.through[1].by, sr[inverse.refKey]), _defineProperty(_ThroughCollection$cr, "spaceId", _this2.spaceId || undefined), _defineProperty(_ThroughCollection$cr, "teamId", _this2.teamId || undefined), _defineProperty(_ThroughCollection$cr, "spaces", _this2.spaces), _defineProperty(_ThroughCollection$cr, "creatorId", _this2.creatorId), _defineProperty(_ThroughCollection$cr, "editorId", _this2.editorId), _defineProperty(_ThroughCollection$cr, "ownerId", _this2.ownerId), _ThroughCollection$cr));

                        case 2:
                          return _context4.abrupt("return", sr);

                        case 3:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function (_x2) {
                  return _ref5.apply(this, arguments);
                };
              }();

              _context9.next = 63;
              return aoRecord.save();

            case 63:
              _context9.t6 = _context9.sent;
              _context9.next = 66;
              return (0, _context9.t5)(_context9.t6);

            case 66:
              _context9.t4 = _context9.sent;
              _context9.next = 81;
              break;

            case 69:
              _context9.t7 = Object;
              _context9.next = 72;
              return aoRecord.changedAttributes();

            case 72:
              _context9.t8 = _context9.sent;

              if (!_context9.t7.keys.call(_context9.t7, _context9.t8).length) {
                _context9.next = 79;
                break;
              }

              _context9.next = 76;
              return aoRecord.save();

            case 76:
              _context9.t9 = _context9.sent;
              _context9.next = 80;
              break;

            case 79:
              _context9.t9 = aoRecord;

            case 80:
              _context9.t4 = _context9.t9;

            case 81:
              savedThroughRecord = _context9.t4;
              _context9.next = 84;
              return ThroughCollection.takeBy((_ThroughCollection$ta2 = {}, _defineProperty(_ThroughCollection$ta2, "@doc.".concat(through.inverse), this[opts.refKey]), _defineProperty(_ThroughCollection$ta2, "@doc.".concat(opts.through[1].by), {
                $ne: savedThroughRecord[inverse.refKey]
              }), _ThroughCollection$ta2));

            case 84:
              _context9.next = 86;
              return _context9.sent.map( /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(voRecord) {
                  var id;
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          id = voRecord[opts.through[1].by];
                          _context5.next = 3;
                          return voRecord.destroy();

                        case 3:
                          return _context5.abrupt("return", id);

                        case 4:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));

                return function (_x3) {
                  return _ref6.apply(this, arguments);
                };
              }());

            case 86:
              embedIds = _context9.sent;
              _context9.next = 89;
              return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), {
                $in: embedIds
              }));

            case 89:
              _context9.next = 91;
              return _context9.sent.forEach( /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(voRecord) {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return voRecord.destroy();

                        case 2:
                          return _context6.abrupt("return", _context6.sent);

                        case 3:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }));

                return function (_x4) {
                  return _ref7.apply(this, arguments);
                };
              }());

            case 91:
              _context9.next = 119;
              break;

            case 93:
              if (opts.putOnly) {
                _context9.next = 119;
                break;
              }

              if (opts.through) {
                _context9.next = 105;
                break;
              }

              _context9.next = 97;
              return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(opts.inverse), this[opts.refKey]), {
                $limit: 1
              });

            case 97:
              _context9.next = 99;
              return _context9.sent.first();

            case 99:
              voRecord = _context9.sent;

              if (!(voRecord != null)) {
                _context9.next = 103;
                break;
              }

              _context9.next = 103;
              return voRecord.destroy();

            case 103:
              _context9.next = 119;
              break;

            case 105:
              // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода hasEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
              _through = this.constructor.embeddings[opts.through[0]];
              assert_1(_through != null, "Metadata about ".concat(opts.through[0], " must be defined by `hasEmbed` method"));
              _ThroughCollection = this.collection.facade.retrieveProxy(_through.collectionName.call(this));
              _ThroughRecord = this.findRecordByName(_through.recordName.call(this));
              _inverse = _ThroughRecord.relations[opts.through[1].by];
              _context9.next = 112;
              return _ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(_through.inverse), this[opts.refKey]), {
                $limit: 1
              });

            case 112:
              _context9.next = 114;
              return _context9.sent.map( /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(voRecord) {
                  var id;
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          id = voRecord[opts.through[1].by];
                          _context7.next = 3;
                          return voRecord.destroy();

                        case 3:
                          return _context7.abrupt("return", id);

                        case 4:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }));

                return function (_x5) {
                  return _ref8.apply(this, arguments);
                };
              }());

            case 114:
              _embedIds = _context9.sent;
              _context9.next = 117;
              return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(_inverse.refKey), {
                $in: _embedIds
              }), {
                $limit: 1
              });

            case 117:
              _context9.next = 119;
              return _context9.sent.forEach( /*#__PURE__*/function () {
                var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(voRecord) {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return voRecord.destroy();

                        case 2:
                          return _context8.abrupt("return", _context8.sent);

                        case 3:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }));

                return function (_x6) {
                  return _ref9.apply(this, arguments);
                };
              }());

            case 119:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))));
    opts.restore = flowRuntime_umd.annotate( /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(replica) {
        var EmbedsCollection, EmbedRecord, res;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));
                EmbedRecord = this.findRecordByName(opts.recordName.call(this));
                this.collection.sendNotification(SEND_TO_LOG, "hasEmbed.restore ".concat(key, " replica ").concat(JSON.stringify(replica)), LEVELS[DEBUG]);
                _context11.next = 5;
                return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          if (!(replica != null)) {
                            _context10.next = 7;
                            break;
                          }

                          if (replica.type == null) {
                            replica.type = "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
                          }

                          _context10.next = 4;
                          return EmbedsCollection.build(replica);

                        case 4:
                          return _context10.abrupt("return", _context10.sent);

                        case 7:
                          return _context10.abrupt("return", null);

                        case 8:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }))();

              case 5:
                res = _context11.sent;
                this.collection.sendNotification(SEND_TO_LOG, "hasEmbed.restore ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
                return _context11.abrupt("return", res);

              case 8:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x7) {
        return _ref10.apply(this, arguments);
      };
    }(), flowRuntime_umd["function"](flowRuntime_umd.param("replica", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$2))))));
    opts.replicate = flowRuntime_umd.annotate(function () {
      var aoRecord = this[key];
      this.collection.sendNotification(SEND_TO_LOG, "hasEmbed.replicate ".concat(key, " embed ").concat(JSON.stringify(aoRecord)), LEVELS[DEBUG]);
      var res = aoRecord.constructor.objectize(aoRecord);
      this.collection.sendNotification(SEND_TO_LOG, "hasEmbed.replicate ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
      return res;
    }, flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("object"))));
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      writable: true,
      value: null
    };

    var _optsType = flowRuntime_umd.ref(EmbedConfigT$1);
    vcClass.metaObject.addMetaData('embeddings', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(hasEmbed, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(EmbedOptionsT$1))));

var EmbedConfigT$2 = flowRuntime_umd.tdz(function () {
  return EmbedConfigT;
});
var EmbedOptionsT$2 = flowRuntime_umd.tdz(function () {
  return EmbedOptionsT;
});
var RecordInterface$3 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$o = Symbol["for"]('~metaObject');
function hasEmbeds(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$o] != null;
    assert_1(!isClass, 'Decorator `hasEmbeds` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS = vcClass.Module.NS,
        Pipes = _vcClass$Module$NS.Pipes,
        Record = _vcClass$Module$NS.Record,
        _vcClass$Module$NS$Ut = _vcClass$Module$NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect,
        map = _vcClass$Module$NS$Ut.map;
    var _Pipes$NS$LogMessage = Pipes.NS.LogMessage,
        SEND_TO_LOG = _Pipes$NS$LogMessage.SEND_TO_LOG,
        LEVELS = _Pipes$NS$LogMessage.LEVELS,
        DEBUG = _Pipes$NS$LogMessage.DEBUG;
    opts.refKey = opts.refKey || 'id';
    opts.attr = null;
    opts.inverse = opts.inverse || "".concat(inflect.singularize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)), "Id");
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));

    opts.validate = function () {
      if (opts.inverseType != null) {
        return joi.array().items([Record.schema.unknown(true), joi.any().strip()]);
      } else {
        var EmbedRecord = this.findRecordByName(opts.recordName.call(this));
        return joi.array().items([EmbedRecord.schema, joi.any().strip()]);
      }
    };

    opts.embedding = 'hasEmbeds';
    opts.through = opts.through || null;
    opts.putOnly = opts.putOnly || false;
    opts.loadOnly = opts.loadOnly || false;
    opts.load = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      var EmbedsCollection, res;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!opts.putOnly) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", []);

            case 2:
              EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));
              _context2.next = 5;
              return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var query, through, ThroughCollection, ThroughRecord, inverse, embedIds;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (opts.through) {
                          _context.next = 10;
                          break;
                        }

                        query = _defineProperty({}, "@doc.".concat(opts.inverse), _this[opts.refKey]);

                        if (inverseType != null) {
                          query["@doc.".concat(opts.inverseType)] = _this.type;
                        }

                        _context.next = 5;
                        return EmbedsCollection.takeBy(query);

                      case 5:
                        _context.next = 7;
                        return _context.sent.toArray();

                      case 7:
                        return _context.abrupt("return", _context.sent);

                      case 10:
                        through = _this.constructor.embeddings[opts.through[0]] || _this.constructor.relations && _this.constructor.relations[opts.through[0]];
                        ThroughCollection = _this.collection.facade.retrieveProxy(through.collectionName.call(_this));
                        ThroughRecord = _this.findRecordByName(through.recordName.call(_this));
                        inverse = ThroughRecord.relations[opts.through[1].by];
                        _context.next = 16;
                        return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(through.inverse), _this[opts.refKey]));

                      case 16:
                        _context.next = 18;
                        return _context.sent.map(function (voRecord) {
                          return voRecord[opts.through[1].by];
                        });

                      case 18:
                        embedIds = _context.sent;
                        _context.next = 21;
                        return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), {
                          $in: embedIds
                        }));

                      case 21:
                        _context.next = 23;
                        return _context.sent.toArray();

                      case 23:
                        return _context.abrupt("return", _context.sent);

                      case 24:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }))();

            case 5:
              res = _context2.sent;
              this.collection.sendNotification(SEND_TO_LOG, "hasEmbeds.load ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
              return _context2.abrupt("return", res);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref(RecordInterface$3))))));
    opts.put = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
      var _this2 = this;

      var EmbedsCollection, EmbedRecord, alRecords, alRecordIds, _iterator, _step, aoRecord, voRecord, savedRecord, _query2, query, through, ThroughCollection, ThroughRecord, inverse, embedIds;

      return regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              if (!opts.loadOnly) {
                _context12.next = 2;
                break;
              }

              return _context12.abrupt("return");

            case 2:
              EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));
              EmbedRecord = this.findRecordByName(opts.recordName.call(this));
              alRecords = this[key];
              this.collection.sendNotification(SEND_TO_LOG, "hasEmbeds.put ".concat(key, " embeds ").concat(JSON.stringify(alRecords)), LEVELS[DEBUG]);

              if (!(alRecords.length > 0)) {
                _context12.next = 71;
                break;
              }

              if (opts.through) {
                _context12.next = 68;
                break;
              }

              alRecordIds = [];
              _iterator = _createForOfIteratorHelper(alRecords);
              _context12.prev = 10;

              _iterator.s();

            case 12:
              if ((_step = _iterator.n()).done) {
                _context12.next = 51;
                break;
              }

              aoRecord = _step.value;
              voRecord = null;

              if (!(aoRecord.constructor === Object)) {
                _context12.next = 22;
                break;
              }

              aoRecord.type = aoRecord.type || "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
              _context12.next = 19;
              return EmbedsCollection.build(aoRecord);

            case 19:
              voRecord = _context12.sent;
              _context12.next = 23;
              break;

            case 22:
              voRecord = aoRecord;

            case 23:
              voRecord[opts.inverse] = this[opts.refKey];

              if (opts.inverseType != null) {
                voRecord[opts.inverseType] = this.type;
              }

              if (this.spaceId != null) {
                voRecord.spaceId = this.spaceId;
              }

              if (this.teamId != null) {
                voRecord.teamId = this.teamId;
              }

              voRecord.spaces = this.spaces;
              voRecord.creatorId = this.creatorId;
              voRecord.editorId = this.editorId;
              voRecord.ownerId = this.ownerId;
              _context12.next = 33;
              return voRecord.isNew();

            case 33:
              _context12.t0 = _context12.sent;

              if (_context12.t0) {
                _context12.next = 40;
                break;
              }

              _context12.t1 = Object;
              _context12.next = 38;
              return voRecord.changedAttributes();

            case 38:
              _context12.t2 = _context12.sent;
              _context12.t0 = _context12.t1.keys.call(_context12.t1, _context12.t2).length;

            case 40:
              if (!_context12.t0) {
                _context12.next = 46;
                break;
              }

              _context12.next = 43;
              return voRecord.save();

            case 43:
              _context12.t3 = _context12.sent;
              _context12.next = 47;
              break;

            case 46:
              _context12.t3 = voRecord;

            case 47:
              savedRecord = _context12.t3;
              alRecordIds.push(savedRecord.id);

            case 49:
              _context12.next = 12;
              break;

            case 51:
              _context12.next = 56;
              break;

            case 53:
              _context12.prev = 53;
              _context12.t4 = _context12["catch"](10);

              _iterator.e(_context12.t4);

            case 56:
              _context12.prev = 56;

              _iterator.f();

              return _context12.finish(56);

            case 59:
              if (opts.putOnly) {
                _context12.next = 66;
                break;
              }

              query = (_query2 = {}, _defineProperty(_query2, "@doc.".concat(opts.inverse), this[opts.refKey]), _defineProperty(_query2, '@doc.id', {
                $nin: alRecordIds
              }), _query2);

              if (inverseType != null) {
                query["@doc.".concat(opts.inverseType)] = this.type;
              }

              _context12.next = 64;
              return EmbedsCollection.takeBy(query);

            case 64:
              _context12.next = 66;
              return _context12.sent.forEach( /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(voRecord) {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return voRecord.destroy();

                        case 2:
                          return _context3.abrupt("return", _context3.sent);

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));

                return function (_x) {
                  return _ref4.apply(this, arguments);
                };
              }());

            case 66:
              _context12.next = 69;
              break;

            case 68:
              return _context12.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                var through, ThroughCollection, ThroughRecord, inverse, alRecordIds, newRecordIds, _iterator2, _step2, _aoRecord, _voRecord, savedThroughRecord, _ThroughCollection$ta2, embedIds, _i, _newRecordIds, _ThroughCollection$cr, newRecordId;

                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        through = _this2.constructor.embeddings[opts.through[0]] || _this2.constructor.relations && _this2.constructor.relations[opts.through[0]];
                        ThroughCollection = _this2.collection.facade.retrieveProxy(through.collectionName.call(_this2));
                        ThroughRecord = _this2.findRecordByName(through.recordName.call(_this2));
                        inverse = ThroughRecord.relations[opts.through[1].by];
                        alRecordIds = [];
                        newRecordIds = [];
                        _iterator2 = _createForOfIteratorHelper(alRecords);
                        _context8.prev = 7;

                        _iterator2.s();

                      case 9:
                        if ((_step2 = _iterator2.n()).done) {
                          _context8.next = 57;
                          break;
                        }

                        _aoRecord = _step2.value;
                        _voRecord = null;

                        if (!(_aoRecord.constructor === Object)) {
                          _context8.next = 19;
                          break;
                        }

                        _aoRecord.type = _aoRecord.type || "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
                        _context8.next = 16;
                        return EmbedsCollection.build(_aoRecord);

                      case 16:
                        _voRecord = _context8.sent;
                        _context8.next = 20;
                        break;

                      case 19:
                        _voRecord = _aoRecord;

                      case 20:
                        if (_this2.spaceId != null) {
                          _voRecord.spaceId = _this2.spaceId;
                        }

                        if (_this2.teamId != null) {
                          _voRecord.teamId = _this2.teamId;
                        }

                        _voRecord.spaces = _this2.spaces;
                        _voRecord.creatorId = _this2.creatorId;
                        _voRecord.editorId = _this2.editorId;
                        _voRecord.ownerId = _this2.ownerId;
                        _context8.next = 28;
                        return _voRecord.isNew();

                      case 28:
                        if (!_context8.sent) {
                          _context8.next = 38;
                          break;
                        }

                        _context8.t1 = function () {
                          var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(sr) {
                            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                              while (1) {
                                switch (_context6.prev = _context6.next) {
                                  case 0:
                                    alRecordIds.push(sr[inverse.refKey]);
                                    newRecordIds.push(sr[inverse.refKey]);
                                    return _context6.abrupt("return", sr);

                                  case 3:
                                  case "end":
                                    return _context6.stop();
                                }
                              }
                            }, _callee6);
                          }));

                          return function (_x4) {
                            return _ref7.apply(this, arguments);
                          };
                        }();

                        _context8.next = 32;
                        return _voRecord.save();

                      case 32:
                        _context8.t2 = _context8.sent;
                        _context8.next = 35;
                        return (0, _context8.t1)(_context8.t2);

                      case 35:
                        _context8.t0 = _context8.sent;
                        _context8.next = 54;
                        break;

                      case 38:
                        _context8.t3 = function () {
                          var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(sr) {
                            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                              while (1) {
                                switch (_context7.prev = _context7.next) {
                                  case 0:
                                    alRecordIds.push(sr[inverse.refKey]);
                                    return _context7.abrupt("return", sr);

                                  case 2:
                                  case "end":
                                    return _context7.stop();
                                }
                              }
                            }, _callee7);
                          }));

                          return function (_x5) {
                            return _ref8.apply(this, arguments);
                          };
                        }();

                        _context8.t4 = Object;
                        _context8.next = 42;
                        return _voRecord.changedAttributes();

                      case 42:
                        _context8.t5 = _context8.sent;

                        if (!_context8.t4.keys.call(_context8.t4, _context8.t5).length) {
                          _context8.next = 49;
                          break;
                        }

                        _context8.next = 46;
                        return _voRecord.save();

                      case 46:
                        _context8.t6 = _context8.sent;
                        _context8.next = 50;
                        break;

                      case 49:
                        _context8.t6 = _voRecord;

                      case 50:
                        _context8.t7 = _context8.t6;
                        _context8.next = 53;
                        return (0, _context8.t3)(_context8.t7);

                      case 53:
                        _context8.t0 = _context8.sent;

                      case 54:
                        savedThroughRecord = _context8.t0;

                      case 55:
                        _context8.next = 9;
                        break;

                      case 57:
                        _context8.next = 62;
                        break;

                      case 59:
                        _context8.prev = 59;
                        _context8.t8 = _context8["catch"](7);

                        _iterator2.e(_context8.t8);

                      case 62:
                        _context8.prev = 62;

                        _iterator2.f();

                        return _context8.finish(62);

                      case 65:
                        if (opts.putOnly) {
                          _context8.next = 75;
                          break;
                        }

                        _context8.next = 68;
                        return ThroughCollection.takeBy((_ThroughCollection$ta2 = {}, _defineProperty(_ThroughCollection$ta2, "@doc.".concat(through.inverse), _this2[through.refKey]), _defineProperty(_ThroughCollection$ta2, "@doc.".concat(opts.through[1].by), {
                          $nin: alRecordIds
                        }), _ThroughCollection$ta2));

                      case 68:
                        _context8.next = 70;
                        return _context8.sent.map( /*#__PURE__*/function () {
                          var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(voRecord) {
                            var id;
                            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                              while (1) {
                                switch (_context4.prev = _context4.next) {
                                  case 0:
                                    id = voRecord[opts.through[1].by];
                                    _context4.next = 3;
                                    return voRecord.destroy();

                                  case 3:
                                    return _context4.abrupt("return", id);

                                  case 4:
                                  case "end":
                                    return _context4.stop();
                                }
                              }
                            }, _callee4);
                          }));

                          return function (_x2) {
                            return _ref5.apply(this, arguments);
                          };
                        }());

                      case 70:
                        embedIds = _context8.sent;
                        _context8.next = 73;
                        return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), {
                          $in: embedIds
                        }));

                      case 73:
                        _context8.next = 75;
                        return _context8.sent.forEach( /*#__PURE__*/function () {
                          var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(voRecord) {
                            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                              while (1) {
                                switch (_context5.prev = _context5.next) {
                                  case 0:
                                    _context5.next = 2;
                                    return voRecord.destroy();

                                  case 2:
                                    return _context5.abrupt("return", _context5.sent);

                                  case 3:
                                  case "end":
                                    return _context5.stop();
                                }
                              }
                            }, _callee5);
                          }));

                          return function (_x3) {
                            return _ref6.apply(this, arguments);
                          };
                        }());

                      case 75:
                        _i = 0, _newRecordIds = newRecordIds;

                      case 76:
                        if (!(_i < _newRecordIds.length)) {
                          _context8.next = 83;
                          break;
                        }

                        newRecordId = _newRecordIds[_i];
                        _context8.next = 80;
                        return ThroughCollection.create((_ThroughCollection$cr = {}, _defineProperty(_ThroughCollection$cr, through.inverse, _this2[opts.refKey]), _defineProperty(_ThroughCollection$cr, opts.through[1].by, newRecordId), _defineProperty(_ThroughCollection$cr, "spaceId", _this2.spaceId || undefined), _defineProperty(_ThroughCollection$cr, "teamId", _this2.teamId || undefined), _defineProperty(_ThroughCollection$cr, "spaces", _this2.spaces), _defineProperty(_ThroughCollection$cr, "creatorId", _this2.creatorId), _defineProperty(_ThroughCollection$cr, "editorId", _this2.editorId), _defineProperty(_ThroughCollection$cr, "ownerId", _this2.ownerId), _ThroughCollection$cr));

                      case 80:
                        _i++;
                        _context8.next = 76;
                        break;

                      case 83:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8, null, [[7, 59, 62, 65]]);
              })(), "t5", 69);

            case 69:
              _context12.next = 92;
              break;

            case 71:
              if (opts.putOnly) {
                _context12.next = 92;
                break;
              }

              if (opts.through) {
                _context12.next = 79;
                break;
              }

              _context12.next = 75;
              return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(opts.inverse), this[opts.refKey]));

            case 75:
              _context12.next = 77;
              return _context12.sent.forEach( /*#__PURE__*/function () {
                var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(voRecord) {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return voRecord.destroy();

                        case 2:
                          return _context9.abrupt("return", _context9.sent);

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }));

                return function (_x6) {
                  return _ref9.apply(this, arguments);
                };
              }());

            case 77:
              _context12.next = 92;
              break;

            case 79:
              through = this.constructor.embeddings[opts.through[0]] || this.constructor.relations && this.constructor.relations[opts.through[0]];
              ThroughCollection = this.collection.facade.retrieveProxy(through.collectionName.call(this));
              ThroughRecord = this.findRecordByName(through.recordName.call(this));
              inverse = ThroughRecord.relations[opts.through[1].by];
              _context12.next = 85;
              return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(through.inverse), this[opts.refKey]));

            case 85:
              _context12.next = 87;
              return _context12.sent.map( /*#__PURE__*/function () {
                var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(voRecord) {
                  var id;
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          id = voRecord[opts.through[1].by];
                          _context10.next = 3;
                          return voRecord.destroy();

                        case 3:
                          return _context10.abrupt("return", id);

                        case 4:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }));

                return function (_x7) {
                  return _ref10.apply(this, arguments);
                };
              }());

            case 87:
              embedIds = _context12.sent;
              _context12.next = 90;
              return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), {
                $in: embedIds
              }));

            case 90:
              _context12.next = 92;
              return _context12.sent.forEach( /*#__PURE__*/function () {
                var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(voRecord) {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return voRecord.destroy();

                        case 2:
                          return _context11.abrupt("return", _context11.sent);

                        case 3:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }));

                return function (_x8) {
                  return _ref11.apply(this, arguments);
                };
              }());

            case 92:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this, [[10, 53, 56, 59]]);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))));
    opts.restore = flowRuntime_umd.annotate( /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(replica) {
        var EmbedsCollection, EmbedRecord, res;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));
                EmbedRecord = this.findRecordByName(opts.recordName.call(this));
                this.collection.sendNotification(SEND_TO_LOG, "hasEmbeds.restore ".concat(key, " replica ").concat(JSON.stringify(replica)), LEVELS[DEBUG]);
                _context15.next = 5;
                return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          if (!(replica != null && replica.length > 0)) {
                            _context14.next = 4;
                            break;
                          }

                          return _context14.abrupt("return", map(replica, /*#__PURE__*/function () {
                            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(item) {
                              return regeneratorRuntime.wrap(function _callee13$(_context13) {
                                while (1) {
                                  switch (_context13.prev = _context13.next) {
                                    case 0:
                                      if (item.type == null) {
                                        item.type = "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
                                      }

                                      _context13.next = 3;
                                      return EmbedsCollection.build(item);

                                    case 3:
                                      return _context13.abrupt("return", _context13.sent);

                                    case 4:
                                    case "end":
                                      return _context13.stop();
                                  }
                                }
                              }, _callee13);
                            }));

                            return function (_x10) {
                              return _ref14.apply(this, arguments);
                            };
                          }()));

                        case 4:
                          return _context14.abrupt("return", []);

                        case 5:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))();

              case 5:
                res = _context15.sent;
                this.collection.sendNotification(SEND_TO_LOG, "hasEmbeds.restore ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
                return _context15.abrupt("return", res);

              case 8:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x9) {
        return _ref12.apply(this, arguments);
      };
    }(), flowRuntime_umd["function"](flowRuntime_umd.param("replica", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$3))))));
    opts.replicate = flowRuntime_umd.annotate(function () {
      var alRecords = this[key] || [];
      this.collection.sendNotification(SEND_TO_LOG, "hasEmbeds.replicate ".concat(key, " embeds ").concat(JSON.stringify(alRecords)), LEVELS[DEBUG]);
      var res = alRecords.map(function (aoRecord) {
        return aoRecord.constructor.objectize(aoRecord);
      });
      this.collection.sendNotification(SEND_TO_LOG, "hasEmbeds.replicate ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
      return res;
    }, flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref("object")))));
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return [];
      }
    };

    var _optsType = flowRuntime_umd.ref(EmbedConfigT$2);
    vcClass.metaObject.addMetaData('embeddings', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(hasEmbeds, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(EmbedOptionsT$2))));

var RelationConfigT$2 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$2 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var CursorInterface$2 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var cpoMetaObject$p = Symbol["for"]('~metaObject');
function hasMany(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$p] != null;
    assert_1(!isClass, 'Decorator `hasMany` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.inverse = opts.inverse || "".concat(inflect.singularize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)), "Id");
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'hasMany';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var HasManyCollection, query, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, manyIds;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                HasManyCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));

                if (opts.through) {
                  _context.next = 9;
                  break;
                }

                query = _defineProperty({}, "@doc.".concat(opts.inverse), this[opts.refKey]);

                if (opts.inverseType != null) {
                  query["@doc.".concat(opts.inverseType)] = this.type;
                }

                _context.next = 6;
                return HasManyCollection.takeBy(query);

              case 6:
                return _context.abrupt("return", _context.sent);

              case 9:
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || this.constructor.relations[opts.through[0]];
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 16;
                return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[opts.refKey]));

              case 16:
                _context.next = 18;
                return _context.sent.map(function (voRecord) {
                  return voRecord[opts.through[1].by];
                });

              case 18:
                manyIds = _context.sent;
                _context.next = 21;
                return HasManyCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), {
                  $in: manyIds
                }));

              case 21:
                return _context.abrupt("return", _context.sent);

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$2, flowRuntime_umd.existential(), flowRuntime_umd.existential())))))
    };

    var _optsType = flowRuntime_umd.ref(RelationConfigT$2);
    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(hasMany, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$2))));

var RelationConfigT$3 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$3 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var RecordInterface$4 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$q = Symbol["for"]('~metaObject');
function hasOne(opts) {
  var _this = this;

  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$q] != null;
    assert_1(!isClass, 'Decorator `hasOne` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.inverse = opts.inverse || "".concat(inflect.singularize(inflect.camelize(_this.name.replace(/Record$/, ''), false)), "Id");
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'hasOne';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var HasOneCollection, query, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, oneId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                HasOneCollection = this.collection.facade.retrieveProxy(collectionName.call(this)); // NOTE: может быть ситуация, что hasOne связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

                if (opts.through) {
                  _context.next = 11;
                  break;
                }

                query = _defineProperty({}, "@doc.".concat(opts.inverse), this[opts.refKey]);

                if (opts.inverseType != null) {
                  query["@doc.".concat(opts.inverseType)] = this.type;
                }

                _context.next = 6;
                return HasOneCollection.takeBy(query, {
                  $limit: 1
                });

              case 6:
                _context.next = 8;
                return _context.sent.first();

              case 8:
                return _context.abrupt("return", _context.sent);

              case 11:
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || this.constructor.relations[opts.through[0]];
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 18;
                return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[opts.refKey]), {
                  $limit: 1
                });

              case 18:
                _context.next = 20;
                return _context.sent.first();

              case 20:
                _context.t0 = opts.through[1].by;
                oneId = _context.sent[_context.t0];
                _context.next = 24;
                return HasOneCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), oneId), {
                  $limit: 1
                });

              case 24:
                _context.next = 26;
                return _context.sent.first();

              case 26:
                return _context.abrupt("return", _context.sent);

              case 27:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$4)))))
    };

    var _optsType = flowRuntime_umd.ref(RelationConfigT$3);
    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(hasOne, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$3))));

var EmbedConfigT$3 = flowRuntime_umd.tdz(function () {
  return EmbedConfigT;
});
var EmbedOptionsT$3 = flowRuntime_umd.tdz(function () {
  return EmbedOptionsT;
});
var RecordInterface$5 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$r = Symbol["for"]('~metaObject'); // NOTE: отличается от belongsTo тем, что сама связь не является обязательной (образуется между объектами "в одной плоскости"), а в @[opts.attr] может содержаться null значение

function relatedEmbed(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$r] != null;
    assert_1(!isClass, 'Decorator `relatedEmbed` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS = vcClass.Module.NS,
        Pipes = _vcClass$Module$NS.Pipes,
        Record = _vcClass$Module$NS.Record,
        _vcClass$Module$NS$Ut = _vcClass$Module$NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    var _Pipes$NS$LogMessage = Pipes.NS.LogMessage,
        SEND_TO_LOG = _Pipes$NS$LogMessage.SEND_TO_LOG,
        LEVELS = _Pipes$NS$LogMessage.LEVELS,
        DEBUG = _Pipes$NS$LogMessage.DEBUG;
    opts.refKey = opts.refKey || 'id';
    opts.attr = opts.attr || "".concat(key, "Id");
    opts.inverse = opts.inverse || "".concat(inflect.pluralize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)));
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));

    opts.validate = function () {
      if (opts.inverseType != null) {
        return Record.schema.unknown(true).allow(null).optional();
      } else {
        var EmbedRecord = this.findRecordByName(opts.recordName.call(this));
        return EmbedRecord.schema.allow(null).optional();
      }
    };

    opts.embedding = 'relatedEmbed';
    opts.through = opts.through || null;
    opts.putOnly = opts.putOnly || false;
    opts.loadOnly = opts.loadOnly || false;
    opts.load = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      var recordType, EmbedsCollection, res;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!opts.putOnly) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", null);

            case 2:
              recordType = opts.inverseType != null ? this[opts.inverseType] : null;
              EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this, recordType)); // NOTE: может быть ситуация, что hasOne связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

              _context2.next = 6;
              return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var through, ThroughCollection, ThroughRecord, inverse, embedId;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (opts.through) {
                          _context.next = 8;
                          break;
                        }

                        _context.next = 3;
                        return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(opts.refKey), _this[opts.attr]), {
                          $limit: 1
                        });

                      case 3:
                        _context.next = 5;
                        return _context.sent.first();

                      case 5:
                        return _context.abrupt("return", _context.sent);

                      case 8:
                        // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода relatedEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
                        through = _this.constructor.embeddings[opts.through[0]];
                        assert_1(through != null, "Metadata about ".concat(opts.through[0], " must be defined by `relatedEmbed` method"));
                        ThroughCollection = _this.collection.facade.retrieveProxy(through.collectionName.call(_this));
                        ThroughRecord = _this.findRecordByName(through.recordName.call(_this));
                        inverse = ThroughRecord.relations[opts.through[1].by];
                        _context.next = 15;
                        return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(through.inverse), _this[through.refKey]), {
                          $limit: 1
                        });

                      case 15:
                        _context.next = 17;
                        return _context.sent.first();

                      case 17:
                        _context.t0 = opts.through[1].by;
                        embedId = _context.sent[_context.t0];
                        _context.next = 21;
                        return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), embedId), {
                          $limit: 1
                        });

                      case 21:
                        _context.next = 23;
                        return _context.sent.first();

                      case 23:
                        return _context.abrupt("return", _context.sent);

                      case 24:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }))();

            case 6:
              res = _context2.sent;
              this.collection.sendNotification(SEND_TO_LOG, "relatedEmbed.load ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
              return _context2.abrupt("return", res);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$5))))));
    opts.put = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var _this2 = this;

      var EmbedsCollection, EmbedRecord, aoRecord, savedRecord, _ThroughCollection$ta2, through, ThroughCollection, ThroughRecord, inverse, savedThroughRecord;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!opts.loadOnly) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt("return");

            case 2:
              EmbedsCollection = null;
              EmbedRecord = null;
              aoRecord = this[key];
              this.collection.sendNotification(SEND_TO_LOG, "relatedEmbed.put ".concat(key, " embed ").concat(JSON.stringify(aoRecord)), LEVELS[DEBUG]);

              if (!(aoRecord != null)) {
                _context5.next = 81;
                break;
              }

              if (!(aoRecord.constructor === Object)) {
                _context5.next = 13;
                break;
              }

              if (opts.inverseType != null) {
                assert_1(aoRecord.type != null, 'When set polymorphic relatedEmbed `type` is required');
                EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this, aoRecord.type));
                EmbedRecord = this.findRecordByName(aoRecord.type);
              } else {
                EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));
                EmbedRecord = this.findRecordByName(opts.recordName.call(this));
              }

              if (aoRecord.type == null) {
                aoRecord.type = "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
              }

              _context5.next = 12;
              return EmbedsCollection.build(aoRecord);

            case 12:
              aoRecord = _context5.sent;

            case 13:
              if (opts.through) {
                _context5.next = 41;
                break;
              }

              if (this.spaceId != null) {
                aoRecord.spaceId = this.spaceId;
              }

              if (this.teamId != null) {
                aoRecord.teamId = this.teamId;
              }

              aoRecord.spaces = this.spaces;
              aoRecord.creatorId = this.creatorId;
              aoRecord.editorId = this.editorId;
              aoRecord.ownerId = this.ownerId;
              _context5.next = 22;
              return aoRecord.isNew();

            case 22:
              _context5.t0 = _context5.sent;

              if (_context5.t0) {
                _context5.next = 29;
                break;
              }

              _context5.t1 = Object;
              _context5.next = 27;
              return aoRecord.changedAttributes();

            case 27:
              _context5.t2 = _context5.sent;
              _context5.t0 = _context5.t1.keys.call(_context5.t1, _context5.t2).length;

            case 29:
              if (!_context5.t0) {
                _context5.next = 35;
                break;
              }

              _context5.next = 32;
              return aoRecord.save();

            case 32:
              _context5.t3 = _context5.sent;
              _context5.next = 36;
              break;

            case 35:
              _context5.t3 = aoRecord;

            case 36:
              savedRecord = _context5.t3;
              this[opts.attr] = savedRecord[opts.refKey];

              if (opts.inverseType != null) {
                this[opts.inverseType] = savedRecord.type;
              }

              _context5.next = 81;
              break;

            case 41:
              // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода relatedEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
              through = this.constructor.embeddings[opts.through[0]];
              assert_1(through != null, "Metadata about ".concat(opts.through[0], " must be defined by `relatedEmbed` method"));
              ThroughCollection = this.collection.facade.retrieveProxy(through.collectionName.call(this));
              ThroughRecord = this.findRecordByName(through.recordName.call(this));
              inverse = ThroughRecord.relations[opts.through[1].by];

              if (this.spaceId != null) {
                aoRecord.spaceId = this.spaceId;
              }

              if (this.teamId != null) {
                aoRecord.teamId = this.teamId;
              }

              aoRecord.spaces = this.spaces;
              aoRecord.creatorId = this.creatorId;
              aoRecord.editorId = this.editorId;
              aoRecord.ownerId = this.ownerId;
              _context5.next = 54;
              return aoRecord.isNew();

            case 54:
              if (!_context5.sent) {
                _context5.next = 64;
                break;
              }

              _context5.t5 = function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(sr) {
                  var _ThroughCollection$cr;

                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return ThroughCollection.create((_ThroughCollection$cr = {}, _defineProperty(_ThroughCollection$cr, through.inverse, _this2[through.refKey]), _defineProperty(_ThroughCollection$cr, opts.through[1].by, sr[inverse.refKey]), _defineProperty(_ThroughCollection$cr, "spaceId", _this2.spaceId || undefined), _defineProperty(_ThroughCollection$cr, "teamId", _this2.teamId || undefined), _defineProperty(_ThroughCollection$cr, "spaces", _this2.spaces), _defineProperty(_ThroughCollection$cr, "creatorId", _this2.creatorId), _defineProperty(_ThroughCollection$cr, "editorId", _this2.editorId), _defineProperty(_ThroughCollection$cr, "ownerId", _this2.ownerId), _ThroughCollection$cr));

                        case 2:
                          return _context3.abrupt("return", sr);

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));

                return function (_x) {
                  return _ref4.apply(this, arguments);
                };
              }();

              _context5.next = 58;
              return aoRecord.save();

            case 58:
              _context5.t6 = _context5.sent;
              _context5.next = 61;
              return (0, _context5.t5)(_context5.t6);

            case 61:
              _context5.t4 = _context5.sent;
              _context5.next = 76;
              break;

            case 64:
              _context5.t7 = Object;
              _context5.next = 67;
              return aoRecord.changedAttributes();

            case 67:
              _context5.t8 = _context5.sent;

              if (!_context5.t7.keys.call(_context5.t7, _context5.t8).length) {
                _context5.next = 74;
                break;
              }

              _context5.next = 71;
              return aoRecord.save();

            case 71:
              _context5.t9 = _context5.sent;
              _context5.next = 75;
              break;

            case 74:
              _context5.t9 = aoRecord;

            case 75:
              _context5.t4 = _context5.t9;

            case 76:
              savedThroughRecord = _context5.t4;
              _context5.next = 79;
              return ThroughCollection.takeBy((_ThroughCollection$ta2 = {}, _defineProperty(_ThroughCollection$ta2, "@doc.".concat(through.inverse), this[through.refKey]), _defineProperty(_ThroughCollection$ta2, "@doc.".concat(opts.through[1].by), {
                $ne: savedThroughRecord[inverse.refKey]
              }), _ThroughCollection$ta2));

            case 79:
              _context5.next = 81;
              return _context5.sent.forEach( /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(voRecord) {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.next = 2;
                          return voRecord.destroy();

                        case 2:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function (_x2) {
                  return _ref5.apply(this, arguments);
                };
              }());

            case 81:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))));
    opts.restore = flowRuntime_umd.annotate( /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(replica) {
        var _this3 = this;

        var EmbedsCollection, EmbedRecord, res;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                EmbedsCollection = null;
                EmbedRecord = null;
                this.collection.sendNotification(SEND_TO_LOG, "relatedEmbed.restore ".concat(key, " replica ").concat(JSON.stringify(replica)), LEVELS[DEBUG]);
                _context7.next = 5;
                return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          if (!(replica != null)) {
                            _context6.next = 8;
                            break;
                          }

                          if (opts.inverseType != null) {
                            assert_1(replica.type != null, 'When set polymorphic relatedEmbed `type` is required');
                            EmbedsCollection = _this3.collection.facade.retrieveProxy(opts.collectionName.call(_this3, replica.type));
                            EmbedRecord = _this3.findRecordByName(replica.type);
                          } else {
                            EmbedsCollection = _this3.collection.facade.retrieveProxy(opts.collectionName.call(_this3));
                            EmbedRecord = _this3.findRecordByName(opts.recordName.call(_this3));
                          }

                          if (replica.type == null) {
                            replica.type = "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
                          }

                          _context6.next = 5;
                          return EmbedsCollection.build(replica);

                        case 5:
                          return _context6.abrupt("return", _context6.sent);

                        case 8:
                          return _context6.abrupt("return", null);

                        case 9:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }))();

              case 5:
                res = _context7.sent;
                this.collection.sendNotification(SEND_TO_LOG, "relatedEmbed.restore ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
                return _context7.abrupt("return", res);

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x3) {
        return _ref6.apply(this, arguments);
      };
    }(), flowRuntime_umd["function"](flowRuntime_umd.param("replica", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$5))))));
    opts.replicate = flowRuntime_umd.annotate(function () {
      var aoRecord = this[key];
      this.collection.sendNotification(SEND_TO_LOG, "relatedEmbed.replicate ".concat(key, " embed ").concat(JSON.stringify(aoRecord)), LEVELS[DEBUG]);
      var res = aoRecord.constructor.objectize(aoRecord);
      this.collection.sendNotification(SEND_TO_LOG, "relatedEmbed.replicate ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
      return res;
    }, flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("object"))));
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      writable: true,
      value: null
    };

    var _optsType = flowRuntime_umd.ref(EmbedConfigT$3);
    vcClass.metaObject.addMetaData('embeddings', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(relatedEmbed, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(EmbedOptionsT$3))));

var EmbedConfigT$4 = flowRuntime_umd.tdz(function () {
  return EmbedConfigT;
});
var EmbedOptionsT$4 = flowRuntime_umd.tdz(function () {
  return EmbedOptionsT;
});
var RecordInterface$6 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$s = Symbol["for"]('~metaObject');
function relatedEmbeds(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$s] != null;
    assert_1(!isClass, 'Decorator `relatedEmbeds` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS = vcClass.Module.NS,
        Pipes = _vcClass$Module$NS.Pipes,
        Record = _vcClass$Module$NS.Record,
        _vcClass$Module$NS$Ut = _vcClass$Module$NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect,
        map = _vcClass$Module$NS$Ut.map;
    var _Pipes$NS$LogMessage = Pipes.NS.LogMessage,
        SEND_TO_LOG = _Pipes$NS$LogMessage.SEND_TO_LOG,
        LEVELS = _Pipes$NS$LogMessage.LEVELS,
        DEBUG = _Pipes$NS$LogMessage.DEBUG;
    opts.refKey = opts.refKey || 'id';
    opts.attr = opts.attr || inflect.pluralize(inflect.camelize(key, false));
    opts.inverse = opts.inverse || "".concat(inflect.pluralize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)));
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));

    opts.validate = function () {
      if (opts.inverseType != null) {
        return joi.array().items([Record.schema.unknown(true), joi.any().strip()]);
      } else {
        var EmbedRecord = this.findRecordByName(opts.recordName.call(this));
        return joi.array().items([EmbedRecord.schema, joi.any().strip()]);
      }
    };

    opts.embedding = 'relatedEmbeds';
    opts.through = opts.through || null;
    opts.putOnly = opts.putOnly || false;
    opts.loadOnly = opts.loadOnly || false;
    opts.load = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var _this = this;

      var EmbedsCollection, res;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!opts.putOnly) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return", null);

            case 2:
              EmbedsCollection = null; // NOTE: может быть ситуация, что hasOne связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

              _context4.next = 5;
              return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var through, ThroughCollection, ThroughRecord, inverse, embedIds;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (opts.through) {
                          _context3.next = 13;
                          break;
                        }

                        if (!(opts.inverseType != null)) {
                          _context3.next = 7;
                          break;
                        }

                        _context3.next = 4;
                        return map(_this[opts.attr], /*#__PURE__*/function () {
                          var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref3) {
                            var id, inverseType;
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    id = _ref3.id, inverseType = _ref3.inverseType;
                                    EmbedsCollection = _this.collection.facade.retrieveProxy(opts.collectionName.call(_this, inverseType));
                                    _context.next = 4;
                                    return EmbedsCollection.take(id);

                                  case 4:
                                    return _context.abrupt("return", _context.sent);

                                  case 5:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee);
                          }));

                          return function (_x) {
                            return _ref4.apply(this, arguments);
                          };
                        }());

                      case 4:
                        _context3.t0 = _context3.sent;
                        _context3.next = 10;
                        break;

                      case 7:
                        _context3.next = 9;
                        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                          return regeneratorRuntime.wrap(function _callee2$(_context2) {
                            while (1) {
                              switch (_context2.prev = _context2.next) {
                                case 0:
                                  EmbedsCollection = _this.collection.facade.retrieveProxy(opts.collectionName.call(_this));
                                  _context2.next = 3;
                                  return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(opts.refKey), {
                                    $in: _this[opts.attr]
                                  }));

                                case 3:
                                  _context2.next = 5;
                                  return _context2.sent.toArray();

                                case 5:
                                  return _context2.abrupt("return", _context2.sent);

                                case 6:
                                case "end":
                                  return _context2.stop();
                              }
                            }
                          }, _callee2);
                        }))();

                      case 9:
                        _context3.t0 = _context3.sent;

                      case 10:
                        return _context3.abrupt("return", _context3.t0);

                      case 13:
                        EmbedsCollection = _this.collection.facade.retrieveProxy(opts.collectionName.call(_this));
                        through = _this.constructor.embeddings[opts.through[0]] || _this.constructor.relations && _this.constructor.relations[opts.through[0]];
                        ThroughCollection = _this.collection.facade.retrieveProxy(through.collectionName.call(_this));
                        ThroughRecord = _this.findRecordByName(through.recordName.call(_this));
                        inverse = ThroughRecord.relations[opts.through[1].by];
                        _context3.next = 20;
                        return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(through.inverse), _this[through.refKey]));

                      case 20:
                        _context3.next = 22;
                        return _context3.sent.map(function (voRecord) {
                          return voRecord[opts.through[1].by];
                        });

                      case 22:
                        embedIds = _context3.sent;
                        _context3.next = 25;
                        return EmbedsCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), {
                          $in: embedIds
                        }));

                      case 25:
                        _context3.next = 27;
                        return _context3.sent.toArray();

                      case 27:
                        return _context3.abrupt("return", _context3.sent);

                      case 28:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }))();

            case 5:
              res = _context4.sent;
              this.collection.sendNotification(SEND_TO_LOG, "relatedEmbeds.load ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
              return _context4.abrupt("return", res);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref(RecordInterface$6))))));
    opts.put = flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      var _this2 = this;

      var EmbedsCollection, EmbedRecord, alRecords, alRecordIds, _iterator, _step, aoRecord, voRecord, savedRecord, id, inverseType;

      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (!opts.loadOnly) {
                _context9.next = 2;
                break;
              }

              return _context9.abrupt("return");

            case 2:
              EmbedsCollection = null;
              EmbedRecord = null;
              alRecords = this[key];
              this.collection.sendNotification(SEND_TO_LOG, "relatedEmbeds.put ".concat(key, " embeds ").concat(JSON.stringify(alRecords)), LEVELS[DEBUG]);

              if (!(alRecords.length > 0)) {
                _context9.next = 63;
                break;
              }

              if (opts.through) {
                _context9.next = 62;
                break;
              }

              alRecordIds = [];
              _iterator = _createForOfIteratorHelper(alRecords);
              _context9.prev = 10;

              _iterator.s();

            case 12:
              if ((_step = _iterator.n()).done) {
                _context9.next = 51;
                break;
              }

              aoRecord = _step.value;
              voRecord = null;

              if (!(aoRecord.constructor === Object)) {
                _context9.next = 23;
                break;
              }

              if (opts.inverseType != null) {
                assert_1(aoRecord.type != null, 'When set polymorphic relatedEmbeds `type` is required');
                EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this, aoRecord.type));
                EmbedRecord = this.findRecordByName(aoRecord.type);
              } else {
                EmbedsCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));
                EmbedRecord = this.findRecordByName(opts.recordName.call(this));
              }

              aoRecord.type = aoRecord.type || "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
              _context9.next = 20;
              return EmbedsCollection.build(aoRecord);

            case 20:
              voRecord = _context9.sent;
              _context9.next = 24;
              break;

            case 23:
              voRecord = aoRecord;

            case 24:
              if (this.spaceId != null) {
                voRecord.spaceId = this.spaceId;
              }

              if (this.teamId != null) {
                voRecord.teamId = this.teamId;
              }

              voRecord.spaces = this.spaces;
              voRecord.creatorId = this.creatorId;
              voRecord.editorId = this.editorId;
              voRecord.ownerId = this.ownerId;
              _context9.next = 32;
              return voRecord.isNew();

            case 32:
              _context9.t0 = _context9.sent;

              if (_context9.t0) {
                _context9.next = 39;
                break;
              }

              _context9.t1 = Object;
              _context9.next = 37;
              return voRecord.changedAttributes();

            case 37:
              _context9.t2 = _context9.sent;
              _context9.t0 = _context9.t1.keys.call(_context9.t1, _context9.t2).length;

            case 39:
              if (!_context9.t0) {
                _context9.next = 45;
                break;
              }

              _context9.next = 42;
              return voRecord.save();

            case 42:
              _context9.t3 = _context9.sent;
              _context9.next = 46;
              break;

            case 45:
              _context9.t3 = voRecord;

            case 46:
              savedRecord = _context9.t3;
              id = savedRecord.id, inverseType = savedRecord.type;

              if (opts.inverseType != null) {
                alRecordIds.push({
                  id: id,
                  inverseType: inverseType
                });
              } else {
                alRecordIds.push(id);
              }

            case 49:
              _context9.next = 12;
              break;

            case 51:
              _context9.next = 56;
              break;

            case 53:
              _context9.prev = 53;
              _context9.t4 = _context9["catch"](10);

              _iterator.e(_context9.t4);

            case 56:
              _context9.prev = 56;

              _iterator.f();

              return _context9.finish(56);

            case 59:
              this[opts.attr] = alRecordIds;
              _context9.next = 63;
              break;

            case 62:
              return _context9.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                var through, ThroughCollection, ThroughRecord, inverse, alRecordIds, newRecordIds, _iterator2, _step2, _aoRecord, _voRecord, savedThroughRecord, _ThroughCollection$ta2, _i, _newRecordIds, _ThroughCollection$cr, newRecordId;

                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        EmbedsCollection = _this2.collection.facade.retrieveProxy(opts.collectionName.call(_this2));
                        through = _this2.constructor.embeddings[opts.through[0]] || _this2.constructor.relations && _this2.constructor.relations[opts.through[0]];
                        ThroughCollection = _this2.collection.facade.retrieveProxy(through.collectionName.call(_this2));
                        ThroughRecord = _this2.findRecordByName(through.recordName.call(_this2));
                        inverse = ThroughRecord.relations[opts.through[1].by];
                        alRecordIds = [];
                        newRecordIds = [];
                        _iterator2 = _createForOfIteratorHelper(alRecords);
                        _context8.prev = 8;

                        _iterator2.s();

                      case 10:
                        if ((_step2 = _iterator2.n()).done) {
                          _context8.next = 58;
                          break;
                        }

                        _aoRecord = _step2.value;
                        _voRecord = null;

                        if (!(_aoRecord.constructor === Object)) {
                          _context8.next = 20;
                          break;
                        }

                        _aoRecord.type = _aoRecord.type || "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
                        _context8.next = 17;
                        return EmbedsCollection.build(_aoRecord);

                      case 17:
                        _voRecord = _context8.sent;
                        _context8.next = 21;
                        break;

                      case 20:
                        _voRecord = _aoRecord;

                      case 21:
                        if (_this2.spaceId != null) {
                          _voRecord.spaceId = _this2.spaceId;
                        }

                        if (_this2.teamId != null) {
                          _voRecord.teamId = _this2.teamId;
                        }

                        _voRecord.spaces = _this2.spaces;
                        _voRecord.creatorId = _this2.creatorId;
                        _voRecord.editorId = _this2.editorId;
                        _voRecord.ownerId = _this2.ownerId;
                        _context8.next = 29;
                        return _voRecord.isNew();

                      case 29:
                        if (!_context8.sent) {
                          _context8.next = 39;
                          break;
                        }

                        _context8.t1 = function () {
                          var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(sr) {
                            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                              while (1) {
                                switch (_context6.prev = _context6.next) {
                                  case 0:
                                    alRecordIds.push(sr[inverse.refKey]);
                                    newRecordIds.push(sr[inverse.refKey]);
                                    return _context6.abrupt("return", sr);

                                  case 3:
                                  case "end":
                                    return _context6.stop();
                                }
                              }
                            }, _callee6);
                          }));

                          return function (_x3) {
                            return _ref8.apply(this, arguments);
                          };
                        }();

                        _context8.next = 33;
                        return _voRecord.save();

                      case 33:
                        _context8.t2 = _context8.sent;
                        _context8.next = 36;
                        return (0, _context8.t1)(_context8.t2);

                      case 36:
                        _context8.t0 = _context8.sent;
                        _context8.next = 55;
                        break;

                      case 39:
                        _context8.t3 = function () {
                          var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(sr) {
                            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                              while (1) {
                                switch (_context7.prev = _context7.next) {
                                  case 0:
                                    alRecordIds.push(sr[inverse.refKey]);
                                    return _context7.abrupt("return", sr);

                                  case 2:
                                  case "end":
                                    return _context7.stop();
                                }
                              }
                            }, _callee7);
                          }));

                          return function (_x4) {
                            return _ref9.apply(this, arguments);
                          };
                        }();

                        _context8.t4 = Object;
                        _context8.next = 43;
                        return _voRecord.changedAttributes();

                      case 43:
                        _context8.t5 = _context8.sent;

                        if (!_context8.t4.keys.call(_context8.t4, _context8.t5).length) {
                          _context8.next = 50;
                          break;
                        }

                        _context8.next = 47;
                        return _voRecord.save();

                      case 47:
                        _context8.t6 = _context8.sent;
                        _context8.next = 51;
                        break;

                      case 50:
                        _context8.t6 = _voRecord;

                      case 51:
                        _context8.t7 = _context8.t6;
                        _context8.next = 54;
                        return (0, _context8.t3)(_context8.t7);

                      case 54:
                        _context8.t0 = _context8.sent;

                      case 55:
                        savedThroughRecord = _context8.t0;

                      case 56:
                        _context8.next = 10;
                        break;

                      case 58:
                        _context8.next = 63;
                        break;

                      case 60:
                        _context8.prev = 60;
                        _context8.t8 = _context8["catch"](8);

                        _iterator2.e(_context8.t8);

                      case 63:
                        _context8.prev = 63;

                        _iterator2.f();

                        return _context8.finish(63);

                      case 66:
                        if (opts.putOnly) {
                          _context8.next = 71;
                          break;
                        }

                        _context8.next = 69;
                        return ThroughCollection.takeBy((_ThroughCollection$ta2 = {}, _defineProperty(_ThroughCollection$ta2, "@doc.".concat(through.inverse), _this2[through.refKey]), _defineProperty(_ThroughCollection$ta2, "@doc.".concat(opts.through[1].by), {
                          $nin: alRecordIds
                        }), _ThroughCollection$ta2));

                      case 69:
                        _context8.next = 71;
                        return _context8.sent.forEach( /*#__PURE__*/function () {
                          var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(voRecord) {
                            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                              while (1) {
                                switch (_context5.prev = _context5.next) {
                                  case 0:
                                    _context5.next = 2;
                                    return voRecord.destroy();

                                  case 2:
                                  case "end":
                                    return _context5.stop();
                                }
                              }
                            }, _callee5);
                          }));

                          return function (_x2) {
                            return _ref7.apply(this, arguments);
                          };
                        }());

                      case 71:
                        _i = 0, _newRecordIds = newRecordIds;

                      case 72:
                        if (!(_i < _newRecordIds.length)) {
                          _context8.next = 79;
                          break;
                        }

                        newRecordId = _newRecordIds[_i];
                        _context8.next = 76;
                        return ThroughCollection.create((_ThroughCollection$cr = {}, _defineProperty(_ThroughCollection$cr, through.inverse, _this2[through.refKey]), _defineProperty(_ThroughCollection$cr, opts.through[1].by, newRecordId), _defineProperty(_ThroughCollection$cr, "spaceId", _this2.spaceId || undefined), _defineProperty(_ThroughCollection$cr, "teamId", _this2.teamId || undefined), _defineProperty(_ThroughCollection$cr, "spaces", _this2.spaces), _defineProperty(_ThroughCollection$cr, "creatorId", _this2.creatorId), _defineProperty(_ThroughCollection$cr, "editorId", _this2.editorId), _defineProperty(_ThroughCollection$cr, "ownerId", _this2.ownerId), _ThroughCollection$cr));

                      case 76:
                        _i++;
                        _context8.next = 72;
                        break;

                      case 79:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8, null, [[8, 60, 63, 66]]);
              })(), "t5", 63);

            case 63:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[10, 53, 56, 59]]);
    })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))));
    opts.restore = flowRuntime_umd.annotate( /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(replica) {
        var _this3 = this;

        var EmbedsCollection, EmbedRecord, res;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                EmbedsCollection = null;
                EmbedRecord = null;
                this.collection.sendNotification(SEND_TO_LOG, "relatedEmbeds.restore ".concat(key, " replica ").concat(JSON.stringify(replica)), LEVELS[DEBUG]);
                _context12.next = 5;
                return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          if (!(replica != null && replica.length > 0)) {
                            _context11.next = 4;
                            break;
                          }

                          return _context11.abrupt("return", map(replica, /*#__PURE__*/function () {
                            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(item) {
                              return regeneratorRuntime.wrap(function _callee10$(_context10) {
                                while (1) {
                                  switch (_context10.prev = _context10.next) {
                                    case 0:
                                      if (opts.inverseType != null) {
                                        assert_1(replica.type != null, 'When set polymorphic relatedEmbeds `type` is required');
                                        EmbedsCollection = _this3.collection.facade.retrieveProxy(opts.collectionName.call(_this3, item.type));
                                        EmbedRecord = _this3.findRecordByName(item.type);
                                      } else {
                                        EmbedsCollection = _this3.collection.facade.retrieveProxy(opts.collectionName.call(_this3));
                                        EmbedRecord = _this3.findRecordByName(opts.recordName.call(_this3));
                                      }

                                      if (item.type == null) {
                                        item.type = "".concat(EmbedRecord.moduleName(), "::").concat(EmbedRecord.name);
                                      }

                                      _context10.next = 4;
                                      return EmbedsCollection.build(item);

                                    case 4:
                                      return _context10.abrupt("return", _context10.sent);

                                    case 5:
                                    case "end":
                                      return _context10.stop();
                                  }
                                }
                              }, _callee10);
                            }));

                            return function (_x6) {
                              return _ref12.apply(this, arguments);
                            };
                          }()));

                        case 4:
                          return _context11.abrupt("return", []);

                        case 5:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))();

              case 5:
                res = _context12.sent;
                this.collection.sendNotification(SEND_TO_LOG, "relatedEmbeds.restore ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
                return _context12.abrupt("return", res);

              case 8:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x5) {
        return _ref10.apply(this, arguments);
      };
    }(), flowRuntime_umd["function"](flowRuntime_umd.param("replica", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$6))))));
    opts.replicate = flowRuntime_umd.annotate(function () {
      var alRecords = this[key] || [];
      this.collection.sendNotification(SEND_TO_LOG, "relatedEmbeds.replicate ".concat(key, " embeds ").concat(JSON.stringify(alRecords)), LEVELS[DEBUG]);
      var res = alRecords.map(function (aoRecord) {
        return aoRecord.constructor.objectize(aoRecord);
      });
      this.collection.sendNotification(SEND_TO_LOG, "relatedEmbeds.replicate ".concat(key, " result ").concat(JSON.stringify(res)), LEVELS[DEBUG]);
      return res;
    }, flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref("object")))));
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return [];
      }
    };

    var _optsType = flowRuntime_umd.ref(EmbedConfigT$4);
    vcClass.metaObject.addMetaData('embeddings', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(relatedEmbeds, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(EmbedOptionsT$4))));

var RelationConfigT$4 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$4 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var RecordInterface$7 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$t = Symbol["for"]('~metaObject'); // NOTE: отличается от belongsTo тем, что сама связь не является обязательной (образуется между объектами "в одной плоскости"), а в @[opts.attr] может содержаться null значение

function relatedTo(opts) {
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$t] != null;
    assert_1(!isClass, 'Decorator `relatedTo` may be used with instance properties only');
    var vcClass = target.constructor;
    assert_1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.attr = opts.attr || "".concat(key, "Id");
    opts.inverse = opts.inverse || "".concat(inflect.pluralize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)));
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return vsRecordName;
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return "".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection");
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'relatedTo';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var recordType, RelatedToCollection, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, relatedId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                recordType = opts.inverseType && this[opts.inverseType] || null;
                RelatedToCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this, recordType)); // NOTE: может быть ситуация, что relatedTo связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

                if (opts.through) {
                  _context.next = 10;
                  break;
                }

                _context.next = 5;
                return RelatedToCollection.takeBy(_defineProperty({}, "@doc.".concat(opts.refKey), this[opts.attr]), {
                  $limit: 1
                });

              case 5:
                _context.next = 7;
                return _context.sent.first();

              case 7:
                return _context.abrupt("return", _context.sent);

              case 10:
                // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода hasEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || undefined;
                assert_1(throughEmbed != null, "Metadata about ".concat(opts.through[0], " must be defined by `EmbeddableRecordMixin.hasEmbed` method"));
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 18;
                return ThroughCollection.takeBy(_defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[throughEmbed.refKey]), {
                  $limit: 1
                });

              case 18:
                _context.next = 20;
                return _context.sent.first();

              case 20:
                _context.t0 = opts.through[1].by;
                relatedId = _context.sent[_context.t0];
                _context.next = 24;
                return RelatedToCollection.takeBy(_defineProperty({}, "@doc.".concat(inverse.refKey), relatedId), {
                  $limit: 1
                });

              case 24:
                _context.next = 26;
                return _context.sent.first();

              case 26:
                return _context.abrupt("return", _context.sent);

              case 27:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$7)))))
    };

    var _optsType = flowRuntime_umd.ref(RelationConfigT$4);
    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(relatedTo, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$4))));

var __filename$y = '/leanes/utils/genRandomAlphaNumbers.js';

var genRandomAlphaNumbersTF = (function (Module) {
  Module.defineUtil(__filename$y, function (length) {
    return crypto.randomBytes(length).toString('hex');
  });
});

var __filename$z = '/leanes/utils/hashPassword.js';

var hashPasswordTF = (function (Module) {
  Module.defineUtil(__filename$z, function (password) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _opts$hashMethod = opts.hashMethod,
        method = _opts$hashMethod === void 0 ? 'sha256' : _opts$hashMethod,
        _opts$saltLength = opts.saltLength,
        saltLength = _opts$saltLength === void 0 ? 16 : _opts$saltLength;
    var salt = crypto.randomBytes(saltLength).toString('hex');
    var hash = crypto.createHash(method).update(salt + password).digest('hex');
    return {
      method: method,
      salt: salt,
      hash: hash
    };
  });
});

var __filename$A = '/leanes/utils/jwtDecode.js';

var safeBuffer = createCommonjsModule(function (module, exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */

var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype);

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
};
});
var safeBuffer_1 = safeBuffer.Buffer;

/*global module, process*/
var Buffer$1 = safeBuffer.Buffer;



function DataStream(data) {
  this.buffer = null;
  this.writable = true;
  this.readable = true;

  // No input
  if (!data) {
    this.buffer = Buffer$1.alloc(0);
    return this;
  }

  // Stream
  if (typeof data.pipe === 'function') {
    this.buffer = Buffer$1.alloc(0);
    data.pipe(this);
    return this;
  }

  // Buffer or String
  // or Object (assumedly a passworded key)
  if (data.length || typeof data === 'object') {
    this.buffer = data;
    this.writable = false;
    process.nextTick(function () {
      this.emit('end', data);
      this.readable = false;
      this.emit('close');
    }.bind(this));
    return this;
  }

  throw new TypeError('Unexpected data type ('+ typeof data + ')');
}
util.inherits(DataStream, stream);

DataStream.prototype.write = function write(data) {
  this.buffer = Buffer$1.concat([this.buffer, Buffer$1.from(data)]);
  this.emit('data', data);
};

DataStream.prototype.end = function end(data) {
  if (data)
    this.write(data);
  this.emit('end', data);
  this.emit('close');
  this.writable = false;
  this.readable = false;
};

var dataStream = DataStream;

var Buffer$2 = buffer.Buffer; // browserify
var SlowBuffer = buffer.SlowBuffer;

var bufferEqualConstantTime = bufferEq;

function bufferEq(a, b) {

  // shortcutting on type is necessary for correctness
  if (!Buffer$2.isBuffer(a) || !Buffer$2.isBuffer(b)) {
    return false;
  }

  // buffer sizes should be well-known information, so despite this
  // shortcutting, it doesn't leak any information about the *contents* of the
  // buffers.
  if (a.length !== b.length) {
    return false;
  }

  var c = 0;
  for (var i = 0; i < a.length; i++) {
    /*jshint bitwise:false */
    c |= a[i] ^ b[i]; // XOR
  }
  return c === 0;
}

bufferEq.install = function() {
  Buffer$2.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
    return bufferEq(this, that);
  };
};

var origBufEqual = Buffer$2.prototype.equal;
var origSlowBufEqual = SlowBuffer.prototype.equal;
bufferEq.restore = function() {
  Buffer$2.prototype.equal = origBufEqual;
  SlowBuffer.prototype.equal = origSlowBufEqual;
};

function getParamSize(keySize) {
	var result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);
	return result;
}

var paramBytesForAlg = {
	ES256: getParamSize(256),
	ES384: getParamSize(384),
	ES512: getParamSize(521)
};

function getParamBytesForAlg(alg) {
	var paramBytes = paramBytesForAlg[alg];
	if (paramBytes) {
		return paramBytes;
	}

	throw new Error('Unknown algorithm "' + alg + '"');
}

var paramBytesForAlg_1 = getParamBytesForAlg;

var Buffer$3 = safeBuffer.Buffer;



var MAX_OCTET = 0x80,
	CLASS_UNIVERSAL = 0,
	PRIMITIVE_BIT = 0x20,
	TAG_SEQ = 0x10,
	TAG_INT = 0x02,
	ENCODED_TAG_SEQ = (TAG_SEQ | PRIMITIVE_BIT) | (CLASS_UNIVERSAL << 6),
	ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);

function base64Url(base64) {
	return base64
		.replace(/=/g, '')
		.replace(/\+/g, '-')
		.replace(/\//g, '_');
}

function signatureAsBuffer(signature) {
	if (Buffer$3.isBuffer(signature)) {
		return signature;
	} else if ('string' === typeof signature) {
		return Buffer$3.from(signature, 'base64');
	}

	throw new TypeError('ECDSA signature must be a Base64 string or a Buffer');
}

function derToJose(signature, alg) {
	signature = signatureAsBuffer(signature);
	var paramBytes = paramBytesForAlg_1(alg);

	// the DER encoded param should at most be the param size, plus a padding
	// zero, since due to being a signed integer
	var maxEncodedParamLength = paramBytes + 1;

	var inputLength = signature.length;

	var offset = 0;
	if (signature[offset++] !== ENCODED_TAG_SEQ) {
		throw new Error('Could not find expected "seq"');
	}

	var seqLength = signature[offset++];
	if (seqLength === (MAX_OCTET | 1)) {
		seqLength = signature[offset++];
	}

	if (inputLength - offset < seqLength) {
		throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
	}

	if (signature[offset++] !== ENCODED_TAG_INT) {
		throw new Error('Could not find expected "int" for "r"');
	}

	var rLength = signature[offset++];

	if (inputLength - offset - 2 < rLength) {
		throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
	}

	if (maxEncodedParamLength < rLength) {
		throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
	}

	var rOffset = offset;
	offset += rLength;

	if (signature[offset++] !== ENCODED_TAG_INT) {
		throw new Error('Could not find expected "int" for "s"');
	}

	var sLength = signature[offset++];

	if (inputLength - offset !== sLength) {
		throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
	}

	if (maxEncodedParamLength < sLength) {
		throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
	}

	var sOffset = offset;
	offset += sLength;

	if (offset !== inputLength) {
		throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
	}

	var rPadding = paramBytes - rLength,
		sPadding = paramBytes - sLength;

	var dst = Buffer$3.allocUnsafe(rPadding + rLength + sPadding + sLength);

	for (offset = 0; offset < rPadding; ++offset) {
		dst[offset] = 0;
	}
	signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);

	offset = paramBytes;

	for (var o = offset; offset < o + sPadding; ++offset) {
		dst[offset] = 0;
	}
	signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);

	dst = dst.toString('base64');
	dst = base64Url(dst);

	return dst;
}

function countPadding(buf, start, stop) {
	var padding = 0;
	while (start + padding < stop && buf[start + padding] === 0) {
		++padding;
	}

	var needsSign = buf[start + padding] >= MAX_OCTET;
	if (needsSign) {
		--padding;
	}

	return padding;
}

function joseToDer(signature, alg) {
	signature = signatureAsBuffer(signature);
	var paramBytes = paramBytesForAlg_1(alg);

	var signatureBytes = signature.length;
	if (signatureBytes !== paramBytes * 2) {
		throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
	}

	var rPadding = countPadding(signature, 0, paramBytes);
	var sPadding = countPadding(signature, paramBytes, signature.length);
	var rLength = paramBytes - rPadding;
	var sLength = paramBytes - sPadding;

	var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;

	var shortLength = rsBytes < MAX_OCTET;

	var dst = Buffer$3.allocUnsafe((shortLength ? 2 : 3) + rsBytes);

	var offset = 0;
	dst[offset++] = ENCODED_TAG_SEQ;
	if (shortLength) {
		// Bit 8 has value "0"
		// bits 7-1 give the length.
		dst[offset++] = rsBytes;
	} else {
		// Bit 8 of first octet has value "1"
		// bits 7-1 give the number of additional length octets.
		dst[offset++] = MAX_OCTET	| 1;
		// length, base 256
		dst[offset++] = rsBytes & 0xff;
	}
	dst[offset++] = ENCODED_TAG_INT;
	dst[offset++] = rLength;
	if (rPadding < 0) {
		dst[offset++] = 0;
		offset += signature.copy(dst, offset, 0, paramBytes);
	} else {
		offset += signature.copy(dst, offset, rPadding, paramBytes);
	}
	dst[offset++] = ENCODED_TAG_INT;
	dst[offset++] = sLength;
	if (sPadding < 0) {
		dst[offset++] = 0;
		signature.copy(dst, offset, paramBytes);
	} else {
		signature.copy(dst, offset, paramBytes + sPadding);
	}

	return dst;
}

var ecdsaSigFormatter = {
	derToJose: derToJose,
	joseToDer: joseToDer
};

var Buffer$4 = safeBuffer.Buffer;




var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
var MSG_INVALID_SECRET = 'secret must be a string or buffer';
var MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';
var MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';

var supportsKeyObjects = typeof crypto.createPublicKey === 'function';
if (supportsKeyObjects) {
  MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';
  MSG_INVALID_SECRET += 'or a KeyObject';
}

function checkIsPublicKey(key) {
  if (Buffer$4.isBuffer(key)) {
    return;
  }

  if (typeof key === 'string') {
    return;
  }

  if (!supportsKeyObjects) {
    throw typeError(MSG_INVALID_VERIFIER_KEY);
  }

  if (typeof key !== 'object') {
    throw typeError(MSG_INVALID_VERIFIER_KEY);
  }

  if (typeof key.type !== 'string') {
    throw typeError(MSG_INVALID_VERIFIER_KEY);
  }

  if (typeof key.asymmetricKeyType !== 'string') {
    throw typeError(MSG_INVALID_VERIFIER_KEY);
  }

  if (typeof key.export !== 'function') {
    throw typeError(MSG_INVALID_VERIFIER_KEY);
  }
}
function checkIsPrivateKey(key) {
  if (Buffer$4.isBuffer(key)) {
    return;
  }

  if (typeof key === 'string') {
    return;
  }

  if (typeof key === 'object') {
    return;
  }

  throw typeError(MSG_INVALID_SIGNER_KEY);
}
function checkIsSecretKey(key) {
  if (Buffer$4.isBuffer(key)) {
    return;
  }

  if (typeof key === 'string') {
    return key;
  }

  if (!supportsKeyObjects) {
    throw typeError(MSG_INVALID_SECRET);
  }

  if (typeof key !== 'object') {
    throw typeError(MSG_INVALID_SECRET);
  }

  if (key.type !== 'secret') {
    throw typeError(MSG_INVALID_SECRET);
  }

  if (typeof key.export !== 'function') {
    throw typeError(MSG_INVALID_SECRET);
  }
}

function fromBase64(base64) {
  return base64
    .replace(/=/g, '')
    .replace(/\+/g, '-')
    .replace(/\//g, '_');
}

function toBase64(base64url) {
  base64url = base64url.toString();

  var padding = 4 - base64url.length % 4;
  if (padding !== 4) {
    for (var i = 0; i < padding; ++i) {
      base64url += '=';
    }
  }

  return base64url
    .replace(/\-/g, '+')
    .replace(/_/g, '/');
}

function typeError(template) {
  var args = [].slice.call(arguments, 1);
  var errMsg = util.format.bind(util, template).apply(null, args);
  return new TypeError(errMsg);
}

function bufferOrString(obj) {
  return Buffer$4.isBuffer(obj) || typeof obj === 'string';
}

function normalizeInput(thing) {
  if (!bufferOrString(thing))
    thing = JSON.stringify(thing);
  return thing;
}

function createHmacSigner(bits) {
  return function sign(thing, secret) {
    checkIsSecretKey(secret);
    thing = normalizeInput(thing);
    var hmac = crypto.createHmac('sha' + bits, secret);
    var sig = (hmac.update(thing), hmac.digest('base64'));
    return fromBase64(sig);
  }
}

function createHmacVerifier(bits) {
  return function verify(thing, signature, secret) {
    var computedSig = createHmacSigner(bits)(thing, secret);
    return bufferEqualConstantTime(Buffer$4.from(signature), Buffer$4.from(computedSig));
  }
}

function createKeySigner(bits) {
 return function sign(thing, privateKey) {
    checkIsPrivateKey(privateKey);
    thing = normalizeInput(thing);
    // Even though we are specifying "RSA" here, this works with ECDSA
    // keys as well.
    var signer = crypto.createSign('RSA-SHA' + bits);
    var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));
    return fromBase64(sig);
  }
}

function createKeyVerifier(bits) {
  return function verify(thing, signature, publicKey) {
    checkIsPublicKey(publicKey);
    thing = normalizeInput(thing);
    signature = toBase64(signature);
    var verifier = crypto.createVerify('RSA-SHA' + bits);
    verifier.update(thing);
    return verifier.verify(publicKey, signature, 'base64');
  }
}

function createPSSKeySigner(bits) {
  return function sign(thing, privateKey) {
    checkIsPrivateKey(privateKey);
    thing = normalizeInput(thing);
    var signer = crypto.createSign('RSA-SHA' + bits);
    var sig = (signer.update(thing), signer.sign({
      key: privateKey,
      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
    }, 'base64'));
    return fromBase64(sig);
  }
}

function createPSSKeyVerifier(bits) {
  return function verify(thing, signature, publicKey) {
    checkIsPublicKey(publicKey);
    thing = normalizeInput(thing);
    signature = toBase64(signature);
    var verifier = crypto.createVerify('RSA-SHA' + bits);
    verifier.update(thing);
    return verifier.verify({
      key: publicKey,
      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
    }, signature, 'base64');
  }
}

function createECDSASigner(bits) {
  var inner = createKeySigner(bits);
  return function sign() {
    var signature = inner.apply(null, arguments);
    signature = ecdsaSigFormatter.derToJose(signature, 'ES' + bits);
    return signature;
  };
}

function createECDSAVerifer(bits) {
  var inner = createKeyVerifier(bits);
  return function verify(thing, signature, publicKey) {
    signature = ecdsaSigFormatter.joseToDer(signature, 'ES' + bits).toString('base64');
    var result = inner(thing, signature, publicKey);
    return result;
  };
}

function createNoneSigner() {
  return function sign() {
    return '';
  }
}

function createNoneVerifier() {
  return function verify(thing, signature) {
    return signature === '';
  }
}

var jwa = function jwa(algorithm) {
  var signerFactories = {
    hs: createHmacSigner,
    rs: createKeySigner,
    ps: createPSSKeySigner,
    es: createECDSASigner,
    none: createNoneSigner,
  };
  var verifierFactories = {
    hs: createHmacVerifier,
    rs: createKeyVerifier,
    ps: createPSSKeyVerifier,
    es: createECDSAVerifer,
    none: createNoneVerifier,
  };
  var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
  if (!match)
    throw typeError(MSG_INVALID_ALGORITHM, algorithm);
  var algo = (match[1] || match[3]).toLowerCase();
  var bits = match[2];

  return {
    sign: signerFactories[algo](bits),
    verify: verifierFactories[algo](bits),
  }
};

/*global module*/
var Buffer$5 = buffer.Buffer;

var tostring = function toString(obj) {
  if (typeof obj === 'string')
    return obj;
  if (typeof obj === 'number' || Buffer$5.isBuffer(obj))
    return obj.toString();
  return JSON.stringify(obj);
};

/*global module*/
var Buffer$6 = safeBuffer.Buffer;






function base64url(string, encoding) {
  return Buffer$6
    .from(string, encoding)
    .toString('base64')
    .replace(/=/g, '')
    .replace(/\+/g, '-')
    .replace(/\//g, '_');
}

function jwsSecuredInput(header, payload, encoding) {
  encoding = encoding || 'utf8';
  var encodedHeader = base64url(tostring(header), 'binary');
  var encodedPayload = base64url(tostring(payload), encoding);
  return util.format('%s.%s', encodedHeader, encodedPayload);
}

function jwsSign(opts) {
  var header = opts.header;
  var payload = opts.payload;
  var secretOrKey = opts.secret || opts.privateKey;
  var encoding = opts.encoding;
  var algo = jwa(header.alg);
  var securedInput = jwsSecuredInput(header, payload, encoding);
  var signature = algo.sign(securedInput, secretOrKey);
  return util.format('%s.%s', securedInput, signature);
}

function SignStream(opts) {
  var secret = opts.secret||opts.privateKey||opts.key;
  var secretStream = new dataStream(secret);
  this.readable = true;
  this.header = opts.header;
  this.encoding = opts.encoding;
  this.secret = this.privateKey = this.key = secretStream;
  this.payload = new dataStream(opts.payload);
  this.secret.once('close', function () {
    if (!this.payload.writable && this.readable)
      this.sign();
  }.bind(this));

  this.payload.once('close', function () {
    if (!this.secret.writable && this.readable)
      this.sign();
  }.bind(this));
}
util.inherits(SignStream, stream);

SignStream.prototype.sign = function sign() {
  try {
    var signature = jwsSign({
      header: this.header,
      payload: this.payload.buffer,
      secret: this.secret.buffer,
      encoding: this.encoding
    });
    this.emit('done', signature);
    this.emit('data', signature);
    this.emit('end');
    this.readable = false;
    return signature;
  } catch (e) {
    this.readable = false;
    this.emit('error', e);
    this.emit('close');
  }
};

SignStream.sign = jwsSign;

var signStream = SignStream;

/*global module*/
var Buffer$7 = safeBuffer.Buffer;





var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;

function isObject(thing) {
  return Object.prototype.toString.call(thing) === '[object Object]';
}

function safeJsonParse(thing) {
  if (isObject(thing))
    return thing;
  try { return JSON.parse(thing); }
  catch (e) { return undefined; }
}

function headerFromJWS(jwsSig) {
  var encodedHeader = jwsSig.split('.', 1)[0];
  return safeJsonParse(Buffer$7.from(encodedHeader, 'base64').toString('binary'));
}

function securedInputFromJWS(jwsSig) {
  return jwsSig.split('.', 2).join('.');
}

function signatureFromJWS(jwsSig) {
  return jwsSig.split('.')[2];
}

function payloadFromJWS(jwsSig, encoding) {
  encoding = encoding || 'utf8';
  var payload = jwsSig.split('.')[1];
  return Buffer$7.from(payload, 'base64').toString(encoding);
}

function isValidJws(string) {
  return JWS_REGEX.test(string) && !!headerFromJWS(string);
}

function jwsVerify(jwsSig, algorithm, secretOrKey) {
  if (!algorithm) {
    var err = new Error("Missing algorithm parameter for jws.verify");
    err.code = "MISSING_ALGORITHM";
    throw err;
  }
  jwsSig = tostring(jwsSig);
  var signature = signatureFromJWS(jwsSig);
  var securedInput = securedInputFromJWS(jwsSig);
  var algo = jwa(algorithm);
  return algo.verify(securedInput, signature, secretOrKey);
}

function jwsDecode(jwsSig, opts) {
  opts = opts || {};
  jwsSig = tostring(jwsSig);

  if (!isValidJws(jwsSig))
    return null;

  var header = headerFromJWS(jwsSig);

  if (!header)
    return null;

  var payload = payloadFromJWS(jwsSig);
  if (header.typ === 'JWT' || opts.json)
    payload = JSON.parse(payload, opts.encoding);

  return {
    header: header,
    payload: payload,
    signature: signatureFromJWS(jwsSig)
  };
}

function VerifyStream(opts) {
  opts = opts || {};
  var secretOrKey = opts.secret||opts.publicKey||opts.key;
  var secretStream = new dataStream(secretOrKey);
  this.readable = true;
  this.algorithm = opts.algorithm;
  this.encoding = opts.encoding;
  this.secret = this.publicKey = this.key = secretStream;
  this.signature = new dataStream(opts.signature);
  this.secret.once('close', function () {
    if (!this.signature.writable && this.readable)
      this.verify();
  }.bind(this));

  this.signature.once('close', function () {
    if (!this.secret.writable && this.readable)
      this.verify();
  }.bind(this));
}
util.inherits(VerifyStream, stream);
VerifyStream.prototype.verify = function verify() {
  try {
    var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
    var obj = jwsDecode(this.signature.buffer, this.encoding);
    this.emit('done', valid, obj);
    this.emit('data', valid);
    this.emit('end');
    this.readable = false;
    return valid;
  } catch (e) {
    this.readable = false;
    this.emit('error', e);
    this.emit('close');
  }
};

VerifyStream.decode = jwsDecode;
VerifyStream.isValid = isValidJws;
VerifyStream.verify = jwsVerify;

var verifyStream = VerifyStream;

/*global exports*/



var ALGORITHMS = [
  'HS256', 'HS384', 'HS512',
  'RS256', 'RS384', 'RS512',
  'PS256', 'PS384', 'PS512',
  'ES256', 'ES384', 'ES512'
];

var ALGORITHMS_1 = ALGORITHMS;
var sign = signStream.sign;
var verify = verifyStream.verify;
var decode = verifyStream.decode;
var isValid = verifyStream.isValid;
var createSign = function createSign(opts) {
  return new signStream(opts);
};
var createVerify = function createVerify(opts) {
  return new verifyStream(opts);
};

var jws = {
	ALGORITHMS: ALGORITHMS_1,
	sign: sign,
	verify: verify,
	decode: decode,
	isValid: isValid,
	createSign: createSign,
	createVerify: createVerify
};

var decode$1 = function (jwt, options) {
  options = options || {};
  var decoded = jws.decode(jwt, options);
  if (!decoded) { return null; }
  var payload = decoded.payload;

  //try parse the payload
  if(typeof payload === 'string') {
    try {
      var obj = JSON.parse(payload);
      if(obj !== null && typeof obj === 'object') {
        payload = obj;
      }
    } catch (e) { }
  }

  //return header if `complete` option is enabled.  header includes claims
  //such as `kid` and `alg` used to select the key within a JWKS needed to
  //verify the signature
  if (options.complete === true) {
    return {
      header: decoded.header,
      payload: payload,
      signature: decoded.signature
    };
  }
  return payload;
};

var JsonWebTokenError = function (message, error) {
  Error.call(this, message);
  if(Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  }
  this.name = 'JsonWebTokenError';
  this.message = message;
  if (error) this.inner = error;
};

JsonWebTokenError.prototype = Object.create(Error.prototype);
JsonWebTokenError.prototype.constructor = JsonWebTokenError;

var JsonWebTokenError_1 = JsonWebTokenError;

var NotBeforeError = function (message, date) {
  JsonWebTokenError_1.call(this, message);
  this.name = 'NotBeforeError';
  this.date = date;
};

NotBeforeError.prototype = Object.create(JsonWebTokenError_1.prototype);

NotBeforeError.prototype.constructor = NotBeforeError;

var NotBeforeError_1 = NotBeforeError;

var TokenExpiredError = function (message, expiredAt) {
  JsonWebTokenError_1.call(this, message);
  this.name = 'TokenExpiredError';
  this.expiredAt = expiredAt;
};

TokenExpiredError.prototype = Object.create(JsonWebTokenError_1.prototype);

TokenExpiredError.prototype.constructor = TokenExpiredError;

var TokenExpiredError_1 = TokenExpiredError;

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse$2(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse$2(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

var timespan = function (time, iat) {
  var timestamp = iat || Math.floor(Date.now() / 1000);

  if (typeof time === 'string') {
    var milliseconds = ms(time);
    if (typeof milliseconds === 'undefined') {
      return;
    }
    return Math.floor(timestamp + milliseconds / 1000);
  } else if (typeof time === 'number') {
    return timestamp + time;
  } else {
    return;
  }

};

var semver = createCommonjsModule(function (module, exports) {
exports = module.exports = SemVer;

var debug;
/* istanbul ignore next */
if (typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
  debug = function () {
    var args = Array.prototype.slice.call(arguments, 0);
    args.unshift('SEMVER');
    console.log.apply(console, args);
  };
} else {
  debug = function () {};
}

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0';

var MAX_LENGTH = 256;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */ 9007199254740991;

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16;

// The actual regexps go on exports.re
var re = exports.re = [];
var src = exports.src = [];
var R = 0;

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++;
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
var NUMERICIDENTIFIERLOOSE = R++;
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++;
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';

// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++;
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')';

var MAINVERSIONLOOSE = R++;
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++;
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')';

var PRERELEASEIDENTIFIERLOOSE = R++;
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')';

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++;
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

var PRERELEASELOOSE = R++;
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++;
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++;
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++;
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?';

src[FULL] = '^' + FULLPLAIN + '$';

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?';

var LOOSE = R++;
src[LOOSE] = '^' + LOOSEPLAIN + '$';

var GTLT = R++;
src[GTLT] = '((?:<|>)?=?)';

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++;
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
var XRANGEIDENTIFIER = R++;
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

var XRANGEPLAIN = R++;
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?';

var XRANGEPLAINLOOSE = R++;
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?';

var XRANGE = R++;
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
var XRANGELOOSE = R++;
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++;
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])';

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++;
src[LONETILDE] = '(?:~>?)';

var TILDETRIM = R++;
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
var tildeTrimReplace = '$1~';

var TILDE = R++;
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
var TILDELOOSE = R++;
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++;
src[LONECARET] = '(?:\\^)';

var CARETTRIM = R++;
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
var caretTrimReplace = '$1^';

var CARET = R++;
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
var CARETLOOSE = R++;
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++;
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
var COMPARATOR = R++;
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++;
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
var comparatorTrimReplace = '$1$2$3';

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++;
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$';

var HYPHENRANGELOOSE = R++;
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$';

// Star ranges basically just allow anything at all.
var STAR = R++;
src[STAR] = '(<|>)?=?\\s*\\*';

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i]);
  if (!re[i]) {
    re[i] = new RegExp(src[i]);
  }
}

exports.parse = parse;
function parse (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  if (version.length > MAX_LENGTH) {
    return null
  }

  var r = options.loose ? re[LOOSE] : re[FULL];
  if (!r.test(version)) {
    return null
  }

  try {
    return new SemVer(version, options)
  } catch (er) {
    return null
  }
}

exports.valid = valid;
function valid (version, options) {
  var v = parse(version, options);
  return v ? v.version : null
}

exports.clean = clean;
function clean (version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null
}

exports.SemVer = SemVer;

function SemVer (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }
  if (version instanceof SemVer) {
    if (version.loose === options.loose) {
      return version
    } else {
      version = version.version;
    }
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version)
  }

  if (version.length > MAX_LENGTH) {
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
  }

  if (!(this instanceof SemVer)) {
    return new SemVer(version, options)
  }

  debug('SemVer', version, options);
  this.options = options;
  this.loose = !!options.loose;

  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

  if (!m) {
    throw new TypeError('Invalid Version: ' + version)
  }

  this.raw = version;

  // these are actually numbers
  this.major = +m[1];
  this.minor = +m[2];
  this.patch = +m[3];

  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
    throw new TypeError('Invalid major version')
  }

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
    throw new TypeError('Invalid minor version')
  }

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
    throw new TypeError('Invalid patch version')
  }

  // numberify any prerelease numeric ids
  if (!m[4]) {
    this.prerelease = [];
  } else {
    this.prerelease = m[4].split('.').map(function (id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id;
        if (num >= 0 && num < MAX_SAFE_INTEGER) {
          return num
        }
      }
      return id
    });
  }

  this.build = m[5] ? m[5].split('.') : [];
  this.format();
}

SemVer.prototype.format = function () {
  this.version = this.major + '.' + this.minor + '.' + this.patch;
  if (this.prerelease.length) {
    this.version += '-' + this.prerelease.join('.');
  }
  return this.version
};

SemVer.prototype.toString = function () {
  return this.version
};

SemVer.prototype.compare = function (other) {
  debug('SemVer.compare', this.version, this.options, other);
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options);
  }

  return this.compareMain(other) || this.comparePre(other)
};

SemVer.prototype.compareMain = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options);
  }

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch)
};

SemVer.prototype.comparePre = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options);
  }

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length) {
    return -1
  } else if (!this.prerelease.length && other.prerelease.length) {
    return 1
  } else if (!this.prerelease.length && !other.prerelease.length) {
    return 0
  }

  var i = 0;
  do {
    var a = this.prerelease[i];
    var b = other.prerelease[i];
    debug('prerelease compare', i, a, b);
    if (a === undefined && b === undefined) {
      return 0
    } else if (b === undefined) {
      return 1
    } else if (a === undefined) {
      return -1
    } else if (a === b) {
      continue
    } else {
      return compareIdentifiers(a, b)
    }
  } while (++i)
};

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function (release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor = 0;
      this.major++;
      this.inc('pre', identifier);
      break
    case 'preminor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor++;
      this.inc('pre', identifier);
      break
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0;
      this.inc('patch', identifier);
      this.inc('pre', identifier);
      break
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0) {
        this.inc('patch', identifier);
      }
      this.inc('pre', identifier);
      break

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0) {
        this.major++;
      }
      this.minor = 0;
      this.patch = 0;
      this.prerelease = [];
      break
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0) {
        this.minor++;
      }
      this.patch = 0;
      this.prerelease = [];
      break
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0) {
        this.patch++;
      }
      this.prerelease = [];
      break
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0) {
        this.prerelease = [0];
      } else {
        var i = this.prerelease.length;
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++;
            i = -2;
          }
        }
        if (i === -1) {
          // didn't increment anything
          this.prerelease.push(0);
        }
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1])) {
            this.prerelease = [identifier, 0];
          }
        } else {
          this.prerelease = [identifier, 0];
        }
      }
      break

    default:
      throw new Error('invalid increment argument: ' + release)
  }
  this.format();
  this.raw = this.version;
  return this
};

exports.inc = inc;
function inc (version, release, loose, identifier) {
  if (typeof (loose) === 'string') {
    identifier = loose;
    loose = undefined;
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version
  } catch (er) {
    return null
  }
}

exports.diff = diff;
function diff (version1, version2) {
  if (eq(version1, version2)) {
    return null
  } else {
    var v1 = parse(version1);
    var v2 = parse(version2);
    var prefix = '';
    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre';
      var defaultResult = 'prerelease';
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key
        }
      }
    }
    return defaultResult // may be undefined
  }
}

exports.compareIdentifiers = compareIdentifiers;

var numeric = /^[0-9]+$/;
function compareIdentifiers (a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

exports.rcompareIdentifiers = rcompareIdentifiers;
function rcompareIdentifiers (a, b) {
  return compareIdentifiers(b, a)
}

exports.major = major;
function major (a, loose) {
  return new SemVer(a, loose).major
}

exports.minor = minor;
function minor (a, loose) {
  return new SemVer(a, loose).minor
}

exports.patch = patch;
function patch (a, loose) {
  return new SemVer(a, loose).patch
}

exports.compare = compare;
function compare (a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose))
}

exports.compareLoose = compareLoose;
function compareLoose (a, b) {
  return compare(a, b, true)
}

exports.rcompare = rcompare;
function rcompare (a, b, loose) {
  return compare(b, a, loose)
}

exports.sort = sort;
function sort (list, loose) {
  return list.sort(function (a, b) {
    return exports.compare(a, b, loose)
  })
}

exports.rsort = rsort;
function rsort (list, loose) {
  return list.sort(function (a, b) {
    return exports.rcompare(a, b, loose)
  })
}

exports.gt = gt;
function gt (a, b, loose) {
  return compare(a, b, loose) > 0
}

exports.lt = lt;
function lt (a, b, loose) {
  return compare(a, b, loose) < 0
}

exports.eq = eq;
function eq (a, b, loose) {
  return compare(a, b, loose) === 0
}

exports.neq = neq;
function neq (a, b, loose) {
  return compare(a, b, loose) !== 0
}

exports.gte = gte;
function gte (a, b, loose) {
  return compare(a, b, loose) >= 0
}

exports.lte = lte;
function lte (a, b, loose) {
  return compare(a, b, loose) <= 0
}

exports.cmp = cmp;
function cmp (a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object')
        a = a.version;
      if (typeof b === 'object')
        b = b.version;
      return a === b

    case '!==':
      if (typeof a === 'object')
        a = a.version;
      if (typeof b === 'object')
        b = b.version;
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError('Invalid operator: ' + op)
  }
}

exports.Comparator = Comparator;
function Comparator (comp, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose) {
      return comp
    } else {
      comp = comp.value;
    }
  }

  if (!(this instanceof Comparator)) {
    return new Comparator(comp, options)
  }

  debug('comparator', comp, options);
  this.options = options;
  this.loose = !!options.loose;
  this.parse(comp);

  if (this.semver === ANY) {
    this.value = '';
  } else {
    this.value = this.operator + this.semver.version;
  }

  debug('comp', this);
}

var ANY = {};
Comparator.prototype.parse = function (comp) {
  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var m = comp.match(r);

  if (!m) {
    throw new TypeError('Invalid comparator: ' + comp)
  }

  this.operator = m[1];
  if (this.operator === '=') {
    this.operator = '';
  }

  // if it literally is just '>' or '' then allow anything.
  if (!m[2]) {
    this.semver = ANY;
  } else {
    this.semver = new SemVer(m[2], this.options.loose);
  }
};

Comparator.prototype.toString = function () {
  return this.value
};

Comparator.prototype.test = function (version) {
  debug('Comparator.test', version, this.options.loose);

  if (this.semver === ANY) {
    return true
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options);
  }

  return cmp(version, this.operator, this.semver, this.options)
};

Comparator.prototype.intersects = function (comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required')
  }

  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  var rangeTmp;

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, options);
    return satisfies(this.value, rangeTmp, options)
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, options);
    return satisfies(comp.semver, rangeTmp, options)
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>');
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<');
  var sameSemVer = this.semver.version === comp.semver.version;
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=');
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'));
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'));

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
};

exports.Range = Range;
function Range (range, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    };
  }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range
    } else {
      return new Range(range.raw, options)
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options)
  }

  if (!(this instanceof Range)) {
    return new Range(range, options)
  }

  this.options = options;
  this.loose = !!options.loose;
  this.includePrerelease = !!options.includePrerelease;

  // First, split based on boolean or ||
  this.raw = range;
  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
    return this.parseRange(range.trim())
  }, this).filter(function (c) {
    // throw out any that are not relevant for whatever reason
    return c.length
  });

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range)
  }

  this.format();
}

Range.prototype.format = function () {
  this.range = this.set.map(function (comps) {
    return comps.join(' ').trim()
  }).join('||').trim();
  return this.range
};

Range.prototype.toString = function () {
  return this.range
};

Range.prototype.parseRange = function (range) {
  var loose = this.options.loose;
  range = range.trim();
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
  range = range.replace(hr, hyphenReplace);
  debug('hyphen replace', range);
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
  debug('comparator trim', range, re[COMPARATORTRIM]);

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace);

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace);

  // normalize spaces
  range = range.split(/\s+/).join(' ');

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var set = range.split(' ').map(function (comp) {
    return parseComparator(comp, this.options)
  }, this).join(' ').split(/\s+/);
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function (comp) {
      return !!comp.match(compRe)
    });
  }
  set = set.map(function (comp) {
    return new Comparator(comp, this.options)
  }, this);

  return set
};

Range.prototype.intersects = function (range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required')
  }

  return this.set.some(function (thisComparators) {
    return thisComparators.every(function (thisComparator) {
      return range.set.some(function (rangeComparators) {
        return rangeComparators.every(function (rangeComparator) {
          return thisComparator.intersects(rangeComparator, options)
        })
      })
    })
  })
};

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators;
function toComparators (range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value
    }).join(' ').trim().split(' ')
  })
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator (comp, options) {
  debug('comp', comp, options);
  comp = replaceCarets(comp, options);
  debug('caret', comp);
  comp = replaceTildes(comp, options);
  debug('tildes', comp);
  comp = replaceXRanges(comp, options);
  debug('xrange', comp);
  comp = replaceStars(comp, options);
  debug('stars', comp);
  return comp
}

function isX (id) {
  return !id || id.toLowerCase() === 'x' || id === '*'
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options)
  }).join(' ')
}

function replaceTilde (comp, options) {
  var r = options.loose ? re[TILDELOOSE] : re[TILDE];
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr);
    var ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    } else if (pr) {
      debug('replaceTilde pr', pr);
      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
            ' <' + M + '.' + (+m + 1) + '.0';
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0';
    }

    debug('tilde return', ret);
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options)
  }).join(' ')
}

function replaceCaret (comp, options) {
  debug('caret', comp, options);
  var r = options.loose ? re[CARETLOOSE] : re[CARET];
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr);
    var ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (isX(p)) {
      if (M === '0') {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      } else {
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
      }
    } else if (pr) {
      debug('replaceCaret pr', pr);
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + m + '.' + (+p + 1);
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0';
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
              ' <' + (+M + 1) + '.0.0';
      }
    } else {
      debug('no pr');
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1);
        } else {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0';
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0';
      }
    }

    debug('caret return', ret);
    return ret
  })
}

function replaceXRanges (comp, options) {
  debug('replaceXRanges', comp, options);
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options)
  }).join(' ')
}

function replaceXRange (comp, options) {
  comp = comp.trim();
  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    var xM = isX(M);
    var xm = xM || isX(m);
    var xp = xm || isX(p);
    var anyX = xp;

    if (gtlt === '=' && anyX) {
      gtlt = '';
    }

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0;
      }
      p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>=';
        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';
        if (xm) {
          M = +M + 1;
        } else {
          m = +m + 1;
        }
      }

      ret = gtlt + M + '.' + m + '.' + p;
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    }

    debug('xRange return', ret);

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars (comp, options) {
  debug('replaceStars', comp, options);
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '')
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) {
  if (isX(fM)) {
    from = '';
  } else if (isX(fm)) {
    from = '>=' + fM + '.0.0';
  } else if (isX(fp)) {
    from = '>=' + fM + '.' + fm + '.0';
  } else {
    from = '>=' + from;
  }

  if (isX(tM)) {
    to = '';
  } else if (isX(tm)) {
    to = '<' + (+tM + 1) + '.0.0';
  } else if (isX(tp)) {
    to = '<' + tM + '.' + (+tm + 1) + '.0';
  } else if (tpr) {
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
  } else {
    to = '<=' + to;
  }

  return (from + ' ' + to).trim()
}

// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function (version) {
  if (!version) {
    return false
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options);
  }

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options)) {
      return true
    }
  }
  return false
};

function testSet (set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (i = 0; i < set.length; i++) {
      debug(set[i].semver);
      if (set[i].semver === ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver;
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}

exports.satisfies = satisfies;
function satisfies (version, range, options) {
  try {
    range = new Range(range, options);
  } catch (er) {
    return false
  }
  return range.test(version)
}

exports.maxSatisfying = maxSatisfying;
function maxSatisfying (versions, range, options) {
  var max = null;
  var maxSV = null;
  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v;
        maxSV = new SemVer(max, options);
      }
    }
  });
  return max
}

exports.minSatisfying = minSatisfying;
function minSatisfying (versions, range, options) {
  var min = null;
  var minSV = null;
  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v;
        minSV = new SemVer(min, options);
      }
    }
  });
  return min
}

exports.minVersion = minVersion;
function minVersion (range, loose) {
  range = new Range(range, loose);

  var minver = new SemVer('0.0.0');
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0');
  if (range.test(minver)) {
    return minver
  }

  minver = null;
  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];

    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version);
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++;
          } else {
            compver.prerelease.push(0);
          }
          compver.raw = compver.format();
          /* fallthrough */
        case '':
        case '>=':
          if (!minver || gt(minver, compver)) {
            minver = compver;
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error('Unexpected operation: ' + comparator.operator)
      }
    });
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}

exports.validRange = validRange;
function validRange (range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr;
function ltr (version, range, options) {
  return outside(version, range, '<', options)
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr;
function gtr (version, range, options) {
  return outside(version, range, '>', options)
}

exports.outside = outside;
function outside (version, range, hilo, options) {
  version = new SemVer(version, options);
  range = new Range(range, options);

  var gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt;
      ltefn = lte;
      ltfn = lt;
      comp = '>';
      ecomp = '>=';
      break
    case '<':
      gtfn = lt;
      ltefn = gte;
      ltfn = gt;
      comp = '<';
      ecomp = '<=';
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];

    var high = null;
    var low = null;

    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0');
      }
      high = high || comparator;
      low = low || comparator;
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator;
      }
    });

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

exports.prerelease = prerelease;
function prerelease (version, options) {
  var parsed = parse(version, options);
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}

exports.intersects = intersects;
function intersects (r1, r2, options) {
  r1 = new Range(r1, options);
  r2 = new Range(r2, options);
  return r1.intersects(r2)
}

exports.coerce = coerce;
function coerce (version) {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  var match = version.match(re[COERCE]);

  if (match == null) {
    return null
  }

  return parse(match[1] +
    '.' + (match[2] || '0') +
    '.' + (match[3] || '0'))
}
});
var semver_1 = semver.SEMVER_SPEC_VERSION;
var semver_2 = semver.re;
var semver_3 = semver.src;
var semver_4 = semver.parse;
var semver_5 = semver.valid;
var semver_6 = semver.clean;
var semver_7 = semver.SemVer;
var semver_8 = semver.inc;
var semver_9 = semver.diff;
var semver_10 = semver.compareIdentifiers;
var semver_11 = semver.rcompareIdentifiers;
var semver_12 = semver.major;
var semver_13 = semver.minor;
var semver_14 = semver.patch;
var semver_15 = semver.compare;
var semver_16 = semver.compareLoose;
var semver_17 = semver.rcompare;
var semver_18 = semver.sort;
var semver_19 = semver.rsort;
var semver_20 = semver.gt;
var semver_21 = semver.lt;
var semver_22 = semver.eq;
var semver_23 = semver.neq;
var semver_24 = semver.gte;
var semver_25 = semver.lte;
var semver_26 = semver.cmp;
var semver_27 = semver.Comparator;
var semver_28 = semver.Range;
var semver_29 = semver.toComparators;
var semver_30 = semver.satisfies;
var semver_31 = semver.maxSatisfying;
var semver_32 = semver.minSatisfying;
var semver_33 = semver.minVersion;
var semver_34 = semver.validRange;
var semver_35 = semver.ltr;
var semver_36 = semver.gtr;
var semver_37 = semver.outside;
var semver_38 = semver.prerelease;
var semver_39 = semver.intersects;
var semver_40 = semver.coerce;

var psSupported = semver.satisfies(process.version, '^6.12.0 || >=8.0.0');

var PUB_KEY_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512'];
var RSA_KEY_ALGS = ['RS256', 'RS384', 'RS512'];
var HS_ALGS = ['HS256', 'HS384', 'HS512'];

if (psSupported) {
  PUB_KEY_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');
  RSA_KEY_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');
}

var verify$1 = function (jwtString, secretOrPublicKey, options, callback) {
  if ((typeof options === 'function') && !callback) {
    callback = options;
    options = {};
  }

  if (!options) {
    options = {};
  }

  //clone this object since we are going to mutate it.
  options = Object.assign({}, options);

  var done;

  if (callback) {
    done = callback;
  } else {
    done = function(err, data) {
      if (err) throw err;
      return data;
    };
  }

  if (options.clockTimestamp && typeof options.clockTimestamp !== 'number') {
    return done(new JsonWebTokenError_1('clockTimestamp must be a number'));
  }

  if (options.nonce !== undefined && (typeof options.nonce !== 'string' || options.nonce.trim() === '')) {
    return done(new JsonWebTokenError_1('nonce must be a non-empty string'));
  }

  var clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);

  if (!jwtString){
    return done(new JsonWebTokenError_1('jwt must be provided'));
  }

  if (typeof jwtString !== 'string') {
    return done(new JsonWebTokenError_1('jwt must be a string'));
  }

  var parts = jwtString.split('.');

  if (parts.length !== 3){
    return done(new JsonWebTokenError_1('jwt malformed'));
  }

  var decodedToken;

  try {
    decodedToken = decode$1(jwtString, { complete: true });
  } catch(err) {
    return done(err);
  }

  if (!decodedToken) {
    return done(new JsonWebTokenError_1('invalid token'));
  }

  var header = decodedToken.header;
  var getSecret;

  if(typeof secretOrPublicKey === 'function') {
    if(!callback) {
      return done(new JsonWebTokenError_1('verify must be called asynchronous if secret or public key is provided as a callback'));
    }

    getSecret = secretOrPublicKey;
  }
  else {
    getSecret = function(header, secretCallback) {
      return secretCallback(null, secretOrPublicKey);
    };
  }

  return getSecret(header, function(err, secretOrPublicKey) {
    if(err) {
      return done(new JsonWebTokenError_1('error in secret or public key callback: ' + err.message));
    }

    var hasSignature = parts[2].trim() !== '';

    if (!hasSignature && secretOrPublicKey){
      return done(new JsonWebTokenError_1('jwt signature is required'));
    }

    if (hasSignature && !secretOrPublicKey) {
      return done(new JsonWebTokenError_1('secret or public key must be provided'));
    }

    if (!hasSignature && !options.algorithms) {
      options.algorithms = ['none'];
    }

    if (!options.algorithms) {
      options.algorithms = ~secretOrPublicKey.toString().indexOf('BEGIN CERTIFICATE') ||
        ~secretOrPublicKey.toString().indexOf('BEGIN PUBLIC KEY') ? PUB_KEY_ALGS :
        ~secretOrPublicKey.toString().indexOf('BEGIN RSA PUBLIC KEY') ? RSA_KEY_ALGS : HS_ALGS;

    }

    if (!~options.algorithms.indexOf(decodedToken.header.alg)) {
      return done(new JsonWebTokenError_1('invalid algorithm'));
    }

    var valid;

    try {
      valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey);
    } catch (e) {
      return done(e);
    }

    if (!valid) {
      return done(new JsonWebTokenError_1('invalid signature'));
    }

    var payload = decodedToken.payload;

    if (typeof payload.nbf !== 'undefined' && !options.ignoreNotBefore) {
      if (typeof payload.nbf !== 'number') {
        return done(new JsonWebTokenError_1('invalid nbf value'));
      }
      if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {
        return done(new NotBeforeError_1('jwt not active', new Date(payload.nbf * 1000)));
      }
    }

    if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {
      if (typeof payload.exp !== 'number') {
        return done(new JsonWebTokenError_1('invalid exp value'));
      }
      if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
        return done(new TokenExpiredError_1('jwt expired', new Date(payload.exp * 1000)));
      }
    }

    if (options.audience) {
      var audiences = Array.isArray(options.audience) ? options.audience : [options.audience];
      var target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];

      var match = target.some(function (targetAudience) {
        return audiences.some(function (audience) {
          return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
        });
      });

      if (!match) {
        return done(new JsonWebTokenError_1('jwt audience invalid. expected: ' + audiences.join(' or ')));
      }
    }

    if (options.issuer) {
      var invalid_issuer =
              (typeof options.issuer === 'string' && payload.iss !== options.issuer) ||
              (Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1);

      if (invalid_issuer) {
        return done(new JsonWebTokenError_1('jwt issuer invalid. expected: ' + options.issuer));
      }
    }

    if (options.subject) {
      if (payload.sub !== options.subject) {
        return done(new JsonWebTokenError_1('jwt subject invalid. expected: ' + options.subject));
      }
    }

    if (options.jwtid) {
      if (payload.jti !== options.jwtid) {
        return done(new JsonWebTokenError_1('jwt jwtid invalid. expected: ' + options.jwtid));
      }
    }

    if (options.nonce) {
      if (payload.nonce !== options.nonce) {
        return done(new JsonWebTokenError_1('jwt nonce invalid. expected: ' + options.nonce));
      }
    }

    if (options.maxAge) {
      if (typeof payload.iat !== 'number') {
        return done(new JsonWebTokenError_1('iat required when maxAge is specified'));
      }

      var maxAgeTimestamp = timespan(options.maxAge, payload.iat);
      if (typeof maxAgeTimestamp === 'undefined') {
        return done(new JsonWebTokenError_1('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
      }
      if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {
        return done(new TokenExpiredError_1('maxAge exceeded', new Date(maxAgeTimestamp * 1000)));
      }
    }

    if (options.complete === true) {
      var signature = decodedToken.signature;

      return done(null, {
        header: header,
        payload: payload,
        signature: signature
      });
    }

    return done(null, payload);
  });
};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$1 = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object),
    nativeMax = Math.max;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray$1(value) || isArguments$2(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$1.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$1.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes$1(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments$2(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&
    (!propertyIsEnumerable$1.call(value, 'callee') || objectToString$1.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray$1 = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction$1(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$1(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject$1(value) ? objectToString$1.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray$1(value) && isObjectLike(value) && objectToString$1.call(value) == stringTag);
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString$1.call(value) == symbolTag);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject$1(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$1(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object ? baseValues(object, keys(object)) : [];
}

var lodash_includes = includes$1;

/**
 * lodash 3.0.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$2 = objectProto$1.toString;

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false ||
    (isObjectLike$1(value) && objectToString$2.call(value) == boolTag);
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$1(value) {
  return !!value && typeof value == 'object';
}

var lodash_isboolean = isBoolean;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0,
    MAX_INTEGER$1 = 1.7976931348623157e+308,
    NAN$1 = 0 / 0;

/** `Object#toString` result references. */
var symbolTag$1 = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim$1 = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary$1 = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal$1 = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt$1 = parseInt;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$3 = objectProto$2.toString;

/**
 * Checks if `value` is an integer.
 *
 * **Note:** This method is based on
 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
 * @example
 *
 * _.isInteger(3);
 * // => true
 *
 * _.isInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isInteger(Infinity);
 * // => false
 *
 * _.isInteger('3');
 * // => false
 */
function isInteger(value) {
  return typeof value == 'number' && value == toInteger$1(value);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$2(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$2(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$1(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$2(value) && objectToString$3.call(value) == symbolTag$1);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite$1(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber$1(value);
  if (value === INFINITY$1 || value === -INFINITY$1) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER$1;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger$1(value) {
  var result = toFinite$1(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber$1(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol$1(value)) {
    return NAN$1;
  }
  if (isObject$2(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$2(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim$1, '');
  var isBinary = reIsBinary$1.test(value);
  return (isBinary || reIsOctal$1.test(value))
    ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex$1.test(value) ? NAN$1 : +value);
}

var lodash_isinteger = isInteger;

/**
 * lodash 3.0.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$4 = objectProto$3.toString;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$3(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
 * as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike$3(value) && objectToString$4.call(value) == numberTag);
}

var lodash_isnumber = isNumber;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg$1(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$4 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$4.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$5 = objectProto$4.toString;

/** Built-in value references. */
var getPrototype = overArg$1(Object.getPrototypeOf, Object);

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$4(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike$4(value) ||
      objectToString$5.call(value) != objectTag || isHostObject(value)) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$2.call(proto, 'constructor') && proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

var lodash_isplainobject = isPlainObject;

/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var stringTag$1 = '[object String]';

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$6 = objectProto$5.toString;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray$2 = Array.isArray;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$5(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString$1(value) {
  return typeof value == 'string' ||
    (!isArray$2(value) && isObjectLike$5(value) && objectToString$6.call(value) == stringTag$1);
}

var lodash_isstring = isString$1;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0,
    MAX_INTEGER$2 = 1.7976931348623157e+308,
    NAN$2 = 0 / 0;

/** `Object#toString` result references. */
var symbolTag$2 = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim$2 = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex$2 = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary$2 = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal$2 = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt$2 = parseInt;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$7 = objectProto$6.toString;

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) {
  var result;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = toInteger$2(n);
  return function() {
    if (--n > 0) {
      result = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = undefined;
    }
    return result;
  };
}

/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */
function once(func) {
  return before(2, func);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$3(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$6(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$2(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$6(value) && objectToString$7.call(value) == symbolTag$2);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite$2(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber$2(value);
  if (value === INFINITY$2 || value === -INFINITY$2) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER$2;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger$2(value) {
  var result = toFinite$2(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber$2(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol$2(value)) {
    return NAN$2;
  }
  if (isObject$3(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$3(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim$2, '');
  var isBinary = reIsBinary$2.test(value);
  return (isBinary || reIsOctal$2.test(value))
    ? freeParseInt$2(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex$2.test(value) ? NAN$2 : +value);
}

var lodash_once = once;

var SUPPORTED_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'HS256', 'HS384', 'HS512', 'none'];
if (psSupported) {
  SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');
}

var sign_options_schema = {
  expiresIn: { isValid: function(value) { return lodash_isinteger(value) || (lodash_isstring(value) && value); }, message: '"expiresIn" should be a number of seconds or string representing a timespan' },
  notBefore: { isValid: function(value) { return lodash_isinteger(value) || (lodash_isstring(value) && value); }, message: '"notBefore" should be a number of seconds or string representing a timespan' },
  audience: { isValid: function(value) { return lodash_isstring(value) || Array.isArray(value); }, message: '"audience" must be a string or array' },
  algorithm: { isValid: lodash_includes.bind(null, SUPPORTED_ALGS), message: '"algorithm" must be a valid string enum value' },
  header: { isValid: lodash_isplainobject, message: '"header" must be an object' },
  encoding: { isValid: lodash_isstring, message: '"encoding" must be a string' },
  issuer: { isValid: lodash_isstring, message: '"issuer" must be a string' },
  subject: { isValid: lodash_isstring, message: '"subject" must be a string' },
  jwtid: { isValid: lodash_isstring, message: '"jwtid" must be a string' },
  noTimestamp: { isValid: lodash_isboolean, message: '"noTimestamp" must be a boolean' },
  keyid: { isValid: lodash_isstring, message: '"keyid" must be a string' },
  mutatePayload: { isValid: lodash_isboolean, message: '"mutatePayload" must be a boolean' }
};

var registered_claims_schema = {
  iat: { isValid: lodash_isnumber, message: '"iat" should be a number of seconds' },
  exp: { isValid: lodash_isnumber, message: '"exp" should be a number of seconds' },
  nbf: { isValid: lodash_isnumber, message: '"nbf" should be a number of seconds' }
};

function validate(schema, allowUnknown, object, parameterName) {
  if (!lodash_isplainobject(object)) {
    throw new Error('Expected "' + parameterName + '" to be a plain object.');
  }
  Object.keys(object)
    .forEach(function(key) {
      var validator = schema[key];
      if (!validator) {
        if (!allowUnknown) {
          throw new Error('"' + key + '" is not allowed in "' + parameterName + '"');
        }
        return;
      }
      if (!validator.isValid(object[key])) {
        throw new Error(validator.message);
      }
    });
}

function validateOptions(options) {
  return validate(sign_options_schema, false, options, 'options');
}

function validatePayload(payload) {
  return validate(registered_claims_schema, true, payload, 'payload');
}

var options_to_payload = {
  'audience': 'aud',
  'issuer': 'iss',
  'subject': 'sub',
  'jwtid': 'jti'
};

var options_for_objects = [
  'expiresIn',
  'notBefore',
  'noTimestamp',
  'audience',
  'issuer',
  'subject',
  'jwtid',
];

var sign$1 = function (payload, secretOrPrivateKey, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  } else {
    options = options || {};
  }

  var isObjectPayload = typeof payload === 'object' &&
                        !Buffer.isBuffer(payload);

  var header = Object.assign({
    alg: options.algorithm || 'HS256',
    typ: isObjectPayload ? 'JWT' : undefined,
    kid: options.keyid
  }, options.header);

  function failure(err) {
    if (callback) {
      return callback(err);
    }
    throw err;
  }

  if (!secretOrPrivateKey && options.algorithm !== 'none') {
    return failure(new Error('secretOrPrivateKey must have a value'));
  }

  if (typeof payload === 'undefined') {
    return failure(new Error('payload is required'));
  } else if (isObjectPayload) {
    try {
      validatePayload(payload);
    }
    catch (error) {
      return failure(error);
    }
    if (!options.mutatePayload) {
      payload = Object.assign({},payload);
    }
  } else {
    var invalid_options = options_for_objects.filter(function (opt) {
      return typeof options[opt] !== 'undefined';
    });

    if (invalid_options.length > 0) {
      return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + (typeof payload ) + ' payload'));
    }
  }

  if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') {
    return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
  }

  if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') {
    return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
  }

  try {
    validateOptions(options);
  }
  catch (error) {
    return failure(error);
  }

  var timestamp = payload.iat || Math.floor(Date.now() / 1000);

  if (options.noTimestamp) {
    delete payload.iat;
  } else if (isObjectPayload) {
    payload.iat = timestamp;
  }

  if (typeof options.notBefore !== 'undefined') {
    try {
      payload.nbf = timespan(options.notBefore, timestamp);
    }
    catch (err) {
      return failure(err);
    }
    if (typeof payload.nbf === 'undefined') {
      return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
    }
  }

  if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') {
    try {
      payload.exp = timespan(options.expiresIn, timestamp);
    }
    catch (err) {
      return failure(err);
    }
    if (typeof payload.exp === 'undefined') {
      return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
    }
  }

  Object.keys(options_to_payload).forEach(function (key) {
    var claim = options_to_payload[key];
    if (typeof options[key] !== 'undefined') {
      if (typeof payload[claim] !== 'undefined') {
        return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
      }
      payload[claim] = options[key];
    }
  });

  var encoding = options.encoding || 'utf8';

  if (typeof callback === 'function') {
    callback = callback && lodash_once(callback);

    jws.createSign({
      header: header,
      privateKey: secretOrPrivateKey,
      payload: payload,
      encoding: encoding
    }).once('error', callback)
      .once('done', function (signature) {
        callback(null, signature);
      });
  } else {
    return jws.sign({header: header, payload: payload, secret: secretOrPrivateKey, encoding: encoding});
  }
};

var jsonwebtoken = {
  decode: decode$1,
  verify: verify$1,
  sign: sign$1,
  JsonWebTokenError: JsonWebTokenError_1,
  NotBeforeError: NotBeforeError_1,
  TokenExpiredError: TokenExpiredError_1,
};

var jwtDecodeTF = (function (Module) {
  Module.defineUtil(__filename$A, flowRuntime_umd.annotate( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asKey, asToken) {
      var abNoVerify,
          _args = arguments;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              abNoVerify = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
              _context.next = 3;
              return abNoVerify ? jsonwebtoken.decode(asToken) : jsonwebtoken.verify(asToken, asKey);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), flowRuntime_umd["function"](flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asToken", flowRuntime_umd.string()), flowRuntime_umd.param("abNoVerify", flowRuntime_umd["boolean"]()))));
});

var __filename$B = '/leanes/utils/jwtEncode.js';

var jwtEncodeTF = (function (Module) {
  Module.defineUtil(__filename$B, flowRuntime_umd.annotate( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asKey, asMessage, asAlgorithm) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return jsonwebtoken.sign(asMessage, asKey, {
                algorithm: asAlgorithm
              });

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }(), flowRuntime_umd["function"](flowRuntime_umd.param("asKey", flowRuntime_umd.string()), flowRuntime_umd.param("asMessage", flowRuntime_umd.any()), flowRuntime_umd.param("asAlgorithm", flowRuntime_umd.string()))));
});

var __filename$C = '/leanes/utils/request.js';

var bind = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

var isBuffer = function isBuffer (obj) {
  return obj != null && obj.constructor != null &&
    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
};

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString$1 = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray$3(val) {
  return toString$1.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString$1.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView$1(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString$2(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber$1(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject$4(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate$1(val) {
  return toString$1.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString$1.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString$1.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction$2(val) {
  return toString$1.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject$4(val) && isFunction$2(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach$1(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray$3(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach$1(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach$1(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

var utils = {
  isArray: isArray$3,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView$1,
  isString: isString$2,
  isNumber: isNumber$1,
  isObject: isObject$4,
  isUndefined: isUndefined,
  isDate: isDate$1,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction$2,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach$1,
  merge: merge,
  extend: extend,
  trim: trim
};

var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
var enhanceError = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
var createError = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
var settle = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
var buildURL = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

var isURLSameOrigin = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);

var cookies = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);

var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies$1 = cookies;

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies$1.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = xhr;
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = xhr;
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

var defaults_1 = defaults;

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

var InterceptorManager_1 = InterceptorManager;

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
var transformData = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

var isCancel = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
var isAbsoluteURL = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
var combineURLs = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
var dispatchRequest = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults_1.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager_1(),
    response: new InterceptorManager_1()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults_1, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

var Axios_1 = Axios;

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

var Cancel_1 = Cancel;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel_1(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

var CancelToken_1 = CancelToken;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
var spread = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios_1(defaultConfig);
  var instance = bind(Axios_1.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios_1.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults_1);

// Expose Axios class to allow class inheritance
axios.Axios = Axios_1;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults_1, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = Cancel_1;
axios.CancelToken = CancelToken_1;
axios.isCancel = isCancel;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;

var axios_1 = axios;

// Allow use of default import syntax in TypeScript
var default_1 = axios;
axios_1.default = default_1;

var axios$1 = axios_1;

var LegacyResponseInterface = flowRuntime_umd.type("LegacyResponseInterface", function (LegacyResponseInterface) {
  var T = LegacyResponseInterface.typeParameter("T", undefined, flowRuntime_umd.tdz(function () {
    return AxiosResponse;
  }, "AxiosResponse"));
  return flowRuntime_umd.object(flowRuntime_umd.property("body", flowRuntime_umd.nullable(flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("data")))), flowRuntime_umd.property("headers", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("headers"))), flowRuntime_umd.property("status", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("status"))), flowRuntime_umd.property("message", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("statusText"))));
});

var AxiosResponse = flowRuntime_umd.type("AxiosResponse", function (AxiosResponse) {
  var T = AxiosResponse.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = AxiosResponse.typeParameter("R", undefined, T);
  return flowRuntime_umd.object(flowRuntime_umd.property("data", R), flowRuntime_umd.property("status", flowRuntime_umd.number()), flowRuntime_umd.property("statusText", flowRuntime_umd.string()), flowRuntime_umd.property("headers", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("config", flowRuntime_umd.ref(flowRuntime_umd.tdz(function () {
    return Config;
  }, "Config"), T, R)), flowRuntime_umd.property("request", flowRuntime_umd.nullable(flowRuntime_umd.any())));
});
var AxiosTransformer = flowRuntime_umd.type("AxiosTransformer", function (AxiosTransformer) {
  var T = AxiosTransformer.typeParameter("T");
  return flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("data", T), flowRuntime_umd.param("headers", flowRuntime_umd.ref("object"), true), flowRuntime_umd["return"](flowRuntime_umd.ref("object")))));
});
var AxiosBasicCredentials = flowRuntime_umd.type("AxiosBasicCredentials", flowRuntime_umd.object(flowRuntime_umd.property("username", flowRuntime_umd.string()), flowRuntime_umd.property("password", flowRuntime_umd.string())));
var AxiosProxyConfig = flowRuntime_umd.type("AxiosProxyConfig", flowRuntime_umd.object(flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("port", flowRuntime_umd.number()), flowRuntime_umd.property("auth", flowRuntime_umd.object(flowRuntime_umd.property("username", flowRuntime_umd.string()), flowRuntime_umd.property("password", flowRuntime_umd.string())), true), flowRuntime_umd.property("protocol", flowRuntime_umd.string(), true)));
var Method = flowRuntime_umd.type("Method", flowRuntime_umd.union(flowRuntime_umd.string("get"), flowRuntime_umd.string("GET"), flowRuntime_umd.string("delete"), flowRuntime_umd.string("DELETE"), flowRuntime_umd.string("head"), flowRuntime_umd.string("HEAD"), flowRuntime_umd.string("options"), flowRuntime_umd.string("OPTIONS"), flowRuntime_umd.string("post"), flowRuntime_umd.string("POST"), flowRuntime_umd.string("put"), flowRuntime_umd.string("PUT"), flowRuntime_umd.string("patch"), flowRuntime_umd.string("PATCH")));
var ResponseType = flowRuntime_umd.type("ResponseType", flowRuntime_umd.union(flowRuntime_umd.string("arraybuffer"), flowRuntime_umd.string("blob"), flowRuntime_umd.string("document"), flowRuntime_umd.string("json"), flowRuntime_umd.string("text"), flowRuntime_umd.string("stream")));
var RequestArgumentsT = flowRuntime_umd.type("RequestArgumentsT", function (RequestArgumentsT) {
  var T = RequestArgumentsT.typeParameter("T"),
      R = RequestArgumentsT.typeParameter("R", undefined, T);
  return flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(flowRuntime_umd.tdz(function () {
    return Config;
  }, "Config"), T, R)));
}); // export type AxiosPromise<T = any, R = T> = Promise<AxiosResponse<T, R>>;

var Config = flowRuntime_umd.type("Config", function (Config) {
  var T = Config.typeParameter("T"),
      R = Config.typeParameter("R", undefined, T);
  return flowRuntime_umd.object(flowRuntime_umd.property("url", flowRuntime_umd.string(), true), flowRuntime_umd.property("method", Method, true), flowRuntime_umd.property("baseURL", flowRuntime_umd.string(), true), flowRuntime_umd.property("transformRequest", flowRuntime_umd.union(flowRuntime_umd.ref(AxiosTransformer, T), flowRuntime_umd.array(flowRuntime_umd.ref(AxiosTransformer, T)), flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.number(), flowRuntime_umd.ref(AxiosTransformer, T)))), true), flowRuntime_umd.property("transformResponse", flowRuntime_umd.union(flowRuntime_umd.ref(AxiosTransformer, R), flowRuntime_umd.array(flowRuntime_umd.ref(AxiosTransformer, R)), flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.number(), flowRuntime_umd.ref(AxiosTransformer, T)))), true), flowRuntime_umd.property("headers", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("params", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("paramsSerializer", flowRuntime_umd["function"](flowRuntime_umd.param("params", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("data", flowRuntime_umd.any(), true), flowRuntime_umd.property("body", flowRuntime_umd.any(), true), flowRuntime_umd.property("form", flowRuntime_umd.any(), true), flowRuntime_umd.property("timeout", flowRuntime_umd.number(), true), flowRuntime_umd.property("withCredentials", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("adapter", flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T"),
        R = _fn.typeParameter("R");

    return [flowRuntime_umd.param("config", flowRuntime_umd.ref(Config, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(AxiosResponse, T, R)))];
  }), true), flowRuntime_umd.property("auth", AxiosBasicCredentials, true), flowRuntime_umd.property("responseType", ResponseType, true), flowRuntime_umd.property("xsrfCookieName", flowRuntime_umd.string(), true), flowRuntime_umd.property("xsrfHeaderName", flowRuntime_umd.string(), true), flowRuntime_umd.property("onUploadProgress", flowRuntime_umd["function"](flowRuntime_umd.param("progressEvent", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), true), flowRuntime_umd.property("onDownloadProgress", flowRuntime_umd["function"](flowRuntime_umd.param("progressEvent", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), true), flowRuntime_umd.property("maxContentLength", flowRuntime_umd.number(), true), flowRuntime_umd.property("validateStatus", flowRuntime_umd["function"](flowRuntime_umd.param("status", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), true), flowRuntime_umd.property("followRedirect", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("maxRedirects", flowRuntime_umd.number(), true), flowRuntime_umd.property("socketPath", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["null"]()), true), flowRuntime_umd.property("httpAgent", flowRuntime_umd.mixed(), true), flowRuntime_umd.property("httpsAgent", flowRuntime_umd.mixed(), true), flowRuntime_umd.property("proxy", flowRuntime_umd.union(AxiosProxyConfig, flowRuntime_umd["boolean"](false)), true), flowRuntime_umd.property("cancelToken", flowRuntime_umd.tdz(function () {
    return CancelToken$1;
  }, "CancelToken"), true));
});
var LegacyRequestInterface = flowRuntime_umd.type("LegacyRequestInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](function (_fn2) {
  var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn2.typeParameter("R", undefined, T),
      L = _fn2.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("head", flowRuntime_umd["function"](function (_fn3) {
  var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn3.typeParameter("R", undefined, T),
      L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("options", flowRuntime_umd["function"](function (_fn4) {
  var T = _fn4.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn4.typeParameter("R", undefined, T),
      L = _fn4.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("get", flowRuntime_umd["function"](function (_fn5) {
  var T = _fn5.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn5.typeParameter("R", undefined, T),
      L = _fn5.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("post", flowRuntime_umd["function"](function (_fn6) {
  var T = _fn6.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn6.typeParameter("R", undefined, T),
      L = _fn6.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("put", flowRuntime_umd["function"](function (_fn7) {
  var T = _fn7.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn7.typeParameter("R", undefined, T),
      L = _fn7.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("patch", flowRuntime_umd["function"](function (_fn8) {
  var T = _fn8.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn8.typeParameter("R", undefined, T),
      L = _fn8.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("delete", flowRuntime_umd["function"](function (_fn9) {
  var T = _fn9.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn9.typeParameter("R", undefined, T),
      L = _fn9.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
}))));

var Cancel$1 = flowRuntime_umd.type("Cancel", flowRuntime_umd.object(flowRuntime_umd.property("message", flowRuntime_umd.string())));
var Canceler = flowRuntime_umd.type("Canceler", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("message", flowRuntime_umd.string(), true), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));
var CancelTokenStatic = flowRuntime_umd.type("CancelTokenStatic", flowRuntime_umd.object(flowRuntime_umd.property("new", flowRuntime_umd["function"](flowRuntime_umd.param("executor", flowRuntime_umd["function"](flowRuntime_umd.param("cancel", Canceler), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd["return"](flowRuntime_umd.tdz(function () {
  return CancelToken$1;
}, "CancelToken")))), flowRuntime_umd.property("source", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.tdz(function () {
  return CancelTokenSource;
}, "CancelTokenSource"))))));
var CancelToken$1 = flowRuntime_umd.type("CancelToken", flowRuntime_umd.object(flowRuntime_umd.property("promise", flowRuntime_umd.ref("Promise", Cancel$1)), flowRuntime_umd.property("reason", Cancel$1, true), flowRuntime_umd.property("throwIfRequested", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]())))));
var CancelTokenSource = flowRuntime_umd.type("CancelTokenSource", flowRuntime_umd.object(flowRuntime_umd.property("token", CancelToken$1), flowRuntime_umd.property("cancel", Canceler)));
var AxiosInterceptorManager = flowRuntime_umd.type("AxiosInterceptorManager", function (AxiosInterceptorManager) {
  var V = AxiosInterceptorManager.typeParameter("V");
  return flowRuntime_umd.object(flowRuntime_umd.property("use", flowRuntime_umd["function"](flowRuntime_umd.param("onFulfilled", flowRuntime_umd["function"](flowRuntime_umd.param("value", V), flowRuntime_umd["return"](flowRuntime_umd.union(V, flowRuntime_umd.ref("Promise", V)))), true), flowRuntime_umd.param("onRejected", flowRuntime_umd["function"](flowRuntime_umd.param("error", flowRuntime_umd.mixed()), flowRuntime_umd["return"](flowRuntime_umd.mixed())), true), flowRuntime_umd["return"](flowRuntime_umd.number()))), flowRuntime_umd.property("eject", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))));
});
var RequestT = flowRuntime_umd.type("RequestT", flowRuntime_umd.spread(LegacyRequestInterface, flowRuntime_umd.object(flowRuntime_umd.property("defaults", flowRuntime_umd.intersection(flowRuntime_umd.object(flowRuntime_umd.property("headers", flowRuntime_umd.ref("object"))), flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential()))), flowRuntime_umd.property("interceptors", flowRuntime_umd.object(flowRuntime_umd.property("request", flowRuntime_umd.ref(AxiosInterceptorManager, flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential()))), flowRuntime_umd.property("response", flowRuntime_umd.ref(AxiosInterceptorManager, flowRuntime_umd.ref(AxiosResponse, flowRuntime_umd.mixed()))))), flowRuntime_umd.property("CancelToken", CancelTokenStatic), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd.param("config", flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential())), flowRuntime_umd["return"](LegacyRequestInterface))), flowRuntime_umd.property("all", flowRuntime_umd["function"](function (_fn10) {
  var T = _fn10.typeParameter("T");

  return [flowRuntime_umd.param("values", flowRuntime_umd.array(flowRuntime_umd.union(T, flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(T)))];
})), flowRuntime_umd.property("spread", flowRuntime_umd["function"](function (_fn11) {
  var T = _fn11.typeParameter("T"),
      R = _fn11.typeParameter("R");

  return [flowRuntime_umd.param("callback", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.array(T)), flowRuntime_umd["return"](R))), flowRuntime_umd["return"](flowRuntime_umd["function"](flowRuntime_umd.param("array", flowRuntime_umd.array(T)), flowRuntime_umd["return"](R)))];
})))));
 // export type RequestT = RequestT;

var LegacyResponseInterface$1 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$1 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$1 = flowRuntime_umd.tdz(function () {
  return Config;
});
var requestTF = (function (Module) {
  var assign = Module.NS.Utils.assign;
  var convertToAxiosOptions = flowRuntime_umd.annotate(function convertToAxiosOptions(asMethod, asUrl) {
    var ahOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    ahOptions.headers = ahOptions.headers || {};
    ahOptions.headers['Accept'] = ahOptions.headers['Accept'] || ahOptions.headers['accept'] || '*/*';
    delete ahOptions.headers['accept'];
    var vhOptions = assign({}, ahOptions, {
      method: asMethod,
      url: asUrl
    });

    if (vhOptions.followRedirect) {
      vhOptions.maxRedirects = vhOptions.maxRedirects || 10;
    } else {
      delete vhOptions.maxRedirects;
    }

    delete vhOptions.followRedirect;
    var data = vhOptions.body || vhOptions.form;
    delete vhOptions.body;
    delete vhOptions.form;
    vhOptions.data = vhOptions.data || data;
    vhOptions.timeout = vhOptions.timeout || 2 * 60 * 1000; // ms

    vhOptions.maxContentLength = vhOptions.maxContentLength || 2 * 1024 * 1024; //byte

    return vhOptions;
  }, flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn.typeParameter("R", undefined, T);

    var L = _fn.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref(Config$1, T, R))];
  }));
  var request = flowRuntime_umd.annotate(function request(asMethod, asUrl) {
    var ahOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var vhOptions = convertToAxiosOptions(asMethod, asUrl, ahOptions);
    return axios$1.request(vhOptions).then(flowRuntime_umd.annotate(function (res) {
      return {
        body: res.data,
        headers: res.headers,
        status: res.status,
        message: res.statusText
      };
    }, flowRuntime_umd["function"](function (_fn2) {
      var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any());

      var R = _fn2.typeParameter("R", undefined, T);

      return [flowRuntime_umd.param("res", flowRuntime_umd.ref(AxiosResponse$1, flowRuntime_umd.flowInto(T), flowRuntime_umd.flowInto(R)))];
    })))["catch"](function (err) {
      return {
        body: undefined,
        headers: {},
        status: err.code || err.response.status || 500,
        message: err.message
      };
    });
  }, flowRuntime_umd["function"](function (_fn3) {
    var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn3.typeParameter("R", undefined, T);

    var L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asMethod", flowRuntime_umd.string()), flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  Reflect.defineProperty(request, 'defaults', {
    value: new Proxy(axios$1.defaults, {})
  });
  Reflect.defineProperty(request, 'interceptors', {
    value: new Proxy(axios$1.interceptors, {})
  });
  Reflect.defineProperty(request, 'all', {
    value: new Proxy(axios$1.all, {})
  });
  Reflect.defineProperty(request, 'spread', {
    value: new Proxy(axios$1.spread, {})
  });
  Reflect.defineProperty(request, 'CancelToken', {
    value: new Proxy(axios$1.CancelToken, {})
  });
  Reflect.defineProperty(request, 'create', {
    value: new Proxy(function () {}, {
      apply: function apply(tmp1, tmp2, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            defaultOpts = _ref2[0];

        return new Proxy(request, {
          apply: function apply(target, thisValue, _ref3) {
            var _ref4 = _slicedToArray(_ref3, 3),
                asMethod = _ref4[0],
                asUrl = _ref4[1],
                _ref4$ = _ref4[2],
                ahOptions = _ref4$ === void 0 ? {} : _ref4$;

            return target.call(thisValue, asMethod, asUrl, assign({}, defaultOpts, ahOptions));
          },
          get: function get(target, name, receiver) {
            switch (false) {
              case !(name === 'get'):
              case !(name === 'delete'):
              case !(name === 'head'):
              case !(name === 'options'):
              case !(name === 'post'):
              case !(name === 'put'):
              case !(name === 'patch'):
                return function (asUrl) {
                  var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                  return target[name].call(target, asUrl, assign({}, defaultOpts, ahOptions));
                };

              case !(name === 'request'):
                return function (asMethod, asUrl) {
                  var ahOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                  return target.call(target, asMethod, asUrl, assign({}, defaultOpts, ahOptions));
                };

              default:
                return target[name];
            }
          }
        });
      }
    })
  });
  request.head = flowRuntime_umd.annotate(function head(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return request('HEAD', asUrl, ahOptions);
  }, flowRuntime_umd["function"](function (_fn4) {
    var T = _fn4.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn4.typeParameter("R", undefined, T);

    var L = _fn4.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.options = flowRuntime_umd.annotate(function options(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return request('OPTIONS', asUrl, ahOptions);
  }, flowRuntime_umd["function"](function (_fn5) {
    var T = _fn5.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn5.typeParameter("R", undefined, T);

    var L = _fn5.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.get = flowRuntime_umd.annotate(function get(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return request('GET', asUrl, ahOptions);
  }, flowRuntime_umd["function"](function (_fn6) {
    var T = _fn6.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn6.typeParameter("R", undefined, T);

    var L = _fn6.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.post = flowRuntime_umd.annotate(function post(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return request('POST', asUrl, ahOptions);
  }, flowRuntime_umd["function"](function (_fn7) {
    var T = _fn7.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn7.typeParameter("R", undefined, T);

    var L = _fn7.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.put = flowRuntime_umd.annotate(function put(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return request('PUT', asUrl, ahOptions);
  }, flowRuntime_umd["function"](function (_fn8) {
    var T = _fn8.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn8.typeParameter("R", undefined, T);

    var L = _fn8.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request.patch = flowRuntime_umd.annotate(function patch(asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return request('PATCH', asUrl, ahOptions);
  }, flowRuntime_umd["function"](function (_fn9) {
    var T = _fn9.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn9.typeParameter("R", undefined, T);

    var L = _fn9.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  request['delete'] = flowRuntime_umd.annotate(function (asUrl) {
    var ahOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return request('DELETE', asUrl, ahOptions);
  }, flowRuntime_umd["function"](function (_fn10) {
    var T = _fn10.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn10.typeParameter("R", undefined, T);

    var L = _fn10.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

    return [flowRuntime_umd.param("asUrl", flowRuntime_umd.string()), flowRuntime_umd.param("ahOptions", flowRuntime_umd.ref(Config$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }));
  Module.defineUtil(__filename$C, request);
  Module.defineUtil('convertToAxiosOptions', convertToAxiosOptions);
});

var __filename$D = '/leanes/utils/verifyPassword.js';

var verifyPasswordTF = (function (Module) {
  Module.defineUtil(__filename$D, function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$method = _ref.method,
        method = _ref$method === void 0 ? 'sha256' : _ref$method,
        salt = _ref.salt,
        storedHash = _ref.hash;

    var password = arguments.length > 1 ? arguments[1] : undefined;
    var generatedHash = crypto.createHash(method).update(salt + password).digest('hex');
    return storedHash === generatedHash;
  });
});

var __filename$E = '/leanes/mixins/ConfigurableMixin.js';

var ConfigurableMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      CONFIGURATION = _Module$NS.CONFIGURATION,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property;
  Module.defineMixin(__filename$E, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("configs", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "configs",
        get: function get() {
          return this.facade.getProxy(CONFIGURATION);
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "configs", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "configs"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$F = '/leanes/mixins/RelationsMixin.js';

var JoiT$7 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var RecordInterface$8 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$2 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var RecordStaticInterface = flowRuntime_umd.type("RecordStaticInterface", function (RecordStaticInterface) {
  var C = RecordStaticInterface.typeParameter("C", undefined, flowRuntime_umd.ref(CollectionInterface$2)),
      R = RecordStaticInterface.typeParameter("R", undefined, flowRuntime_umd.ref(RecordInterface$8));
  return flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", C), flowRuntime_umd["return"](R))), flowRuntime_umd.property("schema", flowRuntime_umd.ref(JoiT$7)), flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", C), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R)))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), flowRuntime_umd.property("recoverize", flowRuntime_umd["function"](flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", C), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(R))))), flowRuntime_umd.property("objectize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(R)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("makeSnapshot", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(R)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("parseRecordName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.property("findRecordByName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](RecordStaticInterface))), flowRuntime_umd.property("parentClassNames", flowRuntime_umd["function"](flowRuntime_umd.param("AbstractClass", flowRuntime_umd.nullable(RecordStaticInterface)), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("attributes", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref("AttributeConfigT")))), flowRuntime_umd.property("computeds", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref("ComputedConfigT")))), flowRuntime_umd.property("new", flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", C), flowRuntime_umd["return"](R))));
});

var RecordStaticInterface$1 = flowRuntime_umd.tdz(function () {
  return RecordStaticInterface;
});
var RelationInverseT = flowRuntime_umd.type("RelationInverseT", flowRuntime_umd.exactObject(flowRuntime_umd.property("recordClass", flowRuntime_umd.ref(RecordStaticInterface$1)), flowRuntime_umd.property("attrName", flowRuntime_umd.string()), flowRuntime_umd.property("relation", flowRuntime_umd.string())));

var RelationInverseT$1 = flowRuntime_umd.tdz(function () {
  return RelationInverseT;
});
var RelationConfigT$5 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationsMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method;
  Module.defineMixin(__filename$F, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("inverseFor", flowRuntime_umd.param("asAttrName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RelationInverseT$1))), flowRuntime_umd.staticMethod("relations", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(RelationConfigT$5))))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, null, [{
        key: "inverseFor",
        // Cucumber.inverseFor 'tomato' #-> {recordClass: App::Tomato, attrName: 'cucumbers', relation: 'hasMany'}
        value: function inverseFor(asAttrName) {
          var opts = this.relations[asAttrName];
          var RecordClass = this.findRecordByName(opts.recordName.call(this));
          var attrName = opts.inverse;
          var relation = RecordClass.relations[attrName].relation;
          return {
            recordClass: RecordClass,
            attrName: attrName,
            relation: relation
          };
        }
      }, {
        key: "relations",
        get: function get() {
          return this.metaObject.getGroup('relations', false);
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2, "inverseFor", [method], Object.getOwnPropertyDescriptor(_class2, "inverseFor"), _class2), _applyDecoratedDescriptor(_class2, "relations", [property], Object.getOwnPropertyDescriptor(_class2, "relations"), _class2)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$G = '/leanes/mixins/DelayableMixin.js';

var FacadeInterface$4 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var DelayableInterface = flowRuntime_umd.type("DelayableInterface", flowRuntime_umd.object(flowRuntime_umd.property("delay", flowRuntime_umd["function"](flowRuntime_umd.param("facade", flowRuntime_umd.ref(FacadeInterface$4)), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("queue", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))))));

var RecoverableStaticInterface$2 = flowRuntime_umd.tdz(function () {
  return RecoverableStaticInterface;
});
var DelayableInterface$1 = flowRuntime_umd.tdz(function () {
  return DelayableInterface;
});
var FacadeInterface$5 = flowRuntime_umd.tdz(function () {
  return FacadeInterface;
});
var DelayableMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      RESQUE = _Module$NS.RESQUE,
      DELAYED_JOBS_QUEUE = _Module$NS.DELAYED_JOBS_QUEUE,
      DELAYED_JOBS_SCRIPT = _Module$NS.DELAYED_JOBS_SCRIPT,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method;
  Module.defineMixin(__filename$G, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("_delayJob", flowRuntime_umd.param("facade", flowRuntime_umd.ref(FacadeInterface$5)), flowRuntime_umd.param("data", flowRuntime_umd.exactObject(flowRuntime_umd.property("moduleName", flowRuntime_umd.string()), flowRuntime_umd.property("replica", flowRuntime_umd.ref("object")), flowRuntime_umd.property("methodName", flowRuntime_umd.string()), flowRuntime_umd.property("args", flowRuntime_umd.ref("array")), flowRuntime_umd.property("opts", flowRuntime_umd.object(flowRuntime_umd.property("queue", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number())))))), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("queue", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), flowRuntime_umd.staticMethod("delay", flowRuntime_umd.param("facade", flowRuntime_umd.ref(FacadeInterface$5)), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("queue", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("delay", flowRuntime_umd.param("facade", flowRuntime_umd.ref(FacadeInterface$5)), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("queue", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "delay",
        value: function delay(facade) {
          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return new Proxy(this, {
            get: function get(target, name, receiver) {
              if (name === 'delay') {
                throw new Error('Method `delay` can not been delayed');
              }

              if (!(name in target) || typeof target[name] !== "function") {
                throw new Error("Method `".concat(name, "` absent in class ").concat(target.name, ".prototype"));
              }

              vcClass = target.constructor;

              var _vcClassType = flowRuntime_umd.ref(RecoverableStaticInterface$2, flowRuntime_umd.ref("Module"), flowRuntime_umd.ref("vcClass"));

              vcClass;
              return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var _len,
                    args,
                    _key,
                    data,
                    _args = arguments;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = _args[_key];
                        }

                        _context.t0 = target.moduleName();
                        _context.next = 4;
                        return vcClass.replicateObject(target);

                      case 4:
                        _context.t1 = _context.sent;
                        _context.t2 = name;
                        _context.t3 = args;
                        _context.t4 = opts;
                        data = {
                          moduleName: _context.t0,
                          replica: _context.t1,
                          methodName: _context.t2,
                          args: _context.t3,
                          opts: _context.t4
                        };
                        _context.next = 11;
                        return vcClass._delayJob(facade, data, opts);

                      case 11:
                        return _context.abrupt("return", _context.sent);

                      case 12:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
            }
          });
        }
      }], [{
        key: "_delayJob",
        // cpmDelayJob = PointerT(_Class.private(_Class.static(_Class.async({
        value: function () {
          var _delayJob2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(facade, data, options) {
            var queueName, resque, queue;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    queueName = options.queue;
                    resque = facade.getProxy(RESQUE);
                    _context2.next = 4;
                    return resque.get(queueName || DELAYED_JOBS_QUEUE);

                  case 4:
                    queue = _context2.sent;
                    _context2.next = 7;
                    return queue.delay(DELAYED_JOBS_SCRIPT, data, options.delayUntil);

                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function _delayJob(_x, _x2, _x3) {
            return _delayJob2.apply(this, arguments);
          }

          return _delayJob;
        }()
      }, {
        key: "delay",
        value: function delay(facade) {
          var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return new Proxy(this, {
            get: function get(target, name, receiver) {
              if (name === 'delay') {
                throw new Error('Method `delay` can not been delayed');
              }

              if (!(name in target) || typeof target[name] !== "function") {
                throw new Error("Method `".concat(name, "` absent in class ").concat(target.name));
              }

              var ApplicationModule = this.ApplicationModule;
              var Proto = target.constructor;

              var _ProtoType = flowRuntime_umd.ref(RecoverableStaticInterface$2, flowRuntime_umd.ref("Module"), flowRuntime_umd.ref(Proto));
              return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var _len2,
                    args,
                    _key2,
                    data,
                    _args3 = arguments;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        for (_len2 = _args3.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                          args[_key2] = _args3[_key2];
                        }

                        _context3.t0 = target.moduleName();
                        _context3.next = 4;
                        return Proto.replicateObject(target);

                      case 4:
                        _context3.t1 = _context3.sent;
                        _context3.t2 = name;
                        _context3.t3 = args;
                        _context3.t4 = opts;
                        data = {
                          moduleName: _context3.t0,
                          replica: _context3.t1,
                          methodName: _context3.t2,
                          args: _context3.t3,
                          opts: _context3.t4
                        };
                        _context3.next = 11;
                        return target._delayJob(facade, data, opts);

                      case 11:
                        return _context3.abrupt("return", _context3.sent);

                      case 12:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));
            }
          });
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2, "_delayJob", [method], Object.getOwnPropertyDescriptor(_class2, "_delayJob"), _class2), _applyDecoratedDescriptor(_class2, "delay", [method], Object.getOwnPropertyDescriptor(_class2, "delay"), _class2), _applyDecoratedDescriptor(_class2.prototype, "delay", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "delay"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$H = '/leanes/patterns/iterator/Cursor.js';

var CursorInterface$3 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var CursorTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var Cursor = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Cursor", function (Cursor) {
    var C = Cursor.typeParameter("C", undefined, flowRuntime_umd["null"]());
    var D = Cursor.typeParameter("D", undefined, flowRuntime_umd.object());
    var T = Cursor.typeParameter("T", undefined, flowRuntime_umd.array(D));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_currentIndex", flowRuntime_umd.number()), flowRuntime_umd.property("_array", flowRuntime_umd.any()), flowRuntime_umd.property("_collection", flowRuntime_umd.nullable(flowRuntime_umd.flowInto(C))), flowRuntime_umd.property("isClosed", flowRuntime_umd["boolean"]()), flowRuntime_umd.method("setCollection", flowRuntime_umd.param("aoCollection", flowRuntime_umd.flowInto(C)), flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$3, C, D))), flowRuntime_umd.method("setIterable", flowRuntime_umd.param("alArray", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$3, C, D))), flowRuntime_umd.method("toArray", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(D)))), flowRuntime_umd.method("next", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("hasNext", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("close", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("count", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))), flowRuntime_umd.method("forEach", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(D)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("map", function (_fn) {
      var R = _fn.typeParameter("R");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(D)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.flowInto(R), flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(R)))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R)))];
    }), flowRuntime_umd.method("filter", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(D)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(D)))), flowRuntime_umd.method("find", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(D)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("compact", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(D)))), flowRuntime_umd.method("reduce", function (_fn2) {
      var I = _fn2.typeParameter("I");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(I)), flowRuntime_umd.param("_arg1", flowRuntime_umd.flowInto(D)), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.flowInto(I), flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(I)))))), flowRuntime_umd.param("initialValue", flowRuntime_umd.flowInto(I)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
    }), flowRuntime_umd.method("first", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoCollection", flowRuntime_umd.nullable(C)), flowRuntime_umd.param("alArray", flowRuntime_umd.nullable(T)))];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Cursor, _CoreObject);

    var _super = _createSuper(Cursor);

    _createClass(Cursor, [{
      key: "setCollection",
      // ipnCurrentIndex = PointerT(Cursor.private({
      // iplArray = PointerT(Cursor.private({
      // ipoCollection = PointerT(Cursor.private({
      value: function setCollection(aoCollection) {
        this._collection = aoCollection;
        return this;
      }
    }, {
      key: "setIterable",
      value: function setIterable(alArray) {
        this._array = alArray;
        return this;
      }
    }, {
      key: "toArray",
      value: function () {
        var _toArray = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var results;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  results = [];

                case 1:
                  _context.next = 3;
                  return this.hasNext();

                case 3:
                  if (!_context.sent) {
                    _context.next = 11;
                    break;
                  }

                  _context.t0 = results;
                  _context.next = 7;
                  return this.next();

                case 7:
                  _context.t1 = _context.sent;

                  _context.t0.push.call(_context.t0, _context.t1);

                  _context.next = 1;
                  break;

                case 11:
                  return _context.abrupt("return", results);

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function toArray() {
          return _toArray.apply(this, arguments);
        }

        return toArray;
      }()
    }, {
      key: "next",
      value: function () {
        var _next = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var data;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this._array[this._currentIndex];

                case 2:
                  data = _context2.sent;
                  this._currentIndex++;
                  _context2.t0 = false;
                  _context2.next = _context2.t0 === !(data == null) ? 7 : _context2.t0 === (this._collection == null) ? 8 : 11;
                  break;

                case 7:
                  return _context2.abrupt("return", data);

                case 8:
                  _context2.next = 10;
                  return this._collection.normalize(data);

                case 10:
                  return _context2.abrupt("return", _context2.sent);

                case 11:
                  return _context2.abrupt("return", data);

                case 12:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function next() {
          return _next.apply(this, arguments);
        }

        return next;
      }()
    }, {
      key: "hasNext",
      value: function () {
        var _hasNext = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return !_.isNil(this._array[this._currentIndex]);

                case 2:
                  return _context3.abrupt("return", _context3.sent);

                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function hasNext() {
          return _hasNext.apply(this, arguments);
        }

        return hasNext;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var i, len;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  for (i = j = 0, len = this._array.length; j < len; i = ++j) {
                    delete this._array[i];
                  }

                  delete this._array;

                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function close() {
          return _close.apply(this, arguments);
        }

        return close;
      }()
    }, {
      key: "count",
      value: function () {
        var _count = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var array, length;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  array = this._array || [];
                  length = typeof array.length === "function" ? array.length() : undefined;
                  _context5.next = 4;
                  return length || array.length;

                case 4:
                  return _context5.abrupt("return", _context5.sent);

                case 5:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function count() {
          return _count.apply(this, arguments);
        }

        return count;
      }()
    }, {
      key: "forEach",
      value: function () {
        var _forEach = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(lambda) {
          var index;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  index = 0;
                  _context6.prev = 1;

                case 2:
                  _context6.next = 4;
                  return this.hasNext();

                case 4:
                  if (!_context6.sent) {
                    _context6.next = 14;
                    break;
                  }

                  _context6.t0 = lambda;
                  _context6.next = 8;
                  return this.next();

                case 8:
                  _context6.t1 = _context6.sent;
                  _context6.t2 = index++;
                  _context6.next = 12;
                  return (0, _context6.t0)(_context6.t1, _context6.t2);

                case 12:
                  _context6.next = 2;
                  break;

                case 14:
                  _context6.next = 21;
                  break;

                case 16:
                  _context6.prev = 16;
                  _context6.t3 = _context6["catch"](1);
                  _context6.next = 20;
                  return this.close();

                case 20:
                  throw _context6.t3;

                case 21:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this, [[1, 16]]);
        }));

        function forEach(_x) {
          return _forEach.apply(this, arguments);
        }

        return forEach;
      }()
    }, {
      key: "map",
      value: function () {
        var _map = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(lambda) {
          var index, results;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  index = 0;
                  _context7.prev = 1;
                  results = [];

                case 3:
                  _context7.next = 5;
                  return this.hasNext();

                case 5:
                  if (!_context7.sent) {
                    _context7.next = 18;
                    break;
                  }

                  _context7.t0 = results;
                  _context7.t1 = lambda;
                  _context7.next = 10;
                  return this.next();

                case 10:
                  _context7.t2 = _context7.sent;
                  _context7.t3 = index++;
                  _context7.next = 14;
                  return (0, _context7.t1)(_context7.t2, _context7.t3);

                case 14:
                  _context7.t4 = _context7.sent;

                  _context7.t0.push.call(_context7.t0, _context7.t4);

                  _context7.next = 3;
                  break;

                case 18:
                  return _context7.abrupt("return", results);

                case 21:
                  _context7.prev = 21;
                  _context7.t5 = _context7["catch"](1);
                  _context7.next = 25;
                  return this.close();

                case 25:
                  throw _context7.t5;

                case 26:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this, [[1, 21]]);
        }));

        function map(_x2) {
          return _map.apply(this, arguments);
        }

        return map;
      }()
    }, {
      key: "filter",
      value: function () {
        var _filter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(lambda) {
          var index, records, record;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  index = 0;
                  records = [];
                  _context8.prev = 2;

                case 3:
                  _context8.next = 5;
                  return this.hasNext();

                case 5:
                  if (!_context8.sent) {
                    _context8.next = 15;
                    break;
                  }

                  _context8.next = 8;
                  return this.next();

                case 8:
                  record = _context8.sent;
                  _context8.next = 11;
                  return lambda(record, index++);

                case 11:
                  if (!_context8.sent) {
                    _context8.next = 13;
                    break;
                  }

                  records.push(record);

                case 13:
                  _context8.next = 3;
                  break;

                case 15:
                  return _context8.abrupt("return", records);

                case 18:
                  _context8.prev = 18;
                  _context8.t0 = _context8["catch"](2);
                  _context8.next = 22;
                  return this.close();

                case 22:
                  throw _context8.t0;

                case 23:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this, [[2, 18]]);
        }));

        function filter(_x3) {
          return _filter.apply(this, arguments);
        }

        return filter;
      }()
    }, {
      key: "find",
      value: function () {
        var _find = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(lambda) {
          var index, _record, record;

          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  index = 0;
                  _record = null;
                  _context9.prev = 2;

                case 3:
                  _context9.next = 5;
                  return this.hasNext();

                case 5:
                  if (!_context9.sent) {
                    _context9.next = 16;
                    break;
                  }

                  _context9.next = 8;
                  return this.next();

                case 8:
                  record = _context9.sent;
                  _context9.next = 11;
                  return lambda(record, index++);

                case 11:
                  if (!_context9.sent) {
                    _context9.next = 14;
                    break;
                  }

                  _record = record;
                  return _context9.abrupt("break", 16);

                case 14:
                  _context9.next = 3;
                  break;

                case 16:
                  return _context9.abrupt("return", _record);

                case 19:
                  _context9.prev = 19;
                  _context9.t0 = _context9["catch"](2);
                  _context9.next = 23;
                  return this.close();

                case 23:
                  throw _context9.t0;

                case 24:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this, [[2, 19]]);
        }));

        function find(_x4) {
          return _find.apply(this, arguments);
        }

        return find;
      }()
    }, {
      key: "compact",
      value: function () {
        var _compact = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
          var _this2 = this;

          var results, _loop;

          return regeneratorRuntime.wrap(function _callee11$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  results = [];
                  _context12.prev = 1;
                  _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                    var rawResult, result;
                    return regeneratorRuntime.wrap(function _loop$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            rawResult = _this2._array[_this2._currentIndex];
                            ++_this2._currentIndex;

                            if (_.isEmpty(rawResult)) {
                              _context11.next = 7;
                              break;
                            }

                            _context11.next = 5;
                            return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                              return regeneratorRuntime.wrap(function _callee10$(_context10) {
                                while (1) {
                                  switch (_context10.prev = _context10.next) {
                                    case 0:
                                      _context10.t0 = false;
                                      _context10.next = _context10.t0 === (this._collection == null) ? 3 : 6;
                                      break;

                                    case 3:
                                      _context10.next = 5;
                                      return this._collection.normalize(rawResult);

                                    case 5:
                                      return _context10.abrupt("return", _context10.sent);

                                    case 6:
                                      return _context10.abrupt("return", rawResult);

                                    case 7:
                                    case "end":
                                      return _context10.stop();
                                  }
                                }
                              }, _callee10, this);
                            })).call(_this2);

                          case 5:
                            result = _context11.sent;
                            results.push(result);

                          case 7:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    }, _loop);
                  });

                case 3:
                  _context12.t0 = this._currentIndex;
                  _context12.next = 6;
                  return this.count();

                case 6:
                  _context12.t1 = _context12.sent;

                  if (!(_context12.t0 < _context12.t1)) {
                    _context12.next = 11;
                    break;
                  }

                  return _context12.delegateYield(_loop(), "t2", 9);

                case 9:
                  _context12.next = 3;
                  break;

                case 11:
                  return _context12.abrupt("return", results);

                case 14:
                  _context12.prev = 14;
                  _context12.t3 = _context12["catch"](1);
                  _context12.next = 18;
                  return this.close();

                case 18:
                  throw _context12.t3;

                case 19:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee11, this, [[1, 14]]);
        }));

        function compact() {
          return _compact.apply(this, arguments);
        }

        return compact;
      }()
    }, {
      key: "reduce",
      value: function () {
        var _reduce = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(lambda, initialValue) {
          var index, _initialValue;

          return regeneratorRuntime.wrap(function _callee12$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _context13.prev = 0;
                  index = 0;
                  _initialValue = initialValue;

                case 3:
                  _context13.next = 5;
                  return this.hasNext();

                case 5:
                  if (!_context13.sent) {
                    _context13.next = 17;
                    break;
                  }

                  _context13.t0 = lambda;
                  _context13.t1 = _initialValue;
                  _context13.next = 10;
                  return this.next();

                case 10:
                  _context13.t2 = _context13.sent;
                  _context13.t3 = index++;
                  _context13.next = 14;
                  return (0, _context13.t0)(_context13.t1, _context13.t2, _context13.t3);

                case 14:
                  _initialValue = _context13.sent;
                  _context13.next = 3;
                  break;

                case 17:
                  return _context13.abrupt("return", _initialValue);

                case 20:
                  _context13.prev = 20;
                  _context13.t4 = _context13["catch"](0);
                  _context13.next = 24;
                  return this.close();

                case 24:
                  throw _context13.t4;

                case 25:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee12, this, [[0, 20]]);
        }));

        function reduce(_x5, _x6) {
          return _reduce.apply(this, arguments);
        }

        return reduce;
      }()
    }, {
      key: "first",
      value: function () {
        var _first = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
          var result;
          return regeneratorRuntime.wrap(function _callee13$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _context14.prev = 0;
                  _context14.next = 3;
                  return this.hasNext();

                case 3:
                  if (!_context14.sent) {
                    _context14.next = 9;
                    break;
                  }

                  _context14.next = 6;
                  return this.next();

                case 6:
                  _context14.t0 = _context14.sent;
                  _context14.next = 10;
                  break;

                case 9:
                  _context14.t0 = null;

                case 10:
                  result = _context14.t0;
                  _context14.next = 13;
                  return this.close();

                case 13:
                  return _context14.abrupt("return", result);

                case 16:
                  _context14.prev = 16;
                  _context14.t1 = _context14["catch"](0);
                  _context14.next = 20;
                  return this.close();

                case 20:
                  throw _context14.t1;

                case 21:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee13, this, [[0, 16]]);
        }));

        function first() {
          return _first.apply(this, arguments);
        }

        return first;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
          return regeneratorRuntime.wrap(function _callee14$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee14, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
          return regeneratorRuntime.wrap(function _callee15$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee15, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Cursor() {
      var _this;

      var aoCollection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var alArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      _classCallCheck(this, Cursor);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_currentIndex", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_array", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_collection", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "isClosed", _descriptor4, _assertThisInitialized(_this));

      if (aoCollection != null) {
        _this._collection = aoCollection;
      }

      _this._array = alArray;
      return _this;
    }

    return Cursor;
  }(CoreObject), _class3.__filename = __filename$H, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_currentIndex", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_array", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_collection", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "isClosed", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "setCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setIterable", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setIterable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toArray", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toArray"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "next", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "next"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hasNext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasNext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "close", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "count", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "count"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "forEach", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "forEach"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "map", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "map"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "filter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "filter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "find", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "find"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "compact", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "compact"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reduce", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reduce"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "first", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "first"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$I = '/leanes/patterns/data_mapper/Transform.js';

var TransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      property = _Module$NS.property,
      joi = _Module$NS.Utils.joi;
  var Transform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Transform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref("JoiT"))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Transform, _CoreObject);

    var _super = _createSuper(Transform);

    function Transform() {
      _classCallCheck(this, Transform);

      return _super.apply(this, arguments);
    }

    _createClass(Transform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        if (serialized == null) {
          return null;
        }

        return serialized;
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        if (deserialized == null) {
          return null;
        }

        return deserialized;
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (deserialized == null) {
          return null;
        }

        return deserialized;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi.any().allow(null).optional();
      }
    }]);

    return Transform;
  }(CoreObject), _class3.__filename = __filename$I, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$J = '/leanes/patterns/data_mapper/StringTransform.js';

var JoiT$8 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var StringTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var StringTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("StringTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$8))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(StringTransform, _CoreObject);

    var _super = _createSuper(StringTransform);

    function StringTransform() {
      _classCallCheck(this, StringTransform);

      return _super.apply(this, arguments);
    }

    _createClass(StringTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        return _.isNil(serialized) ? null : String(serialized);
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        return _.isNil(deserialized) ? null : String(deserialized);
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (_.isNil(deserialized)) {
          return null;
        } else {
          return String(deserialized);
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi.string().allow(null).optional();
      }
    }]);

    return StringTransform;
  }(CoreObject), _class3.__filename = __filename$J, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$K = '/leanes/patterns/data_mapper/NumberTransform.js';

var JoiT$9 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var NumberTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var NumberTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("NumberTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$9))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(NumberTransform, _CoreObject);

    var _super = _createSuper(NumberTransform);

    function NumberTransform() {
      _classCallCheck(this, NumberTransform);

      return _super.apply(this, arguments);
    }

    _createClass(NumberTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        if (_.isNil(serialized)) {
          return null;
        } else {
          var transformed = Number(serialized);
          return _.isNumber(transformed) ? transformed : null;
        }
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        if (_.isNil(deserialized)) {
          return null;
        } else {
          var transformed = Number(deserialized);
          return _.isNumber(transformed) ? transformed : null;
        }
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (_.isNil(deserialized)) {
          return null;
        } else {
          var transformed = Number(deserialized);

          if (_.isNumber(transformed)) {
            return transformed;
          } else {
            return null;
          }
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi.number().allow(null).optional();
      }
    }]);

    return NumberTransform;
  }(CoreObject), _class3.__filename = __filename$K, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$L = '/leanes/patterns/data_mapper/PrimaryKeyTransform.js';

var JoiT$a = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var PrimaryKeyTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var PrimaryKeyTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PrimaryKeyTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$a))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(PrimaryKeyTransform, _CoreObject);

    var _super = _createSuper(PrimaryKeyTransform);

    function PrimaryKeyTransform() {
      _classCallCheck(this, PrimaryKeyTransform);

      return _super.apply(this, arguments);
    }

    _createClass(PrimaryKeyTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        return _.isNil(serialized) ? null : serialized;
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        return _.isNil(deserialized) ? null : deserialized;
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (_.isNil(deserialized)) {
          return null;
        } else {
          return deserialized;
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi.alternatives()["try"](joi.number(), joi.string()).allow(null).optional();
      }
    }]);

    return PrimaryKeyTransform;
  }(CoreObject), _class3.__filename = __filename$L, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$M = '/leanes/patterns/data_mapper/DateTransform.js';

var JoiT$b = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var DateTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var DateTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("DateTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$b))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("date")))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("date"))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("date"))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(DateTransform, _CoreObject);

    var _super = _createSuper(DateTransform);

    function DateTransform() {
      _classCallCheck(this, DateTransform);

      return _super.apply(this, arguments);
    }

    _createClass(DateTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        return _.isNil(serialized) ? null : new Date(serialized);
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        if (_.isDate(deserialized) && !_.isNaN(deserialized)) {
          return deserialized.toISOString();
        } else {
          return null;
        }
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (_.isDate(deserialized) && !_.isNaN(deserialized)) {
          return deserialized.toISOString();
        } else {
          return null;
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi.date().iso().allow(null).optional();
      }
    }]);

    return DateTransform;
  }(CoreObject), _class3.__filename = __filename$M, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$N = '/leanes/patterns/data_mapper/BooleanTransform.js';

var JoiT$c = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var BooleanTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var BooleanTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("BooleanTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$c))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(BooleanTransform, _CoreObject);

    var _super = _createSuper(BooleanTransform);

    function BooleanTransform() {
      _classCallCheck(this, BooleanTransform);

      return _super.apply(this, arguments);
    }

    _createClass(BooleanTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var type;
        type = _typeof(serialized);

        if (type === "boolean") {
          return serialized;
        } else if (type === "string") {
          return serialized.match(/^true$|^t$|^1$/i) !== null;
        } else if (type === "number") {
          return serialized === 1;
        } else {
          return false;
        }
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        return Boolean(deserialized);
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        return Boolean(deserialized);
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi["boolean"]().allow(null).optional();
      }
    }]);

    return BooleanTransform;
  }(CoreObject), _class3.__filename = __filename$N, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$O = '/leanes/patterns/data_mapper/ObjectTransform.js';

var JoiT$d = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var hasProp$4 = {}.hasOwnProperty;
var ObjectTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi,
      moment = _Module$NS$Utils.moment;
  var ObjectTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ObjectTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$d))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(ObjectTransform, _CoreObject);

    var _super = _createSuper(ObjectTransform);

    function ObjectTransform() {
      _classCallCheck(this, ObjectTransform);

      return _super.apply(this, arguments);
    }

    _createClass(ObjectTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        if (serialized == null) {
          return {};
        }

        var result = {};

        var _loop = function _loop(key) {
          if (!hasProp$4.call(serialized, key)) return "continue";
          var value = serialized[key];

          result[key] = function () {
            switch (false) {
              case !(_.isString(value) && moment(value, moment.ISO_8601).isValid()):
                return Module.NS.DateTransform.normalizeSync(value);

              case !_.isString(value):
                return Module.NS.StringTransform.normalizeSync(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.normalizeSync(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.normalizeSync(value);

              case !_.isPlainObject(value):
                return Module.NS.ObjectTransform.normalizeSync(value);

              case !_.isArray(value):
                return Module.NS.ArrayTransform.normalizeSync(value);

              default:
                return Module.NS.Transform.normalizeSync(value);
            }
          }();
        };

        for (var key in serialized) {
          var _ret = _loop(key);

          if (_ret === "continue") continue;
        }

        return result;
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        if (deserialized == null) {
          return {};
        }

        var result = {};

        var _loop2 = function _loop2(key) {
          if (!hasProp$4.call(deserialized, key)) return "continue";
          var value = deserialized[key];

          result[key] = function () {
            switch (false) {
              case !_.isString(value):
                return Module.NS.StringTransform.serializeSync(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.serializeSync(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.serializeSync(value);

              case !_.isDate(value):
                return Module.NS.DateTransform.serializeSync(value);

              case !_.isPlainObject(value):
                return Module.NS.ObjectTransform.serializeSync(value);

              case !_.isArray(value):
                return Module.NS.ArrayTransform.serializeSync(value);

              default:
                return Module.NS.Transform.serializeSync(value);
            }
          }();
        };

        for (var key in deserialized) {
          var _ret2 = _loop2(key);

          if (_ret2 === "continue") continue;
        }

        return result;
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (deserialized == null) {
          return {};
        }

        var result = {};

        var _loop3 = function _loop3(key) {
          if (!hasProp$4.call(deserialized, key)) return "continue";
          var value = deserialized[key];

          result[key] = function () {
            switch (false) {
              case !_.isString(value):
                return Module.NS.StringTransform.objectize(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.objectize(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.objectize(value);

              case !_.isDate(value):
                return Module.NS.DateTransform.objectize(value);

              case !_.isPlainObject(value):
                return Module.NS.ObjectTransform.objectize(value);

              case !_.isArray(value):
                return Module.NS.ArrayTransform.objectize(value);

              default:
                return Module.NS.Transform.objectize(value);
            }
          }();
        };

        for (var key in deserialized) {
          var _ret3 = _loop3(key);

          if (_ret3 === "continue") continue;
        }

        return result;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi.object().allow(null).optional();
      }
    }]);

    return ObjectTransform;
  }(CoreObject), _class3.__filename = __filename$O, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$P = '/leanes/patterns/data_mapper/ArrayTransform.js';

var JoiT$e = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ArrayTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi,
      moment = _Module$NS$Utils.moment;
  var ArrayTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ArrayTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$e))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(ArrayTransform, _CoreObject);

    var _super = _createSuper(ArrayTransform);

    function ArrayTransform() {
      _classCallCheck(this, ArrayTransform);

      return _super.apply(this, arguments);
    }

    _createClass(ArrayTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        if (serialized == null) {
          return [];
        }

        var result = [];

        var _iterator = _createForOfIteratorHelper(serialized),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            switch (false) {
              case !(_.isString(item) && moment(item, moment.ISO_8601).isValid()):
                result.push(Module.NS.DateTransform.normalizeSync(item));
                break;

              case !_.isString(item):
                result.push(Module.NS.StringTransform.normalizeSync(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.normalizeSync(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.normalizeSync(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ObjectTransform.normalizeSync(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ArrayTransform.normalizeSync(item));
                break;

              default:
                result.push(Module.NS.Transform.normalizeSync(item));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return result;
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        if (deserialized == null) {
          return [];
        }

        var result = [];

        var _iterator2 = _createForOfIteratorHelper(deserialized),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;

            switch (false) {
              case !_.isString(item):
                result.push(Module.NS.StringTransform.serializeSync(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.serializeSync(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.serializeSync(item));
                break;

              case !_.isDate(item):
                result.push(Module.NS.DateTransform.serializeSync(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ObjectTransform.serializeSync(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ArrayTransform.serializeSync(item));
                break;

              default:
                result.push(Module.NS.Transform.serializeSync(item));
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return result;
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (deserialized == null) {
          return [];
        }

        var result = [];

        var _iterator3 = _createForOfIteratorHelper(deserialized),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var item = _step3.value;

            switch (false) {
              case !_.isString(item):
                result.push(Module.NS.StringTransform.objectize(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.objectize(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.objectize(item));
                break;

              case !_.isDate(item):
                result.push(Module.NS.DateTransform.objectize(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ObjectTransform.objectize(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ArrayTransform.objectize(item));
                break;

              default:
                result.push(Module.NS.Transform.objectize(item));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return result;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        return joi.array().items(joi.any()).allow(null).optional();
      }
    }]);

    return ArrayTransform;
  }(CoreObject), _class3.__filename = __filename$P, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), _applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$Q = '/leanes/patterns/data_mapper/ComplexObjectTransform.js';

var JoiT$f = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var TransformStaticInterface$5 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var hasProp$5 = {}.hasOwnProperty;
var ComplexObjectTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      ObjectTransform = _Module$NS.ObjectTransform,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      moment = _Module$NS$Utils.moment;
  var ComplexObjectTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ComplexObjectTransform", flowRuntime_umd["extends"](ObjectTransform), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("parseRecordName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(TransformStaticInterface$5))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_ObjectTransform) {
    _inherits(ComplexObjectTransform, _ObjectTransform);

    var _super = _createSuper(ComplexObjectTransform);

    function ComplexObjectTransform() {
      _classCallCheck(this, ComplexObjectTransform);

      return _super.apply(this, arguments);
    }

    _createClass(ComplexObjectTransform, null, [{
      key: "parseRecordName",
      value: function parseRecordName(asName) {
        var vsModuleName, vsRecordName;

        if (/.*[:][:].*/.test(asName)) {
          var _asName$split = asName.split('::');

          var _asName$split2 = _slicedToArray(_asName$split, 2);

          vsModuleName = _asName$split2[0];
          vsRecordName = _asName$split2[1];
        } else {
          var _ref = [this.moduleName(), inflect.camelize(inflect.underscore(inflect.singularize(asName)))];
          vsModuleName = _ref[0];
          vsRecordName = _ref[1];
        }

        if (!/(Record$)|(Migration$)/.test(vsRecordName)) {
          vsRecordName += 'Record';
        }

        return [vsModuleName, vsRecordName];
      }
    }, {
      key: "findRecordByName",
      value: function findRecordByName(asName) {
        var _this$parseRecordName = this.parseRecordName(asName),
            _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2),
            vsModuleName = _this$parseRecordName2[0],
            vsRecordName = _this$parseRecordName2[1];

        return this.Module.NS[vsRecordName];
      }
    }, {
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(serialized) {
          var _this = this;

          var result, _loop, key, _ret;

          return regeneratorRuntime.wrap(function _callee2$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!(serialized == null)) {
                    _context3.next = 2;
                    break;
                  }

                  return _context3.abrupt("return", {});

                case 2:
                  result = {};
                  _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop(key) {
                    var value;
                    return regeneratorRuntime.wrap(function _loop$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (hasProp$5.call(serialized, key)) {
                              _context2.next = 2;
                              break;
                            }

                            return _context2.abrupt("return", "continue");

                          case 2:
                            value = serialized[key];
                            _context2.next = 5;
                            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                              var RecordClass;
                              return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      _context.t0 = false;
                                      _context.next = _context.t0 === !(_.isString(value) && moment(value, moment.ISO_8601).isValid()) ? 3 : _context.t0 === !_.isString(value) ? 4 : _context.t0 === !_.isNumber(value) ? 5 : _context.t0 === !_.isBoolean(value) ? 6 : _context.t0 === !(_.isPlainObject(value) && /.{2,}[:][:].{2,}/.test(value.type)) ? 7 : _context.t0 === !_.isPlainObject(value) ? 11 : _context.t0 === !_.isArray(value) ? 14 : 17;
                                      break;

                                    case 3:
                                      return _context.abrupt("return", Module.NS.DateTransform.normalizeSync(value));

                                    case 4:
                                      return _context.abrupt("return", Module.NS.StringTransform.normalizeSync(value));

                                    case 5:
                                      return _context.abrupt("return", Module.NS.NumberTransform.normalizeSync(value));

                                    case 6:
                                      return _context.abrupt("return", Module.NS.BooleanTransform.normalizeSync(value));

                                    case 7:
                                      RecordClass = _this.findRecordByName(value.type); // NOTE: в правильном использовании вторым аргументом должна передаваться ссылка на коллекцию, то тут мы не можем ее получить
                                      // а так как рекорды в этом случае используются ТОЛЬКО для оформления структуры и хранения данных внутри родительского рекорда, то коллекции физически просто нет.

                                      _context.next = 10;
                                      return RecordClass.normalize(value);

                                    case 10:
                                      return _context.abrupt("return", _context.sent);

                                    case 11:
                                      _context.next = 13;
                                      return Module.NS.ComplexObjectTransform.normalize(value);

                                    case 13:
                                      return _context.abrupt("return", _context.sent);

                                    case 14:
                                      _context.next = 16;
                                      return Module.NS.ComplexArrayTransform.normalize(value);

                                    case 16:
                                      return _context.abrupt("return", _context.sent);

                                    case 17:
                                      return _context.abrupt("return", Module.NS.Transform.normalizeSync(value));

                                    case 18:
                                    case "end":
                                      return _context.stop();
                                  }
                                }
                              }, _callee);
                            }))();

                          case 5:
                            result[key] = _context2.sent;

                          case 6:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _loop);
                  });
                  _context3.t0 = regeneratorRuntime.keys(serialized);

                case 5:
                  if ((_context3.t1 = _context3.t0()).done) {
                    _context3.next = 13;
                    break;
                  }

                  key = _context3.t1.value;
                  return _context3.delegateYield(_loop(key), "t2", 8);

                case 8:
                  _ret = _context3.t2;

                  if (!(_ret === "continue")) {
                    _context3.next = 11;
                    break;
                  }

                  return _context3.abrupt("continue", 5);

                case 11:
                  _context3.next = 5;
                  break;

                case 13:
                  return _context3.abrupt("return", result);

                case 14:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee2);
        }));

        function normalize(_x) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(deserialized) {
          var _this2 = this;

          var result, _loop2, key, _ret2;

          return regeneratorRuntime.wrap(function _callee4$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (!(deserialized == null)) {
                    _context6.next = 2;
                    break;
                  }

                  return _context6.abrupt("return", {});

                case 2:
                  result = {};
                  _loop2 = /*#__PURE__*/regeneratorRuntime.mark(function _loop2(key) {
                    var value;
                    return regeneratorRuntime.wrap(function _loop2$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            if (hasProp$5.call(deserialized, key)) {
                              _context5.next = 2;
                              break;
                            }

                            return _context5.abrupt("return", "continue");

                          case 2:
                            value = deserialized[key];
                            _context5.next = 5;
                            return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                              var RecordClass;
                              return regeneratorRuntime.wrap(function _callee3$(_context4) {
                                while (1) {
                                  switch (_context4.prev = _context4.next) {
                                    case 0:
                                      _context4.t0 = false;
                                      _context4.next = _context4.t0 === !_.isString(value) ? 3 : _context4.t0 === !_.isNumber(value) ? 4 : _context4.t0 === !_.isBoolean(value) ? 5 : _context4.t0 === !_.isDate(value) ? 6 : _context4.t0 === !(_.isObject(value) && /.{2,}[:][:].{2,}/.test(value.type)) ? 7 : _context4.t0 === !_.isPlainObject(value) ? 11 : _context4.t0 === !_.isArray(value) ? 14 : 17;
                                      break;

                                    case 3:
                                      return _context4.abrupt("return", Module.NS.StringTransform.serializeSync(value));

                                    case 4:
                                      return _context4.abrupt("return", Module.NS.NumberTransform.serializeSync(value));

                                    case 5:
                                      return _context4.abrupt("return", Module.NS.BooleanTransform.serializeSync(value));

                                    case 6:
                                      return _context4.abrupt("return", Module.NS.DateTransform.serializeSync(value));

                                    case 7:
                                      RecordClass = _this2.findRecordByName(value.type);
                                      _context4.next = 10;
                                      return RecordClass.serialize(value);

                                    case 10:
                                      return _context4.abrupt("return", _context4.sent);

                                    case 11:
                                      _context4.next = 13;
                                      return Module.NS.ComplexObjectTransform.serialize(value);

                                    case 13:
                                      return _context4.abrupt("return", _context4.sent);

                                    case 14:
                                      _context4.next = 16;
                                      return Module.NS.ComplexArrayTransform.serialize(value);

                                    case 16:
                                      return _context4.abrupt("return", _context4.sent);

                                    case 17:
                                      return _context4.abrupt("return", Module.NS.Transform.serializeSync(value));

                                    case 18:
                                    case "end":
                                      return _context4.stop();
                                  }
                                }
                              }, _callee3);
                            }))();

                          case 5:
                            result[key] = _context5.sent;

                          case 6:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _loop2);
                  });
                  _context6.t0 = regeneratorRuntime.keys(deserialized);

                case 5:
                  if ((_context6.t1 = _context6.t0()).done) {
                    _context6.next = 13;
                    break;
                  }

                  key = _context6.t1.value;
                  return _context6.delegateYield(_loop2(key), "t2", 8);

                case 8:
                  _ret2 = _context6.t2;

                  if (!(_ret2 === "continue")) {
                    _context6.next = 11;
                    break;
                  }

                  return _context6.abrupt("continue", 5);

                case 11:
                  _context6.next = 5;
                  break;

                case 13:
                  return _context6.abrupt("return", result);

                case 14:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee4);
        }));

        function serialize(_x2) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _this3 = this;

        if (deserialized == null) {
          return {};
        }

        var result = {};

        var _loop3 = function _loop3(key) {
          if (!hasProp$5.call(deserialized, key)) return "continue";
          var value = deserialized[key];

          result[key] = function () {
            switch (false) {
              case !_.isString(value):
                return Module.NS.StringTransform.objectize(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.objectize(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.objectize(value);

              case !_.isDate(value):
                return Module.NS.DateTransform.objectize(value);

              case !(_.isObject(value) && /.{2,}[:][:].{2,}/.test(value.type)):
                var RecordClass = _this3.findRecordByName(value.type);

                return RecordClass.objectize(value);

              case !_.isPlainObject(value):
                return Module.NS.ComplexObjectTransform.objectize(value);

              case !_.isArray(value):
                return Module.NS.ComplexArrayTransform.objectize(value);

              default:
                return Module.NS.Transform.objectize(value);
            }
          }();
        };

        for (var key in deserialized) {
          var _ret3 = _loop3(key);

          if (_ret3 === "continue") continue;
        }

        return result;
      }
    }]);

    return ComplexObjectTransform;
  }(ObjectTransform), _class3.__filename = __filename$Q, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2, "parseRecordName"), _class2), _applyDecoratedDescriptor(_class2, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2, "findRecordByName"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$R = '/leanes/patterns/data_mapper/ComplexArrayTransform.js';

var JoiT$g = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var TransformStaticInterface$6 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var ComplexArrayTransformTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      ArrayTransform = _Module$NS.ArrayTransform,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      moment = _Module$NS$Utils.moment;
  var ComplexArrayTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ComplexArrayTransform", flowRuntime_umd["extends"](ArrayTransform), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("parseRecordName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(TransformStaticInterface$6))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_ArrayTransform) {
    _inherits(ComplexArrayTransform, _ArrayTransform);

    var _super = _createSuper(ComplexArrayTransform);

    function ComplexArrayTransform() {
      _classCallCheck(this, ComplexArrayTransform);

      return _super.apply(this, arguments);
    }

    _createClass(ComplexArrayTransform, null, [{
      key: "parseRecordName",
      value: function parseRecordName(asName) {
        var vsModuleName, vsRecordName;

        if (/.*[:][:].*/.test(asName)) {
          var _asName$split = asName.split('::');

          var _asName$split2 = _slicedToArray(_asName$split, 2);

          vsModuleName = _asName$split2[0];
          vsRecordName = _asName$split2[1];
        } else {
          var _ref = [this.moduleName(), inflect.camelize(inflect.underscore(inflect.singularize(asName)))];
          vsModuleName = _ref[0];
          vsRecordName = _ref[1];
        }

        if (!/(Record$)|(Migration$)/.test(vsRecordName)) {
          vsRecordName += 'Record';
        }

        return [vsModuleName, vsRecordName];
      }
    }, {
      key: "findRecordByName",
      value: function findRecordByName(asName) {
        var _this$parseRecordName = this.parseRecordName(asName),
            _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2),
            vsModuleName = _this$parseRecordName2[0],
            vsRecordName = _this$parseRecordName2[1];

        return this.Module.NS[vsRecordName];
      }
    }, {
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(serialized) {
          var result, _iterator, _step, item, RecordClass;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(serialized == null)) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return", []);

                case 2:
                  result = [];
                  _iterator = _createForOfIteratorHelper(serialized);
                  _context.prev = 4;

                  _iterator.s();

                case 6:
                  if ((_step = _iterator.n()).done) {
                    _context.next = 41;
                    break;
                  }

                  item = _step.value;
                  _context.t0 = false;
                  _context.next = _context.t0 === !(_.isString(item) && moment(item, moment.ISO_8601).isValid()) ? 11 : _context.t0 === !_.isString(item) ? 13 : _context.t0 === !_.isNumber(item) ? 15 : _context.t0 === !_.isBoolean(item) ? 17 : _context.t0 === !(_.isPlainObject(item) && /.{2,}[:][:].{2,}/.test(item.type)) ? 19 : _context.t0 === !_.isPlainObject(item) ? 26 : _context.t0 === !_.isArray(item) ? 32 : 38;
                  break;

                case 11:
                  result.push(Module.NS.DateTransform.normalizeSync(item));
                  return _context.abrupt("break", 39);

                case 13:
                  result.push(Module.NS.StringTransform.normalizeSync(item));
                  return _context.abrupt("break", 39);

                case 15:
                  result.push(Module.NS.NumberTransform.normalizeSync(item));
                  return _context.abrupt("break", 39);

                case 17:
                  result.push(Module.NS.BooleanTransform.normalizeSync(item));
                  return _context.abrupt("break", 39);

                case 19:
                  RecordClass = this.findRecordByName(item.type); // NOTE: в правильном использовании вторым аргументом должна передаваться ссылка на коллекцию, то тут мы не можем ее получить
                  // а так как рекорды в этом случае используются ТОЛЬКО для оформления структуры и хранения данных внутри родительского рекорда, то коллекции физически просто нет.

                  _context.t1 = result;
                  _context.next = 23;
                  return RecordClass.normalize(item);

                case 23:
                  _context.t2 = _context.sent;

                  _context.t1.push.call(_context.t1, _context.t2);

                  return _context.abrupt("break", 39);

                case 26:
                  _context.t3 = result;
                  _context.next = 29;
                  return Module.NS.ComplexObjectTransform.normalize(item);

                case 29:
                  _context.t4 = _context.sent;

                  _context.t3.push.call(_context.t3, _context.t4);

                  return _context.abrupt("break", 39);

                case 32:
                  _context.t5 = result;
                  _context.next = 35;
                  return Module.NS.ComplexArrayTransform.normalize(item);

                case 35:
                  _context.t6 = _context.sent;

                  _context.t5.push.call(_context.t5, _context.t6);

                  return _context.abrupt("break", 39);

                case 38:
                  result.push(Module.NS.Transform.normalizeSync(item));

                case 39:
                  _context.next = 6;
                  break;

                case 41:
                  _context.next = 46;
                  break;

                case 43:
                  _context.prev = 43;
                  _context.t7 = _context["catch"](4);

                  _iterator.e(_context.t7);

                case 46:
                  _context.prev = 46;

                  _iterator.f();

                  return _context.finish(46);

                case 49:
                  return _context.abrupt("return", result);

                case 50:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[4, 43, 46, 49]]);
        }));

        function normalize(_x) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(deserialized) {
          var result, _iterator2, _step2, item, RecordClass;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(deserialized == null)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return", []);

                case 2:
                  result = [];
                  _iterator2 = _createForOfIteratorHelper(deserialized);
                  _context2.prev = 4;

                  _iterator2.s();

                case 6:
                  if ((_step2 = _iterator2.n()).done) {
                    _context2.next = 41;
                    break;
                  }

                  item = _step2.value;
                  _context2.t0 = false;
                  _context2.next = _context2.t0 === !_.isString(item) ? 11 : _context2.t0 === !_.isNumber(item) ? 13 : _context2.t0 === !_.isBoolean(item) ? 15 : _context2.t0 === !_.isDate(item) ? 17 : _context2.t0 === !(_.isObject(item) && /.{2,}[:][:].{2,}/.test(item.type)) ? 19 : _context2.t0 === !_.isPlainObject(item) ? 26 : _context2.t0 === !_.isArray(item) ? 32 : 38;
                  break;

                case 11:
                  result.push(Module.NS.StringTransform.serializeSync(item));
                  return _context2.abrupt("break", 39);

                case 13:
                  result.push(Module.NS.NumberTransform.serializeSync(item));
                  return _context2.abrupt("break", 39);

                case 15:
                  result.push(Module.NS.BooleanTransform.serializeSync(item));
                  return _context2.abrupt("break", 39);

                case 17:
                  result.push(Module.NS.DateTransform.serializeSync(item));
                  return _context2.abrupt("break", 39);

                case 19:
                  RecordClass = this.findRecordByName(item.type);
                  _context2.t1 = result;
                  _context2.next = 23;
                  return RecordClass.serialize(item);

                case 23:
                  _context2.t2 = _context2.sent;

                  _context2.t1.push.call(_context2.t1, _context2.t2);

                  return _context2.abrupt("break", 39);

                case 26:
                  _context2.t3 = result;
                  _context2.next = 29;
                  return Module.NS.ComplexObjectTransform.serialize(item);

                case 29:
                  _context2.t4 = _context2.sent;

                  _context2.t3.push.call(_context2.t3, _context2.t4);

                  return _context2.abrupt("break", 39);

                case 32:
                  _context2.t5 = result;
                  _context2.next = 35;
                  return Module.NS.ComplexArrayTransform.serialize(item);

                case 35:
                  _context2.t6 = _context2.sent;

                  _context2.t5.push.call(_context2.t5, _context2.t6);

                  return _context2.abrupt("break", 39);

                case 38:
                  result.push(Module.NS.Transform.serializeSync(item));

                case 39:
                  _context2.next = 6;
                  break;

                case 41:
                  _context2.next = 46;
                  break;

                case 43:
                  _context2.prev = 43;
                  _context2.t7 = _context2["catch"](4);

                  _iterator2.e(_context2.t7);

                case 46:
                  _context2.prev = 46;

                  _iterator2.f();

                  return _context2.finish(46);

                case 49:
                  return _context2.abrupt("return", result);

                case 50:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[4, 43, 46, 49]]);
        }));

        function serialize(_x2) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        if (deserialized == null) {
          return [];
        }

        var result = [];

        var _iterator3 = _createForOfIteratorHelper(deserialized),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var item = _step3.value;

            switch (false) {
              case !_.isString(item):
                result.push(Module.NS.StringTransform.objectize(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.objectize(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.objectize(item));
                break;

              case !_.isDate(item):
                result.push(Module.NS.DateTransform.objectize(item));
                break;

              case !(_.isObject(item) && /.{2,}[:][:].{2,}/.test(item.type)):
                var RecordClass = this.findRecordByName(item.type);
                result.push(RecordClass.objectize(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ComplexObjectTransform.objectize(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ComplexArrayTransform.objectize(item));
                break;

              default:
                result.push(Module.NS.Transform.objectize(item));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return result;
      }
    }]);

    return ComplexArrayTransform;
  }(ArrayTransform), _class3.__filename = __filename$R, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2, "parseRecordName"), _class2), _applyDecoratedDescriptor(_class2, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2, "findRecordByName"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$S = '/leanes/patterns/data_mapper/Serializer.js';

var TransformStaticInterface$7 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var SerializerInterface = flowRuntime_umd.type("SerializerInterface", function (SerializerInterface) {
  var D = SerializerInterface.typeParameter("D");
  return flowRuntime_umd.object(flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("acRecord", flowRuntime_umd.ref(TransformStaticInterface$7)), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D)))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(D)), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))));
});

var TransformStaticInterface$8 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var RecordInterface$9 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$3 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var SerializerInterface$1 = flowRuntime_umd.tdz(function () {
  return SerializerInterface;
});
var SerializerTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Serializer = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Serializer", function (Serializer) {
    var D = Serializer.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$9));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("collection", flowRuntime_umd.ref(CollectionInterface$3, flowRuntime_umd.flowInto(D))), flowRuntime_umd.method("normalize", flowRuntime_umd.param("acRecord", flowRuntime_umd.ref(TransformStaticInterface$8)), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.flowInto(D))), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(SerializerInterface$1, D)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(SerializerInterface$1, flowRuntime_umd.flowInto(D))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("collection", flowRuntime_umd.ref(CollectionInterface$3, flowRuntime_umd.flowInto(D))))];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Serializer, _CoreObject);

    var _super = _createSuper(Serializer);

    _createClass(Serializer, [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acRecord, ahPayload) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 3;
                  return acRecord.normalize(ahPayload, this.collection);

                case 3:
                  return _context.abrupt("return", _context.sent);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize(_x, _x2) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoRecord) {
          var options,
              vcRecord,
              _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
                  vcRecord = aoRecord.constructor;
                  _context2.next = 4;
                  return vcRecord.serialize(aoRecord, options);

                case 4:
                  return _context2.abrupt("return", _context2.sent);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function serialize(_x3) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(acModule, replica) {
          var Facade, facade, collection;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context3.next = 7;
                    break;
                  }

                  Facade = acModule.NS.ApplicationFacade || acModule.NS.Facade;
                  facade = Facade.getInstance(replica.multitonKey);
                  collection = facade.retrieveProxy(replica.collectionName);
                  return _context3.abrupt("return", collection.serializer);

                case 7:
                  _context3.next = 9;
                  return _get(_getPrototypeOf(Serializer), "restoreObject", this).call(this, acModule, replica);

                case 9:
                  return _context3.abrupt("return", _context3.sent);

                case 10:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject(_x4, _x5) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(instance) {
          var replica;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _get(_getPrototypeOf(Serializer), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context4.sent;
                  replica.multitonKey = instance.collection._multitonKey;
                  replica.collectionName = instance.collection.getProxyName();
                  return _context4.abrupt("return", replica);

                case 6:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject(_x6) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Serializer(collection) {
      var _this;

      _classCallCheck(this, Serializer);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "collection", _descriptor, _assertThisInitialized(_this));

      _this.collection = collection;
      return _this;
    }

    return Serializer;
  }(CoreObject), _class3.__filename = __filename$S, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "collection", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "normalize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "normalize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "serialize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "serialize"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$T = '/leanes/patterns/data_mapper/Objectizer.js';

// import type { RecordInterface } from './RecordInterface';
var ObjectizerInterface = flowRuntime_umd.type("ObjectizerInterface", function (ObjectizerInterface) {
  var R = ObjectizerInterface.typeParameter("R"),
      D = ObjectizerInterface.typeParameter("D");
  return flowRuntime_umd.object(flowRuntime_umd.property("recoverize", flowRuntime_umd["function"](flowRuntime_umd.param("acRecord", R), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D))))), flowRuntime_umd.property("objectize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", D), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))));
});

var ObjectizerInterface$1 = flowRuntime_umd.tdz(function () {
  return ObjectizerInterface;
});
var RecordInterface$a = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var RecordStaticInterface$2 = flowRuntime_umd.tdz(function () {
  return RecordStaticInterface;
});
var CollectionInterface$4 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var ObjectizerTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Objectizer = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Objectizer", function (Objectizer) {
    var R = Objectizer.typeParameter("R", undefined, flowRuntime_umd.ref(RecordStaticInterface$2));
    var D = Objectizer.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$a));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("collection", flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.flowInto(D))), flowRuntime_umd.method("recoverize", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("objectize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ObjectizerInterface$1, R, D)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(ObjectizerInterface$1, flowRuntime_umd.flowInto(R), flowRuntime_umd.flowInto(D))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("collection", flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.flowInto(D))))];
  })), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Objectizer, _CoreObject);

    var _super = _createSuper(Objectizer);

    _createClass(Objectizer, [{
      key: "recoverize",
      value: function () {
        var _recoverize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acRecord, ahPayload) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (ahPayload.type == null) {
                    ahPayload.type = "".concat(acRecord.moduleName(), "::").concat(acRecord.name);
                  }

                  _context.next = 3;
                  return acRecord.recoverize(ahPayload, this.collection);

                case 3:
                  return _context.abrupt("return", _context.sent);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function recoverize(_x, _x2) {
          return _recoverize.apply(this, arguments);
        }

        return recoverize;
      }()
    }, {
      key: "objectize",
      value: function () {
        var _objectize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoRecord) {
          var options,
              vcRecord,
              _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
                  vcRecord = aoRecord.constructor;
                  return _context2.abrupt("return", vcRecord.objectize(aoRecord, options));

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function objectize(_x3) {
          return _objectize.apply(this, arguments);
        }

        return objectize;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(acModule, replica) {
          var Facade, facade, collection;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context3.next = 7;
                    break;
                  }

                  Facade = acModule.NS.ApplicationFacade || acModule.NS.Facade;
                  facade = Facade.getInstance(replica.multitonKey);
                  collection = facade.retrieveProxy(replica.collectionName);
                  return _context3.abrupt("return", collection.objectizer);

                case 7:
                  _context3.next = 9;
                  return _get(_getPrototypeOf(Objectizer), "restoreObject", this).call(this, acModule, replica);

                case 9:
                  return _context3.abrupt("return", _context3.sent);

                case 10:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject(_x4, _x5) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(instance) {
          var replica;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _get(_getPrototypeOf(Objectizer), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context4.sent;
                  replica.multitonKey = instance.collection._multitonKey;
                  replica.collectionName = instance.collection.getProxyName();
                  return _context4.abrupt("return", replica);

                case 6:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject(_x6) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Objectizer(collection) {
      var _this;

      _classCallCheck(this, Objectizer);

      _this = _super.call(this, collection);

      _initializerDefineProperty(_this, "collection", _descriptor, _assertThisInitialized(_this));

      _this.collection = collection;
      return _this;
    }

    return Objectizer;
  }(CoreObject), _class3.__filename = __filename$T, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "collection", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "recoverize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recoverize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "objectize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "objectize"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$U = '/leanes/patterns/data_mapper/Record.js';

console.log('>?>?>??? 000');
var CollectionInterface$5 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
console.log('>?>?>??? 111');
var RecordInterface$b = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
console.log('>?>?>??? 222');
var RecordStaticInterface$3 = flowRuntime_umd.tdz(function () {
  return RecordStaticInterface;
});
console.log('>?>?>??? 333');
var TransformStaticInterface$9 = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
console.log('>?>?>??? 444');
var JoiT$h = flowRuntime_umd.tdz(function () {
  return JoiT;
});
console.log('>?>?>??? 555');
var AttributeConfigT$2 = flowRuntime_umd.tdz(function () {
  return AttributeConfigT;
});
console.log('>?>?>??? 666');
var ComputedConfigT$2 = flowRuntime_umd.tdz(function () {
  return ComputedConfigT;
});
console.log('>?>?>??? 777');
var hasProp$6 = {}.hasOwnProperty;
var RecordTF = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      attribute = _Module$NS.attribute,
      chains = _Module$NS.chains,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi,
      inflect = _Module$NS$Utils.inflect;
  var schemas = new Map();
  var Record = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Record", function (Record) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_internalRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("_schemas"), flowRuntime_umd.property("collection", flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(Record))), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$h))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(Record))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.staticMethod("recoverize", flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(Record))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.staticMethod("makeSnapshot", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.staticMethod("parseRecordName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.method("parseRecordName", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordStaticInterface$3))), flowRuntime_umd.method("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordStaticInterface$3))), flowRuntime_umd.staticMethod("customFilters", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("customFilters", flowRuntime_umd.param("config", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("parentClassNames", flowRuntime_umd.param("AbstractClass", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.ref(RecordStaticInterface$3), flowRuntime_umd.Class(flowRuntime_umd.object())))), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("attributes", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(AttributeConfigT$2))))), flowRuntime_umd.staticMethod("computeds", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(ComputedConfigT$2))))), flowRuntime_umd.staticMethod("new", flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(Record))), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$b))), flowRuntime_umd.method("save", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("create", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("update", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("delete", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("destroy", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.property("id", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd.property("rev", flowRuntime_umd.any()), flowRuntime_umd.property("type", flowRuntime_umd.any()), flowRuntime_umd.property("isHidden", flowRuntime_umd.any()), flowRuntime_umd.property("createdAt", flowRuntime_umd.any()), flowRuntime_umd.property("updatedAt", flowRuntime_umd.any()), flowRuntime_umd.property("deletedAt", flowRuntime_umd.any()), flowRuntime_umd.method("afterCreate", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("beforeUpdate", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("beforeCreate", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("afterUpdate", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("beforeDelete", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("afterDelete", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("afterDestroy"), flowRuntime_umd.method("attributes", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("clone", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("copy", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("decrement", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("increment", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("toggle", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("touch", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("updateAttribute", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("value", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("updateAttributes", flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("isNew", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("reload", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("changedAttributes", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), flowRuntime_umd.method("resetAttribute", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("rollbackAttributes", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoProperties", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(Record)))), flowRuntime_umd.method("toJSON")];
  })), _dec2 = chains(['create', 'update', 'delete', 'destroy'], function () {
    this.beforeHook('beforeUpdate', {
      only: ['update']
    });
    this.beforeHook('beforeCreate', {
      only: ['create']
    });
    this.afterHook('afterUpdate', {
      only: ['update']
    });
    this.afterHook('afterCreate', {
      only: ['create']
    });
    this.beforeHook('beforeDelete', {
      only: ['delete']
    });
    this.afterHook('afterDelete', {
      only: ['delete']
    });
    this.afterHook('afterDestroy', {
      only: ['destroy']
    });
  }), _dec3 = module(Module), _dec4 = attribute({
    type: 'primary_key'
  }), _dec5 = attribute({
    type: 'string'
  }), _dec6 = attribute({
    type: 'string'
  }), _dec7 = attribute({
    type: 'boolean',
    validate: function validate() {
      return joi["boolean"]().empty(null)["default"](false);
    }
  }), _dec8 = attribute({
    type: 'date'
  }), _dec9 = attribute({
    type: 'date'
  }), _dec10 = attribute({
    type: 'date'
  }), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Record, _CoreObject);

    var _super = _createSuper(Record);

    _createClass(Record, [{
      key: "parseRecordName",
      value: function parseRecordName() {
        var _this$constructor;

        return (_this$constructor = this.constructor).parseRecordName.apply(_this$constructor, arguments);
      }
    }, {
      key: "findRecordByName",
      value: function findRecordByName(asName) {
        return this.constructor.findRecordByName(asName);
      }
      /*
      // At End of SomeRecord class definition
      SomeRecord.customFilters = {
        reason: {
          '$eq': (value) => {
            // string of some aql/sql code for example
          },
          '$neq': (value) => {
            // string of some aql/sql code for example
          },
        },
      };
      */

    }, {
      key: "save",
      value: function () {
        var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var result;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  console.log(':::::LLLL Record::save enter');
                  _context.next = 3;
                  return this.isNew();

                case 3:
                  if (!_context.sent) {
                    _context.next = 9;
                    break;
                  }

                  _context.next = 6;
                  return this.create();

                case 6:
                  _context.t0 = _context.sent;
                  _context.next = 12;
                  break;

                case 9:
                  _context.next = 11;
                  return this.update();

                case 11:
                  _context.t0 = _context.sent;

                case 12:
                  result = _context.t0;
                  return _context.abrupt("return", result);

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function save() {
          return _save.apply(this, arguments);
        }

        return save;
      }()
    }, {
      key: "create",
      value: function () {
        var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var response, voAttributes, asAttr;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  console.log(':::::LLLL Record::create enter'); // console.log '>>??? create push ', @, @collection

                  _context2.next = 3;
                  return this.collection.push(this);

                case 3:
                  response = _context2.sent;

                  if (!(response != null)) {
                    _context2.next = 15;
                    break;
                  }

                  voAttributes = this.constructor.attributes;
                  _context2.t0 = regeneratorRuntime.keys(voAttributes);

                case 7:
                  if ((_context2.t1 = _context2.t0()).done) {
                    _context2.next = 14;
                    break;
                  }

                  asAttr = _context2.t1.value;

                  if (hasProp$6.call(voAttributes, asAttr)) {
                    _context2.next = 11;
                    break;
                  }

                  return _context2.abrupt("continue", 7);

                case 11:
                  this[asAttr] = response[asAttr];
                  _context2.next = 7;
                  break;

                case 14:
                  this._internalRecord = response._internalRecord;

                case 15:
                  return _context2.abrupt("return", this);

                case 16:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function create() {
          return _create.apply(this, arguments);
        }

        return create;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var response, voAttributes, asAttr;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.collection.override(this.id, this);

                case 2:
                  response = _context3.sent;

                  if (!(response != null)) {
                    _context3.next = 14;
                    break;
                  }

                  voAttributes = this.constructor.attributes;
                  _context3.t0 = regeneratorRuntime.keys(voAttributes);

                case 6:
                  if ((_context3.t1 = _context3.t0()).done) {
                    _context3.next = 13;
                    break;
                  }

                  asAttr = _context3.t1.value;

                  if (hasProp$6.call(voAttributes, asAttr)) {
                    _context3.next = 10;
                    break;
                  }

                  return _context3.abrupt("continue", 6);

                case 10:
                  this[asAttr] = response[asAttr];
                  _context3.next = 6;
                  break;

                case 13:
                  this._internalRecord = response._internalRecord;

                case 14:
                  return _context3.abrupt("return", this);

                case 15:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function update() {
          return _update.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: 'delete',
      value: function () {
        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.isNew();

                case 2:
                  if (!_context4.sent) {
                    _context4.next = 4;
                    break;
                  }

                  assert.fail('Document is not exist in collection');

                case 4:
                  this.isHidden = true;
                  this.updatedAt = new Date();
                  _context4.next = 8;
                  return this.save();

                case 8:
                  return _context4.abrupt("return", _context4.sent);

                case 9:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function _delete() {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "destroy",
      value: function () {
        var _destroy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.isNew();

                case 2:
                  if (!_context5.sent) {
                    _context5.next = 4;
                    break;
                  }

                  assert.fail('Document is not exist in collection');

                case 4:
                  _context5.next = 6;
                  return this.collection.remove(this.id);

                case 6:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function destroy() {
          return _destroy.apply(this, arguments);
        }

        return destroy;
      }()
    }, {
      key: "afterCreate",
      value: function () {
        var _afterCreate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(aoRecord) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  this.collection.recordHasBeenChanged('createdRecord', aoRecord);
                  return _context6.abrupt("return", this);

                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function afterCreate(_x) {
          return _afterCreate.apply(this, arguments);
        }

        return afterCreate;
      }()
    }, {
      key: "beforeUpdate",
      value: function () {
        var _beforeUpdate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          var _len,
              args,
              _key,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  this.updatedAt = new Date();

                  for (_len = _args7.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args7[_key];
                  }

                  return _context7.abrupt("return", args);

                case 3:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function beforeUpdate() {
          return _beforeUpdate.apply(this, arguments);
        }

        return beforeUpdate;
      }()
    }, {
      key: "beforeCreate",
      value: function () {
        var _beforeCreate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
          var now,
              _len2,
              args,
              _key2,
              _args8 = arguments;

          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  if (!(this.id == null)) {
                    _context8.next = 4;
                    break;
                  }

                  _context8.next = 3;
                  return this.collection.generateId();

                case 3:
                  this.id = _context8.sent;

                case 4:
                  now = new Date();

                  if (this.createdAt == null) {
                    this.createdAt = now;
                  }

                  if (this.updatedAt == null) {
                    this.updatedAt = now;
                  }

                  for (_len2 = _args8.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args8[_key2];
                  }

                  return _context8.abrupt("return", args);

                case 9:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function beforeCreate() {
          return _beforeCreate.apply(this, arguments);
        }

        return beforeCreate;
      }()
    }, {
      key: "afterUpdate",
      value: function () {
        var _afterUpdate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(aoRecord) {
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  this.collection.recordHasBeenChanged('updatedRecord', aoRecord);
                  return _context9.abrupt("return", this);

                case 2:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function afterUpdate(_x2) {
          return _afterUpdate.apply(this, arguments);
        }

        return afterUpdate;
      }()
    }, {
      key: "beforeDelete",
      value: function () {
        var _beforeDelete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
          var now,
              _len3,
              args,
              _key3,
              _args10 = arguments;

          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  this.isHidden = true;
                  now = new Date();
                  this.updatedAt = now;
                  this.deletedAt = now;

                  for (_len3 = _args10.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args10[_key3];
                  }

                  return _context10.abrupt("return", args);

                case 6:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function beforeDelete() {
          return _beforeDelete.apply(this, arguments);
        }

        return beforeDelete;
      }()
    }, {
      key: "afterDelete",
      value: function () {
        var _afterDelete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(aoRecord) {
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  this.collection.recordHasBeenChanged('deletedRecord', aoRecord);
                  return _context11.abrupt("return", this);

                case 2:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function afterDelete(_x3) {
          return _afterDelete.apply(this, arguments);
        }

        return afterDelete;
      }()
    }, {
      key: "afterDestroy",
      value: function () {
        var _afterDestroy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  this.collection.recordHasBeenChanged('destroyedRecord', this);

                case 1:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function afterDestroy() {
          return _afterDestroy.apply(this, arguments);
        }

        return afterDestroy;
      }() // NOTE: метод должен вернуть список атрибутов данного рекорда.

    }, {
      key: "attributes",
      value: function attributes() {
        return Object.keys(this.constructor.attributes);
      } // NOTE: в оперативной памяти создается клон рекорда, НО с другим id

    }, {
      key: "clone",
      value: function () {
        var _clone = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _context13.next = 2;
                  return this.collection.clone(this);

                case 2:
                  return _context13.abrupt("return", _context13.sent);

                case 3:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function clone() {
          return _clone.apply(this, arguments);
        }

        return clone;
      }() // NOTE: в коллекции создается копия рекорда, НО с другим id

    }, {
      key: "copy",
      value: function () {
        var _copy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _context14.next = 2;
                  return this.collection.copy(this);

                case 2:
                  return _context14.abrupt("return", _context14.sent);

                case 3:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function copy() {
          return _copy.apply(this, arguments);
        }

        return copy;
      }()
    }, {
      key: "decrement",
      value: function () {
        var _decrement = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(asAttribute) {
          var step,
              _args15 = arguments;
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  step = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : 1;
                  assert(_.isNumber(this[asAttribute]), "doc.attribute `".concat(asAttribute, "` is not Number"));
                  this[asAttribute] -= step;
                  _context15.next = 5;
                  return this.save();

                case 5:
                  return _context15.abrupt("return", _context15.sent);

                case 6:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function decrement(_x4) {
          return _decrement.apply(this, arguments);
        }

        return decrement;
      }()
    }, {
      key: "increment",
      value: function () {
        var _increment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(asAttribute) {
          var step,
              _args16 = arguments;
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  step = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : 1;
                  assert(_.isNumber(this[asAttribute]), "doc.attribute `".concat(asAttribute, "` is not Number"));
                  this[asAttribute] += step;
                  _context16.next = 5;
                  return this.save();

                case 5:
                  return _context16.abrupt("return", _context16.sent);

                case 6:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function increment(_x5) {
          return _increment.apply(this, arguments);
        }

        return increment;
      }()
    }, {
      key: "toggle",
      value: function () {
        var _toggle = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(asAttribute) {
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  assert(_.isBoolean(this[asAttribute]), "doc.attribute `".concat(asAttribute, "` is not Boolean"));
                  this[asAttribute] = !this[asAttribute];
                  _context17.next = 4;
                  return this.save();

                case 4:
                  return _context17.abrupt("return", _context17.sent);

                case 5:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this);
        }));

        function toggle(_x6) {
          return _toggle.apply(this, arguments);
        }

        return toggle;
      }()
    }, {
      key: "touch",
      value: function () {
        var _touch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  this.updatedAt = new Date();
                  _context18.next = 3;
                  return this.save();

                case 3:
                  return _context18.abrupt("return", _context18.sent);

                case 4:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this);
        }));

        function touch() {
          return _touch.apply(this, arguments);
        }

        return touch;
      }()
    }, {
      key: "updateAttribute",
      value: function () {
        var _updateAttribute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(name, value) {
          return regeneratorRuntime.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  this[name] = value;
                  _context19.next = 3;
                  return this.save();

                case 3:
                  return _context19.abrupt("return", _context19.sent);

                case 4:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19, this);
        }));

        function updateAttribute(_x7, _x8) {
          return _updateAttribute.apply(this, arguments);
        }

        return updateAttribute;
      }()
    }, {
      key: "updateAttributes",
      value: function () {
        var _updateAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(aoAttributes) {
          var vsAttrName, voAttrValue;
          return regeneratorRuntime.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  _context20.t0 = regeneratorRuntime.keys(aoAttributes);

                case 1:
                  if ((_context20.t1 = _context20.t0()).done) {
                    _context20.next = 9;
                    break;
                  }

                  vsAttrName = _context20.t1.value;

                  if (hasProp$6.call(aoAttributes, vsAttrName)) {
                    _context20.next = 5;
                    break;
                  }

                  return _context20.abrupt("continue", 1);

                case 5:
                  voAttrValue = aoAttributes[vsAttrName];
                  this[vsAttrName] = voAttrValue;
                  _context20.next = 1;
                  break;

                case 9:
                  _context20.next = 11;
                  return this.save();

                case 11:
                  return _context20.abrupt("return", _context20.sent);

                case 12:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20, this);
        }));

        function updateAttributes(_x9) {
          return _updateAttributes.apply(this, arguments);
        }

        return updateAttributes;
      }()
    }, {
      key: "isNew",
      value: function () {
        var _isNew = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
          return regeneratorRuntime.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  console.log(':::::LLLL Record::isNew enter', this.collection.delegate.name);

                  if (!(this.id == null)) {
                    _context21.next = 3;
                    break;
                  }

                  return _context21.abrupt("return", true);

                case 3:
                  _context21.next = 5;
                  return this.collection.includes(this.id);

                case 5:
                  return _context21.abrupt("return", !_context21.sent);

                case 6:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21, this);
        }));

        function isNew() {
          return _isNew.apply(this, arguments);
        }

        return isNew;
      }() // TODO: надо реализовать, НО пока не понятно как перезагрузить все атрибуты этого же рекорда новыми значениями из базы данных?

    }, {
      key: "reload",
      value: function () {
        var _reload = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
          return regeneratorRuntime.wrap(function _callee22$(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  return _context22.abrupt("return", assert.fail('not supported yet'));

                case 1:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee22);
        }));

        function reload() {
          return _reload.apply(this, arguments);
        }

        return reload;
      }() // TODO: не учтены установки значений, которые раньше не были установлены

    }, {
      key: "changedAttributes",
      value: function () {
        var _changedAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
          var vhResult, voAttributes, vsAttrName, transform, internalRecord, voOldValue, vcTransform, voNewValue;
          return regeneratorRuntime.wrap(function _callee23$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  vhResult = {};
                  voAttributes = this.constructor.attributes;
                  _context23.t0 = regeneratorRuntime.keys(voAttributes);

                case 3:
                  if ((_context23.t1 = _context23.t0()).done) {
                    _context23.next = 15;
                    break;
                  }

                  vsAttrName = _context23.t1.value;

                  if (hasProp$6.call(voAttributes, vsAttrName)) {
                    _context23.next = 7;
                    break;
                  }

                  return _context23.abrupt("continue", 3);

                case 7:
                  transform = voAttributes[vsAttrName].transform;
                  internalRecord = this._internalRecord;
                  voOldValue = internalRecord && internalRecord[vsAttrName] || undefined;
                  vcTransform = transform.call(this.constructor);
                  voNewValue = vcTransform.objectize(this[vsAttrName]);

                  if (!_.isEqual(voNewValue, voOldValue)) {
                    vhResult[vsAttrName] = [voOldValue, voNewValue];
                  }

                  _context23.next = 3;
                  break;

                case 15:
                  return _context23.abrupt("return", vhResult);

                case 16:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee23, this);
        }));

        function changedAttributes() {
          return _changedAttributes.apply(this, arguments);
        }

        return changedAttributes;
      }()
    }, {
      key: "resetAttribute",
      value: function () {
        var _resetAttribute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(asAttribute) {
          var attrConf, transform, vcTransform;
          return regeneratorRuntime.wrap(function _callee24$(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  if (!(this._internalRecord != null)) {
                    _context24.next = 8;
                    break;
                  }

                  attrConf = this.constructor.attributes[asAttribute];

                  if (!(attrConf != null)) {
                    _context24.next = 8;
                    break;
                  }

                  transform = attrConf.transform;
                  vcTransform = transform.call(this.constructor);
                  _context24.next = 7;
                  return vcTransform.normalize(this._internalRecord[asAttribute]);

                case 7:
                  this[asAttribute] = _context24.sent;

                case 8:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee24, this);
        }));

        function resetAttribute(_x10) {
          return _resetAttribute.apply(this, arguments);
        }

        return resetAttribute;
      }()
    }, {
      key: "rollbackAttributes",
      value: function () {
        var _rollbackAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
          var voAttributes, vsAttrName, transform, voOldValue, vcTransform;
          return regeneratorRuntime.wrap(function _callee25$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  if (!(this._internalRecord != null)) {
                    _context25.next = 15;
                    break;
                  }

                  voAttributes = this.constructor.attributes;
                  _context25.t0 = regeneratorRuntime.keys(voAttributes);

                case 3:
                  if ((_context25.t1 = _context25.t0()).done) {
                    _context25.next = 15;
                    break;
                  }

                  vsAttrName = _context25.t1.value;

                  if (hasProp$6.call(voAttributes, vsAttrName)) {
                    _context25.next = 7;
                    break;
                  }

                  return _context25.abrupt("continue", 3);

                case 7:
                  transform = voAttributes[vsAttrName].transform;
                  voOldValue = this._internalRecord[vsAttrName];
                  vcTransform = transform.call(this.constructor);
                  _context25.next = 12;
                  return vcTransform.normalize(voOldValue);

                case 12:
                  this[vsAttrName] = _context25.sent;
                  _context25.next = 3;
                  break;

                case 15:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee25, this);
        }));

        function rollbackAttributes() {
          return _rollbackAttributes.apply(this, arguments);
        }

        return rollbackAttributes;
      }()
    }], [{
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(ahPayload, aoCollection) {
          var vhAttributes, RecordClass, voAttrs, asAttr, transform, vcTransform, voRecord;
          return regeneratorRuntime.wrap(function _callee26$(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  if (!(ahPayload == null)) {
                    _context26.next = 2;
                    break;
                  }

                  return _context26.abrupt("return", null);

                case 2:
                  vhAttributes = {};
                  assert(ahPayload.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
                  RecordClass = this.name === ahPayload.type.split('::')[1] ? this : this.findRecordByName(ahPayload.type);
                  voAttrs = RecordClass.attributes;
                  _context26.t0 = regeneratorRuntime.keys(voAttrs);

                case 7:
                  if ((_context26.t1 = _context26.t0()).done) {
                    _context26.next = 18;
                    break;
                  }

                  asAttr = _context26.t1.value;

                  if (hasProp$6.call(voAttrs, asAttr)) {
                    _context26.next = 11;
                    break;
                  }

                  return _context26.abrupt("continue", 7);

                case 11:
                  transform = voAttrs[asAttr].transform;
                  vcTransform = transform.call(RecordClass);
                  _context26.next = 15;
                  return vcTransform.normalize(ahPayload[asAttr]);

                case 15:
                  vhAttributes[asAttr] = _context26.sent;
                  _context26.next = 7;
                  break;

                case 18:
                  vhAttributes.type = ahPayload.type; // NOTE: vhAttributes processed before new - it for StateMachine in record (when it has)

                  voRecord = RecordClass["new"](vhAttributes, aoCollection);
                  voRecord._internalRecord = voRecord.constructor.makeSnapshot(voRecord);
                  return _context26.abrupt("return", voRecord);

                case 22:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee26, this);
        }));

        function normalize(_x11, _x12) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(aoRecord) {
          var vhResult, voAttrs, asAttr, transform, vcTransform;
          return regeneratorRuntime.wrap(function _callee27$(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  if (!(aoRecord == null)) {
                    _context27.next = 2;
                    break;
                  }

                  return _context27.abrupt("return", null);

                case 2:
                  assert(aoRecord.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
                  vhResult = {};
                  voAttrs = aoRecord.constructor.attributes;
                  _context27.t0 = regeneratorRuntime.keys(voAttrs);

                case 6:
                  if ((_context27.t1 = _context27.t0()).done) {
                    _context27.next = 17;
                    break;
                  }

                  asAttr = _context27.t1.value;

                  if (hasProp$6.call(voAttrs, asAttr)) {
                    _context27.next = 10;
                    break;
                  }

                  return _context27.abrupt("continue", 6);

                case 10:
                  transform = voAttrs[asAttr].transform;
                  vcTransform = transform.call(this);
                  _context27.next = 14;
                  return vcTransform.serialize(aoRecord[asAttr]);

                case 14:
                  vhResult[asAttr] = _context27.sent;
                  _context27.next = 6;
                  break;

                case 17:
                  return _context27.abrupt("return", vhResult);

                case 18:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee27, this);
        }));

        function serialize(_x13) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "recoverize",
      value: function () {
        var _recoverize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(ahPayload, aoCollection) {
          var vhAttributes, RecordClass, voAttrs, asAttr, transform, vcTransform;
          return regeneratorRuntime.wrap(function _callee28$(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  if (!(ahPayload == null)) {
                    _context28.next = 2;
                    break;
                  }

                  return _context28.abrupt("return", null);

                case 2:
                  vhAttributes = {};
                  assert(ahPayload.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
                  RecordClass = this.name === ahPayload.type.split('::')[1] ? this : this.findRecordByName(ahPayload.type);
                  voAttrs = RecordClass.attributes;
                  _context28.t0 = regeneratorRuntime.keys(voAttrs);

                case 7:
                  if ((_context28.t1 = _context28.t0()).done) {
                    _context28.next = 19;
                    break;
                  }

                  asAttr = _context28.t1.value;

                  if (hasProp$6.call(voAttrs, asAttr)) {
                    _context28.next = 11;
                    break;
                  }

                  return _context28.abrupt("continue", 7);

                case 11:
                  transform = voAttrs[asAttr].transform;
                  vcTransform = transform.call(RecordClass);

                  if (!(asAttr in ahPayload)) {
                    _context28.next = 17;
                    break;
                  }

                  _context28.next = 16;
                  return vcTransform.normalize(ahPayload[asAttr]);

                case 16:
                  vhAttributes[asAttr] = _context28.sent;

                case 17:
                  _context28.next = 7;
                  break;

                case 19:
                  vhAttributes.type = ahPayload.type; // NOTE: vhAttributes processed before new - it for StateMachine in record (when it has)

                  return _context28.abrupt("return", RecordClass["new"](vhAttributes, aoCollection));

                case 21:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee28, this);
        }));

        function recoverize(_x14, _x15) {
          return _recoverize.apply(this, arguments);
        }

        return recoverize;
      }()
    }, {
      key: "objectize",
      value: function objectize(aoRecord) {
        if (aoRecord == null) {
          return null;
        }

        assert(aoRecord.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
        var vhResult = {};
        var voAttrs = aoRecord.constructor.attributes;

        for (var asAttr in voAttrs) {
          if (!hasProp$6.call(voAttrs, asAttr)) continue;
          var attrTransform = voAttrs[asAttr].transform;
          var vcAttrTransform = attrTransform.call(this);
          vhResult[asAttr] = vcAttrTransform.objectize(aoRecord[asAttr]);
        }

        var voComps = aoRecord.constructor.computeds;

        for (var asComp in voComps) {
          if (!hasProp$6.call(voComps, asComp)) continue;
          var compTransform = voComps[asComp].transform;
          var vcCompTransform = compTransform.call(this);
          vhResult[asComp] = vcCompTransform.objectize(aoRecord[asComp]);
        }

        return vhResult;
      }
    }, {
      key: "makeSnapshot",
      value: function makeSnapshot(aoRecord) {
        if (aoRecord == null) {
          return null;
        }

        assert(aoRecord.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
        var vhResult = {};
        var voAttributes = aoRecord.constructor.attributes;

        for (var asAttr in voAttributes) {
          if (!hasProp$6.call(voAttributes, asAttr)) continue;
          var transform = voAttributes[asAttr].transform;
          var vcTransform = transform.call(this);
          vhResult[asAttr] = vcTransform.objectize(aoRecord[asAttr]);
        }

        return vhResult;
      }
    }, {
      key: "parseRecordName",
      value: function parseRecordName(asName) {
        var vsModuleName, vsRecordName;

        if (/.*[:][:].*/.test(asName)) {
          var _asName$split = asName.split('::');

          var _asName$split2 = _slicedToArray(_asName$split, 2);

          vsModuleName = _asName$split2[0];
          vsRecordName = _asName$split2[1];
        } else {
          var _ref = [this.moduleName(), inflect.camelize(inflect.underscore(inflect.singularize(asName)))];
          vsModuleName = _ref[0];
          vsRecordName = _ref[1];
        }

        if (!/(Record$)|(Migration$)/.test(vsRecordName)) {
          vsRecordName += 'Record';
        }

        return [vsModuleName, vsRecordName];
      }
    }, {
      key: "findRecordByName",
      value: function findRecordByName(asName) {
        var _this$parseRecordName = this.parseRecordName(asName),
            _this$parseRecordName2 = _slicedToArray(_this$parseRecordName, 2),
            vsModuleName = _this$parseRecordName2[0],
            vsRecordName = _this$parseRecordName2[1];

        return this.Module.NS[vsRecordName] || this;
      }
    }, {
      key: "parentClassNames",
      value: function parentClassNames() {
        var AbstractClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (AbstractClass == null) {
          AbstractClass = this;
        }

        var SuperClass = Reflect.getPrototypeOf(AbstractClass);
        var fromSuper = !_.isEmpty(SuperClass != null ? SuperClass.name : undefined) ? this.parentClassNames(SuperClass) : undefined;
        return _.uniq([].concat(fromSuper || [])).concat([AbstractClass.name]);
      }
    }, {
      key: 'new',
      value: function _new(aoAttributes, aoCollection) {
        if (aoAttributes == null) {
          aoAttributes = {};
        }

        assert(aoAttributes.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');

        if (this.name === aoAttributes.type.split('::')[1]) {
          return _get(_getPrototypeOf(Record), "new", this).call(this, aoAttributes, aoCollection);
        } else {
          var RecordClass = this.findRecordByName(aoAttributes.type);

          if (RecordClass === this) {
            return _get(_getPrototypeOf(Record), "new", this).call(this, aoAttributes, aoCollection);
          } else {
            return RecordClass["new"](aoAttributes, aoCollection);
          }
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(acModule, replica) {
          var Facade, facade, voCollection;
          return regeneratorRuntime.wrap(function _callee29$(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context29.next = 15;
                    break;
                  }

                  Facade = acModule.NS.ApplicationFacade || acModule.NS.Facade;
                  facade = Facade.getInstance(replica.multitonKey);
                  voCollection = facade.retrieveProxy(replica.collectionName);

                  if (!replica.isNew) {
                    _context29.next = 10;
                    break;
                  }

                  _context29.next = 7;
                  return voCollection.build(replica.attributes);

                case 7:
                  return _context29.abrupt("return", _context29.sent);

                case 10:
                  _context29.next = 12;
                  return voCollection.find(replica.id);

                case 12:
                  return _context29.abrupt("return", _context29.sent);

                case 13:
                  _context29.next = 18;
                  break;

                case 15:
                  _context29.next = 17;
                  return _get(_getPrototypeOf(Record), "restoreObject", this).call(this, acModule, replica);

                case 17:
                  return _context29.abrupt("return", _context29.sent);

                case 18:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee29, this);
        }));

        function restoreObject(_x16, _x17) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(instance) {
          var replica, changedAttributes, changedKeys;
          return regeneratorRuntime.wrap(function _callee30$(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  _context30.next = 2;
                  return _get(_getPrototypeOf(Record), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context30.sent;
                  replica.multitonKey = instance.collection._multitonKey;
                  replica.collectionName = instance.collection.getProxyName();
                  _context30.next = 7;
                  return instance.isNew();

                case 7:
                  replica.isNew = _context30.sent;
                  assert(!replica.isNew, 'Replicating record is `new`. It must be seved previously');
                  _context30.next = 11;
                  return instance.changedAttributes();

                case 11:
                  changedAttributes = _context30.sent;
                  changedKeys = Object.keys(changedAttributes);
                  assert(changedKeys.length <= 0, "Replicating record has changedAttributes ".concat(changedKeys));
                  replica.id = instance.id;
                  return _context30.abrupt("return", replica);

                case 16:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee30, this);
        }));

        function replicateObject(_x18) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "_schemas",
      // ipoInternalRecord = PointerT(Record.protected({
      // ipoSchemas = PointerT(Record.protected(Record.static({
      get: function get() {
        return schemas;
      }
    }, {
      key: "schema",
      get: function get() {
        var existedSchema = this._schemas.get(this);

        if (existedSchema != null) return existedSchema;
        var vhAttrs = {};
        var voAttrs = this.attributes;

        for (var vsAttr in voAttrs) {
          if (!hasProp$6.call(voAttrs, vsAttr)) continue;
          var vhAttrValue = voAttrs[vsAttr];
          vhAttrs[vsAttr] = _.isFunction(vhAttrValue.validate) ? vhAttrValue.validate.call(this) : vhAttrValue.validate;
        }

        var voComps = this.computeds;

        for (var vsComp in voComps) {
          if (!hasProp$6.call(voComps, vsComp)) continue;
          var vhCompValue = voComps[vsComp];
          vhAttrs[vsComp] = _.isFunction(vhCompValue.validate) ? vhCompValue.validate.call(this) : vhCompValue.validate;
        }

        this._schemas.set(this, joi.object(vhAttrs));

        return this._schemas.get(this);
      }
    }, {
      key: "customFilters",
      get: function get() {
        return this.metaObject.getGroup('customFilters', false);
      },
      set: function set(config) {
        for (var asFilterName in config) {
          if (!hasProp$6.call(config, asFilterName)) continue;
          var aoStatement = config[asFilterName];
          this.metaObject.addMetaData('customFilters', asFilterName, aoStatement);
        }
      }
    }, {
      key: "attributes",
      get: function get() {
        return this.metaObject.getGroup('attributes', false);
      }
    }, {
      key: "computeds",
      get: function get() {
        return this.metaObject.getGroup('computeds', false);
      }
    }]);

    function Record(aoProperties, aoCollection) {
      var _this;

      _classCallCheck(this, Record);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_internalRecord", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "collection", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "id", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "rev", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "type", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "isHidden", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "createdAt", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "updatedAt", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "deletedAt", _descriptor9, _assertThisInitialized(_this));

      _this.collection = aoCollection;

      for (var vsAttrName in aoProperties) {
        if (!hasProp$6.call(aoProperties, vsAttrName)) continue;
        var voAttrValue = aoProperties[vsAttrName];
        _this[vsAttrName] = voAttrValue;
      }

      return _this;
    }

    _createClass(Record, [{
      key: "toJSON",
      value: function toJSON() {
        return this.constructor.objectize(this);
      }
    }]);

    return Record;
  }(CoreObject), _class3.__filename = __filename$U, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_internalRecord", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "_schemas", [property], Object.getOwnPropertyDescriptor(_class2, "_schemas"), _class2), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "collection", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "recoverize", [method], Object.getOwnPropertyDescriptor(_class2, "recoverize"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "makeSnapshot", [method], Object.getOwnPropertyDescriptor(_class2, "makeSnapshot"), _class2), _applyDecoratedDescriptor(_class2, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2, "parseRecordName"), _class2), _applyDecoratedDescriptor(_class2.prototype, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "parseRecordName"), _class2.prototype), _applyDecoratedDescriptor(_class2, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2, "findRecordByName"), _class2), _applyDecoratedDescriptor(_class2.prototype, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "findRecordByName"), _class2.prototype), _applyDecoratedDescriptor(_class2, "customFilters", [property], Object.getOwnPropertyDescriptor(_class2, "customFilters"), _class2), _applyDecoratedDescriptor(_class2, "customFilters", [property], Object.getOwnPropertyDescriptor(_class2, "customFilters"), _class2), _applyDecoratedDescriptor(_class2, "parentClassNames", [method], Object.getOwnPropertyDescriptor(_class2, "parentClassNames"), _class2), _applyDecoratedDescriptor(_class2, "attributes", [property], Object.getOwnPropertyDescriptor(_class2, "attributes"), _class2), _applyDecoratedDescriptor(_class2, "computeds", [property], Object.getOwnPropertyDescriptor(_class2, "computeds"), _class2), _applyDecoratedDescriptor(_class2, 'new', [method], Object.getOwnPropertyDescriptor(_class2, 'new'), _class2), _applyDecoratedDescriptor(_class2.prototype, "save", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "save"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "create", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "update", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'delete', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rev", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "type", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isHidden", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "createdAt", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "updatedAt", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "deletedAt", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "afterCreate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterCreate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "beforeUpdate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeUpdate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "beforeCreate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeCreate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "afterUpdate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterUpdate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "beforeDelete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeDelete"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "afterDelete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterDelete"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "afterDestroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterDestroy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "attributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "attributes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clone", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "clone"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "copy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "copy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "decrement", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "decrement"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "increment", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "increment"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toggle", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toggle"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "touch", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "touch"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "updateAttribute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "updateAttribute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "updateAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "updateAttributes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isNew", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "isNew"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reload", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reload"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "changedAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changedAttributes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resetAttribute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "resetAttribute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rollbackAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollbackAttributes"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2), _applyDecoratedDescriptor(_class2.prototype, "toJSON", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toJSON"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$V = '/leanes/patterns/data_mapper/Queue.js';

// import type { ResqueInterface } from './ResqueInterface';
var QueueInterface = flowRuntime_umd.type("QueueInterface", flowRuntime_umd.object(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number())));

var QueueInterface$1 = flowRuntime_umd.tdz(function () {
  return QueueInterface;
});
var ResqueInterface = flowRuntime_umd.type("ResqueInterface", flowRuntime_umd.object(flowRuntime_umd.property("tmpJobs", flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("queueName", flowRuntime_umd.string()), flowRuntime_umd.property("scriptName", flowRuntime_umd.string()), flowRuntime_umd.property("data", flowRuntime_umd.any()), flowRuntime_umd.property("delay", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("id", flowRuntime_umd.string())))), flowRuntime_umd.property("fullQueueName", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("concurrency", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(QueueInterface$1))))), flowRuntime_umd.property("all", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref(QueueInterface$1)))))), flowRuntime_umd.property("get", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(QueueInterface$1)))))), flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("update", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("concurrency", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(QueueInterface$1))))), flowRuntime_umd.property("delay", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd.param("delay", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))))), flowRuntime_umd.property("getDelayed", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("queueName", flowRuntime_umd.string()), flowRuntime_umd.property("scriptName", flowRuntime_umd.string()), flowRuntime_umd.property("data", flowRuntime_umd.any()), flowRuntime_umd.property("delay", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("id", flowRuntime_umd.string()))))))), flowRuntime_umd.property("ensureQueue", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("concurrency", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number())))))), flowRuntime_umd.property("getQueue", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number()))))))), flowRuntime_umd.property("removeQueue", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("allQueues", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number())))))))), flowRuntime_umd.property("pushJob", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd.param("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))))), flowRuntime_umd.property("getJob", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), flowRuntime_umd.property("deleteJob", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("abortJob", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("allJobs", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object")))))), flowRuntime_umd.property("pendingJobs", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object")))))), flowRuntime_umd.property("progressJobs", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object")))))), flowRuntime_umd.property("completedJobs", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object")))))), flowRuntime_umd.property("failedJobs", flowRuntime_umd["function"](flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))))));

var QueueInterface$2 = flowRuntime_umd.tdz(function () {
  return QueueInterface;
});
var ResqueInterface$1 = flowRuntime_umd.tdz(function () {
  return ResqueInterface;
});
var hasProp$7 = {}.hasOwnProperty;
var QueueTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var Queue = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Queue", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("resque", flowRuntime_umd.ref(ResqueInterface$1)), flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number()), flowRuntime_umd.method("delay", flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd.param("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd.method("push", flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd.param("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd.method("get", flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("delete", flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("abort", flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("all", flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("pending", flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("progress", flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("completed", flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("failed", flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref("object")))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.ref("Module"))), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref(QueueInterface$2))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(QueueInterface$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoProperties", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoResque", flowRuntime_umd.ref(ResqueInterface$1))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Queue, _CoreObject);

    var _super = _createSuper(Queue);

    _createClass(Queue, [{
      key: "delay",
      value: function () {
        var _delay = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(scriptName, data, delayUntil) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.resque.delay(this.name, scriptName, data, delayUntil);

                case 2:
                  return _context.abrupt("return", _context.sent);

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function delay(_x, _x2, _x3) {
          return _delay.apply(this, arguments);
        }

        return delay;
      }()
    }, {
      key: "push",
      value: function () {
        var _push = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(scriptName, data, delayUntil) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.resque.pushJob(this.name, scriptName, data, delayUntil);

                case 2:
                  return _context2.abrupt("return", _context2.sent);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function push(_x4, _x5, _x6) {
          return _push.apply(this, arguments);
        }

        return push;
      }()
    }, {
      key: "get",
      value: function () {
        var _get2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(jobId) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.resque.getJob(this.name, jobId);

                case 2:
                  return _context3.abrupt("return", _context3.sent);

                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function get(_x7) {
          return _get2.apply(this, arguments);
        }

        return get;
      }()
    }, {
      key: "delete",
      value: function () {
        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(jobId) {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.resque.deleteJob(this.name, jobId);

                case 2:
                  return _context4.abrupt("return", _context4.sent);

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function _delete(_x8) {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "abort",
      value: function () {
        var _abort = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(jobId) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.resque.abortJob(this.name, jobId);

                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function abort(_x9) {
          return _abort.apply(this, arguments);
        }

        return abort;
      }()
    }, {
      key: "all",
      value: function () {
        var _all = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(scriptName) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.resque.allJobs(this.name, scriptName);

                case 2:
                  return _context6.abrupt("return", _context6.sent);

                case 3:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function all(_x10) {
          return _all.apply(this, arguments);
        }

        return all;
      }()
    }, {
      key: "pending",
      value: function () {
        var _pending = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(scriptName) {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return this.resque.pendingJobs(this.name, scriptName);

                case 2:
                  return _context7.abrupt("return", _context7.sent);

                case 3:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function pending(_x11) {
          return _pending.apply(this, arguments);
        }

        return pending;
      }()
    }, {
      key: "progress",
      value: function () {
        var _progress = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(scriptName) {
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return this.resque.progressJobs(this.name, scriptName);

                case 2:
                  return _context8.abrupt("return", _context8.sent);

                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function progress(_x12) {
          return _progress.apply(this, arguments);
        }

        return progress;
      }()
    }, {
      key: "completed",
      value: function () {
        var _completed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(scriptName) {
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.resque.completedJobs(this.name, scriptName);

                case 2:
                  return _context9.abrupt("return", _context9.sent);

                case 3:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function completed(_x13) {
          return _completed.apply(this, arguments);
        }

        return completed;
      }()
    }, {
      key: "failed",
      value: function () {
        var _failed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(scriptName) {
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return this.resque.failedJobs(this.name, scriptName);

                case 2:
                  return _context10.abrupt("return", _context10.sent);

                case 3:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function failed(_x14) {
          return _failed.apply(this, arguments);
        }

        return failed;
      }()
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(acModule, replica) {
          var Facade, facade, resque;
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  if (!((replica != null ? replica["class"] : undefined) === this.name && (replica != null ? replica.type : undefined) === 'instance')) {
                    _context11.next = 9;
                    break;
                  }

                  Facade = acModule.NS.ApplicationFacade || acModule.NS.Facade;
                  facade = Facade.getInstance(replica.multitonKey);
                  resque = facade.getProxy(replica.resqueName);
                  _context11.next = 6;
                  return resque.get(replica.name);

                case 6:
                  return _context11.abrupt("return", _context11.sent);

                case 9:
                  _context11.next = 11;
                  return _get(_getPrototypeOf(Queue), "restoreObject", this).call(this, acModule, replica);

                case 11:
                  return _context11.abrupt("return", _context11.sent);

                case 12:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function restoreObject(_x15, _x16) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(instance) {
          var replica;
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _context12.next = 2;
                  return _get(_getPrototypeOf(Queue), "replicateObject", this).call(this, instance);

                case 2:
                  replica = _context12.sent;
                  replica.multitonKey = instance.resque._multitonKey;
                  replica.resqueName = instance.resque.getProxyName();
                  replica.name = instance.name;
                  return _context12.abrupt("return", replica);

                case 7:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function replicateObject(_x17) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Queue(aoProperties, aoResque) {
      var _this;

      _classCallCheck(this, Queue);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "resque", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "name", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "concurrency", _descriptor3, _assertThisInitialized(_this));

      _this.resque = aoResque;

      for (var vsAttrName in aoProperties) {
        if (!hasProp$7.call(aoProperties, vsAttrName)) continue;
        var voAttrValue = aoProperties[vsAttrName];
        _this[vsAttrName] = voAttrValue;
      }

      return _this;
    }

    return Queue;
  }(CoreObject), _class3.__filename = __filename$V, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "resque", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "name", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "concurrency", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "delay", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "delay"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "get", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "get"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "delete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "delete"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "abort", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "abort"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "all", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "all"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pending", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pending"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "progress", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "progress"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "completed", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "completed"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "failed", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "failed"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$W = '/leanes/patterns/data_mapper/Migration.js';

var MigrationInterface = flowRuntime_umd.type("MigrationInterface", function (MigrationInterface) {
  var REVERSE_MAP = MigrationInterface.typeParameter("REVERSE_MAP"),
      SUPPORTED_TYPES = MigrationInterface.typeParameter("SUPPORTED_TYPES"),
      UP = MigrationInterface.typeParameter("UP"),
      DOWN = MigrationInterface.typeParameter("DOWN");
  return flowRuntime_umd.object(flowRuntime_umd.property("steps", flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("args", flowRuntime_umd.array()), flowRuntime_umd.property("method", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.ref("REVERSE_MAP")), flowRuntime_umd.string("reversible")))))), flowRuntime_umd.property("createCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("createEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("addField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(SUPPORTED_TYPES), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(SUPPORTED_TYPES)), flowRuntime_umd.property("default", flowRuntime_umd.any())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("addIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("addTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("changeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("changeField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(SUPPORTED_TYPES), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(SUPPORTED_TYPES))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("renameField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("renameIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("old_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("renameCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("dropCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("dropEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("removeField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("removeIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("removeTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("execute", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("migrate", flowRuntime_umd["function"](flowRuntime_umd.param("direction", flowRuntime_umd.union(UP, DOWN)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))));
});

var RecordInterface$c = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var MigrationInterface$1 = flowRuntime_umd.tdz(function () {
  return MigrationInterface;
});
var MigrationTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      UP = _Module$NS.UP,
      DOWN = _Module$NS.DOWN,
      SUPPORTED_TYPES = _Module$NS.SUPPORTED_TYPES,
      REVERSE_MAP = _Module$NS.REVERSE_MAP,
      NON_OVERRIDDEN = _Module$NS.NON_OVERRIDDEN,
      Record = _Module$NS.Record,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      assign = _Module$NS$Utils.assign,
      forEach = _Module$NS$Utils.forEach;
  var Migration = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Migration", flowRuntime_umd["extends"](Record), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_steps", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("args", flowRuntime_umd.array()), flowRuntime_umd.property("method", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(REVERSE_MAP)), flowRuntime_umd.string("reversible"))))))), flowRuntime_umd.method("steps", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("args", flowRuntime_umd.array()), flowRuntime_umd.property("method", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(REVERSE_MAP)), flowRuntime_umd.string("reversible"))))))), flowRuntime_umd.method("index", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.staticMethod("createCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("createCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("createEdgeCollection", flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("createEdgeCollection", flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("addField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.any())))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.any())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("addIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("addTimestamps", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addTimestamps", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("changeCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("changeCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("changeField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)))))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("changeField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("renameField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("renameField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("renameIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("old_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("renameIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("old_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("renameCollection", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("renameCollection", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("dropCollection", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("dropCollection", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("dropEdgeCollection", flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("dropEdgeCollection", flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("removeField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("removeIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("removeTimestamps", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeTimestamps", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("reversible", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.exactObject(flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("execute", flowRuntime_umd.param("lambda", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("migrate", flowRuntime_umd.param("direction", flowRuntime_umd.union(flowRuntime_umd.ref(UP), flowRuntime_umd.ref(DOWN))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("change", flowRuntime_umd["return"](flowRuntime_umd.symbol())), flowRuntime_umd.method("up", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("up", flowRuntime_umd["return"](flowRuntime_umd.symbol())), flowRuntime_umd.method("down", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("down", flowRuntime_umd["return"](flowRuntime_umd.symbol())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.staticMethod("onInitialize", flowRuntime_umd.param("args", flowRuntime_umd.any())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Record) {
    _inherits(Migration, _Record);

    var _super = _createSuper(Migration);

    function Migration() {
      var _this;

      _classCallCheck(this, Migration);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "_steps", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(Migration, [{
      key: "createCollection",
      value: function () {
        var _createCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name, options) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function createCollection(_x, _x2) {
          return _createCollection.apply(this, arguments);
        }

        return createCollection;
      }()
    }, {
      key: "createEdgeCollection",
      value: function () {
        var _createEdgeCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(collection_1, collection_2, options) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function createEdgeCollection(_x3, _x4, _x5) {
          return _createEdgeCollection.apply(this, arguments);
        }

        return createEdgeCollection;
      }()
    }, {
      key: "addField",
      value: function () {
        var _addField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(collection_name, field_name, options) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function addField(_x6, _x7, _x8) {
          return _addField.apply(this, arguments);
        }

        return addField;
      }()
    }, {
      key: "addIndex",
      value: function () {
        var _addIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(collection_name, field_names, options) {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        function addIndex(_x9, _x10, _x11) {
          return _addIndex.apply(this, arguments);
        }

        return addIndex;
      }()
    }, {
      key: "addTimestamps",
      value: function () {
        var _addTimestamps = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(collection_name, options) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  return _context5.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function addTimestamps(_x12, _x13) {
          return _addTimestamps.apply(this, arguments);
        }

        return addTimestamps;
      }()
    }, {
      key: "changeCollection",
      value: function () {
        var _changeCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(name, options) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  return _context6.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        function changeCollection(_x14, _x15) {
          return _changeCollection.apply(this, arguments);
        }

        return changeCollection;
      }()
    }, {
      key: "changeField",
      value: function () {
        var _changeField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(collection_name, field_name, options) {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  return _context7.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7);
        }));

        function changeField(_x16, _x17, _x18) {
          return _changeField.apply(this, arguments);
        }

        return changeField;
      }()
    }, {
      key: "renameField",
      value: function () {
        var _renameField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(collection_name, field_name, new_field_name) {
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  return _context8.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8);
        }));

        function renameField(_x19, _x20, _x21) {
          return _renameField.apply(this, arguments);
        }

        return renameField;
      }()
    }, {
      key: "renameIndex",
      value: function () {
        var _renameIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(collection_name, old_name, new_name) {
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  return _context9.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9);
        }));

        function renameIndex(_x22, _x23, _x24) {
          return _renameIndex.apply(this, arguments);
        }

        return renameIndex;
      }()
    }, {
      key: "renameCollection",
      value: function () {
        var _renameCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(collection_name, new_name) {
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  return _context10.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10);
        }));

        function renameCollection(_x25, _x26) {
          return _renameCollection.apply(this, arguments);
        }

        return renameCollection;
      }()
    }, {
      key: "dropCollection",
      value: function () {
        var _dropCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(collection_name) {
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  return _context11.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11);
        }));

        function dropCollection(_x27) {
          return _dropCollection.apply(this, arguments);
        }

        return dropCollection;
      }()
    }, {
      key: "dropEdgeCollection",
      value: function () {
        var _dropEdgeCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(collection_1, collection_2) {
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  return _context12.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));

        function dropEdgeCollection(_x28, _x29) {
          return _dropEdgeCollection.apply(this, arguments);
        }

        return dropEdgeCollection;
      }()
    }, {
      key: "removeField",
      value: function () {
        var _removeField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(collection_name, field_name) {
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  return _context13.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13);
        }));

        function removeField(_x30, _x31) {
          return _removeField.apply(this, arguments);
        }

        return removeField;
      }()
    }, {
      key: "removeIndex",
      value: function () {
        var _removeIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(collection_name, field_names, options) {
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  return _context14.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14);
        }));

        function removeIndex(_x32, _x33, _x34) {
          return _removeIndex.apply(this, arguments);
        }

        return removeIndex;
      }()
    }, {
      key: "removeTimestamps",
      value: function () {
        var _removeTimestamps = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(collection_name, options) {
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  return _context15.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15);
        }));

        function removeTimestamps(_x35, _x36) {
          return _removeTimestamps.apply(this, arguments);
        }

        return removeTimestamps;
      }()
    }, {
      key: "execute",
      value: function () {
        var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(lambda) {
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  _context16.next = 2;
                  return lambda.apply(this, []);

                case 2:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function execute(_x37) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "migrate",
      value: function () {
        var _migrate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(direction) {
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  _context17.t0 = direction;
                  _context17.next = _context17.t0 === UP ? 3 : _context17.t0 === DOWN ? 6 : 8;
                  break;

                case 3:
                  _context17.next = 5;
                  return this.up();

                case 5:
                  return _context17.abrupt("break", 8);

                case 6:
                  _context17.next = 8;
                  return this.down();

                case 8:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this);
        }));

        function migrate(_x38) {
          return _migrate.apply(this, arguments);
        }

        return migrate;
      }()
    }, {
      key: "up",
      value: function () {
        var _up = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
          var _this2 = this;

          return regeneratorRuntime.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  _context21.next = 2;
                  return forEach(this.steps, /*#__PURE__*/function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(_ref) {
                      var methodName, args, _args18, lambda;

                      return regeneratorRuntime.wrap(function _callee20$(_context20) {
                        while (1) {
                          switch (_context20.prev = _context20.next) {
                            case 0:
                              methodName = _ref.method, args = _ref.args;

                              if (!(methodName === 'reversible')) {
                                _context20.next = 7;
                                break;
                              }

                              _args18 = _slicedToArray(args, 1), lambda = _args18[0];
                              _context20.next = 5;
                              return lambda.call(_this2, {
                                up: function () {
                                  var _up2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(f) {
                                    return regeneratorRuntime.wrap(function _callee18$(_context18) {
                                      while (1) {
                                        switch (_context18.prev = _context18.next) {
                                          case 0:
                                            _context18.next = 2;
                                            return f();

                                          case 2:
                                            return _context18.abrupt("return", _context18.sent);

                                          case 3:
                                          case "end":
                                            return _context18.stop();
                                        }
                                      }
                                    }, _callee18);
                                  }));

                                  function up(_x40) {
                                    return _up2.apply(this, arguments);
                                  }

                                  return up;
                                }(),
                                down: function () {
                                  var _down = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                                    return regeneratorRuntime.wrap(function _callee19$(_context19) {
                                      while (1) {
                                        switch (_context19.prev = _context19.next) {
                                          case 0:
                                            return _context19.abrupt("return");

                                          case 1:
                                          case "end":
                                            return _context19.stop();
                                        }
                                      }
                                    }, _callee19);
                                  }));

                                  function down() {
                                    return _down.apply(this, arguments);
                                  }

                                  return down;
                                }()
                              });

                            case 5:
                              _context20.next = 9;
                              break;

                            case 7:
                              _context20.next = 9;
                              return _this2[methodName].apply(_this2, _toConsumableArray(args));

                            case 9:
                            case "end":
                              return _context20.stop();
                          }
                        }
                      }, _callee20);
                    }));

                    return function (_x39) {
                      return _ref2.apply(this, arguments);
                    };
                  }());

                case 2:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21, this);
        }));

        function up() {
          return _up.apply(this, arguments);
        }

        return up;
      }()
    }, {
      key: "down",
      value: function () {
        var _down2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
          var _this3 = this;

          return regeneratorRuntime.wrap(function _callee25$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  _context25.next = 2;
                  return forEach(this.steps.reverse(), /*#__PURE__*/function () {
                    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(_ref3) {
                      var methodName, args, _args23, lambda, _args26, collectionName, oldName, newName, _args27, oldCollectionName, newCollectionName;

                      return regeneratorRuntime.wrap(function _callee24$(_context24) {
                        while (1) {
                          switch (_context24.prev = _context24.next) {
                            case 0:
                              methodName = _ref3.method, args = _ref3.args;

                              if (!(methodName === 'reversible')) {
                                _context24.next = 7;
                                break;
                              }

                              _args23 = _slicedToArray(args, 1), lambda = _args23[0];
                              _context24.next = 5;
                              return lambda.call(_this3, {
                                up: function () {
                                  var _up3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
                                    return regeneratorRuntime.wrap(function _callee22$(_context22) {
                                      while (1) {
                                        switch (_context22.prev = _context22.next) {
                                          case 0:
                                            return _context22.abrupt("return");

                                          case 1:
                                          case "end":
                                            return _context22.stop();
                                        }
                                      }
                                    }, _callee22);
                                  }));

                                  function up() {
                                    return _up3.apply(this, arguments);
                                  }

                                  return up;
                                }(),
                                down: function () {
                                  var _down3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(f) {
                                    return regeneratorRuntime.wrap(function _callee23$(_context23) {
                                      while (1) {
                                        switch (_context23.prev = _context23.next) {
                                          case 0:
                                            _context23.next = 2;
                                            return f();

                                          case 2:
                                            return _context23.abrupt("return", _context23.sent);

                                          case 3:
                                          case "end":
                                            return _context23.stop();
                                        }
                                      }
                                    }, _callee23);
                                  }));

                                  function down(_x42) {
                                    return _down3.apply(this, arguments);
                                  }

                                  return down;
                                }()
                              });

                            case 5:
                              _context24.next = 21;
                              break;

                            case 7:
                              if (!_.includes(['renameField', 'renameIndex'], methodName)) {
                                _context24.next = 13;
                                break;
                              }

                              _args26 = _slicedToArray(args, 3), collectionName = _args26[0], oldName = _args26[1], newName = _args26[2];
                              _context24.next = 11;
                              return _this3[methodName](collectionName, newName, oldName);

                            case 11:
                              _context24.next = 21;
                              break;

                            case 13:
                              if (!(methodName === 'renameCollection')) {
                                _context24.next = 19;
                                break;
                              }

                              _args27 = _slicedToArray(args, 2), oldCollectionName = _args27[0], newCollectionName = _args27[1];
                              _context24.next = 17;
                              return _this3[methodName](newCollectionName, oldCollectionName);

                            case 17:
                              _context24.next = 21;
                              break;

                            case 19:
                              _context24.next = 21;
                              return _this3[REVERSE_MAP[methodName]].apply(_this3, _toConsumableArray(args));

                            case 21:
                            case "end":
                              return _context24.stop();
                          }
                        }
                      }, _callee24);
                    }));

                    return function (_x41) {
                      return _ref4.apply(this, arguments);
                    };
                  }());

                case 2:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee25, this);
        }));

        function down() {
          return _down2.apply(this, arguments);
        }

        return down;
      }()
    }, {
      key: "steps",
      get: function get() {
        return assign([], this._steps && _toConsumableArray(this._steps) || []);
      }
    }, {
      key: "index",
      get: function get() {
        var _this$id$split = this.id.split('_'),
            _this$id$split2 = _slicedToArray(_this$id$split, 1),
            index = _this$id$split2[0];

        return index;
      }
    }], [{
      key: "createCollection",
      value: function createCollection(name, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'createCollection'
        });
      }
    }, {
      key: "createEdgeCollection",
      value: function createEdgeCollection(collection_1, collection_2, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'createEdgeCollection'
        });
      }
    }, {
      key: "addField",
      value: function addField(collection_name, field_name, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'addField'
        });
      }
    }, {
      key: "addIndex",
      value: function addIndex(collection_name, field_names, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'addIndex'
        });
      }
    }, {
      key: "addTimestamps",
      value: function addTimestamps(collection_name, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'addTimestamps'
        });
      }
    }, {
      key: "changeCollection",
      value: function changeCollection(name, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'changeCollection'
        });
      }
    }, {
      key: "changeField",
      value: function changeField(collection_name, field_name, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'changeField'
        });
      }
    }, {
      key: "renameField",
      value: function renameField(collection_name, field_name, new_field_name) {
        this.prototype._steps.push({
          args: arguments,
          method: 'renameField'
        });
      }
    }, {
      key: "renameIndex",
      value: function renameIndex(collection_name, old_name, new_name) {
        this.prototype._steps.push({
          args: arguments,
          method: 'renameIndex'
        });
      }
    }, {
      key: "renameCollection",
      value: function renameCollection(collection_name, new_name) {
        this.prototype._steps.push({
          args: arguments,
          method: 'renameCollection'
        });
      }
    }, {
      key: "dropCollection",
      value: function dropCollection(collection_name) {
        this.prototype._steps.push({
          args: arguments,
          method: 'dropCollection'
        });
      }
    }, {
      key: "dropEdgeCollection",
      value: function dropEdgeCollection(collection_1, collection_2) {
        this.prototype._steps.push({
          args: arguments,
          method: 'dropEdgeCollection'
        });
      }
    }, {
      key: "removeField",
      value: function removeField(collection_name, field_name) {
        this.prototype._steps.push({
          args: arguments,
          method: 'removeField'
        });
      }
    }, {
      key: "removeIndex",
      value: function removeIndex(collection_name, field_names, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'removeIndex'
        });
      }
    }, {
      key: "removeTimestamps",
      value: function removeTimestamps(collection_name, options) {
        this.prototype._steps.push({
          args: arguments,
          method: 'removeTimestamps'
        });
      }
    }, {
      key: "reversible",
      value: function reversible(lambda) {
        this.prototype._steps.push({
          args: arguments,
          method: 'reversible'
        });
      }
    }, {
      key: "change",
      value: function change() {
        return NON_OVERRIDDEN;
      }
    }, {
      key: "up",
      value: function up() {
        return NON_OVERRIDDEN;
      }
    }, {
      key: "down",
      value: function down() {
        return NON_OVERRIDDEN;
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
          return regeneratorRuntime.wrap(function _callee26$(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  return _context26.abrupt("return", assert.fail("restoreObject method not supported for ".concat(this.name)));

                case 1:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee26, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
          return regeneratorRuntime.wrap(function _callee27$(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  return _context27.abrupt("return", assert.fail("replicateObject method not supported for ".concat(this.name)));

                case 1:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee27, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "onInitialize",
      value: function onInitialize() {
        var _get2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get2 = _get(_getPrototypeOf(Migration), "onInitialize", this)).call.apply(_get2, [this].concat(args));

        if (this.prototype._steps == null) {
          this.prototype._steps = [];
        }

        if (this === Migration) return;
        var changeReturn = this.change();

        if (changeReturn === NON_OVERRIDDEN) {
          var hasUpDownDeined = 1;
          var upFunctor = this.up();
          var downFunctor = this.down();
          hasUpDownDeined &= upFunctor !== NON_OVERRIDDEN;
          hasUpDownDeined &= downFunctor !== NON_OVERRIDDEN;
          assert(hasUpDownDeined == 1, 'Static `change` method should be defined or direct static methods `up` and `down` should be defined with return lambda functors');
          Reflect.defineProperty(this.prototype, 'up', method(this.prototype, 'up', {
            value: upFunctor
          }));
          Refle.defineProperty(this.prototype, 'down', method(this.prototype, 'down', {
            value: downFunctor
          }));
        }
      }
    }]);

    return Migration;
  }(Record), _class3.__filename = __filename$W, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_steps", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "steps", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "steps"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "index", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "index"), _class2.prototype), _applyDecoratedDescriptor(_class2, "createCollection", [method], Object.getOwnPropertyDescriptor(_class2, "createCollection"), _class2), _applyDecoratedDescriptor(_class2.prototype, "createCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2, "createEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2, "createEdgeCollection"), _class2), _applyDecoratedDescriptor(_class2.prototype, "createEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createEdgeCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2, "addField", [method], Object.getOwnPropertyDescriptor(_class2, "addField"), _class2), _applyDecoratedDescriptor(_class2.prototype, "addField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addField"), _class2.prototype), _applyDecoratedDescriptor(_class2, "addIndex", [method], Object.getOwnPropertyDescriptor(_class2, "addIndex"), _class2), _applyDecoratedDescriptor(_class2.prototype, "addIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addIndex"), _class2.prototype), _applyDecoratedDescriptor(_class2, "addTimestamps", [method], Object.getOwnPropertyDescriptor(_class2, "addTimestamps"), _class2), _applyDecoratedDescriptor(_class2.prototype, "addTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addTimestamps"), _class2.prototype), _applyDecoratedDescriptor(_class2, "changeCollection", [method], Object.getOwnPropertyDescriptor(_class2, "changeCollection"), _class2), _applyDecoratedDescriptor(_class2.prototype, "changeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2, "changeField", [method], Object.getOwnPropertyDescriptor(_class2, "changeField"), _class2), _applyDecoratedDescriptor(_class2.prototype, "changeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeField"), _class2.prototype), _applyDecoratedDescriptor(_class2, "renameField", [method], Object.getOwnPropertyDescriptor(_class2, "renameField"), _class2), _applyDecoratedDescriptor(_class2.prototype, "renameField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameField"), _class2.prototype), _applyDecoratedDescriptor(_class2, "renameIndex", [method], Object.getOwnPropertyDescriptor(_class2, "renameIndex"), _class2), _applyDecoratedDescriptor(_class2.prototype, "renameIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameIndex"), _class2.prototype), _applyDecoratedDescriptor(_class2, "renameCollection", [method], Object.getOwnPropertyDescriptor(_class2, "renameCollection"), _class2), _applyDecoratedDescriptor(_class2.prototype, "renameCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2, "dropCollection", [method], Object.getOwnPropertyDescriptor(_class2, "dropCollection"), _class2), _applyDecoratedDescriptor(_class2.prototype, "dropCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2, "dropEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2, "dropEdgeCollection"), _class2), _applyDecoratedDescriptor(_class2.prototype, "dropEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropEdgeCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2, "removeField", [method], Object.getOwnPropertyDescriptor(_class2, "removeField"), _class2), _applyDecoratedDescriptor(_class2.prototype, "removeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeField"), _class2.prototype), _applyDecoratedDescriptor(_class2, "removeIndex", [method], Object.getOwnPropertyDescriptor(_class2, "removeIndex"), _class2), _applyDecoratedDescriptor(_class2.prototype, "removeIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeIndex"), _class2.prototype), _applyDecoratedDescriptor(_class2, "removeTimestamps", [method], Object.getOwnPropertyDescriptor(_class2, "removeTimestamps"), _class2), _applyDecoratedDescriptor(_class2.prototype, "removeTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeTimestamps"), _class2.prototype), _applyDecoratedDescriptor(_class2, "reversible", [method], Object.getOwnPropertyDescriptor(_class2, "reversible"), _class2), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype), _applyDecoratedDescriptor(_class2, "change", [method], Object.getOwnPropertyDescriptor(_class2, "change"), _class2), _applyDecoratedDescriptor(_class2.prototype, "up", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "up"), _class2.prototype), _applyDecoratedDescriptor(_class2, "up", [method], Object.getOwnPropertyDescriptor(_class2, "up"), _class2), _applyDecoratedDescriptor(_class2.prototype, "down", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "down"), _class2.prototype), _applyDecoratedDescriptor(_class2, "down", [method], Object.getOwnPropertyDescriptor(_class2, "down"), _class2), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2), _applyDecoratedDescriptor(_class2, "onInitialize", [method], Object.getOwnPropertyDescriptor(_class2, "onInitialize"), _class2)), _class2)) || _class) || _class) || _class);
});

var QueryInterface = flowRuntime_umd.type("QueryInterface", function (QueryInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("$forIn", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("$join", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("$let", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("$filter", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("$collect", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("$into", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd.property("$having", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("$sort", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd.property("$limit", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("$offset", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("$avg", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("$sum", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("$min", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("$max", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("$count", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("$distinct", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("$remove", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd.property("$patch", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("$return", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd.property("forIn", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinitions", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("join", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinitions", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("filter", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinitions", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("let", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinitions", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("collect", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinition", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("into", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinition", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("having", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinition", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("sort", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinition", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("limit", flowRuntime_umd["function"](flowRuntime_umd.param("anValue", flowRuntime_umd.number()), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("offset", flowRuntime_umd["function"](flowRuntime_umd.param("anValue", flowRuntime_umd.number()), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("distinct", flowRuntime_umd["function"](flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd.param("expr", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("patch", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinition", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("return", flowRuntime_umd["function"](flowRuntime_umd.param("aoDefinition", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("count", flowRuntime_umd["function"](flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("avg", flowRuntime_umd["function"](flowRuntime_umd.param("asDefinition", flowRuntime_umd.string()), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("min", flowRuntime_umd["function"](flowRuntime_umd.param("asDefinition", flowRuntime_umd.string()), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("max", flowRuntime_umd["function"](flowRuntime_umd.param("asDefinition", flowRuntime_umd.string()), flowRuntime_umd["return"](QueryInterface))), flowRuntime_umd.property("sum", flowRuntime_umd["function"](flowRuntime_umd.param("asDefinition", flowRuntime_umd.string()), flowRuntime_umd["return"](QueryInterface))));
});

var QueryInterface$1 = flowRuntime_umd.tdz(function () {
  return QueryInterface;
});

var __filename$X = '/leanes/patterns/proxy/Collection.js';

var SerializableInterface = flowRuntime_umd.type("SerializableInterface", function (SerializableInterface) {
  var T = SerializableInterface.typeParameter("T");
  return flowRuntime_umd.object(flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("ahData", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd.param("ahOptions", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.any())))));
});

var SerializableInterface$1 = flowRuntime_umd.tdz(function () {
  return SerializableInterface;
});
var ObjectizerInterface$2 = flowRuntime_umd.tdz(function () {
  return ObjectizerInterface;
});
var SerializerInterface$2 = flowRuntime_umd.tdz(function () {
  return SerializerInterface;
});
var CursorInterface$4 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var RecordStaticInterface$4 = flowRuntime_umd.tdz(function () {
  return RecordStaticInterface;
});
var RecordInterface$d = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$6 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var hasProp$8 = {}.hasOwnProperty;
var CollectionTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      RECORD_CHANGED = _Module$NS.RECORD_CHANGED,
      Proxy = _Module$NS.Proxy,
      Serializer = _Module$NS.Serializer,
      Objectizer = _Module$NS.Objectizer,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  var Collection = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Collection", function (Collection) {
    var D = Collection.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$d));
    var R = Collection.typeParameter("R", undefined, flowRuntime_umd.ref(RecordStaticInterface$4));
    return [flowRuntime_umd["extends"](Proxy), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("delegate", flowRuntime_umd["return"](flowRuntime_umd.ref(RecordStaticInterface$4))), flowRuntime_umd.property("serializer", flowRuntime_umd.nullable(flowRuntime_umd.ref(SerializerInterface$2, flowRuntime_umd.flowInto(D)))), flowRuntime_umd.property("objectizer", flowRuntime_umd.nullable(flowRuntime_umd.ref(ObjectizerInterface$2, flowRuntime_umd.flowInto(R), flowRuntime_umd.flowInto(D)))), flowRuntime_umd.method("collectionName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("collectionPrefix", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("collectionFullName", flowRuntime_umd.param("asName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("recordHasBeenChanged", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("generateId", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())))), flowRuntime_umd.method("build", flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("create", flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("push", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("delete", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("destroy", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("remove", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("find", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("findMany", flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$4, flowRuntime_umd.ref(CollectionInterface$6, D), D)))), flowRuntime_umd.method("take", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("takeMany", flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$4, flowRuntime_umd.ref(CollectionInterface$6, D), D)))), flowRuntime_umd.method("takeAll", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$4, flowRuntime_umd.ref(CollectionInterface$6, D), D)))), flowRuntime_umd.method("update", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("override", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("clone", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("copy", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("includes", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))), flowRuntime_umd.method("normalize", flowRuntime_umd.param("ahData", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd.param("ahOptions", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.any()))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("proxyName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("delegate", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"](), flowRuntime_umd.ref(RecordStaticInterface$4))), flowRuntime_umd.property("serializer", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"](), flowRuntime_umd.Class(flowRuntime_umd.ref(Serializer))), true), flowRuntime_umd.property("objectizer", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"](), flowRuntime_umd.Class(flowRuntime_umd.ref(Objectizer))), true)))))];
  })), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Proxy) {
    _inherits(Collection, _Proxy);

    var _super = _createSuper(Collection);

    _createClass(Collection, [{
      key: "collectionName",
      value: function collectionName() {
        var firstClassName = _.first(_.remove(this.delegate.parentClassNames(), function (name) {
          return !/Mixin$|Interface$|^CoreObject$|^Record$/.test(name);
        }));

        return inflect.pluralize(inflect.underscore(firstClassName.replace(/Record$/, '')));
      }
    }, {
      key: "collectionPrefix",
      value: function collectionPrefix() {
        return "".concat(inflect.underscore(this.Module.name), "_");
      }
    }, {
      key: "collectionFullName",
      value: function collectionFullName() {
        var asName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return "".concat(this.collectionPrefix()).concat(asName || this.collectionName());
      }
    }, {
      key: "recordHasBeenChanged",
      value: function recordHasBeenChanged(asType, aoData) {
        this.send(RECORD_CHANGED, aoData, asType);
      }
    }, {
      key: "generateId",
      value: function () {
        var _generateId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return");

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function generateId() {
          return _generateId.apply(this, arguments);
        }

        return generateId;
      }()
    }, {
      key: "build",
      value: function () {
        var _build = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(properties) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.objectizer.recoverize(this.delegate, properties);

                case 2:
                  return _context2.abrupt("return", _context2.sent);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function build(_x) {
          return _build.apply(this, arguments);
        }

        return build;
      }()
    }, {
      key: "create",
      value: function () {
        var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(properties) {
          var voRecord;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.build(properties);

                case 2:
                  voRecord = _context3.sent;
                  _context3.next = 5;
                  return voRecord.save();

                case 5:
                  return _context3.abrupt("return", _context3.sent);

                case 6:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function create(_x2) {
          return _create.apply(this, arguments);
        }

        return create;
      }()
    }, {
      key: "push",
      value: function () {
        var _push = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(aoRecord) {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        function push(_x3) {
          return _push.apply(this, arguments);
        }

        return push;
      }()
    }, {
      key: 'delete',
      value: function () {
        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(id) {
          var voRecord;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.find(id);

                case 2:
                  voRecord = _context5.sent;
                  _context5.next = 5;
                  return voRecord["delete"]();

                case 5:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function _delete(_x4) {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "destroy",
      value: function () {
        var _destroy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id) {
          var voRecord;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.find(id);

                case 2:
                  voRecord = _context6.sent;
                  _context6.next = 5;
                  return voRecord.destroy();

                case 5:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function destroy(_x5) {
          return _destroy.apply(this, arguments);
        }

        return destroy;
      }()
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(id) {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  return _context7.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7);
        }));

        function remove(_x6) {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }, {
      key: "find",
      value: function () {
        var _find = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(id) {
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return this.take(id);

                case 2:
                  return _context8.abrupt("return", _context8.sent);

                case 3:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function find(_x7) {
          return _find.apply(this, arguments);
        }

        return find;
      }()
    }, {
      key: "findMany",
      value: function () {
        var _findMany = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(ids) {
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.takeMany(ids);

                case 2:
                  return _context9.abrupt("return", _context9.sent);

                case 3:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function findMany(_x8) {
          return _findMany.apply(this, arguments);
        }

        return findMany;
      }()
    }, {
      key: "take",
      value: function () {
        var _take = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(id) {
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  return _context10.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10);
        }));

        function take(_x9) {
          return _take.apply(this, arguments);
        }

        return take;
      }()
    }, {
      key: "takeMany",
      value: function () {
        var _takeMany = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(ids) {
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  return _context11.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11);
        }));

        function takeMany(_x10) {
          return _takeMany.apply(this, arguments);
        }

        return takeMany;
      }()
    }, {
      key: "takeAll",
      value: function () {
        var _takeAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  return _context12.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));

        function takeAll() {
          return _takeAll.apply(this, arguments);
        }

        return takeAll;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(id, properties) {
          var existedRecord, receivedRecord, key;
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  properties.id = id;
                  _context13.next = 3;
                  return this.find(id);

                case 3:
                  existedRecord = _context13.sent;
                  _context13.next = 6;
                  return this.objectizer.recoverize(this.delegate, properties);

                case 6:
                  receivedRecord = _context13.sent;
                  _context13.t0 = regeneratorRuntime.keys(properties);

                case 8:
                  if ((_context13.t1 = _context13.t0()).done) {
                    _context13.next = 15;
                    break;
                  }

                  key = _context13.t1.value;

                  if (hasProp$8.call(properties, key)) {
                    _context13.next = 12;
                    break;
                  }

                  return _context13.abrupt("continue", 8);

                case 12:
                  existedRecord[key] = receivedRecord[key];
                  _context13.next = 8;
                  break;

                case 15:
                  _context13.next = 17;
                  return existedRecord.save();

                case 17:
                  return _context13.abrupt("return", _context13.sent);

                case 18:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function update(_x11, _x12) {
          return _update.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: "override",
      value: function () {
        var _override = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(id, aoRecord) {
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  return _context14.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14);
        }));

        function override(_x13, _x14) {
          return _override.apply(this, arguments);
        }

        return override;
      }()
    }, {
      key: "clone",
      value: function () {
        var _clone = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(aoRecord) {
          var vhAttributes, RecordClass, vlAttributes, _i, _vlAttributes, key, voRecord;

          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  vhAttributes = {};
                  RecordClass = this.delegate;
                  vlAttributes = Object.keys(RecordClass.attributes);

                  for (_i = 0, _vlAttributes = vlAttributes; _i < _vlAttributes.length; _i++) {
                    key = _vlAttributes[_i];
                    vhAttributes[key] = aoRecord[key];
                  }

                  voRecord = new RecordClass(vhAttributes, this);
                  _context15.next = 7;
                  return this.generateId();

                case 7:
                  voRecord.id = _context15.sent;
                  return _context15.abrupt("return", voRecord);

                case 9:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function clone(_x15) {
          return _clone.apply(this, arguments);
        }

        return clone;
      }()
    }, {
      key: "copy",
      value: function () {
        var _copy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(aoRecord) {
          var voRecord;
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  _context16.next = 2;
                  return this.clone(aoRecord);

                case 2:
                  voRecord = _context16.sent;
                  _context16.next = 5;
                  return voRecord.save();

                case 5:
                  return _context16.abrupt("return", voRecord);

                case 6:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function copy(_x16) {
          return _copy.apply(this, arguments);
        }

        return copy;
      }()
    }, {
      key: "includes",
      value: function () {
        var _includes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(id) {
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  return _context17.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17);
        }));

        function includes(_x17) {
          return _includes.apply(this, arguments);
        }

        return includes;
      }()
    }, {
      key: "length",
      value: function () {
        var _length = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  return _context18.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18);
        }));

        function length() {
          return _length.apply(this, arguments);
        }

        return length;
      }()
    }, {
      key: "normalize",
      value: function () {
        var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(ahData) {
          return regeneratorRuntime.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  _context19.next = 2;
                  return this.serializer.normalize(this.delegate, ahData);

                case 2:
                  return _context19.abrupt("return", _context19.sent);

                case 3:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19, this);
        }));

        function normalize(_x18) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(aoRecord, ahOptions) {
          return regeneratorRuntime.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  _context20.next = 2;
                  return this.serializer.serialize(aoRecord, ahOptions);

                case 2:
                  return _context20.abrupt("return", _context20.sent);

                case 3:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20, this);
        }));

        function serialize(_x19, _x20) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "delegate",
      get: function get() {
        var _delegateType = flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"](), flowRuntime_umd.ref(RecordStaticInterface$4))),
            delegate = undefined;

        var proxyData = this.getData();
        delegate = proxyData != null ? proxyData.delegate : undefined;

        if (_.isString(delegate)) {
          delegate = this.ApplicationModule.NS[delegate];
        } else if (!/Migration$|Record$/.test(delegate.name)) {
          delegate = typeof delegate === 'function' ? delegate() : undefined;
        }

        return delegate;
      }
    }]);

    function Collection(proxyName, data) {
      var _this;

      _classCallCheck(this, Collection);

      _this = _super.call(this, proxyName, data);

      _initializerDefineProperty(_this, "serializer", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "objectizer", _descriptor2, _assertThisInitialized(_this));

      var proxyData = _this.getData();

      var NS = _this.ApplicationModule.NS;
      var serializer = proxyData != null ? proxyData.serializer : undefined;
      var objectizer = proxyData != null ? proxyData.objectizer : undefined;
      var SerializerClass = serializer == null ? Serializer : _.isString(serializer) ? _this.ApplicationModule.NS[serializer] : !/Serializer$/.test(serializer.name) ? typeof serializer === 'function' ? serializer() : undefined : serializer;
      var ObjectizerClass = objectizer == null ? Objectizer : _.isString(objectizer) ? _this.ApplicationModule.NS[objectizer] : !/Objectizer$/.test(objectizer.name) ? typeof objectizer === 'function' ? objectizer() : undefined : objectizer;
      _this.serializer = SerializerClass["new"](_assertThisInitialized(_this));
      _this.objectizer = ObjectizerClass["new"](_assertThisInitialized(_this));
      return _this;
    }

    return Collection;
  }(Proxy), _class3.__filename = __filename$X, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "delegate", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "delegate"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "serializer", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "objectizer", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "collectionName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "collectionName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "collectionPrefix", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "collectionPrefix"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "collectionFullName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "collectionFullName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "recordHasBeenChanged", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordHasBeenChanged"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "generateId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "generateId"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "build", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "build"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "create", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'delete', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "find", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "find"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "findMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "findMany"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "take", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "take"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeMany"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeAll"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "update", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "override", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "override"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clone", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "clone"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "copy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "copy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "includes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "includes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "normalize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "normalize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "serialize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "serialize"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$Y = '/leanes/patterns/proxy/Configuration.js';

var ConfigurationInterface = flowRuntime_umd.type("ConfigurationInterface", flowRuntime_umd.object(flowRuntime_umd.property("ROOT", flowRuntime_umd.string()), flowRuntime_umd.property("environment", flowRuntime_umd.string()), flowRuntime_umd.property("name", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("description", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("license", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("version", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("keywords", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.property("defineConfigProperties", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var ConfigurationInterface$1 = flowRuntime_umd.tdz(function () {
  return ConfigurationInterface;
});
var hasProp$9 = {}.hasOwnProperty;
var ConfigurationTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

  var _Module$NS = Module.NS,
      PRODUCTION = _Module$NS.PRODUCTION,
      DEVELOPMENT = _Module$NS.DEVELOPMENT,
      Proxy = _Module$NS.Proxy,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      assign = _Module$NS$Utils.assign;
  var Configuration = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Configuration", flowRuntime_umd["extends"](Proxy), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("ROOT", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("environment", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.property("_name", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_description", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_license", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_version", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_keywords", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("name", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("description", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("license", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("version", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("keywords", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.method("defineConfigProperties"), flowRuntime_umd.method("onRegister", flowRuntime_umd.param("args", flowRuntime_umd.any())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Proxy) {
    _inherits(Configuration, _Proxy);

    var _super = _createSuper(Configuration);

    function Configuration() {
      var _this;

      _classCallCheck(this, Configuration);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "_name", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_description", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_license", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_version", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_keywords", _descriptor5, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(Configuration, [{
      key: "defineConfigProperties",
      value: function defineConfigProperties() {
        var _this2 = this;

        // const manifestPath = `${this.ROOT}/manifest.json`;
        // const manifest = require(manifestPath);
        var manifestPath = './manifest.json';

        var manifest = this.ApplicationModule.require(manifestPath);

        console.log('>?>?>??? manifest', manifestPath, manifest);
        this._name = manifest.name;
        this._description = manifest.description;
        this._license = manifest.license;
        this._version = manifest.version;
        this._keywords = manifest.keywords;
        var configFromManifest = manifest.configuration; // const filePath = `${this.ROOT}/configs/${this.environment}`;
        // const configFromFile = require(filePath).default;

        var filePath = "./configs/".concat(this.environment);

        var configFromFile = this.ApplicationModule.require(filePath)["default"];

        console.log('>?>???? config', filePath, configFromFile);
        var configs = assign({}, configFromManifest, configFromFile);

        for (var key in configs) {
          if (!hasProp$9.call(configs, key)) continue;
          var value = configs[key];

          (function (attr, config) {
            assert(config.description != null, 'Description in config definition is required');
            assert(!config.required || config["default"] != null, "Attribute '".concat(attr, "' is required in config"));
            assert(config.type != null, 'Type in config definition is required');

            switch (config.type) {
              case 'string':
                assert(_.isString(config["default"]), "Default for '".concat(attr, "' must be string"));
                break;

              case 'number':
                assert(_.isNumber(config["default"]), "Default for '".concat(attr, "' must be number"));
                break;

              case 'boolean':
                assert(_.isBoolean(config["default"]), "Default for '".concat(attr, "' must be boolean"));
                break;

              case 'integer':
                assert(_.isInteger(config["default"]), "Default for '".concat(attr, "' must be integer"));
                break;

              case 'json':
                assert(_.isString(config["default"]), "Default for '".concat(attr, "' must be JSON string"));

                try {
                  JSON.parse(config["default"]);
                } catch (error) {
                  assert.fail("Default for '".concat(attr, "' is not valid JSON"));
                }

                break;

              case 'password':
                assert(_.isString(config["default"]), "Default for '".concat(attr, "' must be string"));
            }

            Reflect.defineProperty(_this2, attr, {
              enumerable: true,
              configurable: true,
              writable: false,
              value: config.type === 'json' ? JSON.parse(config["default"]) : config["default"]
            });
          })(key, value);
        }
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        var _get2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get2 = _get(_getPrototypeOf(Configuration.prototype), "onRegister", this)).call.apply(_get2, [this].concat(args));

        this.defineConfigProperties();
      }
    }, {
      key: "ROOT",
      get: function get() {
        return this.getData();
      }
    }, {
      key: "environment",
      get: function get() {

        if (ENV === 'production') {
          return PRODUCTION;
        } else {
          return DEVELOPMENT;
        }
      }
    }, {
      key: "name",
      get: function get() {
        return this._name;
      }
    }, {
      key: "description",
      get: function get() {
        return this._description;
      }
    }, {
      key: "license",
      get: function get() {
        return this._license;
      }
    }, {
      key: "version",
      get: function get() {
        return this._version;
      }
    }, {
      key: "keywords",
      get: function get() {
        return this._keywords;
      }
    }]);

    return Configuration;
  }(Proxy), _class3.__filename = __filename$Y, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "ROOT", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ROOT"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "environment", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "environment"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_name", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_description", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_license", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_version", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_keywords", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "name", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "name"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "description", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "description"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "license", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "license"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "version", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "version"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "keywords", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "keywords"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defineConfigProperties", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defineConfigProperties"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$Z = '/leanes/patterns/proxy/ResourceRenderer.js';

var ContextInterface = flowRuntime_umd.type("ContextInterface", flowRuntime_umd.object(flowRuntime_umd.property("req", flowRuntime_umd.ref("object")), flowRuntime_umd.property("res", flowRuntime_umd.ref("object")), flowRuntime_umd.property("request", flowRuntime_umd.nullable(flowRuntime_umd.ref("RequestInterface"))), flowRuntime_umd.property("response", flowRuntime_umd.nullable(flowRuntime_umd.ref("ResponseInterface"))), flowRuntime_umd.property("state", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("respond", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("routePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("pathParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("transaction", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("session", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("throw", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()), flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("assert", flowRuntime_umd["function"](flowRuntime_umd.rest("_argrest", flowRuntime_umd.ref("args")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("onerror", flowRuntime_umd["function"](flowRuntime_umd.param("err", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("header", flowRuntime_umd.ref("object")), flowRuntime_umd.property("headers", flowRuntime_umd.ref("object")), flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("url", flowRuntime_umd.string()), flowRuntime_umd.property("originalUrl", flowRuntime_umd.string()), flowRuntime_umd.property("origin", flowRuntime_umd.string()), flowRuntime_umd.property("href", flowRuntime_umd.string()), flowRuntime_umd.property("path", flowRuntime_umd.string()), flowRuntime_umd.property("query", flowRuntime_umd.ref("object")), flowRuntime_umd.property("querystring", flowRuntime_umd.string()), flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("hostname", flowRuntime_umd.string()), flowRuntime_umd.property("fresh", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("stale", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("socket", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("protocol", flowRuntime_umd.string()), flowRuntime_umd.property("secure", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("ip", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("ips", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("subdomains", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("is", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["boolean"]()))))), flowRuntime_umd.property("accepts", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(), flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("acceptsEncodings", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd.property("acceptsCharsets", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd.property("acceptsLanguages", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd.property("get", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("body", flowRuntime_umd.any()), flowRuntime_umd.property("status", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("message", flowRuntime_umd.string()), flowRuntime_umd.property("length", flowRuntime_umd.number()), flowRuntime_umd.property("writable", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("type", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("headerSent", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("set", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("append", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("flushHeaders", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var ResourceListResultT = flowRuntime_umd.type("ResourceListResultT", flowRuntime_umd.exactObject(flowRuntime_umd.property("meta", flowRuntime_umd.exactObject(flowRuntime_umd.property("pagination", flowRuntime_umd.exactObject(flowRuntime_umd.property("limit", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string("not defined"))), flowRuntime_umd.property("offset", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string("not defined"))))))), flowRuntime_umd.property("items", flowRuntime_umd.array(flowRuntime_umd.ref("object")))));

var ResourceListResultT$1 = flowRuntime_umd.tdz(function () {
  return ResourceListResultT;
});
var ContextInterface$1 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var ResourceInterface = flowRuntime_umd.type("ResourceInterface", flowRuntime_umd.object(flowRuntime_umd.property("list", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ResourceListResultT$1))))), flowRuntime_umd.property("detail", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("update", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("delete", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("destroy", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("doAction", flowRuntime_umd["function"](flowRuntime_umd.param("asAction", flowRuntime_umd.string()), flowRuntime_umd.param("context", flowRuntime_umd.ref(ContextInterface$1)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("writeTransaction", flowRuntime_umd["function"](flowRuntime_umd.param("asAction", flowRuntime_umd.string()), flowRuntime_umd.param("aoContext", flowRuntime_umd.ref(ContextInterface$1)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("saveDelayeds", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))));

var RouterRouteT = flowRuntime_umd.type("RouterRouteT", flowRuntime_umd.object(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("path", flowRuntime_umd.string()), flowRuntime_umd.property("resource", flowRuntime_umd.string()), flowRuntime_umd.property("action", flowRuntime_umd.string()), flowRuntime_umd.property("tag", flowRuntime_umd.string()), flowRuntime_umd.property("template", flowRuntime_umd.string()), flowRuntime_umd.property("keyName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("entityName", flowRuntime_umd.string()), flowRuntime_umd.property("recordName", flowRuntime_umd.nullable(flowRuntime_umd.string()))));

var ResourceRendererListResultT = flowRuntime_umd.type("ResourceRendererListResultT", flowRuntime_umd.object(flowRuntime_umd.property("meta", flowRuntime_umd.exactObject(flowRuntime_umd.property("pagination", flowRuntime_umd.exactObject(flowRuntime_umd.property("limit", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string("not defined"))), flowRuntime_umd.property("offset", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string("not defined"))))))), flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.ref("object")))));

var ResourceRendererItemResultT = flowRuntime_umd.type("ResourceRendererItemResultT", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))));

var ResourceRendererItemResultT$1 = flowRuntime_umd.tdz(function () {
  return ResourceRendererItemResultT;
});
var ResourceRendererListResultT$1 = flowRuntime_umd.tdz(function () {
  return ResourceRendererListResultT;
});
var RouterRouteT$1 = flowRuntime_umd.tdz(function () {
  return RouterRouteT;
});
var ResourceInterface$1 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ContextInterface$2 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var ResourceRendererInterface = flowRuntime_umd.type("ResourceRendererInterface", flowRuntime_umd.object(flowRuntime_umd.property("render", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn.typeParameter("R", undefined, flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.ref(ResourceRendererListResultT$1), flowRuntime_umd.ref(ResourceRendererItemResultT$1), flowRuntime_umd.any())));

  return [flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$2)), flowRuntime_umd.param("aoData", T), flowRuntime_umd.param("resource", flowRuntime_umd.ref(ResourceInterface$1)), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouterRouteT$1))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
}))));

var ResourceRendererItemResultT$2 = flowRuntime_umd.tdz(function () {
  return ResourceRendererItemResultT;
});
var ResourceRendererListResultT$2 = flowRuntime_umd.tdz(function () {
  return ResourceRendererListResultT;
});
var RouterRouteT$2 = flowRuntime_umd.tdz(function () {
  return RouterRouteT;
});
var ResourceInterface$2 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ContextInterface$3 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var ResourceRendererInterface$1 = flowRuntime_umd.tdz(function () {
  return ResourceRendererInterface;
});
var ResourceRendererTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      Proxy = _Module$NS.Proxy,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var ResourceRenderer = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ResourceRenderer", flowRuntime_umd["extends"](Proxy), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("render", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn.typeParameter("R", undefined, flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.ref(ResourceRendererListResultT$2), flowRuntime_umd.ref(ResourceRendererItemResultT$2), flowRuntime_umd.any())));

    return [flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$3)), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("resource", flowRuntime_umd.ref(ResourceInterface$2)), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouterRouteT$2))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
  }))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Proxy) {
    _inherits(ResourceRenderer, _Proxy);

    var _super = _createSuper(ResourceRenderer);

    function ResourceRenderer() {
      _classCallCheck(this, ResourceRenderer);

      return _super.apply(this, arguments);
    }

    _createClass(ResourceRenderer, [{
      key: "render",
      value: function () {
        var _render = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(ctx, aoData, resource) {
          var opts,
              path,
              resourceName,
              action,
              templatePath,
              appMediator,
              service,
              Templates,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  opts = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
                  path = opts.path, resourceName = opts.resource, action = opts.action, templatePath = opts.template;

                  if (!(path != null && resourceName != null && action != null)) {
                    _context.next = 11;
                    break;
                  }

                  appMediator = this.facade.retrieveMediator(APPLICATION_MEDIATOR);
                  service = appMediator.getViewComponent();
                  Templates = service.Module.NS.Templates;
                  _context.next = 8;
                  return Promise.resolve().then(function () {
                    return Templates[templatePath].call(resource, resourceName, action, aoData) || aoData;
                  });

                case 8:
                  return _context.abrupt("return", _context.sent);

                case 11:
                  return _context.abrupt("return", aoData);

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function render(_x, _x2, _x3) {
          return _render.apply(this, arguments);
        }

        return render;
      }()
    }]);

    return ResourceRenderer;
  }(Proxy), _class3.__filename = __filename$Z, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "render", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "render"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$_ = '/leanes/patterns/proxy/Router.js';

var RouteOptionsT = flowRuntime_umd.type("RouteOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("to", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("resource", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("action", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("tag", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("template", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("keyName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("entityName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("recordName", flowRuntime_umd.nullable(flowRuntime_umd.string()))));

var RouteOptionsT$1 = flowRuntime_umd.tdz(function () {
  return RouteOptionsT;
});
var RouterRouteT$3 = flowRuntime_umd.tdz(function () {
  return RouterRouteT;
});
var RouterInterface = flowRuntime_umd.type("RouterInterface", function (RouterInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("map", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("root", flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("to", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("resource", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("action", flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("defineMethod", flowRuntime_umd["function"](flowRuntime_umd.param("container", flowRuntime_umd.array(flowRuntime_umd.ref(RouterRouteT$3))), flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("path", flowRuntime_umd.string()), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("get", flowRuntime_umd["function"](flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("post", flowRuntime_umd["function"](flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("put", flowRuntime_umd["function"](flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("delete", flowRuntime_umd["function"](flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("head", flowRuntime_umd["function"](flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("options", flowRuntime_umd["function"](flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("patch", flowRuntime_umd["function"](flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$1))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("resource", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.object(flowRuntime_umd.property("path", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("module", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("only", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("via", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("except", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("tag", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("templates", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("param", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("resource", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("above", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd["function"]()))), flowRuntime_umd.param("lambda", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("namespace", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("aoOpts", flowRuntime_umd.union(flowRuntime_umd.object(flowRuntime_umd.property("module", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("prefix", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("tag", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("templates", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("above", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd["function"]())), flowRuntime_umd.param("lambda", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("member", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("collection", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("resources", flowRuntime_umd.array(RouterInterface)), flowRuntime_umd.property("routes", flowRuntime_umd.array(flowRuntime_umd.object(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("path", flowRuntime_umd.string()), flowRuntime_umd.property("resource", flowRuntime_umd.string()), flowRuntime_umd.property("action", flowRuntime_umd.string()), flowRuntime_umd.property("tag", flowRuntime_umd.string()), flowRuntime_umd.property("template", flowRuntime_umd.string()), flowRuntime_umd.property("keyName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("entityName", flowRuntime_umd.string()), flowRuntime_umd.property("recordName", flowRuntime_umd.nullable(flowRuntime_umd.string()))))));
});

var RouterRouteT$4 = flowRuntime_umd.tdz(function () {
  return RouterRouteT;
});
var RouteOptionsT$2 = flowRuntime_umd.tdz(function () {
  return RouteOptionsT;
});
var RouterInterface$1 = flowRuntime_umd.tdz(function () {
  return RouterInterface;
});
var slice$5 = [].slice;
var hasProp$a = {}.hasOwnProperty;
var RouterTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _class3, _temp;

  var _Module$NS = Module.NS,
      Proxy = _Module$NS.Proxy,
      Proto = _Module$NS.Proto,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  var Router = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Router", function (Router) {
    return [flowRuntime_umd["extends"](Proxy), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_path", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_name", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_module", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_only", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("_via", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("_except", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("_above", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("_at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("_resource", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_tag", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_templates", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_param", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_routers", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(Router)))), flowRuntime_umd.property("_pathes", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(RouterRouteT$4)))), flowRuntime_umd.property("_resources", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(Router)))), flowRuntime_umd.property("_routes", flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.ref(RouterRouteT$4)))), flowRuntime_umd.method("path", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("name", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("above", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("tag", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("templates", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("param", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("defaultEntityName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("map"), flowRuntime_umd.method("root", flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("to", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("resource", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("action", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd.method("defineMethod", flowRuntime_umd.param("container", flowRuntime_umd.array(flowRuntime_umd.ref(RouterRouteT$4))), flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("path", flowRuntime_umd.string()), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("get", flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("post", flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("put", flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("delete", flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("head", flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("options", flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("patch", flowRuntime_umd.param("asPath", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouteOptionsT$2)))), flowRuntime_umd.method("resource", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd.param("aoOpts", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.object(flowRuntime_umd.property("path", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("module", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("only", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("via", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("except", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("tag", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("templates", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("param", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("resource", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("above", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd["function"]()))), flowRuntime_umd.param("lambda", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))), flowRuntime_umd.method("namespace", flowRuntime_umd.param("asName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("aoOpts", flowRuntime_umd.union(flowRuntime_umd.object(flowRuntime_umd.property("module", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("prefix", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("tag", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("templates", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("above", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd["function"]())), flowRuntime_umd.param("lambda", flowRuntime_umd.nullable(flowRuntime_umd["function"]()))), flowRuntime_umd.method("member", flowRuntime_umd.param("lambda", flowRuntime_umd["function"]())), flowRuntime_umd.method("collection", flowRuntime_umd.param("lambda", flowRuntime_umd["function"]())), flowRuntime_umd.method("resources", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.ref(Router)))), flowRuntime_umd.method("routes", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.object(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("path", flowRuntime_umd.string()), flowRuntime_umd.property("resource", flowRuntime_umd.string()), flowRuntime_umd.property("action", flowRuntime_umd.string()), flowRuntime_umd.property("tag", flowRuntime_umd.string()), flowRuntime_umd.property("template", flowRuntime_umd.string()), flowRuntime_umd.property("keyName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("entityName", flowRuntime_umd.string()), flowRuntime_umd.property("recordName", flowRuntime_umd.nullable(flowRuntime_umd.string()))))))];
  })), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Proxy) {
    _inherits(Router, _Proxy);

    var _super = _createSuper(Router);

    _createClass(Router, [{
      key: "defaultEntityName",
      value: function defaultEntityName() {
        var tmpName = this._name.replace(/\/$/, '').split('/');

        var _slice$call = slice$5.call(tmpName, -1),
            _slice$call2 = _slicedToArray(_slice$call, 1),
            vsEntityName = _slice$call2[0];

        return inflect.singularize(vsEntityName);
      }
    }, {
      key: "map",
      value: function map() {
        return;
      }
    }, {
      key: "root",
      value: function root(opts) {
        return;
      }
    }, {
      key: "defineMethod",
      value: function defineMethod(container, method, path) {
        var _this2 = this;

        var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var to = opts.to,
            at = opts.at,
            resource = opts.resource,
            action = opts.action,
            asTag = opts.tag,
            template = opts.template,
            keyName = opts.keyName,
            entityName = opts.entityName,
            recordName = opts.recordName;
        assert(path != null, 'path is required');
        path = path.replace(/^[\/]/, '');

        if (to != null) {
          assert(/[#]/.test(to), '`to` must be in format `<resource>#<action>`');

          var _to$split = to.split('#');

          var _to$split2 = _slicedToArray(_to$split, 2);

          resource = _to$split2[0];
          action = _to$split2[1];
        }

        var vsResource = this._resource;

        if (resource == null && vsResource !== '') {
          resource = vsResource;
        }

        var vsName = this._name;

        if (resource == null && vsName !== '') {
          resource = vsName;
        }

        assert(resource != null, 'options `to` or `resource` must be defined');

        if (action == null) {
          action = path;
        }

        if (!/[\/]$/.test(resource)) {
          resource += '/';
        }

        if (keyName == null) {
          keyName = this._param != null ? this._param.replace(/^\:/, '') : undefined;
        }

        if (entityName == null) {
          entityName = this.defaultEntityName();
        }

        if (!(_.isString(recordName) || _.isNull(recordName))) {
          recordName = this.defaultEntityName();
        }

        var vsParentTag = this._tag != null && this._tag !== '' ? this._tag : '';
        var vsTag = asTag != null && asTag !== '' ? "/".concat(asTag) : '';
        var tag = "".concat(vsParentTag).concat(vsTag);

        path = function () {
          switch (at || _this2._at) {
            case 'member':
              return "".concat(_this2._path, ":").concat(inflect.singularize(inflect.underscore(resource.replace(/[\/]/g, '_').replace(/[_]$/g, ''))), "/").concat(path);

            case 'collection':
              return "".concat(_this2._path).concat(path);

            default:
              return "".concat(_this2._path).concat(path);
          }
        }();

        if (template == null) {
          template = resource + action;
        }

        container.push({
          method: method,
          path: path,
          resource: resource,
          action: action,
          tag: tag,
          template: template,
          keyName: keyName,
          entityName: entityName,
          recordName: recordName
        });
      }
    }, {
      key: 'get',
      value: function get(asPath, aoOpts) {
        // @._pathes ?= []
        this.defineMethod(this._pathes, 'get', asPath, aoOpts);
      }
    }, {
      key: "post",
      value: function post(asPath, aoOpts) {
        // @._pathes ?= []
        this.defineMethod(this._pathes, 'post', asPath, aoOpts);
      }
    }, {
      key: "put",
      value: function put(asPath, aoOpts) {
        // @._pathes ?= []
        this.defineMethod(this._pathes, 'put', asPath, aoOpts);
      }
    }, {
      key: 'delete',
      value: function _delete(asPath, aoOpts) {
        // @._pathes ?= []
        this.defineMethod(this._pathes, 'delete', asPath, aoOpts);
      }
    }, {
      key: "head",
      value: function head(asPath, aoOpts) {
        // @._pathes ?= []
        this.defineMethod(this._pathes, 'head', asPath, aoOpts);
      }
    }, {
      key: "options",
      value: function options(asPath, aoOpts) {
        // @._pathes ?= []
        this.defineMethod(this._pathes, 'options', asPath, aoOpts);
      }
    }, {
      key: "patch",
      value: function patch(asPath, aoOpts) {
        // @._pathes ?= []
        this.defineMethod(this._pathes, 'patch', asPath, aoOpts);
      }
    }, {
      key: "resource",
      value: function resource(asName) {
        var _this3 = this,
            _dec4,
            _dec5,
            _class4,
            _class5,
            _init3,
            _init4,
            _class6,
            _temp2;

        var aoOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var lambda = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var vcModule = this.Module;

        if (_.isFunction(aoOpts)) {
          lambda = aoOpts;
          aoOpts = {};
        }

        if (aoOpts == null) {
          aoOpts = {};
        }

        var _aoOpts = aoOpts,
            path = _aoOpts.path,
            vsModule = _aoOpts.module,
            only = _aoOpts.only,
            via = _aoOpts.via,
            except = _aoOpts.except,
            asTag = _aoOpts.tag,
            alTemplates = _aoOpts.templates,
            asParam = _aoOpts.param,
            at = _aoOpts.at,
            asResource = _aoOpts.resource,
            above = _aoOpts.above;
        path = path != null ? path.replace(/^[\/]/, '') : undefined;
        var vsPath = path != null && path !== '' ? "".concat(path, "/") : path != null && path === '' ? '' : "".concat(asName, "/");

        var vsFullPath = function () {
          switch (at || _this3._at) {
            case 'member':
              var splittedPath = _this3._path.split('/');

              var _slice$call3 = slice$5.call(splittedPath, -2),
                  _slice$call4 = _slicedToArray(_slice$call3, 2),
                  previously = _slice$call4[0],
                  empty = _slice$call4[1];

              return "".concat(_this3._path, ":").concat(inflect.singularize(inflect.underscore(previously)), "/").concat(vsPath);

            case 'collection':
              return "".concat(_this3._path).concat(vsPath);

            default:
              return "".concat(_this3._path).concat(vsPath);
          }
        }();

        var vsParentName = this._name;
        var vsParentTemplates = this._templates != null && this._templates !== '' ? "".concat(this._templates, "/") : '';
        var vsParentTag = this._tag != null && this._tag !== '' ? this._tag : '';
        var vsName = vsModule != null && vsModule !== '' ? "".concat(vsModule, "/") : vsModule != null && vsModule === '' ? '' : "".concat(asName, "/");
        var vsTemplates = alTemplates != null && alTemplates !== '' ? alTemplates : alTemplates != null && alTemplates === '' ? '' : vsModule != null && vsModule !== '' ? vsModule : vsModule != null && vsModule === '' ? '' : asName;
        var vsTag = asTag != null && asTag !== '' ? "/".concat(asTag) : '';
        var vsParam = asParam != null && asParam !== '' ? asParam : ':' + inflect.singularize(inflect.underscore((asResource != null ? asResource : "".concat(vsParentName).concat(vsName)).replace(/[\/]/g, '_').replace(/[_]$/g, ''))); // @._routers ?= []

        var ResourceRouter = (_dec4 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ResourceRouter", flowRuntime_umd["extends"](Router), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_path", flowRuntime_umd.string()), flowRuntime_umd.property("_name", flowRuntime_umd.ref("String")), flowRuntime_umd.property("_module", flowRuntime_umd.string()), flowRuntime_umd.property("_only", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("_via", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("_except", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("_above", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("_tag", flowRuntime_umd.string()), flowRuntime_umd.property("_templates", flowRuntime_umd.string()), flowRuntime_umd.property("_param", flowRuntime_umd.string()), flowRuntime_umd.property("_resource", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("map"))), _dec5 = module(vcModule), _dec4(_class4 = _dec5(_class4 = (_class5 = (_temp2 = _class6 = /*#__PURE__*/function (_Router) {
          _inherits(ResourceRouter, _Router);

          var _super2 = _createSuper(ResourceRouter);

          function ResourceRouter() {
            var _this4;

            _classCallCheck(this, ResourceRouter);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this4 = _super2.call.apply(_super2, [this].concat(args));
            _this4._path = vsFullPath;
            _this4._name = "".concat(vsParentName).concat(vsName);
            _this4._module = vsModule;
            _this4._only = only;
            _this4._via = via;
            _this4._except = except;
            _this4._above = above;
            _this4._tag = "".concat(vsParentTag).concat(vsTag);
            _this4._templates = "".concat(vsParentTemplates).concat(vsTemplates).replace(/[\/][\/]/g, '/');
            _this4._param = vsParam;
            _this4._resource = asResource;
            return _this4;
          }

          _createClass(ResourceRouter, [{
            key: "map",
            value: function map() {
              return lambda.call(this);
            }
          }]);

          return ResourceRouter;
        }(Router), _class6.__filename = 'ResourceRouter', _class6.object = {}, _temp2), (_applyDecoratedDescriptor(_class5, "__filename", [nameBy], (_init3 = Object.getOwnPropertyDescriptor(_class5, "__filename"), _init3 = _init3 ? _init3.value : undefined, {
          enumerable: true,
          configurable: true,
          writable: true,
          initializer: function initializer() {
            return _init3;
          }
        }), _class5), _applyDecoratedDescriptor(_class5, "object", [meta], (_init4 = Object.getOwnPropertyDescriptor(_class5, "object"), _init4 = _init4 ? _init4.value : undefined, {
          enumerable: true,
          configurable: true,
          writable: true,
          initializer: function initializer() {
            return _init4;
          }
        }), _class5)), _class5)) || _class4) || _class4);
        ResourceRouter.constructor = Proto;
        ResourceRouter.onInitialize();

        this._routers.push(ResourceRouter);
      }
    }, {
      key: "namespace",
      value: function namespace(asName) {
        var _dec6, _dec7, _class7, _class8, _init5, _init6, _class9, _temp3;

        var aoOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var lambda = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var vcModule = this.Module;

        if (_.isFunction(aoOpts)) {
          lambda = aoOpts;
          aoOpts = {};
        }

        if (aoOpts == null) {
          aoOpts = {};
        }

        var _aoOpts2 = aoOpts,
            vsModule = _aoOpts2.module,
            prefix = _aoOpts2.prefix,
            asTag = _aoOpts2.tag,
            alTemplates = _aoOpts2.templates,
            at = _aoOpts2.at,
            above = _aoOpts2.above;
        var vsParentPath = this._path;
        var vsPath = prefix != null && prefix !== '' ? "".concat(prefix, "/") : prefix != null && prefix === '' ? '' : "".concat(asName, "/");
        var vsParentName = this._name;
        var vsParentTemplates = this._templates != null && this._templates !== '' ? "".concat(this._templates, "/") : '';
        var vsParentTag = this._tag != null && this._tag !== '' ? this._tag : '';
        var vsName = vsModule != null && vsModule !== '' ? "".concat(vsModule, "/") : vsModule != null && vsModule === '' ? '' : "".concat(asName, "/");
        var vsTemplates = alTemplates != null && alTemplates !== '' ? alTemplates : alTemplates != null && alTemplates === '' ? '' : vsModule != null && vsModule !== '' ? vsModule : vsModule != null && vsModule === '' ? '' : asName;
        var vsTag = asTag != null && asTag !== '' ? "/".concat(asTag) : ''; // @._routers ?= []

        var NamespaceRouter = (_dec6 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("NamespaceRouter", flowRuntime_umd["extends"](Router), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_path", flowRuntime_umd.string()), flowRuntime_umd.property("_name", flowRuntime_umd.string()), flowRuntime_umd.property("_except", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("_tag", flowRuntime_umd.string()), flowRuntime_umd.property("_templates", flowRuntime_umd.string()), flowRuntime_umd.property("_at", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string("collection"), flowRuntime_umd.string("member")))), flowRuntime_umd.property("_above", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.method("map"))), _dec7 = module(vcModule), _dec6(_class7 = _dec7(_class7 = (_class8 = (_temp3 = _class9 = /*#__PURE__*/function (_Router2) {
          _inherits(NamespaceRouter, _Router2);

          var _super3 = _createSuper(NamespaceRouter);

          function NamespaceRouter() {
            var _this5;

            _classCallCheck(this, NamespaceRouter);

            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            _this5 = _super3.call.apply(_super3, [this].concat(args));
            _this5._path = "".concat(vsParentPath).concat(vsPath);
            _this5._name = "".concat(vsParentName).concat(vsName);
            _this5._except = ['all'];
            _this5._tag = "".concat(vsParentTag).concat(vsTag);
            _this5._templates = "".concat(vsParentTemplates).concat(vsTemplates).replace(/[\/][\/]/g, '/');
            _this5._at = at;
            _this5._above = above;
            return _this5;
          }

          _createClass(NamespaceRouter, [{
            key: "map",
            value: function map() {
              return lambda.call(this);
            }
          }]);

          return NamespaceRouter;
        }(Router), _class9.__filename = 'NamespaceRouter', _class9.object = {}, _temp3), (_applyDecoratedDescriptor(_class8, "__filename", [nameBy], (_init5 = Object.getOwnPropertyDescriptor(_class8, "__filename"), _init5 = _init5 ? _init5.value : undefined, {
          enumerable: true,
          configurable: true,
          writable: true,
          initializer: function initializer() {
            return _init5;
          }
        }), _class8), _applyDecoratedDescriptor(_class8, "object", [meta], (_init6 = Object.getOwnPropertyDescriptor(_class8, "object"), _init6 = _init6 ? _init6.value : undefined, {
          enumerable: true,
          configurable: true,
          writable: true,
          initializer: function initializer() {
            return _init6;
          }
        }), _class8)), _class8)) || _class7) || _class7);
        NamespaceRouter.constructor = Proto;
        NamespaceRouter.onInitialize();

        this._routers.push(NamespaceRouter);
      }
    }, {
      key: "member",
      value: function member(lambda) {
        this.namespace(null, {
          module: '',
          prefix: '',
          templates: '',
          at: 'member'
        }, lambda);
      }
    }, {
      key: "collection",
      value: function collection(lambda) {
        this.namespace(null, {
          module: '',
          prefix: '',
          templates: '',
          at: 'collection'
        }, lambda);
      }
    }, {
      key: "path",
      // ipsPath = PointerT(Router.protected({
      // ipsName = PointerT(Router.protected({
      // ipsModule = PointerT(Router.protected({
      // iplOnly = PointerT(Router.protected({
      // iplVia = PointerT(Router.protected({
      // iplExcept = PointerT(Router.protected({
      // ipoAbove = PointerT(Router.protected({
      // ipsAt = PointerT(Router.protected({
      // ipsResource = PointerT(Router.protected({
      // ipsTag = PointerT(Router.protected({
      // ipsTemplates = PointerT(Router.protected({
      // ipsParam = PointerT(Router.protected({
      // iplRouters = PointerT(Router.protected({
      // iplPathes = PointerT(Router.protected({
      // iplResources = PointerT(Router.protected({
      // iplRoutes = PointerT(Router.protected({
      get: function get() {
        return this._path;
      }
    }, {
      key: "name",
      get: function get() {
        return this._resource || this._name;
      }
    }, {
      key: "above",
      get: function get() {
        return this._above;
      }
    }, {
      key: "tag",
      get: function get() {
        return this._tag;
      }
    }, {
      key: "templates",
      get: function get() {
        return this._templates;
      }
    }, {
      key: "param",
      get: function get() {
        return this._param;
      }
    }, {
      key: "resources",
      get: function get() {
        return this._resources;
      }
    }, {
      key: "routes",
      get: function get() {
        if (this._routes != null && this._routes.length > 0) {
          return this._routes;
        } else {
          var vlRoutes = [];
          (this._pathes || []).forEach(function (item) {
            vlRoutes.push(item);
          });
          var vlResources = [];

          if (this._routers != null) {
            this._routers.forEach(function (InheritedRouter) {
              var inheritedRouter = InheritedRouter["new"]();
              vlResources.push(inheritedRouter);
              (inheritedRouter.routes || []).forEach(function (item) {
                vlRoutes.push(item);
              });
              (inheritedRouter.resources || []).forEach(function (item) {
                vlResources.push(item);
              });
            });
          }

          this._routes = vlRoutes;
          this._resources = vlResources;
        }

        return this._routes;
      } // @method init(...args) {
      //   super.init(...args);
      //   this._routers = [];
      //   this._pathes = [];
      // }

    }]);

    function Router() {
      var _this;

      _classCallCheck(this, Router);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_path", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_name", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_module", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_only", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_via", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_except", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_above", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_at", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_resource", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_tag", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_templates", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_param", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_routers", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pathes", _descriptor14, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_resources", _descriptor15, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_routes", _descriptor16, _assertThisInitialized(_this));

      _this._routers = [];
      _this._pathes = []; // this.init(...args);

      _this.map();

      if (_.isString(_this._only)) {
        _this._only = [_this._only];
      }

      if (_.isString(_this._via)) {
        _this._via = [_this._via];
      }

      if (_.isString(_this._except)) {
        _this._except = [_this._except];
      }

      var voMethods = {
        list: 'get',
        detail: 'get',
        create: 'post',
        update: 'put',
        "delete": 'delete'
      };
      var voPaths = {
        list: '',
        detail: null,
        create: '',
        update: null,
        "delete": null
      }; // @._pathes ?= []

      if (_this._name != null && _this._name !== '') {
        var vsKeyName = _this._param && _this._param.replace(/^\:/, '') || undefined;

        var vsEntityName = _this._above && _this._above.entityName || _this.defaultEntityName();

        var vsAboveName = _this._above && _this._above.recordName || undefined;

        if (_.isNil(vsAboveName) && !_.isNull(vsAboveName)) {
          var _vsDefaultName = _this.defaultEntityName();
        }

        var vsRecordName = vsAboveName || vsDefaultName;

        if (_this._only != null) {
          _this._only.forEach(function (asAction) {
            var vsPath = voPaths[asAction] || _this._param;

            _this.defineMethod(_this._pathes, voMethods[asAction], vsPath, {
              action: asAction,
              resource: _this._resource || _this._name,
              template: _this._templates + '/' + asAction,
              keyName: vsKeyName,
              entityName: vsEntityName,
              recordName: vsRecordName
            });
          });
        } else if (_this._except != null) {
          for (var _asAction in voMethods) {
            if (!hasProp$a.call(voMethods, _asAction)) continue;
            var vsMethod = voMethods[_asAction];

            if (!_this._except.includes('all') && !_this._except.includes(_asAction)) {
              var vsPath = voPaths[_asAction] || _this._param;

              _this.defineMethod(_this._pathes, vsMethod, vsPath, {
                action: _asAction,
                resource: _this._resource || _this._name,
                template: _this._templates + '/' + _asAction,
                keyName: vsKeyName,
                entityName: vsEntityName,
                recordName: vsRecordName
              });
            }
          }
        } else if (_this._via != null) {
          _this._via.forEach(function (asCustomAction) {
            var vsPath = voPaths[asCustomAction] || _this._param;

            if (asCustomAction === 'all') {
              for (var _asAction2 in voMethods) {
                if (!hasProp$a.call(voMethods, _asAction2)) continue;
                var _vsMethod = voMethods[_asAction2];

                _this.defineMethod(_this._pathes, _vsMethod, vsPath, {
                  action: _asAction2,
                  resource: _this._resource || _this._name,
                  template: _this._templates + '/' + _asAction2,
                  keyName: vsKeyName,
                  entityName: vsEntityName,
                  recordName: vsRecordName
                });
              }
            } else {
              _this.defineMethod(_this._pathes, voMethods[asCustomAction], vsPath, {
                action: asCustomAction,
                resource: _this._resource || _this._name,
                template: _this._templates + '/' + asAction,
                keyName: vsKeyName,
                entityName: vsEntityName,
                recordName: vsRecordName
              });
            }
          });
        } else {
          for (var _asAction3 in voMethods) {
            if (!hasProp$a.call(voMethods, _asAction3)) continue;
            var _vsMethod2 = voMethods[_asAction3];

            var _vsPath = voPaths[_asAction3] || _this._param;

            _this.defineMethod(_this._pathes, _vsMethod2, _vsPath, {
              action: _asAction3,
              resource: _this._resource || _this._name,
              template: _this._templates + '/' + _asAction3,
              keyName: vsKeyName,
              entityName: vsEntityName,
              recordName: vsRecordName
            });
          }
        }
      }

      return _this;
    }

    return Router;
  }(Proxy), _class3.__filename = __filename$_, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_path", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '/';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_name", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_module", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_only", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_via", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_except", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_above", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_at", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_resource", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_tag", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_templates", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_param", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_routers", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "_pathes", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "_resources", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "_routes", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "path", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "path"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "name", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "name"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "above", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "above"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "tag", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "tag"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "templates", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "templates"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "param", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "param"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defaultEntityName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defaultEntityName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "map", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "map"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "root", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "root"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defineMethod", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defineMethod"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'get', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'get'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "post", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "post"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "put", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "put"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'delete', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "head", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "head"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "options", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "options"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "patch", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "patch"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resource", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "resource"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "namespace", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "namespace"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "member", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "member"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "collection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "collection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resources", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "resources"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "routes", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "routes"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$$ = '/leanes/patterns/proxy/Resque.js';

var QueueInterface$3 = flowRuntime_umd.tdz(function () {
  return QueueInterface;
});
var ResqueInterface$2 = flowRuntime_umd.tdz(function () {
  return ResqueInterface;
});
var ResqueTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      DELAYED_JOBS_QUEUE = _Module$NS.DELAYED_JOBS_QUEUE,
      Proxy = _Module$NS.Proxy,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      uuid = _Module$NS.Utils.uuid;
  var Resque = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Resque", flowRuntime_umd["extends"](Proxy), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("tmpJobs", flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("queueName", flowRuntime_umd.string()), flowRuntime_umd.property("scriptName", flowRuntime_umd.string()), flowRuntime_umd.property("data", flowRuntime_umd.any()), flowRuntime_umd.property("delay", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("id", flowRuntime_umd.string())))), flowRuntime_umd.method("fullQueueName", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("onRegister", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("onRemove", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("create", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("concurrency", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(QueueInterface$3)))), flowRuntime_umd.method("all", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref(QueueInterface$3))))), flowRuntime_umd.method("get", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(QueueInterface$3))))), flowRuntime_umd.method("remove", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("update", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("concurrency", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(QueueInterface$3)))), flowRuntime_umd.method("delay", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd.param("delay", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())))), flowRuntime_umd.method("getDelayed", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("queueName", flowRuntime_umd.string()), flowRuntime_umd.property("scriptName", flowRuntime_umd.string()), flowRuntime_umd.property("data", flowRuntime_umd.any()), flowRuntime_umd.property("delay", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("id", flowRuntime_umd.string())))))), flowRuntime_umd.method("ensureQueue", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("concurrency", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number()))))), flowRuntime_umd.method("getQueue", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number())))))), flowRuntime_umd.method("removeQueue", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("allQueues", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number()))))))), flowRuntime_umd.method("pushJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd.param("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())))), flowRuntime_umd.method("getJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("deleteJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("abortJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("allJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("pendingJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("progressJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("completedJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("failedJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))))), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Proxy) {
    _inherits(Resque, _Proxy);

    var _super = _createSuper(Resque);

    _createClass(Resque, [{
      key: "fullQueueName",
      value: function fullQueueName(queueName) {
        if (!/\|\>/.test(queueName)) {
          var _this$moduleName$spli = this.moduleName().split('|>'),
              _this$moduleName$spli2 = _slicedToArray(_this$moduleName$spli, 1),
              moduleName = _this$moduleName$spli2[0];

          queueName = "".concat(moduleName, "|>").concat(queueName);
        }

        return queueName;
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(Resque.prototype), "onRegister", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        var _get3;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get3 = _get(_getPrototypeOf(Resque.prototype), "onRemove", this)).call.apply(_get3, [this].concat(args));

        this.tmpJobs = [];
      }
    }, {
      key: "create",
      value: function () {
        var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(queueName, concurrency) {
          var vhNewQueue;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.ensureQueue(queueName, concurrency);

                case 2:
                  vhNewQueue = _context.sent;
                  return _context.abrupt("return", Module.NS.Queue["new"](vhNewQueue, this));

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function create(_x, _x2) {
          return _create.apply(this, arguments);
        }

        return create;
      }()
    }, {
      key: "all",
      value: function () {
        var _all = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var results, vlQueues, _iterator, _step, vhQueue;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  results = [];
                  _context2.next = 3;
                  return this.allQueues();

                case 3:
                  vlQueues = _context2.sent;
                  _iterator = _createForOfIteratorHelper(vlQueues);

                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                      vhQueue = _step.value;
                      results.push(Module.NS.Queue["new"](vhQueue, this));
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }

                  return _context2.abrupt("return", results);

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function all() {
          return _all.apply(this, arguments);
        }

        return all;
      }()
    }, {
      key: 'get',
      value: function () {
        var _get4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(queueName) {
          var vhQueue;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.getQueue(queueName);

                case 2:
                  vhQueue = _context3.sent;

                  if (!(vhQueue != null)) {
                    _context3.next = 7;
                    break;
                  }

                  return _context3.abrupt("return", Module.NS.Queue["new"](vhQueue, this));

                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function get(_x3) {
          return _get4.apply(this, arguments);
        }

        return get;
      }()
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(queueName) {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.removeQueue(queueName);

                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function remove(_x4) {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(queueName, concurrency) {
          var vhNewQueue;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.ensureQueue(queueName, concurrency);

                case 2:
                  vhNewQueue = _context5.sent;
                  return _context5.abrupt("return", Module.NS.Queue["new"](vhNewQueue, this));

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function update(_x5, _x6) {
          return _update.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: "delay",
      value: function () {
        var _delay2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(queueName, scriptName, data, _delay) {
          var id, queue;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (!/\|\>/.test(this.facade._multitonKey)) {
                    _context6.next = 5;
                    break;
                  }

                  id = uuid.v4();
                  this.tmpJobs.push({
                    queueName: queueName,
                    scriptName: scriptName,
                    data: data,
                    delay: _delay,
                    id: id
                  });
                  _context6.next = 11;
                  break;

                case 5:
                  _context6.next = 7;
                  return this.get(queueName || DELAYED_JOBS_QUEUE);

                case 7:
                  queue = _context6.sent;
                  _context6.next = 10;
                  return queue.push(scriptName, data, _delay);

                case 10:
                  id = _context6.sent;

                case 11:
                  return _context6.abrupt("return", id);

                case 12:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function delay(_x7, _x8, _x9, _x10) {
          return _delay2.apply(this, arguments);
        }

        return delay;
      }()
    }, {
      key: "getDelayed",
      value: function () {
        var _getDelayed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  return _context7.abrupt("return", this.tmpJobs);

                case 1:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function getDelayed() {
          return _getDelayed.apply(this, arguments);
        }

        return getDelayed;
      }()
    }, {
      key: "ensureQueue",
      value: function () {
        var _ensureQueue = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(name, concurrency) {
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  return _context8.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8);
        }));

        function ensureQueue(_x11, _x12) {
          return _ensureQueue.apply(this, arguments);
        }

        return ensureQueue;
      }()
    }, {
      key: "getQueue",
      value: function () {
        var _getQueue = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(name) {
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  return _context9.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9);
        }));

        function getQueue(_x13) {
          return _getQueue.apply(this, arguments);
        }

        return getQueue;
      }()
    }, {
      key: "removeQueue",
      value: function () {
        var _removeQueue = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(name) {
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  return _context10.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10);
        }));

        function removeQueue(_x14) {
          return _removeQueue.apply(this, arguments);
        }

        return removeQueue;
      }()
    }, {
      key: "allQueues",
      value: function () {
        var _allQueues = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  return _context11.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11);
        }));

        function allQueues() {
          return _allQueues.apply(this, arguments);
        }

        return allQueues;
      }()
    }, {
      key: "pushJob",
      value: function () {
        var _pushJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(queueName, scriptName, data, delayUntil) {
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  return _context12.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));

        function pushJob(_x15, _x16, _x17, _x18) {
          return _pushJob.apply(this, arguments);
        }

        return pushJob;
      }()
    }, {
      key: "getJob",
      value: function () {
        var _getJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(queueName, jobId) {
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  return _context13.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13);
        }));

        function getJob(_x19, _x20) {
          return _getJob.apply(this, arguments);
        }

        return getJob;
      }()
    }, {
      key: "deleteJob",
      value: function () {
        var _deleteJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(queueName, jobId) {
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  return _context14.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14);
        }));

        function deleteJob(_x21, _x22) {
          return _deleteJob.apply(this, arguments);
        }

        return deleteJob;
      }()
    }, {
      key: "abortJob",
      value: function () {
        var _abortJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(queueName, jobId) {
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  return _context15.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15);
        }));

        function abortJob(_x23, _x24) {
          return _abortJob.apply(this, arguments);
        }

        return abortJob;
      }()
    }, {
      key: "allJobs",
      value: function () {
        var _allJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(queueName, scriptName) {
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  return _context16.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16);
        }));

        function allJobs(_x25, _x26) {
          return _allJobs.apply(this, arguments);
        }

        return allJobs;
      }()
    }, {
      key: "pendingJobs",
      value: function () {
        var _pendingJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(queueName, scriptName) {
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  return _context17.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17);
        }));

        function pendingJobs(_x27, _x28) {
          return _pendingJobs.apply(this, arguments);
        }

        return pendingJobs;
      }()
    }, {
      key: "progressJobs",
      value: function () {
        var _progressJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(queueName, scriptName) {
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  return _context18.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18);
        }));

        function progressJobs(_x29, _x30) {
          return _progressJobs.apply(this, arguments);
        }

        return progressJobs;
      }()
    }, {
      key: "completedJobs",
      value: function () {
        var _completedJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(queueName, scriptName) {
          return regeneratorRuntime.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  return _context19.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19);
        }));

        function completedJobs(_x31, _x32) {
          return _completedJobs.apply(this, arguments);
        }

        return completedJobs;
      }()
    }, {
      key: "failedJobs",
      value: function () {
        var _failedJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(queueName, scriptName) {
          return regeneratorRuntime.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  return _context20.abrupt("return", assert.fail('Not implemented specific method'));

                case 1:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20);
        }));

        function failedJobs(_x33, _x34) {
          return _failedJobs.apply(this, arguments);
        }

        return failedJobs;
      }()
    }]);

    function Resque() {
      var _this;

      _classCallCheck(this, Resque);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "tmpJobs", _descriptor, _assertThisInitialized(_this));

      _this.tmpJobs = [];
      return _this;
    }

    return Resque;
  }(Proxy), _class3.__filename = __filename$$, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tmpJobs", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "fullQueueName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "fullQueueName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "create", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "all", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "all"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'get', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'get'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "update", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "delay", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "delay"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getDelayed", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getDelayed"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "ensureQueue", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "ensureQueue"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getQueue", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getQueue"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeQueue", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeQueue"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "allQueues", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "allQueues"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pushJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pushJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "deleteJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "deleteJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "abortJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "abortJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "allJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "allJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pendingJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pendingJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "progressJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "progressJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "completedJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "completedJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "failedJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "failedJobs"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$10 = '/leanes/mixins/HttpCollectionMixin.js';

var HttpRequestParamsT = flowRuntime_umd.type("HttpRequestParamsT", flowRuntime_umd.object(flowRuntime_umd.property("requestType", flowRuntime_umd.string()), flowRuntime_umd.property("recordName", flowRuntime_umd.string()), flowRuntime_umd.property("snapshot", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string()), true), flowRuntime_umd.property("query", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("isCustomReturn", flowRuntime_umd["boolean"](), true)));

var HttpRequestHashT = flowRuntime_umd.type("HttpRequestHashT", flowRuntime_umd.exactObject(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("url", flowRuntime_umd.string()), flowRuntime_umd.property("headers", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.property("data", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))));

var RequestArgumentsT$1 = flowRuntime_umd.tdz(function () {
  return RequestArgumentsT;
});
var LegacyResponseInterface$2 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$2 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var HttpRequestHashT$1 = flowRuntime_umd.tdz(function () {
  return HttpRequestHashT;
});
var HttpRequestParamsT$1 = flowRuntime_umd.tdz(function () {
  return HttpRequestParamsT;
});
var CursorInterface$5 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var QueryInterface$2 = flowRuntime_umd.tdz(function () {
  return QueryInterface;
});
var RecordInterface$e = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$7 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var HttpCollectionMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      Cursor = _Module$NS.Cursor,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      request = _Module$NS$Utils.request;
  Module.defineMixin(__filename$10, function (BaseClass) {
    var _dec, _class, _class2, _init, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", function (Mixin) {
      var D = Mixin.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$e));
      return [flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_recordMultipleName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_recordSingleName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("headers", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("namespace", flowRuntime_umd.string()), flowRuntime_umd.property("queryEndpoint", flowRuntime_umd.string()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("recordMultipleName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("recordSingleName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("push", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("remove", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("take", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("takeBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$7, D), D)))), flowRuntime_umd.method("takeMany", flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$7, D), D)))), flowRuntime_umd.method("takeAll", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$7, D), D)))), flowRuntime_umd.method("override", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("includes", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))), flowRuntime_umd.method("headersForRequest", flowRuntime_umd.param("params", flowRuntime_umd.nullable(flowRuntime_umd.ref(HttpRequestParamsT$1))), flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.method("methodForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("dataForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("urlForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("pathForType", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlPrefix", flowRuntime_umd.param("path", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("parentURL", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("makeURL", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("id", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string()))), flowRuntime_umd.param("isQueryable", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForQuery", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForPatchBy", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForRemoveBy", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForTakeAll", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForTakeBy", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForTake", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForPush", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForRemove", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForOverride", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.ref("object")), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("buildURL", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("id", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string()))), flowRuntime_umd.param("requestType", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("requestFor", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.ref(HttpRequestHashT$1))), flowRuntime_umd.method("sendRequest", function (_fn) {
        var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn.typeParameter("R", undefined, T);

        var L = _fn.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$2, flowRuntime_umd.ref(AxiosResponse$2, T, R)));

        return [flowRuntime_umd.rest("args", flowRuntime_umd.ref(RequestArgumentsT$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
      }), flowRuntime_umd.method("requestHashToArguments", function (_fn2) {
        var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn2.typeParameter("R", undefined, T);

        return [flowRuntime_umd.param("hash", flowRuntime_umd.ref(HttpRequestHashT$1)), flowRuntime_umd["return"](flowRuntime_umd.ref(RequestArgumentsT$1, T, R))];
      }), flowRuntime_umd.method("makeRequest", function (_fn3) {
        var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn3.typeParameter("R", undefined, T);

        var L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$2, flowRuntime_umd.ref(AxiosResponse$2, T, R)));

        return [flowRuntime_umd.param("requestObj", flowRuntime_umd.ref(HttpRequestHashT$1)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
      }), flowRuntime_umd.method("parseQuery", flowRuntime_umd.param("aoQuery", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref(QueryInterface$2))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.string(), flowRuntime_umd.ref(QueryInterface$2))))), flowRuntime_umd.method("executeQuery", flowRuntime_umd.param("aoQuery", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.string(), flowRuntime_umd.ref(QueryInterface$2))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$7, D)), flowRuntime_umd.existential()))))];
    })), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      // ipsRecordMultipleName = PointerT(_Class.private({
      // ipsRecordSingleName = PointerT(_Class.private({
      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _initializerDefineProperty(_this, "_recordMultipleName", _descriptor, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "_recordSingleName", _descriptor2, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "headers", _descriptor3, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "host", _descriptor4, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "namespace", _descriptor5, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "queryEndpoint", _descriptor6, _assertThisInitialized(_this));

        return _this;
      }

      _createClass(Mixin, [{
        key: "recordMultipleName",
        value: function recordMultipleName() {
          if (this._recordMultipleName == null) {
            this._recordMultipleName = inflect.pluralize(this.recordSingleName());
          }

          return this._recordMultipleName;
        }
      }, {
        key: "recordSingleName",
        value: function recordSingleName() {
          if (this._recordSingleName == null) {
            this._recordSingleName = inflect.underscore(this.delegate.name.replace(/Record$/, ''));
          }

          return this._recordSingleName;
        }
      }, {
        key: "push",
        value: function () {
          var _push = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoRecord) {
            var params, requestObj, res, body, voRecord;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    params = {};
                    params.requestType = 'push';
                    params.recordName = this.delegate.name;
                    _context.next = 5;
                    return this.serialize(aoRecord);

                  case 5:
                    params.snapshot = _context.sent;
                    requestObj = this.requestFor(params);
                    _context.next = 9;
                    return this.makeRequest(requestObj);

                  case 9:
                    res = _context.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context.next = 19;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    _context.next = 16;
                    return this.normalize(body[this.recordSingleName()]);

                  case 16:
                    voRecord = _context.sent;
                    _context.next = 20;
                    break;

                  case 19:
                    assert.fail("Record payload has not existed in response body.");

                  case 20:
                    return _context.abrupt("return", voRecord);

                  case 21:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function push(_x) {
            return _push.apply(this, arguments);
          }

          return push;
        }()
      }, {
        key: "remove",
        value: function () {
          var _remove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
            var params, requestObj, res;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    params = {};
                    params.requestType = 'remove';
                    params.recordName = this.delegate.name;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context2.next = 7;
                    return this.makeRequest(requestObj);

                  case 7:
                    res = _context2.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));

                  case 9:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function remove(_x2) {
            return _remove.apply(this, arguments);
          }

          return remove;
        }()
      }, {
        key: "take",
        value: function () {
          var _take = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
            var params, requestObj, res, body, voRecord;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    params = {};
                    params.requestType = 'take';
                    params.recordName = this.delegate.name;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context3.next = 7;
                    return this.makeRequest(requestObj);

                  case 7:
                    res = _context3.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context3.next = 17;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    _context3.next = 14;
                    return this.normalize(body[this.recordSingleName()]);

                  case 14:
                    voRecord = _context3.sent;
                    _context3.next = 18;
                    break;

                  case 17:
                    assert.fail("Record payload has not existed in response body.");

                  case 18:
                    return _context3.abrupt("return", voRecord);

                  case 19:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function take(_x3) {
            return _take.apply(this, arguments);
          }

          return take;
        }()
      }, {
        key: "takeBy",
        value: function () {
          var _takeBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(query) {
            var options,
                params,
                requestObj,
                res,
                body,
                voCursor,
                vhRecordsData,
                _args4 = arguments;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                    params = {};
                    params.requestType = 'takeBy';
                    params.recordName = this.delegate.name;
                    params.query = {
                      $filter: query
                    };

                    if (options.$sort != null) {
                      params.query.$sort = options.$sort;
                    }

                    if (options.$limit != null) {
                      params.query.$limit = options.$limit;
                    }

                    if (options.$offset != null) {
                      params.query.$offset = options.$offset;
                    }

                    requestObj = this.requestFor(params);
                    _context4.next = 11;
                    return this.makeRequest(requestObj);

                  case 11:
                    res = _context4.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (body != null && body !== '') {
                      if (_.isString(body)) {
                        body = JSON.parse(body);
                      }

                      vhRecordsData = body[this.recordMultipleName()];
                      voCursor = Cursor["new"](this, vhRecordsData);
                    } else {
                      assert.fail("Record payload has not existed in response body.");
                    }

                    return _context4.abrupt("return", voCursor);

                  case 16:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function takeBy(_x4) {
            return _takeBy.apply(this, arguments);
          }

          return takeBy;
        }()
      }, {
        key: "takeMany",
        value: function () {
          var _takeMany = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(ids) {
            var params, requestObj, res, body, voCursor, vhRecordsData;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    params = {};
                    params.requestType = 'takeBy';
                    params.recordName = this.delegate.name;
                    params.query = {
                      $filter: {
                        '@doc.id': {
                          $in: ids
                        }
                      }
                    };
                    requestObj = this.requestFor(params);
                    _context5.next = 7;
                    return this.makeRequest(requestObj);

                  case 7:
                    res = _context5.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (body != null && body !== '') {
                      if (_.isString(body)) {
                        body = JSON.parse(body);
                      }

                      vhRecordsData = body[this.recordMultipleName()];
                      voCursor = Cursor["new"](this, vhRecordsData);
                    } else {
                      assert.fail("Record payload has not existed in response body.");
                    }

                    return _context5.abrupt("return", voCursor);

                  case 12:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function takeMany(_x5) {
            return _takeMany.apply(this, arguments);
          }

          return takeMany;
        }()
      }, {
        key: "takeAll",
        value: function () {
          var _takeAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
            var params, requestObj, res, body, voCursor, vhRecordsData;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    params = {};
                    params.requestType = 'takeAll';
                    params.recordName = this.delegate.name;
                    params.query = {};
                    requestObj = this.requestFor(params);
                    _context6.next = 7;
                    return this.makeRequest(requestObj);

                  case 7:
                    res = _context6.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (body != null && body !== '') {
                      if (_.isString(body)) {
                        body = JSON.parse(body);
                      }

                      vhRecordsData = body[this.recordMultipleName()];
                      voCursor = Cursor["new"](this, vhRecordsData);
                    } else {
                      assert.fail("Record payload has not existed in response body.");
                    }

                    return _context6.abrupt("return", voCursor);

                  case 12:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function takeAll() {
            return _takeAll.apply(this, arguments);
          }

          return takeAll;
        }()
      }, {
        key: "override",
        value: function () {
          var _override = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(id, aoRecord) {
            var params, requestObj, res, body, voRecord;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    params = {};
                    params.requestType = 'override';
                    params.recordName = this.delegate.name;
                    _context7.next = 5;
                    return this.serialize(aoRecord);

                  case 5:
                    params.snapshot = _context7.sent;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context7.next = 10;
                    return this.makeRequest(requestObj);

                  case 10:
                    res = _context7.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context7.next = 20;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    _context7.next = 17;
                    return this.normalize(body[this.recordSingleName()]);

                  case 17:
                    voRecord = _context7.sent;
                    _context7.next = 21;
                    break;

                  case 20:
                    assert.fail("Record payload has not existed in response body.");

                  case 21:
                    return _context7.abrupt("return", voRecord);

                  case 22:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function override(_x6, _x7) {
            return _override.apply(this, arguments);
          }

          return override;
        }()
      }, {
        key: "includes",
        value: function () {
          var _includes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(id) {
            var voQuery;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    voQuery = {
                      $forIn: {
                        '@doc': this.collectionFullName()
                      },
                      $filter: {
                        '@doc.id': {
                          $eq: id
                        }
                      },
                      $limit: 1,
                      $return: '@doc'
                    };
                    console.log('>?>?> HttpCollectionMixin::includes before query');
                    _context8.next = 4;
                    return this.query(voQuery);

                  case 4:
                    _context8.next = 6;
                    return _context8.sent.hasNext();

                  case 6:
                    return _context8.abrupt("return", _context8.sent);

                  case 7:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function includes(_x8) {
            return _includes.apply(this, arguments);
          }

          return includes;
        }()
      }, {
        key: "length",
        value: function () {
          var _length = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
            var voQuery;
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    voQuery = {
                      $forIn: {
                        '@doc': this.collectionFullName()
                      },
                      $count: true
                    };
                    _context9.next = 3;
                    return this.query(voQuery);

                  case 3:
                    _context9.next = 5;
                    return _context9.sent.first();

                  case 5:
                    return _context9.abrupt("return", _context9.sent.count);

                  case 6:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));

          function length() {
            return _length.apply(this, arguments);
          }

          return length;
        }()
      }, {
        key: "headersForRequest",
        value: function headersForRequest() {
          var headers = this.headers || {};
          headers['Accept'] = 'application/json';
          return headers;
        }
      }, {
        key: "methodForRequest",
        value: function methodForRequest(params) {
          var requestType = params.requestType;

          switch (requestType) {
            case 'query':
              return 'POST';

            case 'patchBy':
              return 'POST';

            case 'removeBy':
              return 'POST';

            case 'takeAll':
              return 'GET';

            case 'takeBy':
              return 'GET';

            case 'take':
              return 'GET';

            case 'push':
              return 'POST';

            case 'remove':
              return 'DELETE';

            case 'override':
              return 'PUT';

            default:
              return 'GET';
          }
        }
      }, {
        key: "dataForRequest",
        value: function dataForRequest(params) {
          var recordName = params.recordName,
              snapshot = params.snapshot,
              requestType = params.requestType,
              query = params.query;

          if (snapshot != null && (requestType === 'push' || requestType === 'override')) {
            return snapshot;
          } else if (requestType === 'query' || requestType === 'patchBy' || requestType === 'removeBy') {
            return {
              query: query
            };
          }
        }
      }, {
        key: "urlForRequest",
        value: function urlForRequest(params) {
          var recordName = params.recordName,
              snapshot = params.snapshot,
              id = params.id,
              requestType = params.requestType,
              query = params.query;
          return this.buildURL(recordName, snapshot, id, requestType, query);
        }
      }, {
        key: "pathForType",
        value: function pathForType(recordName) {
          return inflect.pluralize(inflect.underscore(recordName.replace(/Record$/, '')));
        }
      }, {
        key: "urlPrefix",
        value: function urlPrefix(path, parentURL) {
          if (!this.host || this.host === '/') {
            this.host = '';
          }

          if (path) {
            // Protocol relative url
            if (/^\/\//.test(path) || /http(s)?:\/\//.test(path)) {
              // Do nothing, the full @host is already included.
              return path; // Absolute path
            } else if (path.charAt(0) === '/') {
              return "".concat(this.host).concat(path);
            } else {
              // Relative path
              return "".concat(parentURL, "/").concat(path);
            }
          } // No path provided


          var url = [];

          if (this.host) {
            url.push(this.host);
          }

          if (this.namespace) {
            url.push(this.namespace);
          }

          return url.join('/');
        }
      }, {
        key: "makeURL",
        value: function makeURL(recordName, query, id, isQueryable) {
          var url = [];
          var prefix = this.urlPrefix();

          if (recordName) {
            var path = this.pathForType(recordName);

            if (path) {
              url.push(path);
            }
          }

          if (isQueryable && this.queryEndpoint != null) {
            url.push(encodeURIComponent(this.queryEndpoint));
          }

          if (prefix) {
            url.unshift(prefix);
          }

          if (id != null) {
            url.push(id);
          }

          var vsUrl = url.join('/');

          if (!this.host && vsUrl && vsUrl.charAt(0) !== '/') {
            vsUrl = '/' + vsUrl;
          }

          if (query != null) {
            query = encodeURIComponent(JSON.stringify(query != null ? query : ''));
            vsUrl += "?query=".concat(query);
          }

          return vsUrl;
        }
      }, {
        key: "urlForQuery",
        value: function urlForQuery(recordName, query) {
          return this.makeURL(recordName, null, null, true);
        }
      }, {
        key: "urlForPatchBy",
        value: function urlForPatchBy(recordName, query) {
          return this.makeURL(recordName, null, null, true);
        }
      }, {
        key: "urlForRemoveBy",
        value: function urlForRemoveBy(recordName, query) {
          return this.makeURL(recordName, null, null, true);
        }
      }, {
        key: "urlForTakeAll",
        value: function urlForTakeAll(recordName, query) {
          return this.makeURL(recordName, query, null, false);
        }
      }, {
        key: "urlForTakeBy",
        value: function urlForTakeBy(recordName, query) {
          return this.makeURL(recordName, query, null, false);
        }
      }, {
        key: "urlForTake",
        value: function urlForTake(recordName, id) {
          return this.makeURL(recordName, null, id, false);
        }
      }, {
        key: "urlForPush",
        value: function urlForPush(recordName, snapshot) {
          return this.makeURL(recordName, null, null, false);
        }
      }, {
        key: "urlForRemove",
        value: function urlForRemove(recordName, id) {
          return this.makeURL(recordName, null, id, false);
        }
      }, {
        key: "urlForOverride",
        value: function urlForOverride(recordName, snapshot, id) {
          return this.makeURL(recordName, null, id, false);
        }
      }, {
        key: "buildURL",
        value: function buildURL(recordName, snapshot, id, requestType, query) {
          switch (requestType) {
            case 'query':
              return this.urlForQuery(recordName, query);

            case 'patchBy':
              return this.urlForPatchBy(recordName, query);

            case 'removeBy':
              return this.urlForRemoveBy(recordName, query);

            case 'takeAll':
              return this.urlForTakeAll(recordName, query);

            case 'takeBy':
              return this.urlForTakeBy(recordName, query);

            case 'take':
              return this.urlForTake(recordName, id);

            case 'push':
              return this.urlForPush(recordName, snapshot);

            case 'remove':
              return this.urlForRemove(recordName, id);

            case 'override':
              return this.urlForOverride(recordName, snapshot, id);

            default:
              var vsMethod = "urlFor".concat(inflect.camelize(requestType));
              return typeof this[vsMethod] === "function" ? this[vsMethod](recordName, query, snapshot, id) : undefined;
          }
        }
      }, {
        key: "requestFor",
        value: function requestFor(params) {
          var method = this.methodForRequest(params);
          var url = this.urlForRequest(params);
          var headers = this.headersForRequest(params);
          var data = this.dataForRequest(params);
          return {
            method: method,
            url: url,
            headers: headers,
            data: data
          };
        }
      }, {
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
            var _len2,
                args,
                _key2,
                method,
                url,
                options,
                _args10 = arguments;

            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    for (_len2 = _args10.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = _args10[_key2];
                    }

                    method = args[0], url = args[1], options = args[2];
                    _context10.next = 4;
                    return request(method, url, options);

                  case 4:
                    return _context10.abrupt("return", _context10.sent);

                  case 5:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10);
          }));

          function sendRequest() {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }, {
        key: "requestHashToArguments",
        value: function requestHashToArguments(hash) {
          var method = hash.method,
              url = hash.url,
              headers = hash.headers,
              data = hash.data;
          var options = {
            responseType: 'json',
            headers: headers
          };

          if (data != null) {
            options.body = data;
          }

          return [method, url, options];
        }
      }, {
        key: "makeRequest",
        value: function () {
          var _makeRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(requestObj) {
            var _Module$NS$Pipes$NS$L, SEND_TO_LOG, LEVELS, DEBUG, hash;

            return regeneratorRuntime.wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    // result of requestFor
                    _Module$NS$Pipes$NS$L = Module.NS.Pipes.NS.LogMessage, SEND_TO_LOG = _Module$NS$Pipes$NS$L.SEND_TO_LOG, LEVELS = _Module$NS$Pipes$NS$L.LEVELS, DEBUG = _Module$NS$Pipes$NS$L.DEBUG;
                    hash = this.requestHashToArguments(requestObj);
                    this.sendNotification(SEND_TO_LOG, "HttpCollectionMixin::makeRequest hash ".concat(JSON.stringify(hash)), LEVELS[DEBUG]);
                    _context11.next = 5;
                    return this.sendRequest.apply(this, _toConsumableArray(hash));

                  case 5:
                    return _context11.abrupt("return", _context11.sent);

                  case 6:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));

          function makeRequest(_x9) {
            return _makeRequest.apply(this, arguments);
          }

          return makeRequest;
        }()
      }, {
        key: "parseQuery",
        value: function () {
          var _parseQuery = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(aoQuery) {
            var params;
            return regeneratorRuntime.wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    console.log('>>?? HttpCollectionMixin::parseQuery enter');
                    params = {};
                    _context12.t0 = false;
                    _context12.next = _context12.t0 === (aoQuery.$remove == null) ? 5 : _context12.t0 === (aoQuery.$patch == null) ? 12 : 19;
                    break;

                  case 5:
                    if (!(aoQuery.$forIn != null)) {
                      _context12.next = 11;
                      break;
                    }

                    params.requestType = 'removeBy';
                    params.recordName = this.delegate.name;
                    params.query = aoQuery;
                    params.isCustomReturn = true;
                    return _context12.abrupt("return", params);

                  case 11:
                    return _context12.abrupt("break", 24);

                  case 12:
                    if (!(aoQuery.$forIn != null)) {
                      _context12.next = 18;
                      break;
                    }

                    params.requestType = 'patchBy';
                    params.recordName = this.delegate.name;
                    params.query = aoQuery;
                    params.isCustomReturn = true;
                    return _context12.abrupt("return", params);

                  case 18:
                    return _context12.abrupt("break", 24);

                  case 19:
                    params.requestType = 'query';
                    params.recordName = this.delegate.name;
                    params.query = aoQuery;
                    params.isCustomReturn = aoQuery.$collect != null || aoQuery.$count != null || aoQuery.$sum != null || aoQuery.$min != null || aoQuery.$max != null || aoQuery.$avg != null || aoQuery.$remove != null || aoQuery.$return !== '@doc';
                    return _context12.abrupt("return", params);

                  case 24:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));

          function parseQuery(_x10) {
            return _parseQuery.apply(this, arguments);
          }

          return parseQuery;
        }()
      }, {
        key: "executeQuery",
        value: function () {
          var _executeQuery = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(aoQuery) {
            var requestObj, _res, body;

            return regeneratorRuntime.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    console.log('>>?? HttpCollectionMixin::executeQuery enter');
                    requestObj = this.requestFor(aoQuery);
                    _context13.next = 4;
                    return this.makeRequest(requestObj);

                  case 4:
                    res = _context13.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    _res = res, body = _res.body;

                    if (!(body != null && body !== '')) {
                      _context13.next = 19;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    if (!_.isArray(body)) {
                      body = [body];
                    }

                    if (!aoQuery.isCustomReturn) {
                      _context13.next = 15;
                      break;
                    }

                    console.log('>>?? HttpCollectionMixin::executeQuery aoQuery.isCustomReturn');
                    return _context13.abrupt("return", Cursor["new"](null, body));

                  case 15:
                    console.log('>>?? HttpCollectionMixin::executeQuery NOT aoQuery.isCustomReturn');
                    return _context13.abrupt("return", Cursor["new"](this, body));

                  case 17:
                    _context13.next = 21;
                    break;

                  case 19:
                    console.log('>>?? HttpCollectionMixin::executeQuery EMPTY CURSOR');
                    return _context13.abrupt("return", Cursor["new"](null, []));

                  case 21:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));

          function executeQuery(_x11) {
            return _executeQuery.apply(this, arguments);
          }

          return executeQuery;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_recordMultipleName", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_recordSingleName", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "headers", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "host", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'http://localhost';
      }
    }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "namespace", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return '';
      }
    }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "queryEndpoint", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'query';
      }
    }), _applyDecoratedDescriptor(_class2.prototype, "recordMultipleName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordMultipleName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "recordSingleName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordSingleName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "take", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "take"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeMany"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeAll"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "override", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "override"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "includes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "includes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "headersForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "headersForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "methodForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "methodForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "dataForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dataForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pathForType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pathForType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlPrefix", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlPrefix"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "makeURL", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "makeURL"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForQuery", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForQuery"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForPatchBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForPatchBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForRemoveBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForRemoveBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForTakeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForTakeAll"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForTakeBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForTakeBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForTake", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForTake"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForPush", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForPush"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForOverride", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForOverride"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "buildURL", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "buildURL"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "requestFor", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "requestFor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "requestHashToArguments", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "requestHashToArguments"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "makeRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "makeRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "parseQuery", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "parseQuery"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "executeQuery", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "executeQuery"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$11 = '/leanes/mixins/HttpSerializerMixin.js';

var TransformStaticInterface$a = flowRuntime_umd.tdz(function () {
  return TransformStaticInterface;
});
var RecordInterface$f = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var HttpSerializerMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  Module.defineMixin(__filename$11, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("normalize", flowRuntime_umd.param("acRecord", flowRuntime_umd.ref(TransformStaticInterface$a)), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$f)))), flowRuntime_umd.method("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$f))), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "normalize",
        value: function () {
          var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(acRecord, ahPayload) {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (_.isString(ahPayload)) {
                      ahPayload = JSON.parse(ahPayload);
                    }

                    _context.next = 3;
                    return acRecord.normalize(ahPayload, this.collection);

                  case 3:
                    return _context.abrupt("return", _context.sent);

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function normalize(_x, _x2) {
            return _normalize.apply(this, arguments);
          }

          return normalize;
        }()
      }, {
        key: "serialize",
        value: function () {
          var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoRecord) {
            var options,
                vcRecord,
                recordName,
                singular,
                _args2 = arguments;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
                    vcRecord = aoRecord.constructor;
                    recordName = vcRecord.name.replace(/Record$/, '');
                    singular = inflect.singularize(inflect.underscore(recordName));
                    _context2.t0 = _defineProperty;
                    _context2.t1 = {};
                    _context2.t2 = "".concat(singular);
                    _context2.next = 9;
                    return vcRecord.serialize(aoRecord, options);

                  case 9:
                    _context2.t3 = _context2.sent;
                    return _context2.abrupt("return", (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3));

                  case 11:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function serialize(_x3) {
            return _serialize.apply(this, arguments);
          }

          return serialize;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "normalize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "normalize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "serialize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "serialize"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$12 = '/leanes/mixins/MemoryCollectionMixin.js';

var CursorInterface$6 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var RecordInterface$g = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$8 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var MemoryCollectionMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _ = _Module$NS.Utils._;
  Module.defineMixin(__filename$12, function (BaseClass) {
    var _dec, _class, _class2, _init, _descriptor, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", function (Mixin) {
      var D = Mixin.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$g));
      return [flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_collection", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()), flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("onRegister"), flowRuntime_umd.method("push", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("remove", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("take", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("takeMany", flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$6, flowRuntime_umd.ref(CollectionInterface$8, D), D)))), flowRuntime_umd.method("takeAll", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$6, flowRuntime_umd.ref(CollectionInterface$8, D), D)))), flowRuntime_umd.method("override", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("includes", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number())))];
    })), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      // ipoCollection = PointerT(this.protected({
      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _initializerDefineProperty(_this, "_collection", _descriptor, _assertThisInitialized(_this));

        return _this;
      }

      _createClass(Mixin, [{
        key: "onRegister",
        value: function onRegister() {
          _get(_getPrototypeOf(Mixin.prototype), "onRegister", this).apply(this, arguments);

          this._collection = {};
        }
      }, {
        key: "push",
        value: function () {
          var _push = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoRecord) {
            var id;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    id = aoRecord.id;

                    if (!(id == null)) {
                      _context.next = 3;
                      break;
                    }

                    return _context.abrupt("return", false);

                  case 3:
                    _context.next = 5;
                    return this.serializer.serialize(aoRecord);

                  case 5:
                    this._collection[id] = _context.sent;
                    _context.next = 8;
                    return this.serializer.normalize(this.delegate, this._collection[id]);

                  case 8:
                    return _context.abrupt("return", _context.sent);

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function push(_x) {
            return _push.apply(this, arguments);
          }

          return push;
        }()
      }, {
        key: "remove",
        value: function () {
          var _remove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    delete this._collection[id];

                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function remove(_x2) {
            return _remove.apply(this, arguments);
          }

          return remove;
        }()
      }, {
        key: "take",
        value: function () {
          var _take = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return this.serializer.normalize(this.delegate, this._collection[id]);

                  case 2:
                    return _context3.abrupt("return", _context3.sent);

                  case 3:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function take(_x3) {
            return _take.apply(this, arguments);
          }

          return take;
        }()
      }, {
        key: "takeMany",
        value: function () {
          var _takeMany = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(ids) {
            var _this2 = this;

            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    return _context4.abrupt("return", Module.NS.Cursor["new"](this, ids.map(function (id) {
                      return _this2._collection[id];
                    })));

                  case 1:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function takeMany(_x4) {
            return _takeMany.apply(this, arguments);
          }

          return takeMany;
        }()
      }, {
        key: "takeAll",
        value: function () {
          var _takeAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    return _context5.abrupt("return", Module.NS.Cursor["new"](this, _.values(this._collection)));

                  case 1:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function takeAll() {
            return _takeAll.apply(this, arguments);
          }

          return takeAll;
        }()
      }, {
        key: "override",
        value: function () {
          var _override = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id, aoRecord) {
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return this.serializer.serialize(aoRecord);

                  case 2:
                    this._collection[id] = _context6.sent;
                    _context6.next = 5;
                    return this.serializer.normalize(this.delegate, this._collection[id]);

                  case 5:
                    return _context6.abrupt("return", _context6.sent);

                  case 6:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function override(_x5, _x6) {
            return _override.apply(this, arguments);
          }

          return override;
        }()
      }, {
        key: "includes",
        value: function () {
          var _includes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(id) {
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    return _context7.abrupt("return", this._collection[id] != null);

                  case 1:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function includes(_x7) {
            return _includes.apply(this, arguments);
          }

          return includes;
        }()
      }, {
        key: "length",
        value: function () {
          var _length = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    return _context8.abrupt("return", Object.keys(this._collection).length);

                  case 1:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function length() {
            return _length.apply(this, arguments);
          }

          return length;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_collection", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "take", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "take"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeMany"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeAll"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "override", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "override"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "includes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "includes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$13 = '/leanes/mixins/GenerateAutoincrementIdMixin.js';

var GenerateAutoincrementIdMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      Query = _Module$NS.Query,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method;
  Module.defineMixin(__filename$13, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("generateId", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "generateId",
        value: function () {
          var _generateId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var voQuery, maxId;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    voQuery = Query["new"]().forIn({
                      '@doc': this.collectionFullName()
                    }).max('@doc.id');
                    _context.next = 3;
                    return this.query(voQuery);

                  case 3:
                    _context.next = 5;
                    return _context.sent.first();

                  case 5:
                    maxId = _context.sent;
                    maxId = maxId || 0;
                    return _context.abrupt("return", ++maxId);

                  case 8:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function generateId() {
            return _generateId.apply(this, arguments);
          }

          return generateId;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "generateId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "generateId"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$14 = '/leanes/mixins/GenerateUuidIdMixin.js';

var GenerateUuidIdMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      uuid = _Module$NS.Utils.uuid;
  Module.defineMixin(__filename$14, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("generateId", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.string()))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "generateId",
        value: function () {
          var _generateId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", uuid.v4());

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function generateId() {
            return _generateId.apply(this, arguments);
          }

          return generateId;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "generateId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "generateId"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$15 = '/leanes/mixins/MemoryResqueMixin.js';

var MemoryResqueMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      DEFAULT_QUEUE = _Module$NS.DEFAULT_QUEUE,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  Module.defineMixin(__filename$15, function (BaseClass) {
    var _dec, _class, _class2, _init, _descriptor, _descriptor2, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_jobs", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("queueName", flowRuntime_umd.string()), flowRuntime_umd.property("data", flowRuntime_umd.exactObject(flowRuntime_umd.property("scriptName", flowRuntime_umd.string()), flowRuntime_umd.property("data", flowRuntime_umd.any()))), flowRuntime_umd.property("delayUntil", flowRuntime_umd.number()), flowRuntime_umd.property("status", flowRuntime_umd.union(flowRuntime_umd.string("scheduled"), flowRuntime_umd.string("failed"), flowRuntime_umd.string("queued"), flowRuntime_umd.string("running"), flowRuntime_umd.string("completed"))), flowRuntime_umd.property("lockLifetime", flowRuntime_umd.number(5000)), flowRuntime_umd.property("lockLimit", flowRuntime_umd.number(2))))))))), flowRuntime_umd.property("_queues", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number())))))), flowRuntime_umd.method("onRegister"), flowRuntime_umd.method("onRemove"), flowRuntime_umd.method("ensureQueue", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("concurrency", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number()))))), flowRuntime_umd.method("getQueue", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number())))))), flowRuntime_umd.method("removeQueue", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("allQueues", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("name", flowRuntime_umd.string()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number()))))))), flowRuntime_umd.method("pushJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd.param("delayUntil", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())))), flowRuntime_umd.method("getJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("deleteJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("abortJob", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("jobId", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("allJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("pendingJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("progressJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("completedJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("failedJobs", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("scriptName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref("object"))))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _initializerDefineProperty(_this, "_jobs", _descriptor, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "_queues", _descriptor2, _assertThisInitialized(_this));

        return _this;
      }

      _createClass(Mixin, [{
        key: "onRegister",
        value: function onRegister() {
          _get(_getPrototypeOf(Mixin.prototype), "onRegister", this).apply(this, arguments);

          this._queues = {};
          this._jobs = {};
          var fullName = this.fullQueueName(DEFAULT_QUEUE);
          this._queues[fullName] = {
            name: DEFAULT_QUEUE,
            concurrency: 1
          };
        }
      }, {
        key: "onRemove",
        value: function onRemove() {
          _get(_getPrototypeOf(Mixin.prototype), "onRemove", this).apply(this, arguments);

          for (var qKey in this._queues) {
            delete this._queues[qKey];
          }

          this._queues = {};

          for (var jKey in this._jobs) {
            delete this._jobs[jKey];
          }

          this._jobs = {};
        }
      }, {
        key: "ensureQueue",
        value: function () {
          var _ensureQueue = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {
            var concurrency,
                fullName,
                queue,
                _args = arguments;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    concurrency = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;
                    fullName = this.fullQueueName(name);
                    queue = this._queues[fullName];

                    if (queue != null) {
                      queue.concurrency = concurrency;
                      this._queues[fullName] = queue;
                    } else {
                      this._queues[fullName] = {
                        name: name,
                        concurrency: concurrency
                      };
                    }

                    return _context.abrupt("return", {
                      name: name,
                      concurrency: concurrency
                    });

                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function ensureQueue(_x) {
            return _ensureQueue.apply(this, arguments);
          }

          return ensureQueue;
        }()
      }, {
        key: "getQueue",
        value: function () {
          var _getQueue = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(name) {
            var fullName, queue, concurrency;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    fullName = this.fullQueueName(name);
                    queue = this._queues[fullName];

                    if (!(queue != null)) {
                      _context2.next = 7;
                      break;
                    }

                    concurrency = queue.concurrency;
                    return _context2.abrupt("return", {
                      name: name,
                      concurrency: concurrency
                    });

                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function getQueue(_x2) {
            return _getQueue.apply(this, arguments);
          }

          return getQueue;
        }()
      }, {
        key: "removeQueue",
        value: function () {
          var _removeQueue = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(name) {
            var fullName, queue;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    fullName = this.fullQueueName(queueName);
                    queue = this._queues[fullName];

                    if (queue != null) {
                      delete this._queues[fullName];
                    }

                  case 3:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function removeQueue(_x3) {
            return _removeQueue.apply(this, arguments);
          }

          return removeQueue;
        }()
      }, {
        key: "allQueues",
        value: function () {
          var _allQueues = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            var queues, mapedQueues;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    queues = _.values(this._queues);
                    mapedQueues = queues.map(function (_ref) {
                      var name = _ref.name,
                          concurrency = _ref.concurrency;
                      return {
                        name: name,
                        concurrency: concurrency
                      };
                    });
                    return _context4.abrupt("return", mapedQueues);

                  case 3:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function allQueues() {
            return _allQueues.apply(this, arguments);
          }

          return allQueues;
        }()
      }, {
        key: "pushJob",
        value: function () {
          var _pushJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(queueName, scriptName, data, delayUntil) {
            var fullName, length;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    fullName = this.fullQueueName(queueName);
                    delayUntil = delayUntil || Date.now();

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    length = this._jobs[fullName].push({
                      queueName: fullName,
                      data: {
                        scriptName: scriptName,
                        data: data
                      },
                      delayUntil: delayUntil,
                      status: 'scheduled',
                      lockLifetime: 5000,
                      lockLimit: 2
                    });
                    return _context5.abrupt("return", length - 1);

                  case 5:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function pushJob(_x4, _x5, _x6, _x7) {
            return _pushJob.apply(this, arguments);
          }

          return pushJob;
        }()
      }, {
        key: "getJob",
        value: function () {
          var _getJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(queueName, jobId) {
            var fullName;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    return _context6.abrupt("return", this._jobs[fullName][jobId] || null);

                  case 3:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function getJob(_x8, _x9) {
            return _getJob.apply(this, arguments);
          }

          return getJob;
        }()
      }, {
        key: "deleteJob",
        value: function () {
          var _deleteJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(queueName, jobId) {
            var isDeleted, fullName;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    if (this._jobs[fullName][jobId] != null) {
                      delete this._jobs[fullName][jobId];
                      isDeleted = true;
                    } else {
                      isDeleted = false;
                    }

                    return _context7.abrupt("return", isDeleted);

                  case 4:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function deleteJob(_x10, _x11) {
            return _deleteJob.apply(this, arguments);
          }

          return deleteJob;
        }()
      }, {
        key: "abortJob",
        value: function () {
          var _abortJob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(queueName, jobId) {
            var fullName, job;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    job = this._jobs[fullName][jobId];

                    if (job != null) {
                      if (job.status === 'scheduled') {
                        job.status = 'failed';
                        job.reason = new Error('Job has been aborted');
                      }
                    }

                  case 4:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function abortJob(_x12, _x13) {
            return _abortJob.apply(this, arguments);
          }

          return abortJob;
        }()
      }, {
        key: "allJobs",
        value: function () {
          var _allJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(queueName) {
            var scriptName,
                fullName,
                _args9 = arguments;
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    scriptName = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : null;
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    return _context9.abrupt("return", this._jobs[fullName].filter(function (job) {
                      if (scriptName != null) {
                        if (job.data.scriptName === scriptName) {
                          return true;
                        } else {
                          return false;
                        }
                      } else {
                        return true;
                      }
                    }) || []);

                  case 4:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));

          function allJobs(_x14) {
            return _allJobs.apply(this, arguments);
          }

          return allJobs;
        }()
      }, {
        key: "pendingJobs",
        value: function () {
          var _pendingJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(queueName) {
            var scriptName,
                fullName,
                _args10 = arguments;
            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    scriptName = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : null;
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    return _context10.abrupt("return", this._jobs[fullName].filter(function (job) {

                      if (scriptName != null) {
                        if (job.data.scriptName === scriptName && _.includes(['scheduled', 'queued'], job.status)) {
                          return true;
                        } else {
                          return false;
                        }
                      } else {
                        if (_.includes(['scheduled', 'queued'], job.status)) {
                          return true;
                        } else {
                          return false;
                        }
                      }
                    }) || []);

                  case 4:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));

          function pendingJobs(_x15) {
            return _pendingJobs.apply(this, arguments);
          }

          return pendingJobs;
        }()
      }, {
        key: "progressJobs",
        value: function () {
          var _progressJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(queueName) {
            var scriptName,
                fullName,
                _args11 = arguments;
            return regeneratorRuntime.wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    scriptName = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    return _context11.abrupt("return", this._jobs[fullName].filter(function (job) {
                      if (scriptName != null) {
                        if (job.data.scriptName === scriptName && job.status === 'running') {
                          return true;
                        } else {
                          return false;
                        }
                      } else {
                        if (job.status === 'running') {
                          return true;
                        } else {
                          return false;
                        }
                      }
                    }) || []);

                  case 4:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));

          function progressJobs(_x16) {
            return _progressJobs.apply(this, arguments);
          }

          return progressJobs;
        }()
      }, {
        key: "completedJobs",
        value: function () {
          var _completedJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(queueName) {
            var scriptName,
                fullName,
                _args12 = arguments;
            return regeneratorRuntime.wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    scriptName = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : null;
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    return _context12.abrupt("return", this._jobs[fullName].filter(function (job) {
                      if (scriptName != null) {
                        if (job.data.scriptName === scriptName && job.status === 'completed') {
                          return true;
                        } else {
                          return false;
                        }
                      } else {
                        if (job.status === 'completed') {
                          return true;
                        } else {
                          return false;
                        }
                      }
                    }) || []);

                  case 4:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));

          function completedJobs(_x17) {
            return _completedJobs.apply(this, arguments);
          }

          return completedJobs;
        }()
      }, {
        key: "failedJobs",
        value: function () {
          var _failedJobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(queueName) {
            var scriptName,
                fullName,
                _args13 = arguments;
            return regeneratorRuntime.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    scriptName = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : null;
                    fullName = this.fullQueueName(queueName);

                    if (this._jobs[fullName] == null) {
                      this._jobs[fullName] = [];
                    }

                    return _context13.abrupt("return", this._jobs[fullName].filter(function (job) {
                      if (scriptName != null) {
                        if (job.data.scriptName === scriptName && job.status === 'failed') {
                          return true;
                        } else {
                          return false;
                        }
                      } else {
                        if (job.status === 'failed') {
                          return true;
                        } else {
                          return false;
                        }
                      }
                    }) || []);

                  case 4:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));

          function failedJobs(_x18) {
            return _failedJobs.apply(this, arguments);
          }

          return failedJobs;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_jobs", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_queues", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "ensureQueue", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "ensureQueue"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getQueue", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getQueue"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeQueue", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeQueue"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "allQueues", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "allQueues"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pushJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pushJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "deleteJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "deleteJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "abortJob", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "abortJob"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "allJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "allJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pendingJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pendingJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "progressJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "progressJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "completedJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "completedJobs"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "failedJobs", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "failedJobs"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$16 = '/leanes/mixins/MemoryConfigurationMixin.js';

var hasProp$b = {}.hasOwnProperty;
var MemoryConfigurationMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      assign = _Module$NS$Utils.assign;
  Module.defineMixin(__filename$16, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("ROOT", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("defineConfigProperties"))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "defineConfigProperties",
        value: function defineConfigProperties() {
          var _this = this;

          // const manifestPath = `${this.ROOT}/../manifest.json`;
          // const manifest = require(manifestPath);
          var manifestPath = './manifest.json';

          var manifest = this.ApplicationModule.require(manifestPath);

          console.log('>?>?>??? MemoryConfigurationMixin manifest', manifestPath, manifest);
          this._name = manifest.name;
          this._description = manifest.description;
          this._license = manifest.license;
          this._version = manifest.version;
          this._keywords = manifest.keywords;
          var configFromManifest = manifest.configuration;
          var configs = assign({}, configFromManifest, this.getData());

          for (var key in configs) {
            if (!hasProp$b.call(configs, key)) continue;
            var value = configs[key];

            (function (attr, config) {
              assert(config.description != null, 'Description in config definition is required');
              assert(!config.required || config["default"] != null, "Attribute '".concat(attr, "' is required in config"));
              assert(config.type != null, 'Type in config definition is required');

              switch (config.type) {
                case 'string':
                  assert(_.isString(config["default"]), "Default for '".concat(attr, "' must be string"));
                  break;

                case 'number':
                  assert(_.isNumber(config["default"]), "Default for '".concat(attr, "' must be number"));
                  break;

                case 'boolean':
                  assert(_.isBoolean(config["default"]), "Default for '".concat(attr, "' must be boolean"));
                  break;

                case 'integer':
                  assert(_.isInteger(config["default"]), "Default for '".concat(attr, "' must be integer"));
                  break;

                case 'json':
                  assert(_.isString(config["default"]), "Default for '".concat(attr, "' must be JSON string"));

                  try {
                    JSON.parse(config["default"]);
                  } catch (error) {
                    assert.fail("Default for '".concat(attr, "' is not valid JSON"));
                  }

                  break;

                case 'password':
                  assert(_.isString(config["default"]), "Default for '".concat(attr, "' must be string"));
              }

              Reflect.defineProperty(_this, attr, {
                enumerable: true,
                configurable: true,
                writable: false,
                value: config["default"]
              });
            })(key, value);
          }
        }
      }, {
        key: "ROOT",
        get: function get() {
          return this.Module.prototype.ROOT;
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "ROOT", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ROOT"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defineConfigProperties", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defineConfigProperties"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$17 = '/leanes/mixins/IterableMixin.js';

var IterableInterface = flowRuntime_umd.type("IterableInterface", function (IterableInterface) {
  var Delegate = IterableInterface.typeParameter("Delegate");
  return flowRuntime_umd.object(flowRuntime_umd.property("forEach", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("filter", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(Delegate))))), flowRuntime_umd.property("map", flowRuntime_umd["function"](function (_fn) {
    var R = _fn.typeParameter("R");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R)))];
  })), flowRuntime_umd.property("reduce", flowRuntime_umd["function"](function (_fn2) {
    var I = _fn2.typeParameter("I");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", I), flowRuntime_umd.param("_arg1", Delegate), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I)))), flowRuntime_umd.param("initialValue", I), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
  })));
});

var RecordInterface$h = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var IterableInterface$1 = flowRuntime_umd.tdz(function () {
  return IterableInterface;
});
var IterableMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method;
  Module.defineMixin(__filename$17, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("forEach", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$h)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("filter", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$h)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref(RecordInterface$h))))), flowRuntime_umd.method("map", function (_fn) {
      var R = _fn.typeParameter("R");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$h)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(R))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R)))];
    }), flowRuntime_umd.method("reduce", function (_fn2) {
      var I = _fn2.typeParameter("I");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(I)), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref(RecordInterface$h)), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(I))))), flowRuntime_umd.param("initialValue", flowRuntime_umd.flowInto(I)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
    }))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "forEach",
        value: function () {
          var _forEach = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(lambda) {
            var cursor;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return this.takeAll();

                  case 2:
                    cursor = _context2.sent;
                    _context2.next = 5;
                    return cursor.forEach( /*#__PURE__*/function () {
                      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item, index) {
                        return regeneratorRuntime.wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                _context.next = 2;
                                return lambda(item, index);

                              case 2:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));

                      return function (_x2, _x3) {
                        return _ref.apply(this, arguments);
                      };
                    }());

                  case 5:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function forEach(_x) {
            return _forEach.apply(this, arguments);
          }

          return forEach;
        }()
      }, {
        key: "filter",
        value: function () {
          var _filter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(lambda) {
            var cursor;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this.takeAll();

                  case 2:
                    cursor = _context4.sent;
                    _context4.next = 5;
                    return cursor.filter( /*#__PURE__*/function () {
                      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(item, index) {
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return lambda(item, index);

                              case 2:
                                return _context3.abrupt("return", _context3.sent);

                              case 3:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3);
                      }));

                      return function (_x5, _x6) {
                        return _ref2.apply(this, arguments);
                      };
                    }());

                  case 5:
                    return _context4.abrupt("return", _context4.sent);

                  case 6:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function filter(_x4) {
            return _filter.apply(this, arguments);
          }

          return filter;
        }()
      }, {
        key: "map",
        value: function () {
          var _map = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(lambda) {
            var cursor;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return this.takeAll();

                  case 2:
                    cursor = _context6.sent;
                    _context6.next = 5;
                    return cursor.map( /*#__PURE__*/function () {
                      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(item, index) {
                        return regeneratorRuntime.wrap(function _callee5$(_context5) {
                          while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return lambda(item, index);

                              case 2:
                                return _context5.abrupt("return", _context5.sent);

                              case 3:
                              case "end":
                                return _context5.stop();
                            }
                          }
                        }, _callee5);
                      }));

                      return function (_x8, _x9) {
                        return _ref3.apply(this, arguments);
                      };
                    }());

                  case 5:
                    return _context6.abrupt("return", _context6.sent);

                  case 6:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function map(_x7) {
            return _map.apply(this, arguments);
          }

          return map;
        }()
      }, {
        key: "reduce",
        value: function () {
          var _reduce = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(lambda, initialValue) {
            var cursor;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _context8.next = 2;
                    return this.takeAll();

                  case 2:
                    cursor = _context8.sent;
                    _context8.next = 5;
                    return cursor.reduce( /*#__PURE__*/function () {
                      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(prev, item, index) {
                        return regeneratorRuntime.wrap(function _callee7$(_context7) {
                          while (1) {
                            switch (_context7.prev = _context7.next) {
                              case 0:
                                _context7.next = 2;
                                return lambda(prev, item, index);

                              case 2:
                                return _context7.abrupt("return", _context7.sent);

                              case 3:
                              case "end":
                                return _context7.stop();
                            }
                          }
                        }, _callee7);
                      }));

                      return function (_x12, _x13, _x14) {
                        return _ref4.apply(this, arguments);
                      };
                    }(), initialValue);

                  case 5:
                    return _context8.abrupt("return", _context8.sent);

                  case 6:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function reduce(_x10, _x11) {
            return _reduce.apply(this, arguments);
          }

          return reduce;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "forEach", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "forEach"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "filter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "filter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "map", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "map"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reduce", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reduce"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$18 = '/leanes/mixins/QueryableCollectionMixin.js';

var CursorInterface$7 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var QueryInterface$3 = flowRuntime_umd.tdz(function () {
  return QueryInterface;
});
var QueryableCollectionInterface = flowRuntime_umd.type("QueryableCollectionInterface", function (QueryableCollectionInterface) {
  var C = QueryableCollectionInterface.typeParameter("C"),
      D = QueryableCollectionInterface.typeParameter("D");
  return flowRuntime_umd.object(flowRuntime_umd.property("findBy", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$7, C, D))))), flowRuntime_umd.property("takeBy", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$7, C, D))))), flowRuntime_umd.property("deleteBy", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("destroyBy", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("removeBy", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("updateBy", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("patchBy", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("exists", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("query", flowRuntime_umd["function"](flowRuntime_umd.param("aoQuery", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref(QueryInterface$3))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(QueryInterface$3))))), flowRuntime_umd.property("parseQuery", flowRuntime_umd["function"](flowRuntime_umd.param("aoQuery", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref(QueryInterface$3))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.string(), flowRuntime_umd.ref(QueryInterface$3)))))), flowRuntime_umd.property("executeQuery", flowRuntime_umd["function"](flowRuntime_umd.param("query", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.string(), flowRuntime_umd.ref(QueryInterface$3))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$7, flowRuntime_umd.nullable(C), flowRuntime_umd.existential()))))));
});

var QueryableCollectionInterface$1 = flowRuntime_umd.tdz(function () {
  return QueryableCollectionInterface;
});
var RecordInterface$i = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$9 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var CursorInterface$8 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var QueryInterface$4 = flowRuntime_umd.tdz(function () {
  return QueryInterface;
});
var QueryableCollectionMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      _ = _Module$NS.Utils._;
  Module.defineMixin(__filename$18, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", function (Mixin) {
      var C = Mixin.typeParameter("C", undefined, flowRuntime_umd.ref(CollectionInterface$9));
      var D = Mixin.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$i));
      return [flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("findBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$8, C, D)))), flowRuntime_umd.method("takeBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$8, C, D)))), flowRuntime_umd.method("deleteBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("destroyBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("removeBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("updateBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("patchBy", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("exists", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("query", flowRuntime_umd.param("aoQuery", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref(QueryInterface$4))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(QueryInterface$4)))), flowRuntime_umd.method("parseQuery", flowRuntime_umd.param("aoQuery", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref(QueryInterface$4))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.string(), flowRuntime_umd.ref(QueryInterface$4))))), flowRuntime_umd.method("executeQuery", flowRuntime_umd.param("query", flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.string(), flowRuntime_umd.ref(QueryInterface$4))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$8, flowRuntime_umd.nullable(C), flowRuntime_umd.existential()))))];
    })), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _super.call.apply(_super, [this].concat(args));
      }

      _createClass(Mixin, [{
        key: "findBy",
        value: function () {
          var _findBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(query) {
            var options,
                _args = arguments;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                    _context.next = 3;
                    return this.takeBy(query, options);

                  case 3:
                    return _context.abrupt("return", _context.sent);

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function findBy(_x) {
            return _findBy.apply(this, arguments);
          }

          return findBy;
        }()
      }, {
        key: "takeBy",
        value: function () {
          var _takeBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(query) {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return", assert.fail('Not implemented specific method'));

                  case 2:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function takeBy(_x2) {
            return _takeBy.apply(this, arguments);
          }

          return takeBy;
        }()
      }, {
        key: "deleteBy",
        value: function () {
          var _deleteBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(query) {
            var voRecordsCursor;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this.takeBy(query);

                  case 2:
                    voRecordsCursor = _context4.sent;
                    _context4.next = 5;
                    return voRecordsCursor.forEach( /*#__PURE__*/function () {
                      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(aoRecord) {
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return aoRecord["delete"]();

                              case 2:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3);
                      }));

                      return function (_x4) {
                        return _ref.apply(this, arguments);
                      };
                    }());

                  case 5:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function deleteBy(_x3) {
            return _deleteBy.apply(this, arguments);
          }

          return deleteBy;
        }()
      }, {
        key: "destroyBy",
        value: function () {
          var _destroyBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(query) {
            var voRecordsCursor;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return this.takeBy(query);

                  case 2:
                    voRecordsCursor = _context6.sent;
                    _context6.next = 5;
                    return voRecordsCursor.forEach( /*#__PURE__*/function () {
                      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(aoRecord) {
                        return regeneratorRuntime.wrap(function _callee5$(_context5) {
                          while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return aoRecord.destroy();

                              case 2:
                              case "end":
                                return _context5.stop();
                            }
                          }
                        }, _callee5);
                      }));

                      return function (_x6) {
                        return _ref2.apply(this, arguments);
                      };
                    }());

                  case 5:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function destroyBy(_x5) {
            return _destroyBy.apply(this, arguments);
          }

          return destroyBy;
        }()
      }, {
        key: "removeBy",
        value: function () {
          var _removeBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(query) {
            var voQuery;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    voQuery = Module.NS.Query["new"]().forIn({
                      '@doc': this.collectionFullName()
                    }).filter(query).remove('@doc').into(this.collectionFullName());
                    _context7.next = 3;
                    return this.query(voQuery);

                  case 3:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function removeBy(_x7) {
            return _removeBy.apply(this, arguments);
          }

          return removeBy;
        }()
      }, {
        key: "updateBy",
        value: function () {
          var _updateBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(query, properties) {
            var voRecordsCursor;
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    _context9.next = 2;
                    return this.takeBy(query);

                  case 2:
                    voRecordsCursor = _context9.sent;
                    _context9.next = 5;
                    return voRecordsCursor.forEach( /*#__PURE__*/function () {
                      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(aoRecord) {
                        return regeneratorRuntime.wrap(function _callee8$(_context8) {
                          while (1) {
                            switch (_context8.prev = _context8.next) {
                              case 0:
                                _context8.next = 2;
                                return aoRecord.updateAttributes(properties);

                              case 2:
                              case "end":
                                return _context8.stop();
                            }
                          }
                        }, _callee8);
                      }));

                      return function (_x10) {
                        return _ref3.apply(this, arguments);
                      };
                    }());

                  case 5:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));

          function updateBy(_x8, _x9) {
            return _updateBy.apply(this, arguments);
          }

          return updateBy;
        }()
      }, {
        key: "patchBy",
        value: function () {
          var _patchBy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(query, properties) {
            var voQuery;
            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    voQuery = Module.NS.Query["new"]().forIn({
                      '@doc': this.collectionFullName()
                    }).filter(query).patch(properties).into(this.collectionFullName());
                    _context10.next = 3;
                    return this.query(voQuery);

                  case 3:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));

          function patchBy(_x11, _x12) {
            return _patchBy.apply(this, arguments);
          }

          return patchBy;
        }()
      }, {
        key: "exists",
        value: function () {
          var _exists = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(query) {
            var voQuery, cursor;
            return regeneratorRuntime.wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    voQuery = Module.NS.Query["new"]().forIn({
                      '@doc': this.collectionFullName()
                    }).filter(query).limit(1)["return"]('@doc');
                    _context11.next = 3;
                    return this.query(voQuery);

                  case 3:
                    cursor = _context11.sent;
                    _context11.next = 6;
                    return cursor.hasNext();

                  case 6:
                    return _context11.abrupt("return", _context11.sent);

                  case 7:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));

          function exists(_x13) {
            return _exists.apply(this, arguments);
          }

          return exists;
        }()
      }, {
        key: "query",
        value: function () {
          var _query = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(aoQuery) {
            var voQuery;
            return regeneratorRuntime.wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    console.log('>?>?? QueryableCollectionMixin::query enter');

                    voQuery = function () {
                      if (_.isPlainObject(aoQuery)) {
                        aoQuery = _.pick(aoQuery, Object.keys(aoQuery).filter(function (key) {
                          return aoQuery[key] != null;
                        }));
                        return Module.NS.Query["new"](aoQuery);
                      } else {
                        return aoQuery;
                      }
                    }();

                    console.log('>?>?? QueryableCollectionMixin::query voQuery', voQuery);
                    _context12.t0 = this;
                    _context12.next = 6;
                    return this.parseQuery(voQuery);

                  case 6:
                    _context12.t1 = _context12.sent;
                    _context12.next = 9;
                    return _context12.t0.executeQuery.call(_context12.t0, _context12.t1);

                  case 9:
                    return _context12.abrupt("return", _context12.sent);

                  case 10:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));

          function query(_x14) {
            return _query.apply(this, arguments);
          }

          return query;
        }()
      }, {
        key: "parseQuery",
        value: function () {
          var _parseQuery = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(aoQuery) {
            return regeneratorRuntime.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    return _context13.abrupt("return", assert.fail('Not implemented specific method'));

                  case 1:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13);
          }));

          function parseQuery(_x15) {
            return _parseQuery.apply(this, arguments);
          }

          return parseQuery;
        }()
      }, {
        key: "executeQuery",
        value: function () {
          var _executeQuery = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(query) {
            return regeneratorRuntime.wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    return _context14.abrupt("return", assert.fail('Not implemented specific method'));

                  case 1:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14);
          }));

          function executeQuery(_x16) {
            return _executeQuery.apply(this, arguments);
          }

          return executeQuery;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "findBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "findBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "deleteBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "deleteBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destroyBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "destroyBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "updateBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "updateBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "patchBy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "patchBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "exists", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "exists"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "query", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "query"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "parseQuery", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "parseQuery"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "executeQuery", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "executeQuery"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$19 = '/leanes/mixins/ThinHttpCollectionMixin.js';

var RequestArgumentsT$2 = flowRuntime_umd.tdz(function () {
  return RequestArgumentsT;
});
var LegacyResponseInterface$3 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$3 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var HttpRequestHashT$2 = flowRuntime_umd.tdz(function () {
  return HttpRequestHashT;
});
var HttpRequestParamsT$2 = flowRuntime_umd.tdz(function () {
  return HttpRequestParamsT;
});
var CursorInterface$9 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var RecordInterface$j = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$a = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var ThinHttpCollectionMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      Cursor = _Module$NS.Cursor,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      request = _Module$NS$Utils.request;
  Module.defineMixin(__filename$19, function (BaseClass) {
    var _dec, _class, _class2, _init, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", function (Mixin) {
      var D = Mixin.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$j));
      return [flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_recordMultipleName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_recordSingleName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("headers", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("namespace", flowRuntime_umd.string()), flowRuntime_umd.property("queryEndpoint", flowRuntime_umd.string()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("recordMultipleName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("recordSingleName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("push", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("remove", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("take", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D)))), flowRuntime_umd.method("takeMany", flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$9, flowRuntime_umd.ref(CollectionInterface$a, D), D)))), flowRuntime_umd.method("takeAll", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$9, flowRuntime_umd.ref(CollectionInterface$a, D), D)))), flowRuntime_umd.method("override", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(D)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", D))), flowRuntime_umd.method("includes", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))), flowRuntime_umd.method("headersForRequest", flowRuntime_umd.param("params", flowRuntime_umd.nullable(flowRuntime_umd.ref(HttpRequestParamsT$2))), flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.method("methodForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$2)), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("dataForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$2)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("urlForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$2)), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("pathForType", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlPrefix", flowRuntime_umd.param("path", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("parentURL", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("makeURL", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("id", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string()))), flowRuntime_umd.param("isQueryable", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForTakeAll", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForTake", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForPush", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForRemove", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForOverride", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.ref("object")), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("buildURL", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("id", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("requestType", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("requestFor", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$2)), flowRuntime_umd["return"](flowRuntime_umd.ref(HttpRequestHashT$2))), flowRuntime_umd.method("sendRequest", function (_fn) {
        var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn.typeParameter("R", undefined, T);

        var L = _fn.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$3, flowRuntime_umd.ref(AxiosResponse$3, T, R)));

        return [flowRuntime_umd.rest("args", flowRuntime_umd.ref(RequestArgumentsT$2, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
      }), flowRuntime_umd.method("requestHashToArguments", function (_fn2) {
        var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn2.typeParameter("R", undefined, T);

        return [flowRuntime_umd.param("hash", flowRuntime_umd.ref(HttpRequestHashT$2)), flowRuntime_umd["return"](flowRuntime_umd.ref(RequestArgumentsT$2, T, R))];
      }), flowRuntime_umd.method("makeRequest", function (_fn3) {
        var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn3.typeParameter("R", undefined, T);

        var L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$3, flowRuntime_umd.ref(AxiosResponse$3, T, R)));

        return [flowRuntime_umd.param("requestObj", flowRuntime_umd.ref(HttpRequestHashT$2)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
      })];
    })), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      // ipsRecordMultipleName = PointerT(_Class.private({
      // ipsRecordSingleName = PointerT(_Class.private({
      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _initializerDefineProperty(_this, "_recordMultipleName", _descriptor, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "_recordSingleName", _descriptor2, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "headers", _descriptor3, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "host", _descriptor4, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "namespace", _descriptor5, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "queryEndpoint", _descriptor6, _assertThisInitialized(_this));

        return _this;
      }

      _createClass(Mixin, [{
        key: "recordMultipleName",
        value: function recordMultipleName() {
          if (this._recordMultipleName == null) {
            this._recordMultipleName = inflect.pluralize(this.recordSingleName());
          }

          return this._recordMultipleName;
        }
      }, {
        key: "recordSingleName",
        value: function recordSingleName() {
          if (this._recordSingleName == null) {
            this._recordSingleName = inflect.underscore(this.delegate.name.replace(/Record$/, ''));
          }

          return this._recordSingleName;
        }
      }, {
        key: "push",
        value: function () {
          var _push = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoRecord) {
            var params, requestObj, res, body, _voRecord;

            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    params = {};
                    params.requestType = 'push';
                    params.recordName = this.delegate.name;
                    _context.next = 5;
                    return this.serialize(aoRecord);

                  case 5:
                    params.snapshot = _context.sent;
                    requestObj = this.requestFor(params);
                    _context.next = 9;
                    return this.makeRequest(requestObj);

                  case 9:
                    res = _context.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context.next = 19;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    _context.next = 16;
                    return this.normalize(body[this.recordSingleName()]);

                  case 16:
                    _voRecord = _context.sent;
                    _context.next = 20;
                    break;

                  case 19:
                    assert.fail("Record payload has not existed in response body.");

                  case 20:
                    return _context.abrupt("return", voRecord);

                  case 21:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function push(_x) {
            return _push.apply(this, arguments);
          }

          return push;
        }()
      }, {
        key: "remove",
        value: function () {
          var _remove = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
            var params, requestObj, res;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    params = {};
                    params.requestType = 'remove';
                    params.recordName = this.delegate.name;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context2.next = 7;
                    return this.makeRequest(requestObj);

                  case 7:
                    res = _context2.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));

                  case 9:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function remove(_x2) {
            return _remove.apply(this, arguments);
          }

          return remove;
        }()
      }, {
        key: "take",
        value: function () {
          var _take = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
            var params, requestObj, res, body, _voRecord2;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    params = {};
                    params.requestType = 'take';
                    params.recordName = this.delegate.name;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context3.next = 7;
                    return this.makeRequest(requestObj);

                  case 7:
                    res = _context3.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context3.next = 17;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    _context3.next = 14;
                    return this.normalize(body[this.recordSingleName()]);

                  case 14:
                    _voRecord2 = _context3.sent;
                    _context3.next = 18;
                    break;

                  case 17:
                    assert.fail("Record payload has not existed in response body.");

                  case 18:
                    return _context3.abrupt("return", voRecord);

                  case 19:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function take(_x3) {
            return _take.apply(this, arguments);
          }

          return take;
        }()
      }, {
        key: "takeMany",
        value: function () {
          var _takeMany = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(ids) {
            var _this2 = this;

            var records;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return Promise.all(ids.map(function (id) {
                      return _this2.take(id);
                    }));

                  case 2:
                    records = _context4.sent;
                    return _context4.abrupt("return", Cursor["new"](null, records));

                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          function takeMany(_x4) {
            return _takeMany.apply(this, arguments);
          }

          return takeMany;
        }()
      }, {
        key: "takeAll",
        value: function () {
          var _takeAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
            var params, requestObj, res, body, vhRecordsData, _voCursor;

            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    params = {};
                    params.requestType = 'takeAll';
                    params.recordName = this.delegate.name;
                    requestObj = this.requestFor(params);
                    _context5.next = 6;
                    return this.makeRequest(requestObj);

                  case 6:
                    res = _context5.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (body != null && body !== '') {
                      if (_.isString(body)) {
                        body = JSON.parse(body);
                      }

                      vhRecordsData = body[this.recordMultipleName()];
                      _voCursor = Cursor["new"](this, vhRecordsData);
                    } else {
                      assert.fail("Record payload has not existed in response body.");
                    }

                    return _context5.abrupt("return", voCursor);

                  case 11:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function takeAll() {
            return _takeAll.apply(this, arguments);
          }

          return takeAll;
        }()
      }, {
        key: "override",
        value: function () {
          var _override = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id, aoRecord) {
            var params, requestObj, res, body, _voRecord3;

            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    params = {};
                    params.requestType = 'override';
                    params.recordName = this.delegate.name;
                    _context6.next = 5;
                    return this.serialize(aoRecord);

                  case 5:
                    params.snapshot = _context6.sent;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context6.next = 10;
                    return this.makeRequest(requestObj);

                  case 10:
                    res = _context6.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context6.next = 20;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    _context6.next = 17;
                    return this.normalize(body[this.recordSingleName()]);

                  case 17:
                    _voRecord3 = _context6.sent;
                    _context6.next = 21;
                    break;

                  case 20:
                    assert.fail("Record payload has not existed in response body.");

                  case 21:
                    return _context6.abrupt("return", voRecord);

                  case 22:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function override(_x5, _x6) {
            return _override.apply(this, arguments);
          }

          return override;
        }()
      }, {
        key: "includes",
        value: function () {
          var _includes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(id) {
            var record;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.next = 2;
                    return this.take(id);

                  case 2:
                    record = _context7.sent;
                    return _context7.abrupt("return", record != null);

                  case 4:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function includes(_x7) {
            return _includes.apply(this, arguments);
          }

          return includes;
        }()
      }, {
        key: "length",
        value: function () {
          var _length = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _context8.next = 2;
                    return this.takeAll();

                  case 2:
                    cursor = _context8.sent;
                    _context8.next = 5;
                    return cursor.count();

                  case 5:
                    return _context8.abrupt("return", _context8.sent);

                  case 6:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function length() {
            return _length.apply(this, arguments);
          }

          return length;
        }()
      }, {
        key: "headersForRequest",
        value: function headersForRequest() {
          var headers = this.headers || {};
          headers['Accept'] = 'application/json';
          return headers;
        }
      }, {
        key: "methodForRequest",
        value: function methodForRequest(params) {
          var requestType = params.requestType;

          switch (requestType) {
            case 'takeAll':
              return 'GET';

            case 'take':
              return 'GET';

            case 'push':
              return 'POST';

            case 'override':
              return 'PUT';

            case 'remove':
              return 'DELETE';

            default:
              return 'GET';
          }
        }
      }, {
        key: "dataForRequest",
        value: function dataForRequest(params) {
          var recordName = params.recordName,
              snapshot = params.snapshot,
              requestType = params.requestType,
              query = params.query;

          if (snapshot != null && (requestType === 'push' || requestType === 'override')) {
            return snapshot;
          }
        }
      }, {
        key: "urlForRequest",
        value: function urlForRequest(params) {
          var recordName = params.recordName,
              snapshot = params.snapshot,
              id = params.id,
              requestType = params.requestType,
              query = params.query;
          return this.buildURL(recordName, snapshot, id, requestType, query);
        }
      }, {
        key: "pathForType",
        value: function pathForType(recordName) {
          return inflect.pluralize(inflect.underscore(recordName.replace(/Record$/, '')));
        }
      }, {
        key: "urlPrefix",
        value: function urlPrefix(path, parentURL) {
          if (!this.host || this.host === '/') {
            this.host = '';
          }

          if (path) {
            // Protocol relative url
            if (/^\/\//.test(path) || /http(s)?:\/\//.test(path)) {
              // Do nothing, the full @host is already included.
              return path; // Absolute path
            } else if (path.charAt(0) === '/') {
              return "".concat(this.host).concat(path);
            } else {
              // Relative path
              return "".concat(parentURL, "/").concat(path);
            }
          } // No path provided


          var url = [];

          if (this.host) {
            url.push(this.host);
          }

          if (this.namespace) {
            url.push(this.namespace);
          }

          return url.join('/');
        }
      }, {
        key: "makeURL",
        value: function makeURL(recordName, query, id, isQueryable) {
          var url = [];
          var prefix = this.urlPrefix();

          if (recordName) {
            var path = this.pathForType(recordName);

            if (path) {
              url.push(path);
            }
          }

          if (isQueryable && this.queryEndpoint != null) {
            url.push(encodeURIComponent(this.queryEndpoint));
          }

          if (prefix) {
            url.unshift(prefix);
          }

          if (id != null) {
            url.push(id);
          }

          var vsUrl = url.join('/');

          if (!this.host && vsUrl && vsUrl.charAt(0) !== '/') {
            vsUrl = '/' + vsUrl;
          }

          if (query != null) {
            query = encodeURIComponent(JSON.stringify(query != null ? query : ''));
            vsUrl += "?query=".concat(query);
          }

          return vsUrl;
        }
      }, {
        key: "urlForTakeAll",
        value: function urlForTakeAll(recordName, query) {
          return this.makeURL(recordName, query, null, false);
        }
      }, {
        key: "urlForTake",
        value: function urlForTake(recordName, id) {
          return this.makeURL(recordName, null, id, false);
        }
      }, {
        key: "urlForPush",
        value: function urlForPush(recordName, snapshot) {
          return this.makeURL(recordName, null, null, false);
        }
      }, {
        key: "urlForRemove",
        value: function urlForRemove(recordName, id) {
          return this.makeURL(recordName, null, id, false);
        }
      }, {
        key: "urlForOverride",
        value: function urlForOverride(recordName, snapshot, id) {
          return this.makeURL(recordName, null, id, false);
        }
      }, {
        key: "buildURL",
        value: function buildURL(recordName, snapshot, id, requestType, query) {
          switch (requestType) {
            case 'takeAll':
              return this.urlForTakeAll(recordName, query);

            case 'take':
              return this.urlForTake(recordName, id);

            case 'push':
              return this.urlForPush(recordName, snapshot);

            case 'remove':
              return this.urlForRemove(recordName, id);

            case 'override':
              return this.urlForOverride(recordName, snapshot, id);

            default:
              var vsMethod = "urlFor".concat(inflect.camelize(requestType));
              return typeof this[vsMethod] === "function" ? this[vsMethod](recordName, query, snapshot, id) : undefined;
          }
        }
      }, {
        key: "requestFor",
        value: function requestFor(params) {
          var method = this.methodForRequest(params);
          var url = this.urlForRequest(params);
          var headers = this.headersForRequest(params);
          var data = this.dataForRequest(params);
          return {
            method: method,
            url: url,
            headers: headers,
            data: data
          };
        }
      }, {
        key: "sendRequest",
        value: function () {
          var _sendRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
            var _len2,
                args,
                _key2,
                method,
                url,
                options,
                _args9 = arguments;

            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    for (_len2 = _args9.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = _args9[_key2];
                    }

                    method = args[0], url = args[1], options = args[2];
                    _context9.next = 4;
                    return request(method, url, options);

                  case 4:
                    return _context9.abrupt("return", _context9.sent);

                  case 5:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9);
          }));

          function sendRequest() {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }, {
        key: "requestHashToArguments",
        value: function requestHashToArguments(hash) {
          var method = hash.method,
              url = hash.url,
              headers = hash.headers,
              data = hash.data;
          var options = {
            responseType: 'json',
            headers: headers
          };

          if (data != null) {
            options.body = data;
          }

          return [method, url, options];
        }
      }, {
        key: "makeRequest",
        value: function () {
          var _makeRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(requestObj) {
            var _Module$NS$Pipes$NS$L, SEND_TO_LOG, LEVELS, DEBUG, hash;

            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    // result of requestFor
                    _Module$NS$Pipes$NS$L = Module.NS.Pipes.NS.LogMessage, SEND_TO_LOG = _Module$NS$Pipes$NS$L.SEND_TO_LOG, LEVELS = _Module$NS$Pipes$NS$L.LEVELS, DEBUG = _Module$NS$Pipes$NS$L.DEBUG;
                    hash = this.requestHashToArguments(requestObj);
                    this.sendNotification(SEND_TO_LOG, "HttpCollectionMixin::makeRequest hash ".concat(JSON.stringify(hash)), LEVELS[DEBUG]);
                    _context10.next = 5;
                    return this.sendRequest.apply(this, _toConsumableArray(hash));

                  case 5:
                    return _context10.abrupt("return", _context10.sent);

                  case 6:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));

          function makeRequest(_x8) {
            return _makeRequest.apply(this, arguments);
          }

          return makeRequest;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_recordMultipleName", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_recordSingleName", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "headers", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "host", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'http://localhost';
      }
    }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "namespace", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return '';
      }
    }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "queryEndpoint", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'query';
      }
    }), _applyDecoratedDescriptor(_class2.prototype, "recordMultipleName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordMultipleName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "recordSingleName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordSingleName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "take", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "take"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeMany"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "takeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeAll"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "override", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "override"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "includes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "includes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "headersForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "headersForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "methodForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "methodForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "dataForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dataForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pathForType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pathForType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlPrefix", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlPrefix"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "makeURL", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "makeURL"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForTakeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForTakeAll"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForTake", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForTake"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForPush", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForPush"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "urlForOverride", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForOverride"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "buildURL", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "buildURL"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "requestFor", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "requestFor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendRequest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "requestHashToArguments", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "requestHashToArguments"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "makeRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "makeRequest"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$1a = '/leanes/mixins/SchemaModuleMixin.js';

var SchemaModuleMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      constant = _Module$NS.constant,
      _ = _Module$NS.Utils._;
  var cpoMigrationsNames = Symbol["for"]('~migrationsNames');
  var cphMigrationsMap = Symbol["for"]('~migrationsMap');
  var cpoMigrations = Symbol["for"]('~migrations');
  var cpmMigrationsHandler = Symbol["for"]('~migrationsHandler');
  Module.defineMixin(__filename$1a, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("Migrations"), flowRuntime_umd.method("MIGRATION_NAMES"), flowRuntime_umd.staticMethod("requireMigrations", flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "Migrations",
        get: function get() {
          var MClass = this.constructor;
          return MClass[cpoMigrations] != null ? MClass[cpoMigrations] : MClass[cpoMigrations] = new Proxy(MClass, MClass[cpmMigrationsHandler]);
        }
      }, {
        key: "MIGRATION_NAMES",
        get: function get() {
          var MClass = this.constructor;
          return MClass[cpoMigrationsNames] != null ? MClass[cpoMigrationsNames] : MClass[cpoMigrationsNames] = _.orderBy(Object.keys(MClass[cphMigrationsMap]));
        }
      }], [{
        key: "requireMigrations",
        value: function requireMigrations() {
          var _this = this;

          this.prototype.MIGRATION_NAMES.forEach(function (migrationName) {
            _this.prototype.Migrations[migrationName];
          });
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "Migrations", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "Migrations"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "MIGRATION_NAMES", [constant], Object.getOwnPropertyDescriptor(_class2.prototype, "MIGRATION_NAMES"), _class2.prototype), _applyDecoratedDescriptor(_class2, "requireMigrations", [method], Object.getOwnPropertyDescriptor(_class2, "requireMigrations"), _class2)), _class2)) || _class) || _class);
    Reflect.defineProperty(Mixin, cpoMigrationsNames, {
      enumerable: true,
      writable: true,
      value: null
    }); // Reflect.defineProperty(Mixin, cphMigrationsMap, {
    //   enumerable: true,
    //   writable: true,
    //   value: null
    // });

    Reflect.defineProperty(Mixin, cpoMigrations, {
      enumerable: true,
      writable: true,
      value: null
    });
    Reflect.defineProperty(Mixin, cpmMigrationsHandler, {
      enumerable: true,
      value: {
        // ownKeys: (aoTarget) =>
        //   Reflect.ownKeys(aoTarget.migrations),
        // has: (aoTarget, asName) =>
        //   indexOf.call(aoTarget.migrations, asName) >= 0,
        // set: (aoTarget, asName, aValue, aoReceiver) => {
        //   if (!Reflect.get(aoTarget, asName)) {
        //     aoTarget.metaObject.addMetaData('migrations', asName, aValue);
        //     Reflect.defineProperty(aoTarget, asName, {
        //       configurable: false,
        //       enumerable: true,
        //       writable: false,
        //       value: aValue
        //     });
        //     return aValue
        //   }
        // },
        get: function get(aoTarget, asName) {
          if (!Reflect.get(aoTarget.prototype, asName)) {
            // if (aoTarget[cphMigrationsMap] == null) {
            //   const migrationsMap = {};
            //   for (const vsName in aoTarget[cphPathMap]) {
            //     const vsPath = aoTarget[cphPathMap][vsName];
            //     // console.log('<><><><> Migrations.get', vsName, vsPath);
            //     if (
            //       _.includes(vsPath, '/migrations/')
            //     &&
            //       vsName !== 'BaseMigration'
            //     &&
            //       /^\.|\.md$/.test(vsPath)
            //     ) {
            //       migrationsMap[vsName] = vsPath;
            //     }
            //   }
            //   aoTarget[cphMigrationsMap] = migrationsMap;
            // }
            var vsPath = aoTarget[cphMigrationsMap][asName];

            if (vsPath) {
              aoTarget.resolve(vsPath);
            }
          }

          return Reflect.get(aoTarget.prototype, asName);
        }
      }
    });
    Reflect.defineProperty(Mixin, 'onMetalize', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        Reflect.getPrototypeOf(Mixin).onMetalize.apply(this, args);
        this[cpoMigrationsNames] = undefined; // this[cphMigrationsMap] = undefined;

        this[cpoMigrations] = undefined;
        return;
      }
    });
    return Mixin;
  });
});

var __filename$1b = '/leanes/mixins/CrudResourceRendererMixin.js';

var ResourceRendererItemResultT$3 = flowRuntime_umd.tdz(function () {
  return ResourceRendererItemResultT;
});
var ResourceRendererListResultT$3 = flowRuntime_umd.tdz(function () {
  return ResourceRendererListResultT;
});
var ResourceListResultT$2 = flowRuntime_umd.tdz(function () {
  return ResourceListResultT;
});
var RouterRouteT$5 = flowRuntime_umd.tdz(function () {
  return RouterRouteT;
});
var ResourceInterface$3 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ContextInterface$4 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var CrudResourceRendererMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      _ = _Module$NS.Utils._;
  Module.defineMixin(__filename$1b, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("create", function (_fn) {
      var T = _fn.typeParameter("T", undefined, flowRuntime_umd.ref("object"));

      var R = _fn.typeParameter("R", undefined, flowRuntime_umd.ref(ResourceRendererItemResultT$3));

      return [flowRuntime_umd.param("resource", flowRuntime_umd.string()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("templatePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("delete", function (_fn2) {
      var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.ref("object")));

      var R = _fn2.typeParameter("R", undefined, flowRuntime_umd["void"]());

      return [flowRuntime_umd.param("resource", flowRuntime_umd.string()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("templatePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("destroy", function (_fn3) {
      var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.ref("object")));

      var R = _fn3.typeParameter("R", undefined, flowRuntime_umd["void"]());

      return [flowRuntime_umd.param("resource", flowRuntime_umd.string()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("templatePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("detail", function (_fn4) {
      var T = _fn4.typeParameter("T", undefined, flowRuntime_umd.ref("object"));

      var R = _fn4.typeParameter("R", undefined, flowRuntime_umd.ref(ResourceRendererItemResultT$3));

      return [flowRuntime_umd.param("resource", flowRuntime_umd.string()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("templatePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("itemDecorator", flowRuntime_umd.param("aoData", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("list", function (_fn5) {
      var T = _fn5.typeParameter("T", undefined, flowRuntime_umd.ref(ResourceListResultT$2));

      var R = _fn5.typeParameter("R", undefined, flowRuntime_umd.ref(ResourceRendererListResultT$3));

      return [flowRuntime_umd.param("resource", flowRuntime_umd.string()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("templatePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("query", function (_fn6) {
      var T = _fn6.typeParameter("T", undefined, flowRuntime_umd.any());

      var R = _fn6.typeParameter("R", undefined, flowRuntime_umd.any());

      return [flowRuntime_umd.param("resource", flowRuntime_umd.string()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("templatePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("update", function (_fn7) {
      var T = _fn7.typeParameter("T", undefined, flowRuntime_umd.ref("object"));

      var R = _fn7.typeParameter("R", undefined, flowRuntime_umd.ref(ResourceRendererItemResultT$3));

      return [flowRuntime_umd.param("resource", flowRuntime_umd.string()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("templatePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("render", function (_fn8) {
      var T = _fn8.typeParameter("T", undefined, flowRuntime_umd.any());

      var R = _fn8.typeParameter("R", undefined, flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.ref(ResourceRendererListResultT$3), flowRuntime_umd.ref(ResourceRendererItemResultT$3), flowRuntime_umd.any())));

      return [flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$4)), flowRuntime_umd.param("aoData", flowRuntime_umd.flowInto(T)), flowRuntime_umd.param("resource", flowRuntime_umd.ref(ResourceInterface$3)), flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.ref(RouterRouteT$5))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "create",
        value: function () {
          var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resource, action, aoData, templatePath) {
            var templateName, itemDecorator;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    templateName = templatePath.replace(new RegExp("/".concat(action, "$")), '/itemDecorator');
                    itemDecorator = this.Module.NS.Templates[templateName] || Mixin.prototype.itemDecorator;
                    _context.t0 = _defineProperty;
                    _context.t1 = {};
                    _context.t2 = this.itemEntityName;
                    _context.next = 7;
                    return itemDecorator.call(this, aoData);

                  case 7:
                    _context.t3 = _context.sent;
                    return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2, _context.t3));

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function create(_x, _x2, _x3, _x4) {
            return _create.apply(this, arguments);
          }

          return create;
        }()
      }, {
        key: 'delete',
        value: function () {
          var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(resource, action, aoData, templatePath) {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return");

                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function _delete(_x5, _x6, _x7, _x8) {
            return _delete2.apply(this, arguments);
          }

          return _delete;
        }()
      }, {
        key: "destroy",
        value: function () {
          var _destroy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(resource, action, aoData, templatePath) {
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    return _context3.abrupt("return");

                  case 1:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));

          function destroy(_x9, _x10, _x11, _x12) {
            return _destroy.apply(this, arguments);
          }

          return destroy;
        }()
      }, {
        key: "detail",
        value: function () {
          var _detail = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(resource, action, aoData, templatePath) {
            var templateName, itemDecorator;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    templateName = templatePath.replace(new RegExp("/".concat(action, "$")), '/itemDecorator');
                    itemDecorator = this.Module.NS.Templates[templateName] || Mixin.prototype.itemDecorator;
                    _context4.t0 = _defineProperty;
                    _context4.t1 = {};
                    _context4.t2 = this.itemEntityName;
                    _context4.next = 7;
                    return itemDecorator.call(this, aoData);

                  case 7:
                    _context4.t3 = _context4.sent;
                    return _context4.abrupt("return", (0, _context4.t0)(_context4.t1, _context4.t2, _context4.t3));

                  case 9:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function detail(_x13, _x14, _x15, _x16) {
            return _detail.apply(this, arguments);
          }

          return detail;
        }()
      }, {
        key: "itemDecorator",
        value: function () {
          var _itemDecorator = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(aoData) {
            var createdAt, updatedAt, deletedAt;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (aoData != null) {
                      result = JSON.parse(JSON.stringify(aoData));
                      createdAt = aoData.createdAt, updatedAt = aoData.updatedAt, deletedAt = aoData.deletedAt;
                      createdAt = createdAt && createdAt.toISOString() || null;
                      updatedAt = updatedAt && updatedAt.toISOString() || null;
                      deletedAt = deletedAt && deletedAt.toISOString() || null;
                      result.createdAt = createdAt;
                      result.updatedAt = updatedAt;
                      result.deletedAt = deletedAt;
                    } else {
                      result = null;
                    }

                    return _context5.abrupt("return", result);

                  case 2:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));

          function itemDecorator(_x17) {
            return _itemDecorator.apply(this, arguments);
          }

          return itemDecorator;
        }()
      }, {
        key: "list",
        value: function () {
          var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(resource, action, aoData, templatePath) {
            var templateName, itemDecorator;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    templateName = templatePath.replace(new RegExp("/".concat(action, "$")), '/itemDecorator');
                    itemDecorator = this.Module.NS.Templates[templateName] || Mixin.prototype.itemDecorator;
                    _context6.t0 = _defineProperty;
                    _context6.t1 = {
                      meta: aoData.meta
                    };
                    _context6.t2 = this.listEntityName;
                    _context6.next = 7;
                    return Promise.all(aoData.items.map(itemDecorator.bind(this)));

                  case 7:
                    _context6.t3 = _context6.sent;
                    return _context6.abrupt("return", (0, _context6.t0)(_context6.t1, _context6.t2, _context6.t3));

                  case 9:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function list(_x18, _x19, _x20, _x21) {
            return _list.apply(this, arguments);
          }

          return list;
        }()
      }, {
        key: "query",
        value: function () {
          var _query = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(resource, action, aoData, templatePath) {
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    return _context7.abrupt("return", aoData);

                  case 1:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7);
          }));

          function query(_x22, _x23, _x24, _x25) {
            return _query.apply(this, arguments);
          }

          return query;
        }()
      }, {
        key: "update",
        value: function () {
          var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(resource, action, aoData, templatePath) {
            var templateName, itemDecorator;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    templateName = templatePath.replace(new RegExp("/".concat(action, "$")), '/itemDecorator');
                    itemDecorator = this.Module.NS.Templates[templateName] || Mixin.prototype.itemDecorator;
                    _context8.t0 = _defineProperty;
                    _context8.t1 = {};
                    _context8.t2 = this.itemEntityName;
                    _context8.next = 7;
                    return itemDecorator.call(this, aoData);

                  case 7:
                    _context8.t3 = _context8.sent;
                    return _context8.abrupt("return", (0, _context8.t0)(_context8.t1, _context8.t2, _context8.t3));

                  case 9:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function update(_x26, _x27, _x28, _x29) {
            return _update.apply(this, arguments);
          }

          return update;
        }()
      }, {
        key: "render",
        value: function () {
          var _render = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(ctx, aoData, resource) {
            var _this = this;

            var opts,
                args,
                path,
                resourceName,
                action,
                templatePath,
                Templates,
                _args9 = arguments;
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    opts = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : {};
                    args = _args9;
                    path = opts.path, resourceName = opts.resource, action = opts.action, templatePath = opts.template;

                    if (!(path != null && resourceName != null && action != null)) {
                      _context9.next = 10;
                      break;
                    }

                    Templates = this.Module.NS.Templates;
                    _context9.next = 7;
                    return Promise.resolve().then(function () {
                      var template = Templates[templatePath];

                      if (_.isFunction(template)) {
                        return template.call(resource, resourceName, action, aoData);
                      } else if (_.includes(['create', 'delete', 'destroy', 'detail', 'list', 'update'], action)) {
                        return _this[action].call(resource, resourceName, action, aoData, templatePath);
                      } else {
                        var _get2;

                        return (_get2 = _get(_getPrototypeOf(Mixin.prototype), "render", _this)).call.apply(_get2, [_this].concat(_toConsumableArray(args)));
                      }
                    });

                  case 7:
                    return _context9.abrupt("return", _context9.sent);

                  case 10:
                    return _context9.abrupt("return", aoData);

                  case 11:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));

          function render(_x30, _x31, _x32) {
            return _render.apply(this, arguments);
          }

          return render;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "create", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'delete', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "detail", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "detail"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "itemDecorator", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "itemDecorator"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "list", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "list"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "query", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "query"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "update", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "render", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "render"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$1c = '/leanes/mixins/TemplatableModuleMixin.js';

var TemplatableModuleMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method;
  var cphTemplatesMap = Symbol["for"]('~templatesMap');
  var cphTemplatesList = Symbol["for"]('~templatesList');
  var cpoTemplates = Symbol["for"]('~templates');
  var cpmTemplatesHandler = Symbol["for"]('~templatesHandler');
  Module.defineMixin(__filename$1c, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("Templates"), flowRuntime_umd.staticMethod("templates", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd["function"]())))), flowRuntime_umd.staticMethod("defineTemplate", flowRuntime_umd.param("filename", flowRuntime_umd.string()), flowRuntime_umd.param("vmFunction", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd["function"]())), flowRuntime_umd.staticMethod("resolveTemplate", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["function"]())))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "Templates",
        get: function get() {
          var MClass = this.constructor;
          return MClass[cpoTemplates] != null ? MClass[cpoTemplates] : MClass[cpoTemplates] = new Proxy(MClass, MClass[cpmTemplatesHandler]);
        }
      }], [{
        key: "defineTemplate",
        value: function defineTemplate(filename, vmFunction) {
          var vsRoot = this.prototype.ROOT || '.';
          var vsTemplatesDir = "".concat(vsRoot, "/templates/");
          var templateName = filename.replace(vsTemplatesDir, '').replace(/\.js|\.coffee/, '');
          this.metaObject.addMetaData('templates', templateName, vmFunction);
          return vmFunction;
        }
      }, {
        key: "resolveTemplate",
        value: function resolveTemplate() {
          var vsRoot = this.prototype.ROOT || '.';
          var vsTemplatesDir = "".concat(vsRoot, "/templates/");

          var path = require('path'); //TODO


          var templateName = path.resolve.apply(path, arguments).replace(vsTemplatesDir, '').replace(/\.js|\.coffee/, '');
          return this.prototype.Templates[templateName];
        } // this.public(this.static({
        //   static loadTemplates: Function
        // }, {
        //   default: function() {
        //     var files, ref, vsRoot, vsTemplatesDir;
        //     vsRoot = (ref = this.prototype.ROOT) != null ? ref : '.';
        //     vsTemplatesDir = `${vsRoot}/templates`;
        //     files = filesTreeSync(vsTemplatesDir, {
        //       filesOnly: true
        //     });
        //     (files != null ? files : []).forEach((i) => {
        //       var templateName, vsTemplatePath;
        //       templateName = i.replace(/\.js|\.coffee/, '');
        //       vsTemplatePath = `${vsTemplatesDir}/${templateName}`;
        //       return require(vsTemplatePath)(this.Module);
        //     });
        //   }
        // }));

      }, {
        key: "templates",
        get: function get() {
          return this.metaObject.getGroup('templates', false);
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "Templates", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "Templates"), _class2.prototype)), _class2)) || _class) || _class);
    Reflect.defineProperty(Mixin, cphTemplatesMap, {
      enumerable: true,
      writable: true,
      value: null
    });
    Reflect.defineProperty(Mixin, cpoTemplates, {
      enumerable: true,
      writable: true,
      value: null
    });
    Reflect.defineProperty(Mixin, cpmTemplatesHandler, {
      enumerable: true,
      value: {
        // ownKeys: (aoTarget) =>
        //   Reflect.ownKeys(aoTarget.templates),
        // has: (aoTarget, asName) =>
        //   indexOf.call(aoTarget.templates, asName) >= 0,
        // set: (aoTarget, asName, aValue, aoReceiver) => {
        //   if (!Reflect.get(aoTarget, asName)) {
        //     aoTarget.metaObject.addMetaData('templates', asName, aValue);
        //     Reflect.defineProperty(aoTarget, asName, {
        //       configurable: false,
        //       enumerable: true,
        //       writable: false,
        //       value: aValue
        //     });
        //     return aValue
        //   }
        // },
        get: function get(aoTarget, asName) {
          if (!Reflect.get(aoTarget.templates, asName)) {
            if (aoTarget[cphTemplatesMap] == null) {
              var templatesMap = {};
              var vsRoot = aoTarget.prototype.ROOT || '.';
              var vsTemplatesDir = "".concat(vsRoot, "/templates/");

              var _iterator = _createForOfIteratorHelper(aoTarget[cphTemplatesList]),
                  _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var _vsPath = _step.value;

                  var vsName = _vsPath.replace(vsTemplatesDir, '').replace(/\.js|\.coffee/, ''); // const vsPath = aoTarget[cphPathMap][vsName];
                  // console.log('<><><><> Templates.get', vsName, vsPath);
                  // if (_.includes(vsPath, '/templates/')) {


                  templatesMap[vsName] = _vsPath; // }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              aoTarget[cphTemplatesMap] = templatesMap;
            }

            var vsPath = aoTarget[cphTemplatesMap][asName];

            if (vsPath) {
              aoTarget.resolve(vsPath);
            }
          }

          return Reflect.get(aoTarget.templates, asName);
        }
      }
    });
    Reflect.defineProperty(Mixin, 'onMetalize', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        Reflect.getPrototypeOf(Mixin).onMetalize.apply(this, args);
        this[cphTemplatesMap] = undefined;
        this[cpoTemplates] = undefined;
        return;
      }
    });
    return Mixin;
  });
});

var __filename$1d = '/leanes/mixins/EmbeddableRecordMixin.js';

var JoiT$i = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var RelationInverseT$2 = flowRuntime_umd.tdz(function () {
  return RelationInverseT;
});
var EmbedConfigT$5 = flowRuntime_umd.tdz(function () {
  return EmbedConfigT;
});
var RecordInterface$k = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$b = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var hasProp$c = {}.hasOwnProperty;
var EmbeddableRecordMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      chains = _Module$NS.chains,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  Module.defineMixin(__filename$1d, function (BaseClass) {
    var _dec, _dec2, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$i))), flowRuntime_umd.staticMethod("embeddings", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(EmbedConfigT$5))))), flowRuntime_umd.method("create", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$k)))), flowRuntime_umd.method("update", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$k)))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$b, flowRuntime_umd.ref(RecordInterface$k))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$k)))), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$k))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.staticMethod("recoverize", flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$b, flowRuntime_umd.ref(RecordInterface$k))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$k))))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$k))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.staticMethod("makeSnapshotWithEmbeds", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$k))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("changedAttributes", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), flowRuntime_umd.method("resetAttribute", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("rollbackAttributes", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), _dec2 = chains(['create', 'update'], function () {
      return;
    }), _dec(_class = initializeMixin(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "create",
        value: function () {
          var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var response, voAttrs, vsAttr, voEmbeds, vsEmbed;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return this.collection.push(this);

                  case 2:
                    response = _context.sent;

                    if (!(response != null)) {
                      _context.next = 23;
                      break;
                    }

                    voAttrs = this.constructor.attributes;
                    _context.t0 = regeneratorRuntime.keys(voAttrs);

                  case 6:
                    if ((_context.t1 = _context.t0()).done) {
                      _context.next = 13;
                      break;
                    }

                    vsAttr = _context.t1.value;

                    if (hasProp$c.call(voAttrs, vsAttr)) {
                      _context.next = 10;
                      break;
                    }

                    return _context.abrupt("continue", 6);

                  case 10:
                    this[vsAttr] = response[vsAttr];
                    _context.next = 6;
                    break;

                  case 13:
                    voEmbeds = this.constructor.embeddings;
                    _context.t2 = regeneratorRuntime.keys(voEmbeds);

                  case 15:
                    if ((_context.t3 = _context.t2()).done) {
                      _context.next = 22;
                      break;
                    }

                    vsEmbed = _context.t3.value;

                    if (hasProp$c.call(voEmbeds, vsEmbed)) {
                      _context.next = 19;
                      break;
                    }

                    return _context.abrupt("continue", 15);

                  case 19:
                    this[vsEmbed] = response[vsEmbed];
                    _context.next = 15;
                    break;

                  case 22:
                    this._internalRecord = response._internalRecord;

                  case 23:
                    return _context.abrupt("return", this);

                  case 24:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function create() {
            return _create.apply(this, arguments);
          }

          return create;
        }()
      }, {
        key: "update",
        value: function () {
          var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
            var response, voAttrs, vsAttr, voEmbeds, vsEmbed;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return this.collection.override(this.id, this);

                  case 2:
                    response = _context2.sent;

                    if (!(response != null)) {
                      _context2.next = 23;
                      break;
                    }

                    voAttrs = this.constructor.attributes;
                    _context2.t0 = regeneratorRuntime.keys(voAttrs);

                  case 6:
                    if ((_context2.t1 = _context2.t0()).done) {
                      _context2.next = 13;
                      break;
                    }

                    vsAttr = _context2.t1.value;

                    if (hasProp$c.call(voAttrs, vsAttr)) {
                      _context2.next = 10;
                      break;
                    }

                    return _context2.abrupt("continue", 6);

                  case 10:
                    this[vsAttr] = response[vsAttr];
                    _context2.next = 6;
                    break;

                  case 13:
                    voEmbeds = this.constructor.embeddings;
                    _context2.t2 = regeneratorRuntime.keys(voEmbeds);

                  case 15:
                    if ((_context2.t3 = _context2.t2()).done) {
                      _context2.next = 22;
                      break;
                    }

                    vsEmbed = _context2.t3.value;

                    if (hasProp$c.call(voEmbeds, vsEmbed)) {
                      _context2.next = 19;
                      break;
                    }

                    return _context2.abrupt("continue", 15);

                  case 19:
                    this[vsEmbed] = response[vsEmbed];
                    _context2.next = 15;
                    break;

                  case 22:
                    this._internalRecord = response._internalRecord;

                  case 23:
                    return _context2.abrupt("return", this);

                  case 24:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function update() {
            return _update.apply(this, arguments);
          }

          return update;
        }()
      }, {
        key: "changedAttributes",
        // TODO: не учтены установки значений, которые раньше не были установлены
        value: function () {
          var _changedAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
            var vhResult, voEmbeds, ir, vsEmbed, replicate, voOldValue, voNewValue;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return _get(_getPrototypeOf(Mixin.prototype), "changedAttributes", this).call(this);

                  case 2:
                    vhResult = _context3.sent;
                    voEmbeds = this.constructor.embeddings;
                    ir = this._internalRecord;
                    _context3.t0 = regeneratorRuntime.keys(voEmbeds);

                  case 6:
                    if ((_context3.t1 = _context3.t0()).done) {
                      _context3.next = 16;
                      break;
                    }

                    vsEmbed = _context3.t1.value;

                    if (hasProp$c.call(voEmbeds, vsEmbed)) {
                      _context3.next = 10;
                      break;
                    }

                    return _context3.abrupt("continue", 6);

                  case 10:
                    replicate = voEmbeds[vsEmbed].replicate;
                    voOldValue = ir != null ? ir[vsEmbed] : undefined;
                    voNewValue = replicate.call(this);

                    if (!_.isEqual(voNewValue, voOldValue)) {
                      vhResult[vsEmbed] = [voOldValue, voNewValue];
                    }

                    _context3.next = 6;
                    break;

                  case 16:
                    return _context3.abrupt("return", vhResult);

                  case 17:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function changedAttributes() {
            return _changedAttributes.apply(this, arguments);
          }

          return changedAttributes;
        }()
      }, {
        key: "resetAttribute",
        value: function () {
          var _resetAttribute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(asAttribute) {
            var attrConf,
                restore,
                voOldValue,
                _args4 = arguments;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return _get(_getPrototypeOf(Mixin.prototype), "resetAttribute", this).apply(this, _args4);

                  case 2:
                    attrConf = this.constructor.embeddings[asAttribute];

                    if (!(this._internalRecord != null)) {
                      _context4.next = 10;
                      break;
                    }

                    if (!(attrConf != null)) {
                      _context4.next = 10;
                      break;
                    }

                    restore = attrConf.restore;
                    voOldValue = this._internalRecord[asAttribute];
                    _context4.next = 9;
                    return restore.call(this, voOldValue);

                  case 9:
                    this[asAttribute] = _context4.sent;

                  case 10:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function resetAttribute(_x) {
            return _resetAttribute.apply(this, arguments);
          }

          return resetAttribute;
        }()
      }, {
        key: "rollbackAttributes",
        value: function () {
          var _rollbackAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
            var voEmbeds,
                vsEmbed,
                restore,
                voOldValue,
                _args5 = arguments;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return _get(_getPrototypeOf(Mixin.prototype), "rollbackAttributes", this).apply(this, _args5);

                  case 2:
                    if (!(this._internalRecord != null)) {
                      _context5.next = 16;
                      break;
                    }

                    voEmbeds = this.constructor.embeddings;
                    _context5.t0 = regeneratorRuntime.keys(voEmbeds);

                  case 5:
                    if ((_context5.t1 = _context5.t0()).done) {
                      _context5.next = 16;
                      break;
                    }

                    vsEmbed = _context5.t1.value;

                    if (hasProp$c.call(voEmbeds, vsEmbed)) {
                      _context5.next = 9;
                      break;
                    }

                    return _context5.abrupt("continue", 5);

                  case 9:
                    restore = voEmbeds[vsEmbed].restore;
                    voOldValue = this._internalRecord[vsEmbed];
                    _context5.next = 13;
                    return restore.call(this, voOldValue);

                  case 13:
                    this[vsEmbed] = _context5.sent;
                    _context5.next = 5;
                    break;

                  case 16:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function rollbackAttributes() {
            return _rollbackAttributes.apply(this, arguments);
          }

          return rollbackAttributes;
        }()
      }], [{
        key: "normalize",
        value: function () {
          var _normalize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(ahPayload, aoCollection) {
            var voRecord,
                voEmbeds,
                vsEmbed,
                load,
                _args6 = arguments;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return _get(_getPrototypeOf(Mixin), "normalize", this).apply(this, _args6);

                  case 2:
                    voRecord = _context6.sent;
                    voEmbeds = voRecord.constructor.embeddings;
                    _context6.t0 = regeneratorRuntime.keys(voEmbeds);

                  case 5:
                    if ((_context6.t1 = _context6.t0()).done) {
                      _context6.next = 15;
                      break;
                    }

                    vsEmbed = _context6.t1.value;

                    if (hasProp$c.call(voEmbeds, vsEmbed)) {
                      _context6.next = 9;
                      break;
                    }

                    return _context6.abrupt("continue", 5);

                  case 9:
                    load = voEmbeds[vsEmbed].load;
                    _context6.next = 12;
                    return load.call(voRecord);

                  case 12:
                    voRecord[vsEmbed] = _context6.sent;
                    _context6.next = 5;
                    break;

                  case 15:
                    voRecord._internalRecord = voRecord.constructor.makeSnapshotWithEmbeds(voRecord);
                    return _context6.abrupt("return", voRecord);

                  case 17:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function normalize(_x2, _x3) {
            return _normalize.apply(this, arguments);
          }

          return normalize;
        }()
      }, {
        key: "serialize",
        value: function () {
          var _serialize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(aoRecord) {
            var voEmbeds, vsEmbed, put;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    voEmbeds = aoRecord.constructor.embeddings;
                    _context7.t0 = regeneratorRuntime.keys(voEmbeds);

                  case 2:
                    if ((_context7.t1 = _context7.t0()).done) {
                      _context7.next = 11;
                      break;
                    }

                    vsEmbed = _context7.t1.value;

                    if (hasProp$c.call(voEmbeds, vsEmbed)) {
                      _context7.next = 6;
                      break;
                    }

                    return _context7.abrupt("continue", 2);

                  case 6:
                    put = voEmbeds[vsEmbed].put;
                    _context7.next = 9;
                    return put.call(aoRecord);

                  case 9:
                    _context7.next = 2;
                    break;

                  case 11:
                    _context7.next = 13;
                    return _get(_getPrototypeOf(Mixin), "serialize", this).call(this, aoRecord);

                  case 13:
                    return _context7.abrupt("return", _context7.sent);

                  case 14:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function serialize(_x4) {
            return _serialize.apply(this, arguments);
          }

          return serialize;
        }()
      }, {
        key: "recoverize",
        value: function () {
          var _recoverize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(ahPayload, aoCollection) {
            var voRecord,
                voEmbeds,
                vsEmbed,
                restore,
                _args8 = arguments;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _context8.next = 2;
                    return _get(_getPrototypeOf(Mixin), "recoverize", this).apply(this, _args8);

                  case 2:
                    voRecord = _context8.sent;
                    voEmbeds = voRecord.constructor.embeddings;
                    _context8.t0 = regeneratorRuntime.keys(voEmbeds);

                  case 5:
                    if ((_context8.t1 = _context8.t0()).done) {
                      _context8.next = 16;
                      break;
                    }

                    vsEmbed = _context8.t1.value;

                    if (hasProp$c.call(voEmbeds, vsEmbed)) {
                      _context8.next = 9;
                      break;
                    }

                    return _context8.abrupt("continue", 5);

                  case 9:
                    restore = voEmbeds[vsEmbed].restore;

                    if (!(vsEmbed in ahPayload)) {
                      _context8.next = 14;
                      break;
                    }

                    _context8.next = 13;
                    return restore.call(voRecord, ahPayload[vsEmbed]);

                  case 13:
                    voRecord[vsEmbed] = _context8.sent;

                  case 14:
                    _context8.next = 5;
                    break;

                  case 16:
                    return _context8.abrupt("return", voRecord);

                  case 17:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function recoverize(_x5, _x6) {
            return _recoverize.apply(this, arguments);
          }

          return recoverize;
        }()
      }, {
        key: "objectize",
        value: function objectize(aoRecord) {
          var vhResult = _get(_getPrototypeOf(Mixin), "objectize", this).apply(this, arguments);

          var voEmbeds = aoRecord.constructor.embeddings;

          for (var vsEmbed in voEmbeds) {
            if (!hasProp$c.call(voEmbeds, vsEmbed)) continue;
            var replicate = voEmbeds[vsEmbed].replicate;

            if (aoRecord[vsEmbed] != null) {
              vhResult[vsEmbed] = replicate.call(aoRecord);
            }
          }

          return vhResult;
        }
      }, {
        key: "makeSnapshotWithEmbeds",
        value: function makeSnapshotWithEmbeds(aoRecord) {
          if (aoRecord == null) {
            return null;
          }

          var vhResult = aoRecord._internalRecord;
          var voEmbeds = aoRecord.constructor.embeddings;

          for (var vsEmbed in voEmbeds) {
            if (!hasProp$c.call(voEmbeds, vsEmbed)) continue;
            var replicate = voEmbeds[vsEmbed].replicate;
            vhResult[vsEmbed] = replicate.call(aoRecord);
          }

          return vhResult;
        }
      }, {
        key: "schema",
        get: function get() {
          var existedSchema = this._schemas.get(this);

          if (existedSchema != null) return existedSchema;
          var vhAttrs = {};
          var voAttrs = this.attributes;

          for (var vsAttr in voAttrs) {
            if (!hasProp$c.call(voAttrs, vsAttr)) continue;
            var vhAttrValue = voAttrs[vsAttr];
            vhAttrs[vsAttr] = _.isFunction(vhAttrValue.validate) ? vhAttrValue.validate.call(this) : vhAttrValue.validate;
          }

          var voComps = this.computeds;

          for (var vsComp in voComps) {
            if (!hasProp$c.call(voComps, vsComp)) continue;
            var vhCompValue = voComps[vsComp];
            vhAttrs[vsComp] = _.isFunction(vhCompValue.validate) ? vhCompValue.validate.call(this) : vhCompValue.validate;
          }

          var voEmbeds = this.embeddings;

          for (var vsEmbed in voEmbeds) {
            if (!hasProp$c.call(voEmbeds, vsEmbed)) continue;
            var vhEmbedValue = voEmbeds[vsEmbed];
            vhAttrs[vsEmbed] = _.isFunction(vhEmbedValue.validate) ? vhEmbedValue.validate.call(this) : vhEmbedValue.validate;
          }

          this._schemas.set(this, joi.object(vhAttrs));

          return this._schemas.get(this);
        }
      }, {
        key: "embeddings",
        get: function get() {
          return this.metaObject.getGroup('embeddings', false);
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), _applyDecoratedDescriptor(_class2, "embeddings", [property], Object.getOwnPropertyDescriptor(_class2, "embeddings"), _class2), _applyDecoratedDescriptor(_class2.prototype, "create", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "update", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), _applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), _applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), _applyDecoratedDescriptor(_class2, "recoverize", [method], Object.getOwnPropertyDescriptor(_class2, "recoverize"), _class2), _applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), _applyDecoratedDescriptor(_class2, "makeSnapshotWithEmbeds", [method], Object.getOwnPropertyDescriptor(_class2, "makeSnapshotWithEmbeds"), _class2), _applyDecoratedDescriptor(_class2.prototype, "changedAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changedAttributes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resetAttribute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "resetAttribute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rollbackAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollbackAttributes"), _class2.prototype)), _class2)) || _class) || _class) || _class);
    return Mixin;
  });
});

var __filename$1e = '/leanes/patterns/switch/Request.js';

/*!
 * media-typer
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * RegExp to match *( ";" parameter ) in RFC 2616 sec 3.7
 *
 * parameter     = token "=" ( token | quoted-string )
 * token         = 1*<any CHAR except CTLs or separators>
 * separators    = "(" | ")" | "<" | ">" | "@"
 *               | "," | ";" | ":" | "\" | <">
 *               | "/" | "[" | "]" | "?" | "="
 *               | "{" | "}" | SP | HT
 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
 * qdtext        = <any TEXT except <">>
 * quoted-pair   = "\" CHAR
 * CHAR          = <any US-ASCII character (octets 0 - 127)>
 * TEXT          = <any OCTET except CTLs, but including LWS>
 * LWS           = [CRLF] 1*( SP | HT )
 * CRLF          = CR LF
 * CR            = <US-ASCII CR, carriage return (13)>
 * LF            = <US-ASCII LF, linefeed (10)>
 * SP            = <US-ASCII SP, space (32)>
 * SHT           = <US-ASCII HT, horizontal-tab (9)>
 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
 * OCTET         = <any 8-bit sequence of data>
 */
var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;

/**
 * RegExp to match quoted-pair in RFC 2616
 *
 * quoted-pair = "\" CHAR
 * CHAR        = <any US-ASCII character (octets 0 - 127)>
 */
var qescRegExp = /\\([\u0000-\u007f])/g;

/**
 * RegExp to match chars that must be quoted-pair in RFC 2616
 */
var quoteRegExp = /([\\"])/g;

/**
 * RegExp to match type in RFC 6838
 *
 * type-name = restricted-name
 * subtype-name = restricted-name
 * restricted-name = restricted-name-first *126restricted-name-chars
 * restricted-name-first  = ALPHA / DIGIT
 * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
 *                          "$" / "&" / "-" / "^" / "_"
 * restricted-name-chars =/ "." ; Characters before first dot always
 *                              ; specify a facet name
 * restricted-name-chars =/ "+" ; Characters after last plus always
 *                              ; specify a structured syntax suffix
 * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
 * DIGIT =  %x30-39             ; 0-9
 */
var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;

/**
 * Module exports.
 */

var format_1 = format;
var parse_1 = parse$3;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @api public
 */

function format(obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var parameters = obj.parameters;
  var subtype = obj.subtype;
  var suffix = obj.suffix;
  var type = obj.type;

  if (!type || !typeNameRegExp.test(type)) {
    throw new TypeError('invalid type')
  }

  if (!subtype || !subtypeNameRegExp.test(subtype)) {
    throw new TypeError('invalid subtype')
  }

  // format as type/subtype
  var string = type + '/' + subtype;

  // append +suffix
  if (suffix) {
    if (!typeNameRegExp.test(suffix)) {
      throw new TypeError('invalid suffix')
    }

    string += '+' + suffix;
  }

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      if (!tokenRegExp.test(param)) {
        throw new TypeError('invalid parameter name')
      }

      string += '; ' + param + '=' + qstring(parameters[param]);
    }
  }

  return string
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @api public
 */

function parse$3(string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  // support req/res-like objects as argument
  if (typeof string === 'object') {
    string = getcontenttype(string);
  }

  if (typeof string !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var index = string.indexOf(';');
  var type = index !== -1
    ? string.substr(0, index)
    : string;

  var key;
  var match;
  var obj = splitType(type);
  var params = {};
  var value;

  paramRegExp.lastIndex = index;

  while (match = paramRegExp.exec(string)) {
    if (match.index !== index) {
      throw new TypeError('invalid parameter format')
    }

    index += match[0].length;
    key = match[1].toLowerCase();
    value = match[2];

    if (value[0] === '"') {
      // remove quotes and escapes
      value = value
        .substr(1, value.length - 2)
        .replace(qescRegExp, '$1');
    }

    params[key] = value;
  }

  if (index !== -1 && index !== string.length) {
    throw new TypeError('invalid parameter format')
  }

  obj.parameters = params;

  return obj
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @api private
 */

function getcontenttype(obj) {
  if (typeof obj.getHeader === 'function') {
    // res-like
    return obj.getHeader('content-type')
  }

  if (typeof obj.headers === 'object') {
    // req-like
    return obj.headers && obj.headers['content-type']
  }
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @api private
 */

function qstring(val) {
  var str = String(val);

  // no need to quote tokens
  if (tokenRegExp.test(str)) {
    return str
  }

  if (str.length > 0 && !textRegExp.test(str)) {
    throw new TypeError('invalid parameter value')
  }

  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
}

/**
 * Simply "type/subtype+siffx" into parts.
 *
 * @param {string} string
 * @return {Object}
 * @api private
 */

function splitType(string) {
  var match = typeRegExp.exec(string.toLowerCase());

  if (!match) {
    throw new TypeError('invalid media type')
  }

  var type = match[1];
  var subtype = match[2];
  var suffix;

  // suffix after last +
  var index = subtype.lastIndexOf('+');
  if (index !== -1) {
    suffix = subtype.substr(index + 1);
    subtype = subtype.substr(0, index);
  }

  var obj = {
    type: type,
    subtype: subtype,
    suffix: suffix
  };

  return obj
}

var mediaTyper = {
	format: format_1,
	parse: parse_1
};

var db = {"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/3gpp-ims+xml":{source:"iana",compressible:true},"application/a2l":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:true},"application/alto-costmap+json":{source:"iana",compressible:true},"application/alto-costmapfilter+json":{source:"iana",compressible:true},"application/alto-directory+json":{source:"iana",compressible:true},"application/alto-endpointcost+json":{source:"iana",compressible:true},"application/alto-endpointcostparams+json":{source:"iana",compressible:true},"application/alto-endpointprop+json":{source:"iana",compressible:true},"application/alto-endpointpropparams+json":{source:"iana",compressible:true},"application/alto-error+json":{source:"iana",compressible:true},"application/alto-networkmap+json":{source:"iana",compressible:true},"application/alto-networkmapfilter+json":{source:"iana",compressible:true},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:true},"application/alto-updatestreamparams+json":{source:"iana",compressible:true},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:true,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:true,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:true,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:true,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:true,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:true,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:true},"application/atsc-rsat+xml":{source:"iana",compressible:true,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:true},"application/bacnet-xdd+zip":{source:"iana",compressible:false},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:false,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/calendar+json":{source:"iana",compressible:true},"application/calendar+xml":{source:"iana",compressible:true,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/cap+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:true},"application/ccxml+xml":{source:"iana",compressible:true,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:true,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:true},"application/cellml+xml":{source:"iana",compressible:true},"application/cfw":{source:"iana"},"application/clue+xml":{source:"iana",compressible:true},"application/clue_info+xml":{source:"iana",compressible:true},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:true},"application/coap-group+json":{source:"iana",compressible:true},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:true},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:true},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:true},"application/cstadata+xml":{source:"iana",compressible:true},"application/csvm+json":{source:"iana",compressible:true},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:true},"application/dash+xml":{source:"iana",compressible:true,extensions:["mpd"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:true,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:true},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:true},"application/dicom+xml":{source:"iana",compressible:true},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:true},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:true,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:true},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:true,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:true,extensions:["ecma","es"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:false},"application/edifact":{source:"iana",compressible:false},"application/efi":{source:"iana"},"application/emergencycalldata.comment+xml":{source:"iana",compressible:true},"application/emergencycalldata.control+xml":{source:"iana",compressible:true},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:true},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:true},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:true},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:true},"application/emergencycalldata.veds+xml":{source:"iana",compressible:true},"application/emma+xml":{source:"iana",compressible:true,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:true,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:true},"application/epub+zip":{source:"iana",compressible:false,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:true},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:true,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:true},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/fido.trusted-apps+json":{compressible:true},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:false},"application/framework-attributes+xml":{source:"iana",compressible:true},"application/geo+json":{source:"iana",compressible:true,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:true},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:true,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:true,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:false,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:true},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:true},"application/ibe-pkg-reply+xml":{source:"iana",compressible:true},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:true,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:true,extensions:["its"]},"application/java-archive":{source:"apache",compressible:false,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:false,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:false,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:true,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:true},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:true},"application/jrd+json":{source:"iana",compressible:true},"application/json":{source:"iana",charset:"UTF-8",compressible:true,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:true},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:true,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:true},"application/jwk-set+json":{source:"iana",compressible:true},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:true},"application/kpml-response+xml":{source:"iana",compressible:true},"application/ld+json":{source:"iana",compressible:true,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:true,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:true},"application/lost+xml":{source:"iana",compressible:true,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:true},"application/lpf+zip":{source:"iana",compressible:false},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:true,extensions:["mads"]},"application/manifest+json":{charset:"UTF-8",compressible:true,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:true,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:true,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:true},"application/mathml-presentation+xml":{source:"iana",compressible:true},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:true},"application/mbms-deregister+xml":{source:"iana",compressible:true},"application/mbms-envelope+xml":{source:"iana",compressible:true},"application/mbms-msk+xml":{source:"iana",compressible:true},"application/mbms-msk-response+xml":{source:"iana",compressible:true},"application/mbms-protection-description+xml":{source:"iana",compressible:true},"application/mbms-reception-report+xml":{source:"iana",compressible:true},"application/mbms-register+xml":{source:"iana",compressible:true},"application/mbms-register-response+xml":{source:"iana",compressible:true},"application/mbms-schedule+xml":{source:"iana",compressible:true},"application/mbms-user-service-description+xml":{source:"iana",compressible:true},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:true},"application/media_control+xml":{source:"iana",compressible:true},"application/mediaservercontrol+xml":{source:"iana",compressible:true,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:true},"application/metalink+xml":{source:"apache",compressible:true,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:true,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:true,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:true,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:true,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:true,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:true,extensions:["xdf"]},"application/mrb-publish+xml":{source:"iana",compressible:true,extensions:["xdf"]},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/msword":{source:"iana",compressible:false,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:true},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:true},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:false,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:true},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:true,extensions:["opf"]},"application/ogg":{source:"iana",compressible:false,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:true,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p2p-overlay+xml":{source:"iana",compressible:true,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:true,extensions:["xer"]},"application/pdf":{source:"iana",compressible:false,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:false,extensions:["pgp"]},"application/pgp-keys":{source:"iana"},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:true,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/postscript":{source:"iana",compressible:true,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:true},"application/problem+json":{source:"iana",compressible:true},"application/problem+xml":{source:"iana",compressible:true},"application/provenance+xml":{source:"iana",compressible:true,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.hpub+zip":{source:"iana",compressible:false},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:true},"application/pskc+xml":{source:"iana",compressible:true,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:true},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:true,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:true},"application/rdf+xml":{source:"iana",compressible:true,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:true,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:true},"application/resource-lists+xml":{source:"iana",compressible:true,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:true,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:true},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:true},"application/rls-services+xml":{source:"iana",compressible:true,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:true,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:true,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:true,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:true,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:true,extensions:["rss"]},"application/rtf":{source:"iana",compressible:true,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:true},"application/samlmetadata+xml":{source:"iana",compressible:true},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:true,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:true},"application/scim+json":{source:"iana",compressible:true},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:true},"application/senml+xml":{source:"iana",compressible:true,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:true},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:true},"application/sensml+xml":{source:"iana",compressible:true,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:true},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:true,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:true},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:true,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:true},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:true,extensions:["srx"]},"application/spirits-event+xml":{source:"iana",compressible:true},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:true,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:true,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:true,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:true,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:true},"application/swid+xml":{source:"iana",compressible:true,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:true},"application/taxii+json":{source:"iana",compressible:true},"application/td+json":{source:"iana",compressible:true},"application/tei+xml":{source:"iana",compressible:true,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:true,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:true},"application/tnauthlist":{source:"iana"},"application/toml":{compressible:true,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana"},"application/ttml+xml":{source:"iana",compressible:true,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:true},"application/urc-ressheet+xml":{source:"iana",compressible:true,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:true},"application/urc-uisocketdesc+xml":{source:"iana",compressible:true},"application/vcard+json":{source:"iana",compressible:true},"application/vcard+xml":{source:"iana",compressible:true},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:true,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:true},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:true},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:true},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:true},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:true},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:true},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:true},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:true},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:true},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:true},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:true},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:false,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:true,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:true},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:true},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:false,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:true},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:true},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:true},"application/vnd.apple.installer+xml":{source:"iana",compressible:true,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["keynote"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:false,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:true},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:true},"application/vnd.avistar+xml":{source:"iana",compressible:true},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:true,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:true},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:true},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:true},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:true},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:true},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:true,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:true,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:true},"application/vnd.collection.doc+json":{source:"iana",compressible:true},"application/vnd.collection.next+json":{source:"iana",compressible:true},"application/vnd.comicbook+zip":{source:"iana",compressible:false},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:true},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:true,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:true},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:true},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:true},"application/vnd.cybank":{source:"iana"},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:false},"application/vnd.dart":{source:"iana",compressible:true,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:true},"application/vnd.dataresource+json":{source:"iana",compressible:true},"application/vnd.dbf":{source:"iana"},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:true,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:true},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:true},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:true},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:true},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:true},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:true},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:true},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:true},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:true},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:true},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:true},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:true},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:true},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:false},"application/vnd.eszigno3+xml":{source:"iana",compressible:true,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:true},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:false},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:false},"application/vnd.etsi.cug+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:true},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:true},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:true},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:true},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:true},"application/vnd.etsi.sci+xml":{source:"iana",compressible:true},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:true},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:true},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:false},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:false},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:true},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:true},"application/vnd.geo+json":{source:"iana",compressible:true},"application/vnd.geocube+xml":{source:"iana",compressible:true},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:false,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:false,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:false,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:true,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:false,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:true},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:false},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:true},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:true},"application/vnd.hal+xml":{source:"iana",compressible:true,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:true,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:true},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:true},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:true},"application/vnd.hyper-item+json":{source:"iana",compressible:true},"application/vnd.hyperdrive+json":{source:"iana",compressible:true},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:false},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:false},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:true},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:true},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:true},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:true},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:true},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:true},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:true},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:true},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:true},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:true},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:true},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:true},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:true},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:true,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:false},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:true},"application/vnd.las.las+xml":{source:"iana",compressible:true,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:true},"application/vnd.liberty-request+xml":{source:"iana",compressible:true},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:true,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:false},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana"},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:true},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:true},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:true},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:true},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:true},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:true},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:true,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:false,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:true,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:true},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:true},"application/vnd.ms-outlook":{compressible:false,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:true},"application/vnd.ms-powerpoint":{source:"iana",compressible:false,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:true},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:true},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:true},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:false,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:true},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:true},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:true},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:true},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:true},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:true,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:true},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:false,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:false,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:false,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:false,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:true},"application/vnd.oftn.l10n+json":{source:"iana",compressible:true},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:true},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:true},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:true},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:true},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:true},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:true},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:true},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:true},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:true},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:true},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:true},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:true},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:true},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:true},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:true},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:true},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:true},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:true},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:true},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:true},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:true},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:true,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:true},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:true},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:true},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:true},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:true},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:true},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:true},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:true},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:true},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:true},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:true},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:true,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:true,extensions:["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:false,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:false,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:false,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:true},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:true},"application/vnd.oracle.resource+json":{source:"iana",compressible:true},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:true},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:true},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:true},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:true},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:true},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:true},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana"},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:true,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:true},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:true,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:true},"application/vnd.shopkick+json":{source:"iana",compressible:true},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:true},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:true,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:true,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:true,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:true,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:true,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:true,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:true},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:true},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:true},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:true},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:true,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:true},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:true},"application/vnd.wv.ssp+xml":{source:"iana",compressible:true},"application/vnd.xacml+json":{source:"iana",compressible:true},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:true},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:true,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:true,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:true,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:true},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{compressible:true,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:true},"application/webpush-options+json":{source:"iana",compressible:true},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:true,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:true,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:false,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:false,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:false,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:false,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:false,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:false},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:true,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:true,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:true,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:false,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:true,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:false,extensions:["jnlp"]},"application/x-javascript":{compressible:true},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:false,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:false},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:true,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:false,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:false,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:true,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:false,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:false,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:true,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:true,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:true,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:true,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:true,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:false,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:true,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:true,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:true,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:true,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:true},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:true,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:false,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:true},"application/xaml+xml":{source:"apache",compressible:true,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:true,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:true,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:true,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:true,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:true,extensions:["xer"]},"application/xcap-ns+xml":{source:"iana",compressible:true,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:true},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:true},"application/xenc+xml":{source:"iana",compressible:true,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:true,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:true},"application/xliff+xml":{source:"iana",compressible:true,extensions:["xlf"]},"application/xml":{source:"iana",compressible:true,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:true,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:true},"application/xmpp+xml":{source:"iana",compressible:true},"application/xop+xml":{source:"iana",compressible:true,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:true,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:true,extensions:["xslt"]},"application/xspf+xml":{source:"apache",compressible:true,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:true,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:true},"application/yang-data+xml":{source:"iana",compressible:true},"application/yang-patch+json":{source:"iana",compressible:true},"application/yang-patch+xml":{source:"iana",compressible:true},"application/yin+xml":{source:"iana",compressible:true,extensions:["yin"]},"application/zip":{source:"iana",compressible:false,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:false,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana"},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:false,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:false},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:false,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:false,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:false,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:false,extensions:["oga","ogg","spx"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:false},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:false},"audio/vorbis":{source:"iana",compressible:false},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:false,extensions:["wav"]},"audio/wave":{compressible:false,extensions:["wav"]},"audio/webm":{source:"apache",compressible:false,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:false,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:false,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:true,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:true,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:false,extensions:["apng"]},"image/avci":{source:"iana"},"image/avcs":{source:"iana"},"image/bmp":{source:"iana",compressible:true,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:false,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:false,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:false,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:false,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:false,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:false},"image/png":{source:"iana",compressible:false,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:true,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:false,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:true,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:true,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:true,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:false},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:false},"message/imdn+xml":{source:"iana",compressible:true},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:false},"message/rfc822":{source:"iana",compressible:true,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/gltf+json":{source:"iana",compressible:true,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:true,extensions:["glb"]},"model/iges":{source:"iana",compressible:false,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:false,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:true,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:true},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.usdz+zip":{source:"iana",compressible:false,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:false,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:false,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:false,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:true,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:false},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:false},"multipart/form-data":{source:"iana",compressible:false},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:false},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:false},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:true,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:true},"text/cmd":{compressible:true},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/css":{source:"iana",charset:"UTF-8",compressible:true,extensions:["css"]},"text/csv":{source:"iana",compressible:true,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:true,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:true},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:true,extensions:["jsx"]},"text/less":{compressible:true,extensions:["less"]},"text/markdown":{source:"iana",compressible:true,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:true,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:true,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:true,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:true,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:true,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shex":{extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:true,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:true,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:true,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:true,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:true},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:true},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:true,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:true,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:true,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:true,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:true,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana"},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:false,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:false,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:false,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:false,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/webm":{source:"apache",compressible:false,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:false,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:false,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:false,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:true},"x-shader/x-vertex":{compressible:true}};

var db$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': db
});

var require$$0 = getCjsExportFromNamespace(db$1);

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */

var mimeDb = require$$0;

var isBufferBrowser$1 = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
};

var inherits_browser$1 = createCommonjsModule(function (module) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
});

var util$4 = createCommonjsModule(function (module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(commonjsGlobal.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = isBufferBrowser$1;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = inherits_browser$1;

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
});
var util_1$1 = util$4.format;
var util_2$1 = util$4.deprecate;
var util_3$1 = util$4.debuglog;
var util_4$1 = util$4.inspect;
var util_5$1 = util$4.isArray;
var util_6$1 = util$4.isBoolean;
var util_7$1 = util$4.isNull;
var util_8$1 = util$4.isNullOrUndefined;
var util_9$1 = util$4.isNumber;
var util_10$1 = util$4.isString;
var util_11$1 = util$4.isSymbol;
var util_12$1 = util$4.isUndefined;
var util_13$1 = util$4.isRegExp;
var util_14$1 = util$4.isObject;
var util_15$1 = util$4.isDate;
var util_16$1 = util$4.isError;
var util_17$1 = util$4.isFunction;
var util_18$1 = util$4.isPrimitive;
var util_19$1 = util$4.isBuffer;
var util_20$1 = util$4.log;
var util_21$1 = util$4.inherits;
var util_22$1 = util$4._extend;

var path = createCommonjsModule(function (module) {


var isWindows = process.platform === 'win32';



// resolves . and .. elements in a path array with directory names there
// must be no slashes or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  var res = [];
  for (var i = 0; i < parts.length; i++) {
    var p = parts[i];

    // ignore empty parts
    if (!p || p === '.')
      continue;

    if (p === '..') {
      if (res.length && res[res.length - 1] !== '..') {
        res.pop();
      } else if (allowAboveRoot) {
        res.push('..');
      }
    } else {
      res.push(p);
    }
  }

  return res;
}

// returns an array with empty elements removed from either end of the input
// array or the original array if no elements need to be removed
function trimArray(arr) {
  var lastIndex = arr.length - 1;
  var start = 0;
  for (; start <= lastIndex; start++) {
    if (arr[start])
      break;
  }

  var end = lastIndex;
  for (; end >= 0; end--) {
    if (arr[end])
      break;
  }

  if (start === 0 && end === lastIndex)
    return arr;
  if (start > end)
    return [];
  return arr.slice(start, end + 1);
}

// Regex to split a windows path into three parts: [*, device, slash,
// tail] windows-only
var splitDeviceRe =
    /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

// Regex to split the tail part of the above into [*, dir, basename, ext]
var splitTailRe =
    /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

var win32 = {};

// Function to split a filename into [root, dir, basename, ext]
function win32SplitPath(filename) {
  // Separate device+slash from tail
  var result = splitDeviceRe.exec(filename),
      device = (result[1] || '') + (result[2] || ''),
      tail = result[3] || '';
  // Split the tail into dir, basename and extension
  var result2 = splitTailRe.exec(tail),
      dir = result2[1],
      basename = result2[2],
      ext = result2[3];
  return [device, dir, basename, ext];
}

function win32StatPath(path) {
  var result = splitDeviceRe.exec(path),
      device = result[1] || '',
      isUnc = !!device && device[1] !== ':';
  return {
    device: device,
    isUnc: isUnc,
    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute
    tail: result[3]
  };
}

function normalizeUNCRoot(device) {
  return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
}

// path.resolve([from ...], to)
win32.resolve = function() {
  var resolvedDevice = '',
      resolvedTail = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1; i--) {
    var path;
    if (i >= 0) {
      path = arguments[i];
    } else if (!resolvedDevice) {
      path = process.cwd();
    } else {
      // Windows has the concept of drive-specific current working
      // directories. If we've resolved a drive letter but not yet an
      // absolute path, get cwd for that drive. We're sure the device is not
      // an unc path at this points, because unc paths are always absolute.
      path = process.env['=' + resolvedDevice];
      // Verify that a drive-local cwd was found and that it actually points
      // to our drive. If not, default to the drive's root.
      if (!path || path.substr(0, 3).toLowerCase() !==
          resolvedDevice.toLowerCase() + '\\') {
        path = resolvedDevice + '\\';
      }
    }

    // Skip empty and invalid entries
    if (!util$4.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    var result = win32StatPath(path),
        device = result.device,
        isUnc = result.isUnc,
        isAbsolute = result.isAbsolute,
        tail = result.tail;

    if (device &&
        resolvedDevice &&
        device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      // This path points to another device so it is not applicable
      continue;
    }

    if (!resolvedDevice) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = tail + '\\' + resolvedTail;
      resolvedAbsolute = isAbsolute;
    }

    if (resolvedDevice && resolvedAbsolute) {
      break;
    }
  }

  // Convert slashes to backslashes when `resolvedDevice` points to an UNC
  // root. Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    resolvedDevice = normalizeUNCRoot(resolvedDevice);
  }

  // At this point the path should be resolved to a full absolute path,
  // but handle relative paths to be safe (might happen when process.cwd()
  // fails)

  // Normalize the tail path
  resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/),
                                !resolvedAbsolute).join('\\');

  return (resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail) ||
         '.';
};


win32.normalize = function(path) {
  var result = win32StatPath(path),
      device = result.device,
      isUnc = result.isUnc,
      isAbsolute = result.isAbsolute,
      tail = result.tail,
      trailingSlash = /[\\\/]$/.test(tail);

  // Normalize the tail path
  tail = normalizeArray(tail.split(/[\\\/]+/), !isAbsolute).join('\\');

  if (!tail && !isAbsolute) {
    tail = '.';
  }
  if (tail && trailingSlash) {
    tail += '\\';
  }

  // Convert slashes to backslashes when `device` points to an UNC root.
  // Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    device = normalizeUNCRoot(device);
  }

  return device + (isAbsolute ? '\\' : '') + tail;
};


win32.isAbsolute = function(path) {
  return win32StatPath(path).isAbsolute;
};

win32.join = function() {
  var paths = [];
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (!util$4.isString(arg)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    if (arg) {
      paths.push(arg);
    }
  }

  var joined = paths.join('\\');

  // Make sure that the joined path doesn't start with two slashes, because
  // normalize() will mistake it for an UNC path then.
  //
  // This step is skipped when it is very clear that the user actually
  // intended to point at an UNC path. This is assumed when the first
  // non-empty string arguments starts with exactly two slashes followed by
  // at least one more non-slash character.
  //
  // Note that for normalize() to treat a path as an UNC path it needs to
  // have at least 2 components, so we don't filter for that here.
  // This means that the user can use join to construct UNC paths from
  // a server name and a share name; for example:
  //   path.join('//server', 'share') -> '\\\\server\\share\')
  if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
    joined = joined.replace(/^[\\\/]{2,}/, '\\');
  }

  return win32.normalize(joined);
};


// path.relative(from, to)
// it will solve the relative path from 'from' to 'to', for instance:
// from = 'C:\\orandea\\test\\aaa'
// to = 'C:\\orandea\\impl\\bbb'
// The output of the function should be: '..\\..\\impl\\bbb'
win32.relative = function(from, to) {
  from = win32.resolve(from);
  to = win32.resolve(to);

  // windows is not case sensitive
  var lowerFrom = from.toLowerCase();
  var lowerTo = to.toLowerCase();

  var toParts = trimArray(to.split('\\'));

  var lowerFromParts = trimArray(lowerFrom.split('\\'));
  var lowerToParts = trimArray(lowerTo.split('\\'));

  var length = Math.min(lowerFromParts.length, lowerToParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (lowerFromParts[i] !== lowerToParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  if (samePartsLength == 0) {
    return to;
  }

  var outputParts = [];
  for (var i = samePartsLength; i < lowerFromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('\\');
};


win32._makeLong = function(path) {
  // Note: this will *probably* throw somewhere.
  if (!util$4.isString(path))
    return path;

  if (!path) {
    return '';
  }

  var resolvedPath = win32.resolve(path);

  if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
    // path is local filesystem path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\' + resolvedPath;
  } else if (/^\\\\[^?.]/.test(resolvedPath)) {
    // path is network UNC path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\UNC\\' + resolvedPath.substring(2);
  }

  return path;
};


win32.dirname = function(path) {
  var result = win32SplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


win32.basename = function(path, ext) {
  var f = win32SplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


win32.extname = function(path) {
  return win32SplitPath(path)[3];
};


win32.format = function(pathObject) {
  if (!util$4.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util$4.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir;
  var base = pathObject.base || '';
  if (!dir) {
    return base;
  }
  if (dir[dir.length - 1] === win32.sep) {
    return dir + base;
  }
  return dir + win32.sep + base;
};


win32.parse = function(pathString) {
  if (!util$4.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = win32SplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, -1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


win32.sep = '\\';
win32.delimiter = ';';


// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var posix = {};


function posixSplitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
}


// path.resolve([from ...], to)
// posix version
posix.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (!util$4.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path[0] === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(resolvedPath.split('/'),
                                !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
posix.normalize = function(path) {
  var isAbsolute = posix.isAbsolute(path),
      trailingSlash = path && path[path.length - 1] === '/';

  // Normalize the path
  path = normalizeArray(path.split('/'), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
posix.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
posix.join = function() {
  var path = '';
  for (var i = 0; i < arguments.length; i++) {
    var segment = arguments[i];
    if (!util$4.isString(segment)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    if (segment) {
      if (!path) {
        path += segment;
      } else {
        path += '/' + segment;
      }
    }
  }
  return posix.normalize(path);
};


// path.relative(from, to)
// posix version
posix.relative = function(from, to) {
  from = posix.resolve(from).substr(1);
  to = posix.resolve(to).substr(1);

  var fromParts = trimArray(from.split('/'));
  var toParts = trimArray(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};


posix._makeLong = function(path) {
  return path;
};


posix.dirname = function(path) {
  var result = posixSplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


posix.basename = function(path, ext) {
  var f = posixSplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


posix.extname = function(path) {
  return posixSplitPath(path)[3];
};


posix.format = function(pathObject) {
  if (!util$4.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util$4.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';
  var base = pathObject.base || '';
  return dir + base;
};


posix.parse = function(pathString) {
  if (!util$4.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = posixSplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  allParts[1] = allParts[1] || '';
  allParts[2] = allParts[2] || '';
  allParts[3] = allParts[3] || '';

  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, -1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


posix.sep = '/';
posix.delimiter = ':';


if (isWindows)
  module.exports = win32;
else /* posix */
  module.exports = posix;

module.exports.posix = posix;
module.exports.win32 = win32;
});
var path_1 = path.posix;
var path_2 = path.win32;

var mimeTypes = createCommonjsModule(function (module, exports) {

/**
 * Module dependencies.
 * @private
 */


var extname = path.extname;

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
var TEXT_TYPE_REGEXP = /^text\//i;

/**
 * Module exports.
 * @public
 */

exports.charset = charset;
exports.charsets = { lookup: charset };
exports.contentType = contentType;
exports.extension = extension;
exports.extensions = Object.create(null);
exports.lookup = lookup;
exports.types = Object.create(null);

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types);

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type);
  var mime = match && mimeDb[match[1].toLowerCase()];

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str;

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime);
    if (charset) mime += '; charset=' + charset.toLowerCase();
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type);

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()];

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1);

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana'];

  Object.keys(mimeDb).forEach(function forEachMimeType (type) {
    var mime = mimeDb[type];
    var exts = mime.extensions;

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts;

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i];

      if (types[extension]) {
        var from = preference.indexOf(mimeDb[types[extension]].source);
        var to = preference.indexOf(mime.source);

        if (types[extension] !== 'application/octet-stream' &&
          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type;
    }
  });
}
});
var mimeTypes_1 = mimeTypes.charset;
var mimeTypes_2 = mimeTypes.charsets;
var mimeTypes_3 = mimeTypes.contentType;
var mimeTypes_4 = mimeTypes.extension;
var mimeTypes_5 = mimeTypes.extensions;
var mimeTypes_6 = mimeTypes.lookup;
var mimeTypes_7 = mimeTypes.types;

var is = typeis;

/**
 * Compare a `value` content-type with `types`.
 * Each `type` can be an extension like `html`,
 * a special shortcut like `multipart` or `urlencoded`,
 * or a mime type.
 *
 * If no types match, `false` is returned.
 * Otherwise, the first `type` that matches is returned.
 *
 * @param {String} value
 * @param {Array} types
 * @public
 */

function typeis (value, types_) {
  var i;
  var types = types_;

  // remove parameters and normalize
  var val = tryNormalizeType(value);

  // no type or invalid
  if (!val) {
    return false
  }

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length - 1);
    for (i = 0; i < types.length; i++) {
      types[i] = arguments[i + 1];
    }
  }

  // no types, return the content type
  if (!types || !types.length) {
    return val
  }

  var type;
  for (i = 0; i < types.length; i++) {
    if (mimeMatch(normalize(type = types[i]), val)) {
      return type[0] === '+' || type.indexOf('*') !== -1
        ? val
        : type
    }
  }

  // no matches
  return false
}

/**
 * Normalize a mime type.
 * If it's a shorthand, expand it to a valid mime type.
 *
 * In general, you probably want:
 *
 *   var type = is(req, ['urlencoded', 'json', 'multipart']);
 *
 * Then use the appropriate body parsers.
 * These three are the most common request body types
 * and are thus ensured to work.
 *
 * @param {String} type
 * @private
 */

function normalize (type) {
  if (typeof type !== 'string') {
    // invalid type
    return false
  }

  switch (type) {
    case 'urlencoded':
      return 'application/x-www-form-urlencoded'
    case 'multipart':
      return 'multipart/*'
  }

  if (type[0] === '+') {
    // "+json" -> "*/*+json" expando
    return '*/*' + type
  }

  return type.indexOf('/') === -1
    ? mimeTypes.lookup(type)
    : type
}

/**
 * Check if `expected` mime type
 * matches `actual` mime type with
 * wildcard and +suffix support.
 *
 * @param {String} expected
 * @param {String} actual
 * @return {Boolean}
 * @private
 */

function mimeMatch (expected, actual) {
  // invalid type
  if (expected === false) {
    return false
  }

  // split types
  var actualParts = actual.split('/');
  var expectedParts = expected.split('/');

  // invalid format
  if (actualParts.length !== 2 || expectedParts.length !== 2) {
    return false
  }

  // validate type
  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
    return false
  }

  // validate suffix wildcard
  if (expectedParts[1].substr(0, 2) === '*+') {
    return expectedParts[1].length <= actualParts[1].length + 1 &&
      expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length)
  }

  // validate subtype
  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
    return false
  }

  return true
}

/**
 * Normalize a type and remove parameters.
 *
 * @param {string} value
 * @return {string}
 * @private
 */

function normalizeType (value) {
  // parse the type
  var type = mediaTyper.parse(value);

  // remove the parameters
  type.parameters = undefined;

  // reformat it
  return mediaTyper.format(type)
}

/**
 * Try to normalize a type and remove parameters.
 *
 * @param {string} value
 * @return {string}
 * @private
 */

function tryNormalizeType (value) {
  if (!value) {
    return null
  }

  try {
    return normalizeType(value)
  } catch (err) {
    return null
  }
}

/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */
var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */
var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;

/**
 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
 */
var QUOTE_REGEXP = /([\\"])/g;

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */
var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * Module exports.
 * @public
 */

var format_1$1 = format$1;
var parse_1$1 = parse$4;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

function format$1 (obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var parameters = obj.parameters;
  var type = obj.type;

  if (!type || !TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid type')
  }

  var string = type;

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      if (!TOKEN_REGEXP.test(param)) {
        throw new TypeError('invalid parameter name')
      }

      string += '; ' + param + '=' + qstring$1(parameters[param]);
    }
  }

  return string
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @public
 */

function parse$4 (string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  // support req/res-like objects as argument
  var header = typeof string === 'object'
    ? getcontenttype$1(string)
    : string;

  if (typeof header !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var index = header.indexOf(';');
  var type = index !== -1
    ? header.substr(0, index).trim()
    : header.trim();

  if (!TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid media type')
  }

  var obj = new ContentType(type.toLowerCase());

  // parse parameters
  if (index !== -1) {
    var key;
    var match;
    var value;

    PARAM_REGEXP.lastIndex = index;

    while ((match = PARAM_REGEXP.exec(header))) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format')
      }

      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];

      if (value[0] === '"') {
        // remove quotes and escapes
        value = value
          .substr(1, value.length - 2)
          .replace(QESC_REGEXP, '$1');
      }

      obj.parameters[key] = value;
    }

    if (index !== header.length) {
      throw new TypeError('invalid parameter format')
    }
  }

  return obj
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @private
 */

function getcontenttype$1 (obj) {
  var header;

  if (typeof obj.getHeader === 'function') {
    // res-like
    header = obj.getHeader('content-type');
  } else if (typeof obj.headers === 'object') {
    // req-like
    header = obj.headers && obj.headers['content-type'];
  }

  if (typeof header !== 'string') {
    throw new TypeError('content-type header is missing from object')
  }

  return header
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function qstring$1 (val) {
  var str = String(val);

  // no need to quote tokens
  if (TOKEN_REGEXP.test(str)) {
    return str
  }

  if (str.length > 0 && !TEXT_REGEXP.test(str)) {
    throw new TypeError('invalid parameter value')
  }

  return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"'
}

/**
 * Class to represent a content type.
 * @private
 */
function ContentType (type) {
  this.parameters = Object.create(null);
  this.type = type;
}

var contentType = {
	format: format_1$1,
	parse: parse_1$1
};

/**
 * Module dependencies.
 * @private
 */


var parse$5 = url__default.parse;
var Url = url__default.Url;

/**
 * Module exports.
 * @public
 */

var parseurl_1 = parseurl;
var original = originalurl;

/**
 * Parse the `req` url with memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @public
 */

function parseurl (req) {
  var url = req.url;

  if (url === undefined) {
    // URL is undefined
    return undefined
  }

  var parsed = req._parsedUrl;

  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed
  }

  // Parse the URL
  parsed = fastparse(url);
  parsed._raw = url;

  return (req._parsedUrl = parsed)
}
/**
 * Parse the `req` original url with fallback and memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @public
 */

function originalurl (req) {
  var url = req.originalUrl;

  if (typeof url !== 'string') {
    // Fallback
    return parseurl(req)
  }

  var parsed = req._parsedOriginalUrl;

  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed
  }

  // Parse the URL
  parsed = fastparse(url);
  parsed._raw = url;

  return (req._parsedOriginalUrl = parsed)
}
/**
 * Parse the `str` url with fast-path short-cut.
 *
 * @param {string} str
 * @return {Object}
 * @private
 */

function fastparse (str) {
  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {
    return parse$5(str)
  }

  var pathname = str;
  var query = null;
  var search = null;

  // This takes the regexp from https://github.com/joyent/node/pull/7878
  // Which is /^(\/[^?#\s]*)(\?[^#\s]*)?$/
  // And unrolls it into a for loop
  for (var i = 1; i < str.length; i++) {
    switch (str.charCodeAt(i)) {
      case 0x3f: /* ?  */
        if (search === null) {
          pathname = str.substring(0, i);
          query = str.substring(i + 1);
          search = str.substring(i);
        }
        break
      case 0x09: /* \t */
      case 0x0a: /* \n */
      case 0x0c: /* \f */
      case 0x0d: /* \r */
      case 0x20: /*    */
      case 0x23: /* #  */
      case 0xa0:
      case 0xfeff:
        return parse$5(str)
    }
  }

  var url = Url !== undefined
    ? new Url()
    : {};

  url.path = str;
  url.href = str;
  url.pathname = pathname;

  if (search !== null) {
    url.query = query;
    url.search = search;
  }

  return url
}

/**
 * Determine if parsed is still fresh for url.
 *
 * @param {string} url
 * @param {object} parsedUrl
 * @return {boolean}
 * @private
 */

function fresh (url, parsedUrl) {
  return typeof parsedUrl === 'object' &&
    parsedUrl !== null &&
    (Url === undefined || parsedUrl instanceof Url) &&
    parsedUrl._raw === url
}
parseurl_1.original = original;

var LegacyResponseInterface$4 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$4 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$2 = flowRuntime_umd.tdz(function () {
  return Config;
});
var RouterRouteT$6 = flowRuntime_umd.tdz(function () {
  return RouterRouteT;
});
var ResourceInterface$4 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ResourceRendererInterface$2 = flowRuntime_umd.tdz(function () {
  return ResourceRendererInterface;
});
var ContextInterface$5 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var SwitchInterface = flowRuntime_umd.type("SwitchInterface", function (SwitchInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("middlewares", flowRuntime_umd.array(flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$5)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))))), flowRuntime_umd.property("handlers", flowRuntime_umd.array(flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$5)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))))), flowRuntime_umd.property("responseFormats", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("routerName", flowRuntime_umd.string()), flowRuntime_umd.property("use", flowRuntime_umd["function"](flowRuntime_umd.param("index", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd["function"]())), flowRuntime_umd.param("middleware", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd["return"](SwitchInterface))), flowRuntime_umd.property("callback", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["function"](flowRuntime_umd.param("req", flowRuntime_umd.ref("object")), flowRuntime_umd.param("res", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))))), flowRuntime_umd.property("handleStatistics", flowRuntime_umd["function"](flowRuntime_umd.param("reqLength", flowRuntime_umd.number()), flowRuntime_umd.param("resLength", flowRuntime_umd.number()), flowRuntime_umd.param("time", flowRuntime_umd.number()), flowRuntime_umd.param("aoContext", flowRuntime_umd.ref(ContextInterface$5)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("onerror", flowRuntime_umd["function"](flowRuntime_umd.param("err", flowRuntime_umd.ref("Error")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("respond", flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$5)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("perform", flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any()),
        R = _fn.typeParameter("R", undefined, T),
        L = _fn.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$4, flowRuntime_umd.ref(AxiosResponse$4, T, R)));

    return [flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref(Config$2, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  })), flowRuntime_umd.property("rendererFor", flowRuntime_umd["function"](flowRuntime_umd.param("asFormat", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(ResourceRendererInterface$2)))), flowRuntime_umd.property("sendHttpResponse", flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$5)), flowRuntime_umd.param("aoData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("resource", flowRuntime_umd.ref(ResourceInterface$4)), flowRuntime_umd.param("opts", flowRuntime_umd.ref(RouterRouteT$6)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("defineRoutes", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("sender", flowRuntime_umd["function"](flowRuntime_umd.param("resourceName", flowRuntime_umd.string()), flowRuntime_umd.param("aoMessage", flowRuntime_umd.exactObject(flowRuntime_umd.property("context", flowRuntime_umd.ref(ContextInterface$5)), flowRuntime_umd.property("reverse", flowRuntime_umd.string()))), flowRuntime_umd.param("params", flowRuntime_umd.ref(RouterRouteT$6)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("createNativeRoute", flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RouterRouteT$6)), flowRuntime_umd["return"](flowRuntime_umd["void"]()))));
});

var RequestInterface = flowRuntime_umd.type("RequestInterface", flowRuntime_umd.object(flowRuntime_umd.property("req", flowRuntime_umd.ref("object")), flowRuntime_umd.property("body", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.property("header", flowRuntime_umd.ref("object")), flowRuntime_umd.property("headers", flowRuntime_umd.ref("object")), flowRuntime_umd.property("originalUrl", flowRuntime_umd.string()), flowRuntime_umd.property("url", flowRuntime_umd.string()), flowRuntime_umd.property("origin", flowRuntime_umd.string()), flowRuntime_umd.property("href", flowRuntime_umd.string()), flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("path", flowRuntime_umd.string()), flowRuntime_umd.property("query", flowRuntime_umd.ref("object")), flowRuntime_umd.property("querystring", flowRuntime_umd.string()), flowRuntime_umd.property("search", flowRuntime_umd.string()), flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("hostname", flowRuntime_umd.string()), flowRuntime_umd.property("fresh", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("stale", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("idempotent", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("socket", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("charset", flowRuntime_umd.string()), flowRuntime_umd.property("length", flowRuntime_umd.number()), flowRuntime_umd.property("protocol", flowRuntime_umd.union(flowRuntime_umd.string("http"), flowRuntime_umd.string("https"))), flowRuntime_umd.property("secure", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("ip", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("ips", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("subdomains", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.property("accepts", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(), flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("acceptsCharsets", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd.property("acceptsEncodings", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd.property("acceptsLanguages", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd.property("is", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["boolean"]()))))), flowRuntime_umd.property("type", flowRuntime_umd.string()), flowRuntime_umd.property("get", flowRuntime_umd["function"](flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())))));

var RequestInterface$1 = flowRuntime_umd.tdz(function () {
  return RequestInterface;
});
var ContextInterface$6 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var SwitchInterface$1 = flowRuntime_umd.tdz(function () {
  return SwitchInterface;
});
var RequestTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;
  var Request = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Request", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_req", flowRuntime_umd.ref("object")), flowRuntime_umd.method("req", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("switch", flowRuntime_umd["return"](flowRuntime_umd.ref(SwitchInterface$1))), flowRuntime_umd.property("ctx", flowRuntime_umd.ref(ContextInterface$6)), flowRuntime_umd.property("body", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("header", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("headers", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("originalUrl", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("url", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("url", flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("origin", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("href", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("method", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("method", flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("path", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("path", flowRuntime_umd.param("path", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("query", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("query", flowRuntime_umd.param("obj", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("querystring", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("querystring", flowRuntime_umd.param("str", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("search", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("search", flowRuntime_umd.param("str", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("host", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("hostname", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("fresh", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("stale", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("idempotent", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("socket", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("charset", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("protocol", flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string("http"), flowRuntime_umd.string("https")))), flowRuntime_umd.method("secure", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.property("ip", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.method("ips", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("subdomains", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("accepts", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(), flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("acceptsCharsets", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd.method("acceptsEncodings", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd.method("acceptsLanguages", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd.method("is", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["boolean"]())))), flowRuntime_umd.method("type", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("get", flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("context", flowRuntime_umd.ref(ContextInterface$6)), flowRuntime_umd.param("req", flowRuntime_umd.ref("object"))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Request, _CoreObject);

    var _super = _createSuper(Request);

    _createClass(Request, [{
      key: "accepts",
      value: function accepts() {
        var _this$ctx$accept;

        return (_this$ctx$accept = this.ctx.accept).types.apply(_this$ctx$accept, arguments);
      }
    }, {
      key: "acceptsCharsets",
      value: function acceptsCharsets() {
        var _this$ctx$accept2;

        return (_this$ctx$accept2 = this.ctx.accept).charsets.apply(_this$ctx$accept2, arguments);
      }
    }, {
      key: "acceptsEncodings",
      value: function acceptsEncodings() {
        var _this$ctx$accept3;

        return (_this$ctx$accept3 = this.ctx.accept).encodings.apply(_this$ctx$accept3, arguments);
      }
    }, {
      key: "acceptsLanguages",
      value: function acceptsLanguages() {
        var _this$ctx$accept4;

        return (_this$ctx$accept4 = this.ctx.accept).languages.apply(_this$ctx$accept4, arguments);
      }
    }, {
      key: "is",
      value: function is$1() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var types = args[0];

        if (!types) {
          return is(this.req);
        }

        if (!_.isArray(types)) {
          types = args;
        }

        return is(this.req, types);
      }
    }, {
      key: 'get',
      value: function get(field) {
        var req = this.req;

        switch (field = field.toLowerCase()) {
          case 'referer':
          case 'referrer':
            return req.headers.referrer || req.headers.referer || '';

          default:
            return req.headers[field] || '';
        }
      }
    }, {
      key: "req",
      // native request object
      get: function get() {
        // native request object
        return this._req;
      }
    }, {
      key: "switch",
      get: function get() {
        return this.ctx["switch"];
      }
    }, {
      key: "header",
      get: function get() {
        return this.headers;
      }
    }, {
      key: "headers",
      get: function get() {
        return this.req.headers;
      }
    }, {
      key: "originalUrl",
      get: function get() {
        return this.ctx.originalUrl;
      }
    }, {
      key: "url",
      get: function get() {
        return this.req.url;
      },
      set: function set(url) {
        return this.req.url = url;
      }
    }, {
      key: "origin",
      get: function get() {
        return "".concat(this.protocol, "://").concat(this.host);
      }
    }, {
      key: "href",
      get: function get() {
        if (/^https?:\/\//i.test(this.originalUrl)) {
          return this.originalUrl;
        }

        return this.origin + this.originalUrl;
      }
    }, {
      key: "method",
      get: function get() {
        return this.req.method;
      },
      set: function set(method) {
        return this.req.method = method;
      }
    }, {
      key: "path",
      get: function get() {
        return parseurl_1(this.req).pathname;
      },
      set: function set(path) {
        var url$1 = parseurl_1(this.req);

        if (url$1.pathname === path) {
          return path;
        }

        url$1.pathname = path;
        url$1.path = null;
        return this.url = url.format(url$1);
      }
    }, {
      key: "query",
      get: function get() {
        return qs.parse(this.querystring);
      },
      set: function set(obj) {
        this.querystring = qs.stringify(obj);
        return obj;
      }
    }, {
      key: "querystring",
      get: function get() {
        if (this.req == null) {
          return '';
        }

        return parseurl_1(this.req).query || '';
      },
      set: function set(str) {
        var url$1 = parseurl_1(this.req);

        if (url$1.search === "?".concat(str)) {
          return str;
        }

        url$1.search = str;
        url$1.path = null;
        return this.url = url.format(url$1);
      }
    }, {
      key: "search",
      get: function get() {
        if (!this.querystring) {
          return '';
        }

        return "?".concat(this.querystring);
      },
      set: function set(str) {
        return this.querystring = str;
      }
    }, {
      key: "host",
      get: function get() {
        var trustProxy = this.ctx["switch"].configs.trustProxy;
        var host = trustProxy && this.get('X-Forwarded-Host') || this.get('Host');

        if (!host) {
          return '';
        }

        return host.split(/\s*,\s*/)[0];
      }
    }, {
      key: "hostname",
      get: function get() {
        if (!this.host) {
          return '';
        }

        return this.host.split(':')[0];
      }
    }, {
      key: "fresh",
      get: function get() {
        return false;
      }
    }, {
      key: "stale",
      get: function get() {
        return !this.fresh;
      }
    }, {
      key: "idempotent",
      get: function get() {
        var methods = ['GET', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'];
        return _.includes(methods, this.method);
      }
    }, {
      key: "socket",
      get: function get() {
        return this.req.socket;
      }
    }, {
      key: "charset",
      get: function get() {
        var type = this.get('Content-Type');

        if (type == null) {
          return '';
        }

        try {
          type = contentType.parse(type);
        } catch (error) {
          return '';
        }

        return type.parameters.charset || '';
      }
    }, {
      key: "length",
      get: function get() {
        var contentLength = this.get('Content-Length');

        if (contentLength != null) {
          if (contentLength === '') {
            return 0;
          }

          return ~~Number(contentLength);
        } else {
          return 0;
        }
      }
    }, {
      key: "protocol",
      get: function get() {
        var trustProxy = this.ctx["switch"].configs.trustProxy;

        if (this.socket != null ? this.socket.encrypted : undefined) {
          return 'https';
        }

        if (this.req.secure) {
          return 'https';
        }

        if (!trustProxy) {
          return 'http';
        }

        var proto = this.get('X-Forwarded-Proto') || 'http';
        return proto.split(/\s*,\s*/)[0];
      }
    }, {
      key: "secure",
      get: function get() {
        return this.protocol === 'https';
      }
    }, {
      key: "ips",
      get: function get() {
        return [];
      }
    }, {
      key: "subdomains",
      get: function get() {
        return [];
      }
    }, {
      key: "type",
      get: function get() {
        var type = this.get('Content-Type');

        if (type == null) {
          return '';
        }

        return type.split(';')[0];
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Request(context, req) {
      var _this;

      _classCallCheck(this, Request);

      _this = _super.call(this);

      _initializerDefineProperty(_this, "_req", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "ctx", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "body", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "ip", _descriptor4, _assertThisInitialized(_this));

      _this.ctx = context;
      _this._req = req;
      var socRemoteAddress = _this.req.socket && _this.req.socket.remoteAddress;
      var reqRemoteAddress = _this.req.remoteAddress;
      _this.ip = _this.ips[0] || socRemoteAddress || reqRemoteAddress || '';
      return _this;
    }

    return Request;
  }(CoreObject), _class3.__filename = __filename$1e, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_req", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "req", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "req"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "switch", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "switch"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ctx", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "body", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "header", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "header"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "headers", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "headers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "originalUrl", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "originalUrl"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "url", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "url"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "url", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "url"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "origin", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "origin"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "href", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "href"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "method", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "method"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "method", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "method"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "path", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "path"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "path", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "path"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "query", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "query"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "query", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "query"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "querystring", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "querystring"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "querystring", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "querystring"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "search", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "search"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "search", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "search"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "host", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "host"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hostname", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "hostname"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fresh", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "fresh"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "stale", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "stale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "idempotent", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "idempotent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "socket", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "socket"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "charset", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "charset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "protocol", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "protocol"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "secure", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "secure"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ip", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "ips", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ips"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "subdomains", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "subdomains"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "accepts", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "accepts"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptsCharsets", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptsCharsets"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptsEncodings", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptsEncodings"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptsLanguages", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptsLanguages"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "is", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "is"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "type", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'get', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'get'), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$1f = '/leanes/patterns/switch/Response.js';

var ResponseInterface = flowRuntime_umd.type("ResponseInterface", flowRuntime_umd.object(flowRuntime_umd.property("res", flowRuntime_umd.ref("object")), flowRuntime_umd.property("socket", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("header", flowRuntime_umd.ref("objec")), flowRuntime_umd.property("headers", flowRuntime_umd.ref("object")), flowRuntime_umd.property("status", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("message", flowRuntime_umd.string()), flowRuntime_umd.property("body", flowRuntime_umd.any()), flowRuntime_umd.property("length", flowRuntime_umd.number()), flowRuntime_umd.property("headerSent", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("type", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("is", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["boolean"]()))))), flowRuntime_umd.property("get", flowRuntime_umd["function"](flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()))))), flowRuntime_umd.property("set", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.property("append", flowRuntime_umd["function"](flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd.param("val", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("writable", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("flushHeaders", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]())))));

var hasProp$d = {}.hasOwnProperty;
/*
Идеи взяты из https://github.com/koajs/koa/blob/master/lib/response.js
*/

var ResponseInterface$1 = flowRuntime_umd.tdz(function () {
  return ResponseInterface;
});
var ContextInterface$7 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var SwitchInterface$2 = flowRuntime_umd.tdz(function () {
  return SwitchInterface;
});
var ResponseTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      statuses = _Module$NS$Utils.statuses,
      assign = _Module$NS$Utils.assign;
  var Response = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Response", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_res", flowRuntime_umd.ref("object")), flowRuntime_umd.method("res", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("switch", flowRuntime_umd["return"](flowRuntime_umd.ref(SwitchInterface$2))), flowRuntime_umd.property("ctx", flowRuntime_umd.ref(ContextInterface$7)), flowRuntime_umd.method("socket", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("header", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("headers", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("status", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.method("status", flowRuntime_umd.param("code", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.method("message", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("message", flowRuntime_umd.param("msg", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("body", flowRuntime_umd["return"](flowRuntime_umd.any())), flowRuntime_umd.method("body", flowRuntime_umd.param("val", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.any())), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("length", flowRuntime_umd.param("n", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("headerSent", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("type", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("type", flowRuntime_umd.param("_type", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("is", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["boolean"]())))), flowRuntime_umd.method("get", flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.method("set", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("append", flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd.param("val", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("remove", flowRuntime_umd.param("field", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("writable", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("flushHeaders", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("context", flowRuntime_umd.ref(ContextInterface$7)), flowRuntime_umd.param("res", flowRuntime_umd.ref("object"))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Response, _CoreObject);

    var _super = _createSuper(Response);

    _createClass(Response, [{
      key: "is",
      value: function is$1() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var types = args[0];

        if (!types) {
          return this.type || false;
        }

        if (!_.isArray(types)) {
          types = args;
        }

        return is(this.type, types);
      }
    }, {
      key: 'get',
      value: function get(field) {
        return this.headers[field.toLowerCase()] || '';
      }
    }, {
      key: 'set',
      value: function set() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var field = args[0],
            val = args[1];

        if (2 === args.length) {
          if (_.isArray(val)) {
            this.headers[field] = val.map(String);
          } else {
            this.headers[field] = String(val);
          }
        } else {
          for (var key in field) {
            if (!hasProp$d.call(field, key)) continue;
            this.set(key, field[key]);
          }
        }
      }
    }, {
      key: "append",
      value: function append(field, val) {
        var prev = this.get(field);

        if (prev) {
          if (_.isArray(prev)) {
            val = prev.concat(val);
          } else {
            val = [prev].concat(val);
          }
        }

        this.set(field, val);
      }
    }, {
      key: "remove",
      value: function remove(field) {
        delete this.res[field];
      }
    }, {
      key: "flushHeaders",
      value: function flushHeaders() {
        var headerNames = Object.keys(this.res._headers) || Object.keys(this.res.headers);

        var _iterator = _createForOfIteratorHelper(headerNames),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var header = _step.value;
            this.remove(header);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "res",
      // native response object
      get: function get() {
        // native response object
        return this._res;
      }
    }, {
      key: "switch",
      get: function get() {
        return this.ctx["switch"];
      }
    }, {
      key: "socket",
      get: function get() {
        return this.ctx.req.socket;
      }
    }, {
      key: "header",
      get: function get() {
        return this.headers;
      }
    }, {
      key: "headers",
      get: function get() {
        return this.res._headers || this.res.headers;
      }
    }, {
      key: "status",
      get: function get() {
        return this.res.statusCode;
      },
      set: function set(code) {
        assert(_.isNumber(code), 'status code must be a number');
        assert(statuses[code], "invalid status code: ".concat(code));
        assert(!this.res.headersSent, 'headers have already been sent');
        this._explicitStatus = true;
        this.res.statusCode = code;
        this.res.statusMessage = statuses[code];

        if (Boolean(this.body && statuses.empty[code])) {
          this.body = null;
        }

        return code;
      }
    }, {
      key: "message",
      get: function get() {
        return this.res.statusMessage || statuses[this.status];
      },
      set: function set(msg) {
        this.res.statusMessage = msg;
        return msg;
      }
    }, {
      key: "body",
      get: function get() {
        return this._body;
      },
      set: function set(val) {
        var original = this._body;
        this._body = val;

        if (val == null) {
          if (!statuses.empty[this.status]) {
            this.status = 204;
          }

          this.remove('Content-Type');
          this.remove('Content-Length');
          this.remove('Transfer-Encoding');
          return;
        }

        if (!this._explicitStatus) {
          this.status = 200;
        }

        var setType = !this.headers['content-type'];

        if (_.isString(val)) {
          if (setType) {
            this.type = /^\s*</.test(val) ? 'html' : 'text';
          }

          this.length = Buffer.byteLength(val);
          return;
        }

        if (_.isBuffer(val)) {
          if (setType) {
            this.type = 'bin';
          }

          this.length = val.length;
          return;
        }

        this.remove('Content-Length');
        this.type = 'json';
        return val;
      }
    }, {
      key: "length",
      get: function get() {
        var len = this.headers['content-length'];

        if (len == null) {
          if (!this.body) {
            return 0;
          }

          if (_.isString(this.body)) {
            return Buffer.byteLength(this.body);
          }

          if (_.isBuffer(this.body)) {
            return this.body.length;
          }

          if (_.isObjectLike(this.body)) {
            return Buffer.byteLength(JSON.stringify(this.body));
          }

          return 0;
        }

        return ~~Number(len);
      },
      set: function set(n) {
        this.set('Content-Length', n);
        return n;
      }
    }, {
      key: "headerSent",
      get: function get() {
        return false;
      }
    }, {
      key: "type",
      get: function get() {
        var type = this.get('Content-Type');

        if (!type) {
          return '';
        }

        return type.split(';')[0];
      },
      set: function set(_type) {
        var type = mimeTypes_3(_type);

        if (type) {
          this.set('Content-Type', type);
        } else {
          this.remove('Content-Type');
        }

        return _type;
      }
    }, {
      key: "writable",
      get: function get() {
        return true;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Response(context, res) {
      var _this;

      _classCallCheck(this, Response);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_res", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "ctx", _descriptor2, _assertThisInitialized(_this));

      _this.ctx = context;
      _this._res = assign({
        headers: {}
      }, res);
      return _this;
    }

    return Response;
  }(CoreObject), _class3.__filename = __filename$1f, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_res", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "res", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "res"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "switch", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "switch"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ctx", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "socket", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "socket"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "header", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "header"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "headers", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "headers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "status", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "status"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "status", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "status"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "message", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "message"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "message", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "message"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "body", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "body"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "body", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "body"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "headerSent", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "headerSent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "type", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "type", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "is", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "is"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'get', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'get'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'set', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'set'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "append", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "append"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "writable", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "writable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "flushHeaders", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "flushHeaders"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$1g = '/leanes/patterns/switch/Context.js';

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var charset = preferredCharsets;
var preferredCharsets_1 = preferredCharsets;

/**
 * Module variables.
 * @private
 */

var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Charset header.
 * @private
 */

function parseAcceptCharset(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var charset = parseCharset(accepts[i].trim(), i);

    if (charset) {
      accepts[j++] = charset;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a charset from the Accept-Charset header.
 * @private
 */

function parseCharset(str, i) {
  var match = simpleCharsetRegExp.exec(str);
  if (!match) return null;

  var charset = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var j = 0; j < params.length; j++) {
      var p = params[j].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    charset: charset,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a charset.
 * @private
 */

function getCharsetPriority(charset, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(charset, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the charset.
 * @private
 */

function specify(charset, spec, index) {
  var s = 0;
  if(spec.charset.toLowerCase() === charset.toLowerCase()){
    s |= 1;
  } else if (spec.charset !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}

/**
 * Get the preferred charsets from an Accept-Charset header.
 * @public
 */

function preferredCharsets(accept, provided) {
  // RFC 2616 sec 14.2: no header = *
  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all charsets
    return accepts
      .filter(isQuality)
      .sort(compareSpecs)
      .map(getFullCharset);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getCharsetPriority(type, accepts, index);
  });

  // sorted list of accepted charsets
  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full charset string.
 * @private
 */

function getFullCharset(spec) {
  return spec.charset;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}
charset.preferredCharsets = preferredCharsets_1;

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var encoding = preferredEncodings;
var preferredEncodings_1 = preferredEncodings;

/**
 * Module variables.
 * @private
 */

var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Encoding header.
 * @private
 */

function parseAcceptEncoding(accept) {
  var accepts = accept.split(',');
  var hasIdentity = false;
  var minQuality = 1;

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var encoding = parseEncoding(accepts[i].trim(), i);

    if (encoding) {
      accepts[j++] = encoding;
      hasIdentity = hasIdentity || specify$1('identity', encoding);
      minQuality = Math.min(minQuality, encoding.q || 1);
    }
  }

  if (!hasIdentity) {
    /*
     * If identity doesn't explicitly appear in the accept-encoding header,
     * it's added to the list of acceptable encoding with the lowest q
     */
    accepts[j++] = {
      encoding: 'identity',
      q: minQuality,
      i: i
    };
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse an encoding from the Accept-Encoding header.
 * @private
 */

function parseEncoding(str, i) {
  var match = simpleEncodingRegExp.exec(str);
  if (!match) return null;

  var encoding = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var j = 0; j < params.length; j++) {
      var p = params[j].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    encoding: encoding,
    q: q,
    i: i
  };
}

/**
 * Get the priority of an encoding.
 * @private
 */

function getEncodingPriority(encoding, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify$1(encoding, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the encoding.
 * @private
 */

function specify$1(encoding, spec, index) {
  var s = 0;
  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
    s |= 1;
  } else if (spec.encoding !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}
/**
 * Get the preferred encodings from an Accept-Encoding header.
 * @public
 */

function preferredEncodings(accept, provided) {
  var accepts = parseAcceptEncoding(accept || '');

  if (!provided) {
    // sorted list of all encodings
    return accepts
      .filter(isQuality$1)
      .sort(compareSpecs$1)
      .map(getFullEncoding);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getEncodingPriority(type, accepts, index);
  });

  // sorted list of accepted encodings
  return priorities.filter(isQuality$1).sort(compareSpecs$1).map(function getEncoding(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs$1(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full encoding string.
 * @private
 */

function getFullEncoding(spec) {
  return spec.encoding;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality$1(spec) {
  return spec.q > 0;
}
encoding.preferredEncodings = preferredEncodings_1;

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var language = preferredLanguages;
var preferredLanguages_1 = preferredLanguages;

/**
 * Module variables.
 * @private
 */

var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Language header.
 * @private
 */

function parseAcceptLanguage(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var language = parseLanguage(accepts[i].trim(), i);

    if (language) {
      accepts[j++] = language;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a language from the Accept-Language header.
 * @private
 */

function parseLanguage(str, i) {
  var match = simpleLanguageRegExp.exec(str);
  if (!match) return null;

  var prefix = match[1],
    suffix = match[2],
    full = prefix;

  if (suffix) full += "-" + suffix;

  var q = 1;
  if (match[3]) {
    var params = match[3].split(';');
    for (var j = 0; j < params.length; j++) {
      var p = params[j].split('=');
      if (p[0] === 'q') q = parseFloat(p[1]);
    }
  }

  return {
    prefix: prefix,
    suffix: suffix,
    q: q,
    i: i,
    full: full
  };
}

/**
 * Get the priority of a language.
 * @private
 */

function getLanguagePriority(language, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify$2(language, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the language.
 * @private
 */

function specify$2(language, spec, index) {
  var p = parseLanguage(language);
  if (!p) return null;
  var s = 0;
  if(spec.full.toLowerCase() === p.full.toLowerCase()){
    s |= 4;
  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
    s |= 2;
  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
    s |= 1;
  } else if (spec.full !== '*' ) {
    return null
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  }
}
/**
 * Get the preferred languages from an Accept-Language header.
 * @public
 */

function preferredLanguages(accept, provided) {
  // RFC 2616 sec 14.4: no header = *
  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all languages
    return accepts
      .filter(isQuality$2)
      .sort(compareSpecs$2)
      .map(getFullLanguage);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getLanguagePriority(type, accepts, index);
  });

  // sorted list of accepted languages
  return priorities.filter(isQuality$2).sort(compareSpecs$2).map(function getLanguage(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs$2(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full language string.
 * @private
 */

function getFullLanguage(spec) {
  return spec.full;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality$2(spec) {
  return spec.q > 0;
}
language.preferredLanguages = preferredLanguages_1;

/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var mediaType = preferredMediaTypes;
var preferredMediaTypes_1 = preferredMediaTypes;

/**
 * Module variables.
 * @private
 */

var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept header.
 * @private
 */

function parseAccept(accept) {
  var accepts = splitMediaTypes(accept);

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var mediaType = parseMediaType(accepts[i].trim(), i);

    if (mediaType) {
      accepts[j++] = mediaType;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a media type from the Accept header.
 * @private
 */

function parseMediaType(str, i) {
  var match = simpleMediaTypeRegExp.exec(str);
  if (!match) return null;

  var params = Object.create(null);
  var q = 1;
  var subtype = match[2];
  var type = match[1];

  if (match[3]) {
    var kvps = splitParameters(match[3]).map(splitKeyValuePair);

    for (var j = 0; j < kvps.length; j++) {
      var pair = kvps[j];
      var key = pair[0].toLowerCase();
      var val = pair[1];

      // get the value, unwrapping quotes
      var value = val && val[0] === '"' && val[val.length - 1] === '"'
        ? val.substr(1, val.length - 2)
        : val;

      if (key === 'q') {
        q = parseFloat(value);
        break;
      }

      // store parameter
      params[key] = value;
    }
  }

  return {
    type: type,
    subtype: subtype,
    params: params,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a media type.
 * @private
 */

function getMediaTypePriority(type, accepted, index) {
  var priority = {o: -1, q: 0, s: 0};

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify$3(type, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the media type.
 * @private
 */

function specify$3(type, spec, index) {
  var p = parseMediaType(type);
  var s = 0;

  if (!p) {
    return null;
  }

  if(spec.type.toLowerCase() == p.type.toLowerCase()) {
    s |= 4;
  } else if(spec.type != '*') {
    return null;
  }

  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
    s |= 2;
  } else if(spec.subtype != '*') {
    return null;
  }

  var keys = Object.keys(spec.params);
  if (keys.length > 0) {
    if (keys.every(function (k) {
      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
    })) {
      s |= 1;
    } else {
      return null
    }
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s,
  }
}

/**
 * Get the preferred media types from an Accept header.
 * @public
 */

function preferredMediaTypes(accept, provided) {
  // RFC 2616 sec 14.2: no header = */*
  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

  if (!provided) {
    // sorted list of all types
    return accepts
      .filter(isQuality$3)
      .sort(compareSpecs$3)
      .map(getFullType);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getMediaTypePriority(type, accepts, index);
  });

  // sorted list of accepted types
  return priorities.filter(isQuality$3).sort(compareSpecs$3).map(function getType(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs$3(a, b) {
  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
}

/**
 * Get full type string.
 * @private
 */

function getFullType(spec) {
  return spec.type + '/' + spec.subtype;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality$3(spec) {
  return spec.q > 0;
}

/**
 * Count the number of quotes in a string.
 * @private
 */

function quoteCount(string) {
  var count = 0;
  var index = 0;

  while ((index = string.indexOf('"', index)) !== -1) {
    count++;
    index++;
  }

  return count;
}

/**
 * Split a key value pair.
 * @private
 */

function splitKeyValuePair(str) {
  var index = str.indexOf('=');
  var key;
  var val;

  if (index === -1) {
    key = str;
  } else {
    key = str.substr(0, index);
    val = str.substr(index + 1);
  }

  return [key, val];
}

/**
 * Split an Accept header into media types.
 * @private
 */

function splitMediaTypes(accept) {
  var accepts = accept.split(',');

  for (var i = 1, j = 0; i < accepts.length; i++) {
    if (quoteCount(accepts[j]) % 2 == 0) {
      accepts[++j] = accepts[i];
    } else {
      accepts[j] += ',' + accepts[i];
    }
  }

  // trim accepts
  accepts.length = j + 1;

  return accepts;
}

/**
 * Split a string of parameters.
 * @private
 */

function splitParameters(str) {
  var parameters = str.split(';');

  for (var i = 1, j = 0; i < parameters.length; i++) {
    if (quoteCount(parameters[j]) % 2 == 0) {
      parameters[++j] = parameters[i];
    } else {
      parameters[j] += ';' + parameters[i];
    }
  }

  // trim parameters
  parameters.length = j + 1;

  for (var i = 0; i < parameters.length; i++) {
    parameters[i] = parameters[i].trim();
  }

  return parameters;
}
mediaType.preferredMediaTypes = preferredMediaTypes_1;

/**
 * Cached loaded submodules.
 * @private
 */

var modules = Object.create(null);

/**
 * Module exports.
 * @public
 */

var negotiator = Negotiator;
var Negotiator_1 = Negotiator;

/**
 * Create a Negotiator instance from a request.
 * @param {object} request
 * @public
 */

function Negotiator(request) {
  if (!(this instanceof Negotiator)) {
    return new Negotiator(request);
  }

  this.request = request;
}

Negotiator.prototype.charset = function charset(available) {
  var set = this.charsets(available);
  return set && set[0];
};

Negotiator.prototype.charsets = function charsets(available) {
  var preferredCharsets = loadModule('charset').preferredCharsets;
  return preferredCharsets(this.request.headers['accept-charset'], available);
};

Negotiator.prototype.encoding = function encoding(available) {
  var set = this.encodings(available);
  return set && set[0];
};

Negotiator.prototype.encodings = function encodings(available) {
  var preferredEncodings = loadModule('encoding').preferredEncodings;
  return preferredEncodings(this.request.headers['accept-encoding'], available);
};

Negotiator.prototype.language = function language(available) {
  var set = this.languages(available);
  return set && set[0];
};

Negotiator.prototype.languages = function languages(available) {
  var preferredLanguages = loadModule('language').preferredLanguages;
  return preferredLanguages(this.request.headers['accept-language'], available);
};

Negotiator.prototype.mediaType = function mediaType(available) {
  var set = this.mediaTypes(available);
  return set && set[0];
};

Negotiator.prototype.mediaTypes = function mediaTypes(available) {
  var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;
  return preferredMediaTypes(this.request.headers.accept, available);
};

// Backwards compatibility
Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;

/**
 * Load the given module.
 * @private
 */

function loadModule(moduleName) {
  var module = modules[moduleName];

  if (module !== undefined) {
    return module;
  }

  // This uses a switch for static require analysis
  switch (moduleName) {
    case 'charset':
      module = charset;
      break;
    case 'encoding':
      module = encoding;
      break;
    case 'language':
      module = language;
      break;
    case 'mediaType':
      module = mediaType;
      break;
    default:
      throw new Error('Cannot find module \'' + moduleName + '\'');
  }

  // Store to prevent invoking require()
  modules[moduleName] = module;

  return module;
}
negotiator.Negotiator = Negotiator_1;

/**
 * Module dependencies.
 * @private
 */




/**
 * Module exports.
 * @public
 */

var accepts = Accepts;

/**
 * Create a new Accepts object for the given req.
 *
 * @param {object} req
 * @public
 */

function Accepts (req) {
  if (!(this instanceof Accepts)) {
    return new Accepts(req)
  }

  this.headers = req.headers;
  this.negotiator = new negotiator(req);
}

/**
 * Check if the given `type(s)` is acceptable, returning
 * the best match when true, otherwise `undefined`, in which
 * case you should respond with 406 "Not Acceptable".
 *
 * The `type` value may be a single mime type string
 * such as "application/json", the extension name
 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
 * or array is given the _best_ match, if any is returned.
 *
 * Examples:
 *
 *     // Accept: text/html
 *     this.types('html');
 *     // => "html"
 *
 *     // Accept: text/*, application/json
 *     this.types('html');
 *     // => "html"
 *     this.types('text/html');
 *     // => "text/html"
 *     this.types('json', 'text');
 *     // => "json"
 *     this.types('application/json');
 *     // => "application/json"
 *
 *     // Accept: text/*, application/json
 *     this.types('image/png');
 *     this.types('png');
 *     // => undefined
 *
 *     // Accept: text/*;q=.5, application/json
 *     this.types(['html', 'json']);
 *     this.types('html', 'json');
 *     // => "json"
 *
 * @param {String|Array} types...
 * @return {String|Array|Boolean}
 * @public
 */

Accepts.prototype.type =
Accepts.prototype.types = function (types_) {
  var types = types_;

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length);
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i];
    }
  }

  // no types, return all requested types
  if (!types || types.length === 0) {
    return this.negotiator.mediaTypes()
  }

  // no accept header, return first given type
  if (!this.headers.accept) {
    return types[0]
  }

  var mimes = types.map(extToMime);
  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
  var first = accepts[0];

  return first
    ? types[mimes.indexOf(first)]
    : false
};

/**
 * Return accepted encodings or best fit based on `encodings`.
 *
 * Given `Accept-Encoding: gzip, deflate`
 * an array sorted by quality is returned:
 *
 *     ['gzip', 'deflate']
 *
 * @param {String|Array} encodings...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.encoding =
Accepts.prototype.encodings = function (encodings_) {
  var encodings = encodings_;

  // support flattened arguments
  if (encodings && !Array.isArray(encodings)) {
    encodings = new Array(arguments.length);
    for (var i = 0; i < encodings.length; i++) {
      encodings[i] = arguments[i];
    }
  }

  // no encodings, return all requested encodings
  if (!encodings || encodings.length === 0) {
    return this.negotiator.encodings()
  }

  return this.negotiator.encodings(encodings)[0] || false
};

/**
 * Return accepted charsets or best fit based on `charsets`.
 *
 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
 * an array sorted by quality is returned:
 *
 *     ['utf-8', 'utf-7', 'iso-8859-1']
 *
 * @param {String|Array} charsets...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.charset =
Accepts.prototype.charsets = function (charsets_) {
  var charsets = charsets_;

  // support flattened arguments
  if (charsets && !Array.isArray(charsets)) {
    charsets = new Array(arguments.length);
    for (var i = 0; i < charsets.length; i++) {
      charsets[i] = arguments[i];
    }
  }

  // no charsets, return all requested charsets
  if (!charsets || charsets.length === 0) {
    return this.negotiator.charsets()
  }

  return this.negotiator.charsets(charsets)[0] || false
};

/**
 * Return accepted languages or best fit based on `langs`.
 *
 * Given `Accept-Language: en;q=0.8, es, pt`
 * an array sorted by quality is returned:
 *
 *     ['es', 'pt', 'en']
 *
 * @param {String|Array} langs...
 * @return {Array|String}
 * @public
 */

Accepts.prototype.lang =
Accepts.prototype.langs =
Accepts.prototype.language =
Accepts.prototype.languages = function (languages_) {
  var languages = languages_;

  // support flattened arguments
  if (languages && !Array.isArray(languages)) {
    languages = new Array(arguments.length);
    for (var i = 0; i < languages.length; i++) {
      languages[i] = arguments[i];
    }
  }

  // no languages, return all requested languages
  if (!languages || languages.length === 0) {
    return this.negotiator.languages()
  }

  return this.negotiator.languages(languages)[0] || false
};

/**
 * Convert extnames to mime.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function extToMime (type) {
  return type.indexOf('/') === -1
    ? mimeTypes.lookup(type)
    : type
}

/**
 * Check if mime is valid.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function validMime (type) {
  return typeof type === 'string'
}

/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var browser = depd;

/**
 * Create deprecate for namespace in caller.
 */

function depd (namespace) {
  if (!namespace) {
    throw new TypeError('argument namespace is required')
  }

  function deprecate (message) {
    // no-op in browser
  }

  deprecate._file = undefined;
  deprecate._ignored = true;
  deprecate._namespace = namespace;
  deprecate._traced = false;
  deprecate._warned = Object.create(null);

  deprecate.function = wrapfunction;
  deprecate.property = wrapproperty;

  return deprecate
}

/**
 * Return a wrapped function in a deprecation message.
 *
 * This is a no-op version of the wrapper, which does nothing but call
 * validation.
 */

function wrapfunction (fn, message) {
  if (typeof fn !== 'function') {
    throw new TypeError('argument fn must be a function')
  }

  return fn
}

/**
 * Wrap property in a deprecation message.
 *
 * This is a no-op version of the wrapper, which does nothing but call
 * validation.
 */

function wrapproperty (obj, prop, message) {
  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
    throw new TypeError('argument obj must be object')
  }

  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);

  if (!descriptor) {
    throw new TypeError('must call property on owner object')
  }

  if (!descriptor.configurable) {
    throw new TypeError('property must be configurable')
  }
}

/* eslint no-proto: 0 */
var setprototypeof = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);

function setProtoOf (obj, proto) {
  obj.__proto__ = proto;
  return obj
}

function mixinProperties (obj, proto) {
  for (var prop in proto) {
    if (!obj.hasOwnProperty(prop)) {
      obj[prop] = proto[prop];
    }
  }
  return obj
}

/*!
 * toidentifier
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var toidentifier = toIdentifier;

/**
 * Trasform the given string into a JavaScript identifier
 *
 * @param {string} str
 * @returns {string}
 * @public
 */

function toIdentifier (str) {
  return str
    .split(' ')
    .map(function (token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1)
    })
    .join('')
    .replace(/[^ _0-9a-z]/gi, '')
}

var httpErrors = createCommonjsModule(function (module) {

/**
 * Module dependencies.
 * @private
 */

var deprecate = browser('http-errors');





/**
 * Module exports.
 * @public
 */

module.exports = createError;
module.exports.HttpError = createHttpErrorConstructor();

// Populate exports for all constructors
populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);

/**
 * Get the code class of a status code.
 * @private
 */

function codeClass (status) {
  return Number(String(status).charAt(0) + '00')
}

/**
 * Create a new HTTP Error.
 *
 * @returns {Error}
 * @public
 */

function createError () {
  // so much arity going on ~_~
  var err;
  var msg;
  var status = 500;
  var props = {};
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (arg instanceof Error) {
      err = arg;
      status = err.status || err.statusCode || status;
      continue
    }
    switch (typeof arg) {
      case 'string':
        msg = arg;
        break
      case 'number':
        status = arg;
        break
      case 'object':
        props = arg;
        break
    }
  }

  if (typeof status !== 'number' ||
    (!statuses[status] && (status < 400 || status >= 600))) {
    status = 500;
  }

  // constructor
  var HttpError = createError[status] || createError[codeClass(status)];

  if (!err) {
    // create error
    err = HttpError
      ? new HttpError(msg)
      : new Error(msg || statuses[status]);
    Error.captureStackTrace(err, createError);
  }

  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
    // add properties to generic error
    err.expose = status < 500;
    err.status = err.statusCode = status;
  }

  for (var key in props) {
    if (key !== 'status' && key !== 'statusCode') {
      err[key] = props[key];
    }
  }

  return err
}

/**
 * Create HTTP error abstract base class.
 * @private
 */

function createHttpErrorConstructor () {
  function HttpError () {
    throw new TypeError('cannot construct abstract class')
  }

  inherits_browser(HttpError, Error);

  return HttpError
}

/**
 * Create a constructor for a client error.
 * @private
 */

function createClientErrorConstructor (HttpError, name, code) {
  var className = name.match(/Error$/) ? name : name + 'Error';

  function ClientError (message) {
    // create the error object
    var msg = message != null ? message : statuses[code];
    var err = new Error(msg);

    // capture a stack trace to the construction point
    Error.captureStackTrace(err, ClientError);

    // adjust the [[Prototype]]
    setprototypeof(err, ClientError.prototype);

    // redefine the error message
    Object.defineProperty(err, 'message', {
      enumerable: true,
      configurable: true,
      value: msg,
      writable: true
    });

    // redefine the error name
    Object.defineProperty(err, 'name', {
      enumerable: false,
      configurable: true,
      value: className,
      writable: true
    });

    return err
  }

  inherits_browser(ClientError, HttpError);
  nameFunc(ClientError, className);

  ClientError.prototype.status = code;
  ClientError.prototype.statusCode = code;
  ClientError.prototype.expose = true;

  return ClientError
}

/**
 * Create a constructor for a server error.
 * @private
 */

function createServerErrorConstructor (HttpError, name, code) {
  var className = name.match(/Error$/) ? name : name + 'Error';

  function ServerError (message) {
    // create the error object
    var msg = message != null ? message : statuses[code];
    var err = new Error(msg);

    // capture a stack trace to the construction point
    Error.captureStackTrace(err, ServerError);

    // adjust the [[Prototype]]
    setprototypeof(err, ServerError.prototype);

    // redefine the error message
    Object.defineProperty(err, 'message', {
      enumerable: true,
      configurable: true,
      value: msg,
      writable: true
    });

    // redefine the error name
    Object.defineProperty(err, 'name', {
      enumerable: false,
      configurable: true,
      value: className,
      writable: true
    });

    return err
  }

  inherits_browser(ServerError, HttpError);
  nameFunc(ServerError, className);

  ServerError.prototype.status = code;
  ServerError.prototype.statusCode = code;
  ServerError.prototype.expose = false;

  return ServerError
}

/**
 * Set the name of a function, if possible.
 * @private
 */

function nameFunc (func, name) {
  var desc = Object.getOwnPropertyDescriptor(func, 'name');

  if (desc && desc.configurable) {
    desc.value = name;
    Object.defineProperty(func, 'name', desc);
  }
}

/**
 * Populate the exports object with constructors for every error class.
 * @private
 */

function populateConstructorExports (exports, codes, HttpError) {
  codes.forEach(function forEachCode (code) {
    var CodeError;
    var name = toidentifier(statuses[code]);

    switch (codeClass(code)) {
      case 400:
        CodeError = createClientErrorConstructor(HttpError, name, code);
        break
      case 500:
        CodeError = createServerErrorConstructor(HttpError, name, code);
        break
    }

    if (CodeError) {
      // export the constructor
      exports[code] = CodeError;
      exports[name] = CodeError;
    }
  });

  // backwards-compatibility
  exports["I'mateapot"] = deprecate.function(exports.ImATeapot,
    '"I\'mateapot"; use "ImATeapot" instead');
}
});
var httpErrors_1 = httpErrors.HttpError;

var ResponseInterface$2 = flowRuntime_umd.tdz(function () {
  return ResponseInterface;
});
var RequestInterface$2 = flowRuntime_umd.tdz(function () {
  return RequestInterface;
});
var ContextInterface$8 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var SwitchInterface$3 = flowRuntime_umd.tdz(function () {
  return SwitchInterface;
});
var ContextTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class3, _temp;

  var _Module$NS = Module.NS,
      DEVELOPMENT = _Module$NS.DEVELOPMENT,
      CoreObject = _Module$NS.CoreObject,
      Request = _Module$NS.Request,
      Response = _Module$NS.Response,
      _assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      statuses = _Module$NS$Utils.statuses;
  var Context = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Context", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_req", flowRuntime_umd.ref("object")), flowRuntime_umd.property("_res", flowRuntime_umd.ref("object")), flowRuntime_umd.method("req", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("res", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.property("request", flowRuntime_umd.nullable(flowRuntime_umd.ref(RequestInterface$2))), flowRuntime_umd.property("response", flowRuntime_umd.nullable(flowRuntime_umd.ref(ResponseInterface$2))), flowRuntime_umd.property("accept", flowRuntime_umd.ref("object")), flowRuntime_umd.property("state", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("switch", flowRuntime_umd.ref(SwitchInterface$3)), flowRuntime_umd.property("respond", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("routePath", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("pathParams", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("transaction", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("session", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("isPerformExecution", flowRuntime_umd["boolean"]()), flowRuntime_umd.method("throw", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()), flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("assert", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("onerror", flowRuntime_umd.param("err", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("header", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("headers", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("method", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("method", flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("url", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("url", flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.property("originalUrl", flowRuntime_umd.string()), flowRuntime_umd.method("origin", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("href", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("path", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("path", flowRuntime_umd.param("path", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("query", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("query", flowRuntime_umd.param("query", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("querystring", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("querystring", flowRuntime_umd.param("querystring", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("host", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("hostname", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("fresh", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("stale", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("socket", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("protocol", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("secure", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("ip", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("ips", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("subdomains", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("is", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["boolean"]())))), flowRuntime_umd.method("accepts", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(), flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("acceptsEncodings", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd.method("acceptsCharsets", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd.method("acceptsLanguages", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array())))), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array()))), flowRuntime_umd.method("get", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("body", flowRuntime_umd["return"](flowRuntime_umd.any())), flowRuntime_umd.method("body", flowRuntime_umd.param("body", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.any())), flowRuntime_umd.method("status", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.method("status", flowRuntime_umd.param("status", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.method("message", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("message", flowRuntime_umd.param("message", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("length", flowRuntime_umd.param("length", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.method("writable", flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.method("type", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("type", flowRuntime_umd.param("type", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.method("headerSent", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("set", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("object")))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.method("append", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("flushHeaders", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("remove", flowRuntime_umd.rest("args", flowRuntime_umd.tuple(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.method("constructor", flowRuntime_umd.param("switchInstanse", flowRuntime_umd.ref(SwitchInterface$3)), flowRuntime_umd.param("req", flowRuntime_umd.ref("object")), flowRuntime_umd.param("res", flowRuntime_umd.ref("object"))))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    _inherits(Context, _CoreObject);

    var _super = _createSuper(Context);

    _createClass(Context, [{
      key: 'throw',
      value: function _throw() {
        throw httpErrors.apply(void 0, arguments);
      }
    }, {
      key: "assert",
      value: function assert() {
        return _assert.apply(void 0, arguments);
      }
    }, {
      key: "onerror",
      value: function onerror(err) {
        var _this2 = this;

        if (err == null) {
          return;
        }

        if (!_.isError(err)) {
          err = new Error("non-error thrown: ".concat(err));
        }

        this["switch"].getViewComponent().emit('error', err, this);
        var vlHeaderNames = Object.keys(this.res.headers || {});
        vlHeaderNames.forEach(function (name) {
          delete _this2.res.headers[name];
        });
        this.set(err.headers || {});
        this.type = 'text';

        if ('ENOENT' === err.code) {
          err.status = 404;
        }

        if (!_.isNumber(err.status) || !statuses[err.status]) {
          err.status = 500;
        }

        var code = statuses[err.status];
        var msg = err.expose ? err.message : code;
        var message = {
          error: true,
          errorNum: err.status,
          errorMessage: msg,
          code: err.code || code
        };

        if (this["switch"].configs.environment === DEVELOPMENT) {
          message.exception = "".concat(err.name || 'Error', ": ").concat(msg);
          message.stacktrace = err.stack.split('\n');
        }

        this.status = err.status;
        var vsMessage = JSON.stringify(message);
        this.length = Buffer.byteLength(vsMessage);
        this.body = vsMessage;
      } // Request aliases

    }, {
      key: "is",
      value: function is() {
        var _this$request;

        return (_this$request = this.request).is.apply(_this$request, arguments);
      }
    }, {
      key: "accepts",
      value: function accepts() {
        var _this$request2;

        return (_this$request2 = this.request).accepts.apply(_this$request2, arguments);
      }
    }, {
      key: "acceptsEncodings",
      value: function acceptsEncodings() {
        var _this$request3;

        return (_this$request3 = this.request).acceptsEncodings.apply(_this$request3, arguments);
      }
    }, {
      key: "acceptsCharsets",
      value: function acceptsCharsets() {
        var _this$request4;

        return (_this$request4 = this.request).acceptsCharsets.apply(_this$request4, arguments);
      }
    }, {
      key: "acceptsLanguages",
      value: function acceptsLanguages() {
        var _this$request5;

        return (_this$request5 = this.request).acceptsLanguages.apply(_this$request5, arguments);
      }
    }, {
      key: 'get',
      value: function get() {
        var _this$request6;

        return (_this$request6 = this.request).get.apply(_this$request6, arguments);
      } // Response aliases

    }, {
      key: 'set',
      value: function set() {
        var _this$response;

        return (_this$response = this.response).set.apply(_this$response, arguments);
      }
    }, {
      key: "append",
      value: function append() {
        var _this$response2;

        return (_this$response2 = this.response).append.apply(_this$response2, arguments);
      }
    }, {
      key: "flushHeaders",
      value: function flushHeaders() {
        var _this$response3;

        return (_this$response3 = this.response).flushHeaders.apply(_this$response3, arguments);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this$response4;

        return (_this$response4 = this.response).remove.apply(_this$response4, arguments);
      }
    }, {
      key: "req",
      // native request object
      // native response object
      get: function get() {
        return this._req;
      }
    }, {
      key: "res",
      get: function get() {
        return this._res;
      }
    }, {
      key: "header",
      get: function get() {
        return this.request.header;
      }
    }, {
      key: "headers",
      get: function get() {
        return this.request.headers;
      }
    }, {
      key: "method",
      get: function get() {
        return this.request.method;
      },
      set: function set(method) {
        return this.request.method = method;
      }
    }, {
      key: "url",
      get: function get() {
        return this.request.url;
      },
      set: function set(url) {
        return this.request.url = url;
      }
    }, {
      key: "origin",
      get: function get() {
        return this.request.origin;
      }
    }, {
      key: "href",
      get: function get() {
        return this.request.href;
      }
    }, {
      key: "path",
      get: function get() {
        return this.request.path;
      },
      set: function set(path) {
        return this.request.path = path;
      }
    }, {
      key: "query",
      get: function get() {
        return this.request.query;
      },
      set: function set(query) {
        return this.request.query = query;
      }
    }, {
      key: "querystring",
      get: function get() {
        return this.request.querystring;
      },
      set: function set(querystring) {
        return this.request.querystring = querystring;
      }
    }, {
      key: "host",
      get: function get() {
        return this.request.host;
      }
    }, {
      key: "hostname",
      get: function get() {
        return this.request.hostname;
      }
    }, {
      key: "fresh",
      get: function get() {
        return this.request.fresh;
      }
    }, {
      key: "stale",
      get: function get() {
        return this.request.stale;
      }
    }, {
      key: "socket",
      get: function get() {
        return this.request.socket;
      }
    }, {
      key: "protocol",
      get: function get() {
        return this.request.protocol;
      }
    }, {
      key: "secure",
      get: function get() {
        return this.request.secure;
      }
    }, {
      key: "ip",
      get: function get() {
        return this.request.ip;
      }
    }, {
      key: "ips",
      get: function get() {
        return this.request.ips;
      }
    }, {
      key: "subdomains",
      get: function get() {
        return this.request.subdomains;
      }
    }, {
      key: "body",
      get: function get() {
        return this.response.body;
      },
      set: function set(body) {
        return this.response.body = body;
      }
    }, {
      key: "status",
      get: function get() {
        return this.response.status;
      },
      set: function set(status) {
        return this.response.status = status;
      }
    }, {
      key: "message",
      get: function get() {
        return this.response.message;
      },
      set: function set(message) {
        return this.response.message = message;
      }
    }, {
      key: "length",
      get: function get() {
        return this.response.length;
      },
      set: function set(length) {
        return this.response.length = length;
      }
    }, {
      key: "writable",
      get: function get() {
        return this.response.writable;
      }
    }, {
      key: "type",
      get: function get() {
        return this.response.type;
      },
      set: function set(type) {
        return this.response.type = type;
      }
    }, {
      key: "headerSent",
      get: function get() {
        return this.response.headerSent;
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    function Context(switchInstanse, req, res) {
      var _this;

      _classCallCheck(this, Context);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_req", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_res", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "request", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "response", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "accept", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "state", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "switch", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "respond", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "routePath", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "pathParams", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "transaction", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "session", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "isPerformExecution", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "originalUrl", _descriptor14, _assertThisInitialized(_this));

      _this._req = req;
      _this._res = res;
      _this["switch"] = switchInstanse;
      _this.originalUrl = req.url;
      _this.accept = accepts(req);
      _this.request = Request["new"](_assertThisInitialized(_this), req);
      _this.response = Response["new"](_assertThisInitialized(_this), res);
      _this.state = {};
      return _this;
    }

    return Context;
  }(CoreObject), _class3.__filename = __filename$1g, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_req", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_res", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "req", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "req"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "res", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "res"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "request", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "response", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "accept", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "state", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "switch", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "respond", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "routePath", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "pathParams", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "transaction", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "session", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "isPerformExecution", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, 'throw', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'throw'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "assert", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "assert"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onerror", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onerror"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "header", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "header"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "headers", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "headers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "method", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "method"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "method", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "method"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "url", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "url"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "url", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "url"), _class2.prototype), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "originalUrl", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "origin", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "origin"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "href", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "href"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "path", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "path"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "path", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "path"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "query", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "query"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "query", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "query"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "querystring", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "querystring"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "querystring", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "querystring"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "host", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "host"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hostname", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "hostname"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fresh", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "fresh"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "stale", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "stale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "socket", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "socket"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "protocol", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "protocol"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "secure", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "secure"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "ip", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ip"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "ips", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "ips"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "subdomains", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "subdomains"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "is", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "is"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "accepts", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "accepts"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptsEncodings", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptsEncodings"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptsCharsets", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptsCharsets"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "acceptsLanguages", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "acceptsLanguages"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'get', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'get'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "body", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "body"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "body", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "body"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "status", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "status"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "status", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "status"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "message", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "message"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "message", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "message"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "length", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "writable", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "writable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "type", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "type", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "headerSent", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "headerSent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'set', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'set'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "append", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "append"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "flushHeaders", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "flushHeaders"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), _applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), _applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$1h = '/leanes/patterns/mediator/Switch.js';

/**
 * Expose `pathtoRegexp`.
 */

var pathToRegexp = pathtoRegexp;

/**
 * Match matching groups in a regular expression.
 */
var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

/**
 * Normalize the given path string,
 * returning a regular expression.
 *
 * An empty array should be passed,
 * which will contain the placeholder
 * key names. For example "/user/:id" will
 * then contain ["id"].
 *
 * @param  {String|RegExp|Array} path
 * @param  {Array} keys
 * @param  {Object} options
 * @return {RegExp}
 * @api private
 */

function pathtoRegexp(path, keys, options) {
  options = options || {};
  keys = keys || [];
  var strict = options.strict;
  var end = options.end !== false;
  var flags = options.sensitive ? '' : 'i';
  var extraOffset = 0;
  var keysOffset = keys.length;
  var i = 0;
  var name = 0;
  var m;

  if (path instanceof RegExp) {
    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
      keys.push({
        name: name++,
        optional: false,
        offset: m.index
      });
    }

    return path;
  }

  if (Array.isArray(path)) {
    // Map array parts into regexps and return their source. We also pass
    // the same keys and options instance into every generation to get
    // consistent matching groups before we join the sources together.
    path = path.map(function (value) {
      return pathtoRegexp(value, keys, options).source;
    });

    return new RegExp('(?:' + path.join('|') + ')', flags);
  }

  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
    .replace(/\/\(/g, '/(?:')
    .replace(/([\/\.])/g, '\\$1')
    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
      slash = slash || '';
      format = format || '';
      capture = capture || '([^\\/' + format + ']+?)';
      optional = optional || '';

      keys.push({
        name: key,
        optional: !!optional,
        offset: offset + extraOffset
      });

      var result = ''
        + (optional ? '' : slash)
        + '(?:'
        + format + (optional ? slash : '') + capture
        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
        + ')'
        + optional;

      extraOffset += result.length - match.length;

      return result;
    })
    .replace(/\*/g, function (star, index) {
      var len = keys.length;

      while (len-- > keysOffset && keys[len].offset > index) {
        keys[len].offset += 3; // Replacement length minus asterisk length.
      }

      return '(.*)';
    });

  // This is a workaround for handling unnamed matching groups.
  while (m = MATCHING_GROUP_REGEXP.exec(path)) {
    var escapeCount = 0;
    var index = m.index;

    while (path.charAt(--index) === '\\') {
      escapeCount++;
    }

    // It's possible to escape the bracket.
    if (escapeCount % 2 === 1) {
      continue;
    }

    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
      keys.splice(keysOffset + i, 0, {
        name: name++, // Unnamed matching groups must be consistently linear.
        optional: false,
        offset: m.index
      });
    }

    i++;
  }

  // If the path is non-ending, match until the end or a slash.
  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));

  return new RegExp(path, flags);
}

var LegacyResponseInterface$5 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$5 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$3 = flowRuntime_umd.tdz(function () {
  return Config;
});
var RouterRouteT$7 = flowRuntime_umd.tdz(function () {
  return RouterRouteT;
});
var ResourceInterface$5 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ResourceRendererInterface$3 = flowRuntime_umd.tdz(function () {
  return ResourceRendererInterface;
});
var ContextInterface$9 = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var SwitchInterface$4 = flowRuntime_umd.tdz(function () {
  return SwitchInterface;
});
var NotificationInterface$f = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var indexOf$1 = [].indexOf; // from https://github.com/koajs/route/blob/master/index.js ###############

var decode$2 = flowRuntime_umd.annotate(function decode(val) {
  // чистая функция
  if (val) {
    return decodeURIComponent(val);
  }
}, flowRuntime_umd["function"](flowRuntime_umd.param("val", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))));
var matches = flowRuntime_umd.annotate(function matches(ctx, methodName) {
  if (!methodName) {
    return true;
  }

  if (ctx.method === methodName) {
    return true;
  }

  if (methodName === 'GET' && ctx.method === 'HEAD') {
    return true;
  }

  return false;
}, flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())));
var SwitchTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _class3, _temp;

  var _Module$NS = Module.NS,
      MIGRATIONS = _Module$NS.MIGRATIONS,
      APPLICATION_ROUTER = _Module$NS.APPLICATION_ROUTER,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      HANDLER_RESULT = _Module$NS.HANDLER_RESULT,
      METHODS = _Module$NS.METHODS,
      Pipes = _Module$NS.Pipes,
      Mediator = _Module$NS.Mediator,
      Context = _Module$NS.Context,
      ResourceRenderer = _Module$NS.ResourceRenderer,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      genRandomAlphaNumbers = _Module$NS$Utils.genRandomAlphaNumbers,
      statuses = _Module$NS$Utils.statuses;
  var Switch = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Switch", flowRuntime_umd["extends"](Mediator), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_eventNames", flowRuntime_umd.ref("object")), flowRuntime_umd.property("_httpServer", flowRuntime_umd.ref("object")), flowRuntime_umd.property("_renderers", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(ResourceRendererInterface$3)))))), flowRuntime_umd.property("_composed", flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("_handler", flowRuntime_umd["function"](flowRuntime_umd.param("req", flowRuntime_umd.ref("object")), flowRuntime_umd.param("res", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("middlewares", flowRuntime_umd.array(flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))))), flowRuntime_umd.property("handlers", flowRuntime_umd.array(flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))))), flowRuntime_umd.method("responseFormats", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.property("routerName", flowRuntime_umd.string()), flowRuntime_umd.staticMethod("compose", flowRuntime_umd.param("middlewares", flowRuntime_umd.array(flowRuntime_umd["function"]())), flowRuntime_umd.param("handlers", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.array(flowRuntime_umd["function"]())))), flowRuntime_umd["return"](flowRuntime_umd["function"](flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), flowRuntime_umd.staticMethod("createMethod", flowRuntime_umd.param("methodName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("del", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$f)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("onRegister"), flowRuntime_umd.method("onRemove"), flowRuntime_umd.method("use", flowRuntime_umd.param("index", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd["function"]())), flowRuntime_umd.param("middleware", flowRuntime_umd.nullable(flowRuntime_umd["function"]())), flowRuntime_umd["return"](flowRuntime_umd.ref(SwitchInterface$4))), flowRuntime_umd.method("callback", flowRuntime_umd["return"](flowRuntime_umd["function"](flowRuntime_umd.param("req", flowRuntime_umd.ref("object")), flowRuntime_umd.param("res", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), flowRuntime_umd.method("handleStatistics", flowRuntime_umd.param("reqLength", flowRuntime_umd.number()), flowRuntime_umd.param("resLength", flowRuntime_umd.number()), flowRuntime_umd.param("time", flowRuntime_umd.number()), flowRuntime_umd.param("aoContext", flowRuntime_umd.ref(ContextInterface$9))), flowRuntime_umd.method("onerror", flowRuntime_umd.param("err", flowRuntime_umd.ref("Error")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("respond", flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("perform", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn.typeParameter("R", undefined, T);

    var L = _fn.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$5, flowRuntime_umd.ref(AxiosResponse$5, T, R)));

    return [flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref(Config$3, flowRuntime_umd.flowInto(T), flowRuntime_umd.flowInto(R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
  }), flowRuntime_umd.method("rendererFor", flowRuntime_umd.param("asFormat", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(ResourceRendererInterface$3))), flowRuntime_umd.method("sendHttpResponse", flowRuntime_umd.param("ctx", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd.param("aoData", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.param("resource", flowRuntime_umd.ref(ResourceInterface$5)), flowRuntime_umd.param("opts", flowRuntime_umd.ref(RouterRouteT$7)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("defineRoutes"), flowRuntime_umd.method("sender", flowRuntime_umd.param("resourceName", flowRuntime_umd.string()), flowRuntime_umd.param("aoMessage", flowRuntime_umd.exactObject(flowRuntime_umd.property("context", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd.property("reverse", flowRuntime_umd.string()))), flowRuntime_umd.param("route", flowRuntime_umd.ref(RouterRouteT$7)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("createNativeRoute", flowRuntime_umd.param("opts", flowRuntime_umd.ref(RouterRouteT$7)), flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Mediator) {
    _inherits(Switch, _Mediator);

    var _super = _createSuper(Switch);

    _createClass(Switch, [{
      key: "del",
      value: function del() {
        return this["delete"].apply(this, arguments);
      } // @public jsonRendererName: String
      // @public htmlRendererName: String
      // @public xmlRendererName: String
      // @public atomRendererName: String

    }, {
      key: "listNotificationInterests",
      value: function listNotificationInterests() {
        return [HANDLER_RESULT];
      }
    }, {
      key: "handleNotification",
      value: function handleNotification(aoNotification) {
        var vsName = aoNotification.getName();
        var voBody = aoNotification.getBody();
        var vsType = aoNotification.getType();

        switch (vsName) {
          case HANDLER_RESULT:
            this.getViewComponent().emit(vsType, voBody);
        }
      }
    }, {
      key: "onRegister",
      value: function onRegister() {
        var voEmitter = new EventEmitter();

        if (!_.isFunction(voEmitter.eventNames)) {
          var eventNames = this._eventNames = {};
          var FILTER = ['newListener', 'removeListener'];
          voEmitter.on('newListener', function (event, listener) {
            if (indexOf$1.call(FILTER, event) < 0) {
              if (eventNames[event] == null) {
                eventNames[event] = 0;
              }

              ++eventNames[event];
            }
          });
          voEmitter.on('removeListener', function (event, listener) {
            if (indexOf$1.call(FILTER, event) < 0) {
              if (eventNames[event] > 0) {
                --eventNames[event];
              }
            }
          });
        }

        if (voEmitter.listeners('error').length === 0) {
          voEmitter.on('error', this.onerror.bind(this));
        }

        this.setViewComponent(voEmitter);
        this.defineRoutes();
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        var voEmitter = this.getViewComponent();
        var eventNames = typeof voEmitter.eventNames === "function" ? voEmitter.eventNames() : Object.keys(this._eventNames || {});
        eventNames.forEach(function (eventName) {
          voEmitter.removeAllListeners(eventName);
        });
      }
    }, {
      key: "use",
      value: function use(index, middleware) {
        if (middleware == null) {
          middleware = index;
          index = null;
        }

        assert(_.isFunction(middleware), 'middleware or handler must be a function!');
        var middlewareName = middleware.name || '-';
        var _Module$NS$Pipes$NS$L = Module.NS.Pipes.NS.LogMessage,
            ERROR = _Module$NS$Pipes$NS$L.ERROR,
            DEBUG = _Module$NS$Pipes$NS$L.DEBUG,
            LEVELS = _Module$NS$Pipes$NS$L.LEVELS,
            SEND_TO_LOG = _Module$NS$Pipes$NS$L.SEND_TO_LOG;
        this.sendNotification(SEND_TO_LOG, "use ".concat(middlewareName), LEVELS[DEBUG]);

        if (index != null) {
          if (this.handlers[index] == null) {
            this.handlers[index] = [];
          }

          this.handlers[index].push(middleware);
        } else {
          this.middlewares.push(middleware);
        }

        return this;
      }
    }, {
      key: "callback",
      value: function callback() {
        var _this2 = this;

        if (this._composed == null) {
          this._composed = this.constructor.compose(this.middlewares, this.handlers);
        }

        var fn = this._composed;

        if (this._handler == null) {
          this._handler = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
              var t1, _Module$NS$Pipes$NS$L2, ERROR, DEBUG, LEVELS, SEND_TO_LOG, voContext, reqLength, resLength, time;

              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      t1 = Date.now();
                      _Module$NS$Pipes$NS$L2 = Module.NS.Pipes.NS.LogMessage, ERROR = _Module$NS$Pipes$NS$L2.ERROR, DEBUG = _Module$NS$Pipes$NS$L2.DEBUG, LEVELS = _Module$NS$Pipes$NS$L2.LEVELS, SEND_TO_LOG = _Module$NS$Pipes$NS$L2.SEND_TO_LOG;

                      _this2.sendNotification(SEND_TO_LOG, '>>>>>> START REQUEST HANDLING', LEVELS[DEBUG]);

                      res.statusCode = 404;
                      voContext = Context["new"](_this2, req, res);
                      _context.prev = 5;
                      _context.next = 8;
                      return fn(voContext);

                    case 8:
                      _this2.respond(voContext);

                      _context.next = 14;
                      break;

                    case 11:
                      _context.prev = 11;
                      _context.t0 = _context["catch"](5);
                      voContext.onerror(_context.t0);

                    case 14:
                      _this2.sendNotification(SEND_TO_LOG, '>>>>>> END REQUEST HANDLING', LEVELS[DEBUG]);

                      reqLength = voContext.request.length;
                      resLength = voContext.response.length;
                      time = Date.now() - t1;
                      _context.next = 20;
                      return _this2.handleStatistics(reqLength, resLength, time, voContext);

                    case 20:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, null, [[5, 11]]);
            }));

            return function (_x, _x2) {
              return _ref.apply(this, arguments);
            };
          }();
        }

        return this._handler;
      }
    }, {
      key: "handleStatistics",
      value: function () {
        var _handleStatistics = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(reqLength, resLength, time, aoContext) {
          var _Module$NS$Pipes$NS$L3, DEBUG, LEVELS, SEND_TO_LOG;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _Module$NS$Pipes$NS$L3 = Module.NS.Pipes.NS.LogMessage, DEBUG = _Module$NS$Pipes$NS$L3.DEBUG, LEVELS = _Module$NS$Pipes$NS$L3.LEVELS, SEND_TO_LOG = _Module$NS$Pipes$NS$L3.SEND_TO_LOG;
                  this.sendNotification(SEND_TO_LOG, "REQUEST LENGTH ".concat(reqLength, " byte RESPONSE LENGTH ").concat(resLength, " byte HANDLED BY ").concat(time, " ms"), LEVELS[DEBUG]);

                case 2:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function handleStatistics(_x3, _x4, _x5, _x6) {
          return _handleStatistics.apply(this, arguments);
        }

        return handleStatistics;
      }()
    }, {
      key: "onerror",
      value: function onerror(err) {
        assert(_.isError(err), "non-error thrown: ".concat(err));

        if (404 === err.status || err.expose) {
          return;
        }

        if (this.configs.silent) {
          return;
        }

        var msg = err.stack || String(err);
        var _Module$NS$Pipes$NS$L4 = Module.NS.Pipes.NS.LogMessage,
            ERROR = _Module$NS$Pipes$NS$L4.ERROR,
            DEBUG = _Module$NS$Pipes$NS$L4.DEBUG,
            LEVELS = _Module$NS$Pipes$NS$L4.LEVELS,
            SEND_TO_LOG = _Module$NS$Pipes$NS$L4.SEND_TO_LOG;
        this.sendNotification(SEND_TO_LOG, msg.replace(/^/gm, '  '), LEVELS[ERROR]);
      }
    }, {
      key: "respond",
      value: function respond(ctx) {
        if (ctx.respond === false) return;
        var body = ctx.body;
        var code = ctx.status;

        if (statuses.empty[code]) {
          ctx.body = null;
          return;
        }

        if ('HEAD' === ctx.method) {
          if (!ctx.headersSent && _.isObjectLike(body)) {
            ctx.length = Buffer.byteLength(JSON.stringify(body));
          }

          return;
        }

        if (body == null) {
          body = ctx.message || String(code);

          if (!ctx.headersSent) {
            ctx.type = 'text';
            ctx.length = Buffer.byteLength(body);
          }

          return;
        }

        if (_.isBuffer(body) || _.isString(body)) {
          return;
        }

        body = JSON.stringify(body != null ? body : null);

        if (!ctx.res.headersSent) {
          ctx.length = Buffer.byteLength(body);
        }
      }
    }, {
      key: "perform",
      value: function () {
        var _perform = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(methodName, url, options) {
          var fn, req, res, voContext, status, message, body, headers;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.sendNotification(SEND_TO_LOG, '>>>>>> START PERFORM-REQUEST HANDLING', LEVELS[DEBUG]);

                  if (this._composed == null) {
                    this._composed = this.constructor.compose(this.middlewares, this.handlers);
                  }

                  fn = this._composed;
                  req = {
                    method: methodName,
                    url: url,
                    headers: options.headers
                  };

                  if (options.body != null) {
                    req.body = options.data || options.body || options.form;
                    req.rawBody = new Buffer(JSON.stringify(req.body));
                  }

                  res = {
                    statusCode: 404
                  };
                  voContext = Context["new"](this, req, res);
                  voContext.isPerformExecution = true;
                  _context3.prev = 8;
                  _context3.next = 11;
                  return fn(voContext);

                case 11:
                  this.respond(voContext);
                  _context3.next = 17;
                  break;

                case 14:
                  _context3.prev = 14;
                  _context3.t0 = _context3["catch"](8);
                  voContext.onerror(_context3.t0);

                case 17:
                  status = res.statusCode, message = res.statusMessage, body = res.body, headers = res.headers;
                  this.sendNotification(SEND_TO_LOG, '>>>>>> END PERFORM-REQUEST HANDLING', LEVELS[DEBUG]);
                  return _context3.abrupt("return", {
                    status: status,
                    message: message,
                    headers: headers,
                    body: body
                  });

                case 20:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[8, 14]]);
        }));

        function perform(_x7, _x8, _x9) {
          return _perform.apply(this, arguments);
        }

        return perform;
      }()
    }, {
      key: "rendererFor",
      value: function rendererFor(asFormat) {
        var _this3 = this;

        if (this._renderers == null) {
          this._renderers = {};
        }

        if (this._renderers[asFormat] == null) {
          this._renderers[asFormat] = function (asFormat) {
            var voRenderer = _this3["".concat(asFormat, "RendererName")] != null ? _this3.facade.retrieveProxy(_this3["".concat(asFormat, "RendererName")]) : ResourceRenderer["new"]();
            return voRenderer;
          }(asFormat);
        }

        return this._renderers[asFormat];
      }
    }, {
      key: "sendHttpResponse",
      value: function () {
        var _sendHttpResponse = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(ctx, aoData, resource, opts) {
          var vsFormat, voRenderer;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (opts.action === 'create') {
                    ctx.status = 201;
                  }

                  if (!((ctx.headers && ctx.headers.accept || undefined) == null)) {
                    _context4.next = 3;
                    break;
                  }

                  return _context4.abrupt("return");

                case 3:
                  vsFormat = ctx.accepts(this.responseFormats);
                  _context4.t0 = vsFormat;
                  _context4.next = _context4.t0 === false ? 7 : 8;
                  break;

                case 7:
                  return _context4.abrupt("break", 13);

                case 8:
                  if (!(this["".concat(vsFormat, "RendererName")] != null)) {
                    _context4.next = 13;
                    break;
                  }

                  voRenderer = this.rendererFor(vsFormat);
                  _context4.next = 12;
                  return voRenderer.render(ctx, aoData, resource, opts);

                case 12:
                  ctx.body = _context4.sent;

                case 13:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function sendHttpResponse(_x10, _x11, _x12, _x13) {
          return _sendHttpResponse.apply(this, arguments);
        }

        return sendHttpResponse;
      }()
    }, {
      key: "defineRoutes",
      value: function defineRoutes() {
        var _this4 = this;

        var voRouter = this.facade.retrieveProxy(this.routerName || APPLICATION_ROUTER);
        voRouter.routes.forEach(function (aoRoute) {
          return _this4.createNativeRoute(aoRoute);
        });
      }
    }, {
      key: "sender",
      value: function sender(resourceName, aoMessage, // { method: methodName, path, resource, action }: RouterRouteT
      route) {
        this.sendNotification(resourceName, aoMessage, route.action);
      }
    }, {
      key: "createNativeRoute",
      value: function createNativeRoute(opts) {
        var _this5 = this;

        var methodName = opts.method,
            path = opts.path;
        var resourceName = inflect.camelize(inflect.underscore("".concat(opts.resource.replace(/[\/]/g, '_'), "Resource")));

        if (typeof this[methodName] === "function") {
          this[methodName](path, /*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(context) {
              return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      _context6.next = 2;
                      return Promise["new"](function (resolve, reject) {
                        try {
                          var reverse = genRandomAlphaNumbers(32);

                          _this5.getViewComponent().once(reverse, /*#__PURE__*/function () {
                            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref3) {
                              var error, result, resource;
                              return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                while (1) {
                                  switch (_context5.prev = _context5.next) {
                                    case 0:
                                      error = _ref3.error, result = _ref3.result, resource = _ref3.resource;

                                      if (!(error != null)) {
                                        _context5.next = 5;
                                        break;
                                      }

                                      console.log('>>>>>> ERROR AFTER RESOURCE', error);
                                      reject(error);
                                      return _context5.abrupt("return");

                                    case 5:
                                      _context5.prev = 5;
                                      _context5.next = 8;
                                      return _this5.sendHttpResponse(context, result, resource, opts);

                                    case 8:
                                      resolve();
                                      _context5.next = 14;
                                      break;

                                    case 11:
                                      _context5.prev = 11;
                                      _context5.t0 = _context5["catch"](5);
                                      reject(_context5.t0);

                                    case 14:
                                    case "end":
                                      return _context5.stop();
                                  }
                                }
                              }, _callee5, null, [[5, 11]]);
                            }));

                            return function (_x15) {
                              return _ref4.apply(this, arguments);
                            };
                          }());

                          _this5.sender(resourceName, {
                            context: context,
                            reverse: reverse
                          }, opts);
                        } catch (err) {
                          reject(err);
                        }
                      });

                    case 2:
                      return _context6.abrupt("return", true);

                    case 3:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6);
            }));

            return function (_x14) {
              return _ref2.apply(this, arguments);
            };
          }());
        }
      }
    }, {
      key: "responseFormats",
      // iphEventNames = PointerT @private eventNames: Object
      // ipoHttpServer = PointerT(Switch.private({
      // ipoRenderers = PointerT(Switch.private({
      get: function get() {
        return ['json', 'html', 'xml', 'atom', 'text'];
      }
    }], [{
      key: "compose",
      value: function compose(middlewares, handlers) {
        assert(_.isArray(middlewares), 'Middleware stack must be an array!');
        assert(_.isArray(handlers), 'Handlers stack must be an array!');
        return flowRuntime_umd.annotate( /*#__PURE__*/function () {
          var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(context) {
            var _iterator, _step, middleware, runned, _iterator2, _step2, handlerGroup, _iterator3, _step3, handler;

            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _iterator = _createForOfIteratorHelper(middlewares);
                    _context7.prev = 1;

                    _iterator.s();

                  case 3:
                    if ((_step = _iterator.n()).done) {
                      _context7.next = 10;
                      break;
                    }

                    middleware = _step.value;
                    assert(_.isFunction(middleware), 'Middleware must be composed of functions!');
                    _context7.next = 8;
                    return middleware(context);

                  case 8:
                    _context7.next = 3;
                    break;

                  case 10:
                    _context7.next = 15;
                    break;

                  case 12:
                    _context7.prev = 12;
                    _context7.t0 = _context7["catch"](1);

                    _iterator.e(_context7.t0);

                  case 15:
                    _context7.prev = 15;

                    _iterator.f();

                    return _context7.finish(15);

                  case 18:
                    runned = false;
                    _iterator2 = _createForOfIteratorHelper(handlers);
                    _context7.prev = 20;

                    _iterator2.s();

                  case 22:
                    if ((_step2 = _iterator2.n()).done) {
                      _context7.next = 51;
                      break;
                    }

                    handlerGroup = _step2.value;

                    if (!(handlerGroup == null)) {
                      _context7.next = 26;
                      break;
                    }

                    return _context7.abrupt("continue", 49);

                  case 26:
                    _iterator3 = _createForOfIteratorHelper(handlerGroup);
                    _context7.prev = 27;

                    _iterator3.s();

                  case 29:
                    if ((_step3 = _iterator3.n()).done) {
                      _context7.next = 39;
                      break;
                    }

                    handler = _step3.value;
                    assert(_.isFunction(handler), 'Handler must be composed of functions!');
                    _context7.next = 34;
                    return handler(context);

                  case 34:
                    if (!_context7.sent) {
                      _context7.next = 37;
                      break;
                    }

                    runned = true;
                    return _context7.abrupt("break", 39);

                  case 37:
                    _context7.next = 29;
                    break;

                  case 39:
                    _context7.next = 44;
                    break;

                  case 41:
                    _context7.prev = 41;
                    _context7.t1 = _context7["catch"](27);

                    _iterator3.e(_context7.t1);

                  case 44:
                    _context7.prev = 44;

                    _iterator3.f();

                    return _context7.finish(44);

                  case 47:
                    if (!runned) {
                      _context7.next = 49;
                      break;
                    }

                    return _context7.abrupt("break", 51);

                  case 49:
                    _context7.next = 22;
                    break;

                  case 51:
                    _context7.next = 56;
                    break;

                  case 53:
                    _context7.prev = 53;
                    _context7.t2 = _context7["catch"](20);

                    _iterator2.e(_context7.t2);

                  case 56:
                    _context7.prev = 56;

                    _iterator2.f();

                    return _context7.finish(56);

                  case 59:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, null, [[1, 12, 15, 18], [20, 53, 56, 59], [27, 41, 44, 47]]);
          }));

          return function (_x16) {
            return _ref5.apply(this, arguments);
          };
        }(), flowRuntime_umd["function"](flowRuntime_umd.param("context", flowRuntime_umd.ref(ContextInterface$9)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))));
      }
    }, {
      key: "createMethod",
      value: function createMethod(methodName) {
        var _this6 = this;

        var originMethodName = methodName || 'all';

        if (methodName) {
          methodName = methodName.toUpperCase();
        }

        Reflect.defineProperty(this.prototype, "".concat(originMethodName), method(this.prototype, "".concat(originMethodName), {
          value: flowRuntime_umd.annotate(function (path, routeFunc) {
            assert(!!routeFunc, 'handler is required');
            var facade = _this6.facade;
            var _Module$NS$Pipes$NS$L5 = Module.NS.Pipes.NS.LogMessage,
                ERROR = _Module$NS$Pipes$NS$L5.ERROR,
                DEBUG = _Module$NS$Pipes$NS$L5.DEBUG,
                LEVELS = _Module$NS$Pipes$NS$L5.LEVELS,
                SEND_TO_LOG = _Module$NS$Pipes$NS$L5.SEND_TO_LOG;
            var keys = [];
            var re = pathToRegexp(path, keys);
            facade.sendNotification(SEND_TO_LOG, "".concat(methodName != null ? methodName : 'ALL', " ").concat(path, " -> ").concat(re), LEVELS[DEBUG]);

            _this6.use(keys.length, /*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(ctx) {
                var m, pathParams;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        if (matches(ctx, methodName)) {
                          _context8.next = 2;
                          break;
                        }

                        return _context8.abrupt("return");

                      case 2:
                        m = re.exec(ctx.path);

                        if (!m) {
                          _context8.next = 11;
                          break;
                        }

                        pathParams = m.slice(1).map(decode$2).reduce(function (prev, item, index) {
                          prev[keys[index].name] = item;
                          return prev;
                        }, {});
                        ctx.routePath = path;
                        facade.sendNotification(SEND_TO_LOG, "".concat(ctx.method, " ").concat(path, " matches ").concat(ctx.path, " ").concat(JSON.stringify(pathParams)), LEVELS[DEBUG]);
                        ctx.pathParams = pathParams;
                        _context8.next = 10;
                        return routeFunc.call(_this6, ctx);

                      case 10:
                        return _context8.abrupt("return", _context8.sent);

                      case 11:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8);
              }));

              return function (_x17) {
                return _ref6.apply(this, arguments);
              };
            }());
          }, flowRuntime_umd["function"](flowRuntime_umd.param("path", flowRuntime_umd.string()), flowRuntime_umd.param("routeFunc", flowRuntime_umd["function"]())))
        }));
      }
    }]);

    function Switch() {
      var _this;

      _classCallCheck(this, Switch);

      _this = _super.apply(this, arguments);

      _initializerDefineProperty(_this, "_eventNames", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_httpServer", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_renderers", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_composed", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_handler", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "middlewares", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "handlers", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "routerName", _descriptor8, _assertThisInitialized(_this));

      _this._renderers = {};
      _this.middlewares = [];
      _this.handlers = [];
      return _this;
    }

    return Switch;
  }(Mediator), _class3.__filename = __filename$1h, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_eventNames", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_httpServer", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_renderers", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_composed", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_handler", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "middlewares", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "handlers", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "responseFormats", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "responseFormats"), _class2.prototype), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "routerName", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return APPLICATION_ROUTER;
    }
  }), _applyDecoratedDescriptor(_class2, "compose", [method], Object.getOwnPropertyDescriptor(_class2, "compose"), _class2), _applyDecoratedDescriptor(_class2, "createMethod", [method], Object.getOwnPropertyDescriptor(_class2, "createMethod"), _class2), _applyDecoratedDescriptor(_class2.prototype, "del", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "del"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "use", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "use"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "callback", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "callback"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleStatistics", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleStatistics"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onerror", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onerror"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "respond", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "respond"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "perform", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "perform"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rendererFor", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rendererFor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendHttpResponse", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendHttpResponse"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defineRoutes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defineRoutes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sender", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sender"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "createNativeRoute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createNativeRoute"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
  METHODS.forEach(function (methodName) {
    // console.log 'SWITCH:', @
    Switch.createMethod(methodName);
  });
  Switch.createMethod(); // create 'all'
});

var __filename$1i = '/leanes/patterns/command/Resource.js';

var ResourceListResultT$3 = flowRuntime_umd.tdz(function () {
  return ResourceListResultT;
});
var ResourceInterface$6 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ContextInterface$a = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var RecordInterface$l = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$c = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var NotificationInterface$g = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var slice$6 = [].slice;
var ResourceTF = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3, _temp;

  var _Module$NS = Module.NS,
      HANDLER_RESULT = _Module$NS.HANDLER_RESULT,
      DELAYED_JOBS_QUEUE = _Module$NS.DELAYED_JOBS_QUEUE,
      RESQUE = _Module$NS.RESQUE,
      MIGRATIONS = _Module$NS.MIGRATIONS,
      SimpleCommand = _Module$NS.SimpleCommand,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      action = _Module$NS.action,
      chains = _Module$NS.chains,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      assign = _Module$NS$Utils.assign,
      statuses = _Module$NS$Utils.statuses;
  var HTTP_NOT_FOUND = statuses('not found');
  var UNAUTHORIZED = statuses('unauthorized');
  var FORBIDDEN = statuses('forbidden');
  var UPGRADE_REQUIRED = statuses('upgrade required');
  var Resource = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Resource", function (Resource) {
    var D = Resource.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$l));
    return [flowRuntime_umd["extends"](SimpleCommand), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("entityName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.property("needsLimitation", flowRuntime_umd["boolean"]()), flowRuntime_umd.method("checkApiVersion", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("setOwnerId", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("protectOwnerId", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("filterOwnerByCurrentUser", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("checkOwner", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("checkExistence", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("adminOnly", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("checkSchemaVersion", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("keyName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("itemEntityName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("listEntityName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("collectionName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("collection", flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$c, D))), flowRuntime_umd.property("context", flowRuntime_umd.nullable(flowRuntime_umd.ref(ContextInterface$a))), flowRuntime_umd.property("listQuery", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("recordId", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("recordBody", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("actionResult", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("actions", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("list", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ResourceListResultT$3)))), flowRuntime_umd.method("detail", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("create", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("update", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("delete", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("destroy", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("beforeActionHook", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("getQuery", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("getRecordId", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("getRecordBody", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("omitBody", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("beforeUpdate", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("doAction", flowRuntime_umd.param("asAction", flowRuntime_umd.string()), flowRuntime_umd.param("context", flowRuntime_umd.ref(ContextInterface$a)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("writeTransaction", flowRuntime_umd.param("asAction", flowRuntime_umd.string()), flowRuntime_umd.param("aoContext", flowRuntime_umd.ref(ContextInterface$a)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("saveDelayeds", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$g)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))];
  })), _dec2 = chains(['list', 'detail', 'create', 'update', 'delete', 'destroy'], function () {
    this.initialHook('beforeActionHook');
    this.beforeHook('getQuery', {
      only: ['list']
    });
    this.beforeHook('getRecordId', {
      only: ['detail', 'update', 'delete', 'destroy']
    });
    this.beforeHook('checkExistence', {
      only: ['detail', 'update', 'delete', 'destroy']
    });
    this.beforeHook('getRecordBody', {
      only: ['create', 'update']
    });
    this.beforeHook('omitBody', {
      only: ['create', 'update']
    });
    this.beforeHook('beforeUpdate', {
      only: ['update']
    });
  }), _dec3 = module(Module), _dec4 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_SimpleCommand) {
    _inherits(Resource, _SimpleCommand);

    var _super = _createSuper(Resource);

    _createClass(Resource, [{
      key: "checkApiVersion",
      value: function () {
        var _checkApiVersion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var semver,
              vCurrentVersion,
              vVersion,
              _ref,
              _ref2,
              vNeedVersion,
              _len,
              args,
              _key,
              _args = arguments;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  vVersion = this.context.pathParams.v;
                  vCurrentVersion = this.configs.version;
                  assert(vCurrentVersion != null, 'No `version` specified in the configuration');
                  _ref = vCurrentVersion.match(/^\d{1,}[.]\d{1,}/) || [], _ref2 = _slicedToArray(_ref, 1), vNeedVersion = _ref2[0];
                  assert(vNeedVersion != null, 'Incorrect `version` specified in the configuration');
                  semver = require('semver'); //TODO !!!!!

                  if (!semver.satisfies(vCurrentVersion, vVersion)) {
                    this.context["throw"](UPGRADE_REQUIRED, "Upgrade: v".concat(vCurrentVersion));
                  }

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  return _context.abrupt("return", args);

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function checkApiVersion() {
          return _checkApiVersion.apply(this, arguments);
        }

        return checkApiVersion;
      }()
    }, {
      key: "setOwnerId",
      value: function () {
        var _setOwnerId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _len2,
              args,
              _key2,
              _args2 = arguments;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.recordBody.ownerId = this.session.uid || null;

                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  return _context2.abrupt("return", args);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function setOwnerId() {
          return _setOwnerId.apply(this, arguments);
        }

        return setOwnerId;
      }()
    }, {
      key: "protectOwnerId",
      value: function () {
        var _protectOwnerId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var _len3,
              args,
              _key3,
              _args3 = arguments;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.recordBody = _.omit(this.recordBody, ['ownerId']);

                  for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args3[_key3];
                  }

                  return _context3.abrupt("return", args);

                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function protectOwnerId() {
          return _protectOwnerId.apply(this, arguments);
        }

        return protectOwnerId;
      }()
    }, {
      key: "filterOwnerByCurrentUser",
      value: function () {
        var _filterOwnerByCurrentUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var _len4,
              args,
              _key4,
              _args4 = arguments;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (!this.session.userIsAdmin) {
                    if (this.listQuery == null) {
                      this.listQuery = {};
                    }
                  }

                  if (this.listQuery.$filter != null) {
                    this.listQuery.$filter = {
                      $and: [this.listQuery.$filter, {
                        '@doc.ownerId': {
                          $eq: this.session.uid
                        }
                      }]
                    };
                  } else {
                    this.listQuery.$filter = {
                      '@doc.ownerId': {
                        $eq: this.session.uid
                      }
                    };
                  }

                  for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args4[_key4];
                  }

                  return _context4.abrupt("return", args);

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function filterOwnerByCurrentUser() {
          return _filterOwnerByCurrentUser.apply(this, arguments);
        }

        return filterOwnerByCurrentUser;
      }()
    }, {
      key: "checkOwner",
      value: function () {
        var _checkOwner = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          var _len5,
              args,
              _key5,
              key,
              doc,
              _args5 = arguments;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!(this.session.uid == null)) {
                    _context5.next = 3;
                    break;
                  }

                  this.context["throw"](UNAUTHORIZED);
                  return _context5.abrupt("return");

                case 3:
                  for (_len5 = _args5.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args[_key5] = _args5[_key5];
                  }

                  if (!this.session.userIsAdmin) {
                    _context5.next = 6;
                    break;
                  }

                  return _context5.abrupt("return", args);

                case 6:
                  key = this.context.pathParams[this.keyName];

                  if (!(key == null)) {
                    _context5.next = 9;
                    break;
                  }

                  return _context5.abrupt("return", args);

                case 9:
                  _context5.next = 11;
                  return this.collection.find(key);

                case 11:
                  doc = _context5.sent;

                  if (doc == null) {
                    this.context["throw"](HTTP_NOT_FOUND);
                  }

                  if (doc.ownerId) {
                    _context5.next = 15;
                    break;
                  }

                  return _context5.abrupt("return", args);

                case 15:
                  if (!(this.session.uid !== doc.ownerId)) {
                    _context5.next = 18;
                    break;
                  }

                  this.context["throw"](FORBIDDEN);
                  return _context5.abrupt("return");

                case 18:
                  return _context5.abrupt("return", args);

                case 19:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function checkOwner() {
          return _checkOwner.apply(this, arguments);
        }

        return checkOwner;
      }()
    }, {
      key: "checkExistence",
      value: function () {
        var _checkExistence = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var _len6,
              args,
              _key6,
              _args6 = arguments;

          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (this.recordId == null) {
                    this.context["throw"](HTTP_NOT_FOUND);
                  }

                  _context6.next = 3;
                  return this.collection.includes(this.recordId);

                case 3:
                  if (_context6.sent) {
                    _context6.next = 5;
                    break;
                  }

                  this.context["throw"](HTTP_NOT_FOUND);

                case 5:
                  for (_len6 = _args6.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = _args6[_key6];
                  }

                  return _context6.abrupt("return", args);

                case 7:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function checkExistence() {
          return _checkExistence.apply(this, arguments);
        }

        return checkExistence;
      }()
    }, {
      key: "adminOnly",
      value: function () {
        var _adminOnly = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
          var _len7,
              args,
              _key7,
              _args7 = arguments;

          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  if (!(this.session.uid == null)) {
                    _context7.next = 3;
                    break;
                  }

                  this.context["throw"](UNAUTHORIZED);
                  return _context7.abrupt("return");

                case 3:
                  if (this.session.userIsAdmin) {
                    _context7.next = 6;
                    break;
                  }

                  this.context["throw"](FORBIDDEN);
                  return _context7.abrupt("return");

                case 6:
                  for (_len7 = _args7.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                    args[_key7] = _args7[_key7];
                  }

                  return _context7.abrupt("return", args);

                case 8:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function adminOnly() {
          return _adminOnly.apply(this, arguments);
        }

        return adminOnly;
      }()
    }, {
      key: "checkSchemaVersion",
      value: function () {
        var _checkSchemaVersion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
          var voMigrations,
              migrationNames,
              _slice$call,
              _slice$call2,
              lastMigration,
              _len8,
              args,
              _key8,
              includes,
              _args8 = arguments;

          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  voMigrations = this.facade.retrieveProxy(MIGRATIONS);
                  migrationNames = this.Module.NS.MIGRATION_NAMES;
                  _slice$call = slice$6.call(migrationNames, -1), _slice$call2 = _slicedToArray(_slice$call, 1), lastMigration = _slice$call2[0];

                  for (_len8 = _args8.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                    args[_key8] = _args8[_key8];
                  }

                  if (!(lastMigration == null)) {
                    _context8.next = 6;
                    break;
                  }

                  return _context8.abrupt("return", args);

                case 6:
                  _context8.next = 8;
                  return voMigrations.includes(lastMigration);

                case 8:
                  includes = _context8.sent;

                  if (!includes) {
                    _context8.next = 13;
                    break;
                  }

                  return _context8.abrupt("return", args);

                case 13:
                  assert.fail('Code schema version is not equal current DB version');
                  return _context8.abrupt("return");

                case 15:
                  return _context8.abrupt("return", args);

                case 16:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function checkSchemaVersion() {
          return _checkSchemaVersion.apply(this, arguments);
        }

        return checkSchemaVersion;
      }()
    }, {
      key: "entityName",
      get: function get() {
        return assert.fail('Not implemented specific property');
      }
    }, {
      key: "keyName",
      get: function get() {
        return inflect.singularize(inflect.underscore(this.entityName));
      }
    }, {
      key: "itemEntityName",
      get: function get() {
        return inflect.singularize(inflect.underscore(this.entityName));
      }
    }, {
      key: "listEntityName",
      get: function get() {
        return inflect.pluralize(inflect.underscore(this.entityName));
      }
    }, {
      key: "collectionName",
      get: function get() {
        return "".concat(inflect.pluralize(inflect.camelize(this.entityName)), "Collection");
      }
    }, {
      key: "collection",
      get: function get() {
        return this.facade.retrieveProxy(this.collectionName);
      }
    }]);

    function Resource() {
      var _this;

      _classCallCheck(this, Resource);

      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "needsLimitation", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "context", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "listQuery", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "recordId", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "recordBody", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "actionResult", _descriptor6, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(Resource, [{
      key: "list",
      value: function () {
        var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
          var vlItems;
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.collection.takeAll();

                case 2:
                  _context9.next = 4;
                  return _context9.sent.toArray();

                case 4:
                  vlItems = _context9.sent;
                  return _context9.abrupt("return", {
                    meta: {
                      pagination: {
                        limit: 'not defined',
                        offset: 'not defined'
                      }
                    },
                    items: vlItems
                  });

                case 6:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function list() {
          return _list.apply(this, arguments);
        }

        return list;
      }()
    }, {
      key: "detail",
      value: function () {
        var _detail = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return this.collection.find(this.recordId);

                case 2:
                  return _context10.abrupt("return", _context10.sent);

                case 3:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function detail() {
          return _detail.apply(this, arguments);
        }

        return detail;
      }()
    }, {
      key: "create",
      value: function () {
        var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return this.collection.create(this.recordBody);

                case 2:
                  return _context11.abrupt("return", _context11.sent);

                case 3:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function create() {
          return _create.apply(this, arguments);
        }

        return create;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _context12.next = 2;
                  return this.collection.update(this.recordId, this.recordBody);

                case 2:
                  return _context12.abrupt("return", _context12.sent);

                case 3:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function update() {
          return _update.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: 'delete',
      value: function () {
        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _context13.next = 2;
                  return this.collection["delete"](this.recordId);

                case 2:
                  this.context.status = 204;

                case 3:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function _delete() {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "destroy",
      value: function () {
        var _destroy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _context14.next = 2;
                  return this.collection.destroy(this.recordId);

                case 2:
                  this.context.status = 204;

                case 3:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function destroy() {
          return _destroy.apply(this, arguments);
        }

        return destroy;
      }()
    }, {
      key: "beforeActionHook",
      value: function beforeActionHook() {
        for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          args[_key10] = arguments[_key10];
        }

        this.context = args[0];
        return args;
      }
    }, {
      key: "getQuery",
      value: function getQuery() {
        this.listQuery = JSON.parse(this.context.query['query'] || "{}");

        for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
          args[_key11] = arguments[_key11];
        }

        return args;
      }
    }, {
      key: "getRecordId",
      value: function getRecordId() {
        this.recordId = this.context.pathParams[this.keyName];

        for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
          args[_key12] = arguments[_key12];
        }

        return args;
      }
    }, {
      key: "getRecordBody",
      value: function getRecordBody() {
        var body = this.context.request.body;
        this.recordBody = body && body[this.itemEntityName] || undefined;

        for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
          args[_key13] = arguments[_key13];
        }

        return args;
      }
    }, {
      key: "omitBody",
      value: function omitBody() {
        this.recordBody = _.omit(this.recordBody, ['_id', '_rev', 'rev', 'type', '_type', '_owner', '_space', '_from', '_to']);
        var moduleName = this.collection.delegate.moduleName();
        var name = this.collection.delegate.name;
        this.recordBody.type = "".concat(moduleName, "::").concat(name);

        for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
          args[_key14] = arguments[_key14];
        }

        return args;
      }
    }, {
      key: "beforeUpdate",
      value: function beforeUpdate() {
        this.recordBody = assign({}, this.recordBody, {
          id: this.recordId
        });

        for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
          args[_key15] = arguments[_key15];
        }

        return args;
      }
    }, {
      key: "doAction",
      value: function () {
        var _doAction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(asAction, context) {
          var voResult;
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  _context15.next = 2;
                  return typeof this[asAction] === "function" ? this[asAction](context) : undefined;

                case 2:
                  voResult = _context15.sent;
                  this.actionResult = voResult;
                  _context15.next = 6;
                  return this.saveDelayeds();

                case 6:
                  return _context15.abrupt("return", voResult);

                case 7:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function doAction(_x, _x2) {
          return _doAction.apply(this, arguments);
        }

        return doAction;
      }()
    }, {
      key: "writeTransaction",
      value: function () {
        var _writeTransaction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(asAction, aoContext) {
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  return _context16.abrupt("return", aoContext.method.toUpperCase() !== 'GET');

                case 1:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16);
        }));

        function writeTransaction(_x3, _x4) {
          return _writeTransaction.apply(this, arguments);
        }

        return writeTransaction;
      }()
    }, {
      key: "saveDelayeds",
      value: function () {
        var _saveDelayeds = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
          var resque, _iterator, _step, delayed, queueName, scriptName, data, delay, queue;

          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  resque = this.facade.retrieveProxy(RESQUE);
                  _context17.t0 = _createForOfIteratorHelper;
                  _context17.next = 4;
                  return resque.getDelayed();

                case 4:
                  _context17.t1 = _context17.sent;
                  _iterator = (0, _context17.t0)(_context17.t1);
                  _context17.prev = 6;

                  _iterator.s();

                case 8:
                  if ((_step = _iterator.n()).done) {
                    _context17.next = 18;
                    break;
                  }

                  delayed = _step.value;
                  queueName = delayed.queueName, scriptName = delayed.scriptName, data = delayed.data, delay = delayed.delay;
                  _context17.next = 13;
                  return resque.get(queueName || DELAYED_JOBS_QUEUE);

                case 13:
                  queue = _context17.sent;
                  _context17.next = 16;
                  return queue.push(scriptName, data, delay);

                case 16:
                  _context17.next = 8;
                  break;

                case 18:
                  _context17.next = 23;
                  break;

                case 20:
                  _context17.prev = 20;
                  _context17.t2 = _context17["catch"](6);

                  _iterator.e(_context17.t2);

                case 23:
                  _context17.prev = 23;

                  _iterator.f();

                  return _context17.finish(23);

                case 26:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this, [[6, 20, 23, 26]]);
        }));

        function saveDelayeds() {
          return _saveDelayeds.apply(this, arguments);
        }

        return saveDelayeds;
      }()
    }, {
      key: "execute",
      value: function () {
        var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(aoNotification) {
          var voResult, _Module$NS$Pipes$NS$L, ERROR, DEBUG, LEVELS, SEND_TO_LOG, resourceName, voBody, vsAction;

          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  _Module$NS$Pipes$NS$L = Module.NS.Pipes.NS.LogMessage, ERROR = _Module$NS$Pipes$NS$L.ERROR, DEBUG = _Module$NS$Pipes$NS$L.DEBUG, LEVELS = _Module$NS$Pipes$NS$L.LEVELS, SEND_TO_LOG = _Module$NS$Pipes$NS$L.SEND_TO_LOG;
                  resourceName = aoNotification.getName();
                  voBody = aoNotification.getBody();
                  vsAction = aoNotification.getType();
                  _context18.prev = 4;
                  this.sendNotification(SEND_TO_LOG, '>>>>>>>>>>>>>> EXECUTION START', LEVELS[DEBUG]);
                  _context18.next = 8;
                  return this.doAction(vsAction, voBody.context);

                case 8:
                  _context18.t0 = _context18.sent;
                  _context18.t1 = this;
                  voResult = {
                    result: _context18.t0,
                    resource: _context18.t1
                  };
                  this.sendNotification(SEND_TO_LOG, '>>>>>>>>>>>>>> EXECUTION END', LEVELS[DEBUG]);
                  _context18.next = 17;
                  break;

                case 14:
                  _context18.prev = 14;
                  _context18.t2 = _context18["catch"](4);
                  voResult = {
                    error: _context18.t2,
                    resource: this
                  };

                case 17:
                  this.sendNotification(HANDLER_RESULT, voResult, voBody.reverse);

                case 18:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this, [[4, 14]]);
        }));

        function execute(_x5) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }], [{
      key: "actions",
      get: function get() {
        return this.metaObject.getGroup('actions', false);
      }
    }]);

    return Resource;
  }(SimpleCommand), _class3.__filename = __filename$1i, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "entityName", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "entityName"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "needsLimitation", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "checkApiVersion", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "checkApiVersion"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setOwnerId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setOwnerId"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "protectOwnerId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "protectOwnerId"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "filterOwnerByCurrentUser", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "filterOwnerByCurrentUser"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "checkOwner", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "checkOwner"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "checkExistence", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "checkExistence"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adminOnly", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "adminOnly"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "checkSchemaVersion", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "checkSchemaVersion"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "keyName", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "keyName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "itemEntityName", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "itemEntityName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "listEntityName", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "listEntityName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "collectionName", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "collectionName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "collection", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "collection"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "context", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listQuery", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "recordId", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "recordBody", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "actionResult", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2, "actions", [property], Object.getOwnPropertyDescriptor(_class2, "actions"), _class2), _applyDecoratedDescriptor(_class2.prototype, "list", [action], Object.getOwnPropertyDescriptor(_class2.prototype, "list"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "detail", [action], Object.getOwnPropertyDescriptor(_class2.prototype, "detail"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "create", [action], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "update", [action], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'delete', [action], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destroy", [action], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "beforeActionHook", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeActionHook"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getQuery", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getQuery"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getRecordId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getRecordId"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getRecordBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "getRecordBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "omitBody", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "omitBody"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "beforeUpdate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeUpdate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "doAction", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "doAction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "writeTransaction", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "writeTransaction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "saveDelayeds", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "saveDelayeds"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class) || _class);
});

var __filename$1j = '/leanes/patterns/command/MigrateCommand.js';

var NotificationInterface$h = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var RecordInterface$m = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$d = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var MigrateCommandTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      STOPPED_MIGRATE = _Module$NS.STOPPED_MIGRATE,
      MIGRATIONS = _Module$NS.MIGRATIONS,
      SimpleCommand = _Module$NS.SimpleCommand,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  var MigrateCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("MigrateCommand", function (MigrateCommand) {
    var D = MigrateCommand.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$m));
    return [flowRuntime_umd["extends"](SimpleCommand), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("migrationsCollection", flowRuntime_umd.ref(CollectionInterface$d, flowRuntime_umd.flowInto(D))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("migrationNames", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("migrationsDir", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("initializeNotifier", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$h))), flowRuntime_umd.method("migrate", flowRuntime_umd.param("options", flowRuntime_umd.exactObject(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Error"))))];
  })), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_SimpleCommand) {
    _inherits(MigrateCommand, _SimpleCommand);

    var _super = _createSuper(MigrateCommand);

    function MigrateCommand() {
      var _this;

      _classCallCheck(this, MigrateCommand);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "migrationsCollection", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(MigrateCommand, [{
      key: "initializeNotifier",
      value: function initializeNotifier() {
        var _get2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get2 = _get(_getPrototypeOf(MigrateCommand.prototype), "initializeNotifier", this)).call.apply(_get2, [this].concat(args));

        this.migrationsCollection = this.facade.getProxy(MIGRATIONS);
      }
    }, {
      key: "execute",
      value: function () {
        var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoNotification) {
          var voBody, vsType, error;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  voBody = aoNotification.getBody();
                  vsType = aoNotification.getType();
                  _context.next = 4;
                  return this.migrate(voBody || {});

                case 4:
                  error = _context.sent;
                  this.send(STOPPED_MIGRATE, {
                    error: error
                  }, vsType);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function execute(_x) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "migrate",
      value: function () {
        var _migrate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(options) {
          var voMigration, err, app, _iterator, _step, migrationName, id, clearedMigrationName, migrationClassName, vcMigration, type, msg;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  voMigration = null;
                  err = null;
                  app = this.facade.getMediator(APPLICATION_MEDIATOR).getViewComponent();
                  _iterator = _createForOfIteratorHelper(this.migrationNames);
                  _context2.prev = 4;

                  _iterator.s();

                case 6:
                  if ((_step = _iterator.n()).done) {
                    _context2.next = 38;
                    break;
                  }

                  migrationName = _step.value;
                  _context2.next = 10;
                  return this.migrationsCollection.includes(migrationName);

                case 10:
                  if (_context2.sent) {
                    _context2.next = 34;
                    break;
                  }

                  id = String(migrationName);
                  clearedMigrationName = migrationName.replace(/^\d{14}[_]/, '');
                  migrationClassName = inflect.camelize(clearedMigrationName);
                  vcMigration = app.Module.NS[migrationClassName];
                  type = "".concat(app.Module.name, "::").concat(migrationClassName);
                  _context2.prev = 16;
                  _context2.next = 19;
                  return this.migrationsCollection.find(id);

                case 19:
                  voMigration = _context2.sent;

                  if (!(voMigration == null)) {
                    _context2.next = 26;
                    break;
                  }

                  voMigration = vcMigration["new"]({
                    id: id,
                    type: type
                  }, this.migrationsCollection);
                  _context2.next = 24;
                  return voMigration.migrate(Module.NS.Migration.UP);

                case 24:
                  _context2.next = 26;
                  return voMigration.save();

                case 26:
                  _context2.next = 34;
                  break;

                case 28:
                  _context2.prev = 28;
                  _context2.t0 = _context2["catch"](16);
                  err = _context2.t0;
                  msg = "!!! Error in migration ".concat(migrationName);
                  console.error(msg, _context2.t0.message, _context2.t0.stack);
                  return _context2.abrupt("break", 38);

                case 34:
                  if (!((options != null ? options.until : undefined) != null && options.until === migrationName)) {
                    _context2.next = 36;
                    break;
                  }

                  return _context2.abrupt("break", 38);

                case 36:
                  _context2.next = 6;
                  break;

                case 38:
                  _context2.next = 43;
                  break;

                case 40:
                  _context2.prev = 40;
                  _context2.t1 = _context2["catch"](4);

                  _iterator.e(_context2.t1);

                case 43:
                  _context2.prev = 43;

                  _iterator.f();

                  return _context2.finish(43);

                case 46:
                  return _context2.abrupt("return", err);

                case 47:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[4, 40, 43, 46], [16, 28]]);
        }));

        function migrate(_x2) {
          return _migrate.apply(this, arguments);
        }

        return migrate;
      }()
    }, {
      key: "migrationNames",
      get: function get() {
        var app = this.facade.getMediator(APPLICATION_MEDIATOR).getViewComponent();
        return app.Module.NS.MIGRATION_NAMES || [];
      }
    }, {
      key: "migrationsDir",
      get: function get() {
        return "".concat(this.configs.ROOT, "/migrations");
      }
    }]);

    return MigrateCommand;
  }(SimpleCommand), _class3.__filename = __filename$1j, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "migrationsCollection", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "migrationNames", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationNames"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "migrationsDir", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationsDir"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeNotifier", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeNotifier"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$1k = '/leanes/patterns/command/RollbackCommand.js';

var NotificationInterface$i = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var RecordInterface$n = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$e = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var RollbackCommandTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      STOPPED_ROLLBACK = _Module$NS.STOPPED_ROLLBACK,
      MIGRATIONS = _Module$NS.MIGRATIONS,
      SimpleCommand = _Module$NS.SimpleCommand,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  var RollbackCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("RollbackCommand", function (RollbackCommand) {
    var D = RollbackCommand.typeParameter("D", undefined, flowRuntime_umd.ref(RecordInterface$n));
    return [flowRuntime_umd["extends"](SimpleCommand), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("migrationsCollection", flowRuntime_umd.ref(CollectionInterface$e, flowRuntime_umd.flowInto(D))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("migrationNames", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("migrationsDir", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("initializeNotifier", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$i))), flowRuntime_umd.method("rollback", flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Error"))))];
  })), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_SimpleCommand) {
    _inherits(RollbackCommand, _SimpleCommand);

    var _super = _createSuper(RollbackCommand);

    function RollbackCommand() {
      var _this;

      _classCallCheck(this, RollbackCommand);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _initializerDefineProperty(_this, "migrationsCollection", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(RollbackCommand, [{
      key: "initializeNotifier",
      value: function initializeNotifier() {
        var _get2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get2 = _get(_getPrototypeOf(RollbackCommand.prototype), "initializeNotifier", this)).call.apply(_get2, [this].concat(args));

        this.migrationsCollection = this.facade.getProxy(MIGRATIONS);
      }
    }, {
      key: "execute",
      value: function () {
        var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoNotification) {
          var voBody, vsType, error;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  voBody = aoNotification.getBody();
                  vsType = aoNotification.getType();
                  _context.next = 4;
                  return this.rollback(voBody || {});

                case 4:
                  error = _context.sent;
                  this.send(STOPPED_ROLLBACK, {
                    error: error
                  }, vsType);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function execute(_x) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "rollback",
      value: function () {
        var _rollback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(options) {
          var executedMigrations, err, _iterator, _step, executedMigration, msg;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  executedMigrations = null;
                  err = null;

                  if (!((options != null ? options.steps : undefined) != null && !_.isNumber(options.steps))) {
                    _context2.next = 5;
                    break;
                  }

                  throw new Error('Not valid steps params');

                case 5:
                  _context2.next = 7;
                  return this.migrationsCollection.takeAll();

                case 7:
                  _context2.next = 9;
                  return _context2.sent.toArray();

                case 9:
                  executedMigrations = _context2.sent;
                  executedMigrations = _.orderBy(executedMigrations, ['id'], ['desc']);
                  executedMigrations = executedMigrations.slice(0, options.steps || 1);
                  _iterator = _createForOfIteratorHelper(executedMigrations);
                  _context2.prev = 13;

                  _iterator.s();

                case 15:
                  if ((_step = _iterator.n()).done) {
                    _context2.next = 34;
                    break;
                  }

                  executedMigration = _step.value;
                  _context2.prev = 17;
                  _context2.next = 20;
                  return executedMigration.migrate(Module.NS.Migration.DOWN);

                case 20:
                  _context2.next = 22;
                  return executedMigration.destroy();

                case 22:
                  _context2.next = 30;
                  break;

                case 24:
                  _context2.prev = 24;
                  _context2.t0 = _context2["catch"](17);
                  err = _context2.t0;
                  msg = "!!! Error in migration ".concat(executedMigration);
                  console.error(msg, _context2.t0.message, _context2.t0.stack);
                  return _context2.abrupt("break", 34);

                case 30:
                  if (!((options != null ? options.until : undefined) != null && options.until === executedMigration.id)) {
                    _context2.next = 32;
                    break;
                  }

                  return _context2.abrupt("break", 34);

                case 32:
                  _context2.next = 15;
                  break;

                case 34:
                  _context2.next = 39;
                  break;

                case 36:
                  _context2.prev = 36;
                  _context2.t1 = _context2["catch"](13);

                  _iterator.e(_context2.t1);

                case 39:
                  _context2.prev = 39;

                  _iterator.f();

                  return _context2.finish(39);

                case 42:
                  return _context2.abrupt("return", err);

                case 43:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[13, 36, 39, 42], [17, 24]]);
        }));

        function rollback(_x2) {
          return _rollback.apply(this, arguments);
        }

        return rollback;
      }()
    }, {
      key: "migrationNames",
      get: function get() {
        var app = this.facade.getMediator(APPLICATION_MEDIATOR).getViewComponent();
        return app.Module.NS.MIGRATION_NAMES || [];
      }
    }, {
      key: "migrationsDir",
      get: function get() {
        return "".concat(this.configs.ROOT, "/migrations");
      }
    }]);

    return RollbackCommand;
  }(SimpleCommand), _class3.__filename = __filename$1k, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "migrationsCollection", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "migrationNames", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationNames"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "migrationsDir", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationsDir"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initializeNotifier", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeNotifier"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rollback", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollback"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$1l = '/leanes/patterns/command/Script.js';

var ScriptInterface = flowRuntime_umd.type("ScriptInterface", flowRuntime_umd.object(flowRuntime_umd.property("body", flowRuntime_umd["function"](flowRuntime_umd.param("data", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))))));

var ScriptInterface$1 = flowRuntime_umd.tdz(function () {
  return ScriptInterface;
});
var NotificationInterface$j = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ScriptTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      JOB_RESULT = _Module$NS.JOB_RESULT,
      SimpleCommand = _Module$NS.SimpleCommand,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      _ = _Module$NS.Utils._;
  var Script = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Script", flowRuntime_umd["extends"](SimpleCommand), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("body", flowRuntime_umd.param("data", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$j)), flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_SimpleCommand) {
    _inherits(Script, _SimpleCommand);

    var _super = _createSuper(Script);

    function Script() {
      _classCallCheck(this, Script);

      return _super.apply(this, arguments);
    }

    _createClass(Script, [{
      key: "body",
      value: function () {
        var _body = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return");

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function body(_x) {
          return _body.apply(this, arguments);
        }

        return body;
      }()
    }, {
      key: "execute",
      value: function () {
        var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(aoNotification) {
          var voBody, reverse, voResult, result;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  voBody = aoNotification.getBody();
                  reverse = aoNotification.getType();
                  voResult = null;
                  _context2.prev = 3;
                  _context2.next = 6;
                  return this.body(voBody);

                case 6:
                  result = _context2.sent;
                  voResult = {
                    result: result
                  };
                  _context2.next = 15;
                  break;

                case 10:
                  _context2.prev = 10;
                  _context2.t0 = _context2["catch"](3);
                  _context2.t0.message = 'ERROR in Script::execute ' + _context2.t0.message;
                  console.error(_context2.t0);
                  voResult = {
                    error: _context2.t0
                  };

                case 15:
                  this.send(JOB_RESULT, voResult, reverse);

                case 16:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[3, 10]]);
        }));

        function execute(_x2) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }]);

    return Script;
  }(SimpleCommand), _class3.__filename = __filename$1l, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "body", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "body"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$1m = '/leanes/patterns/command/DelayedJobScript.js';

var RecoverableStaticInterface$3 = flowRuntime_umd.tdz(function () {
  return RecoverableStaticInterface;
});
var DelayedJobScriptTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      Proto = _Module$NS.Proto,
      Script = _Module$NS.Script,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var DelayedJobScript = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("DelayedJobScript", flowRuntime_umd["extends"](Script), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("body", flowRuntime_umd.param("aoData", flowRuntime_umd.object(flowRuntime_umd.property("moduleName", flowRuntime_umd.string()), flowRuntime_umd.property("replica", flowRuntime_umd.ref("object")), flowRuntime_umd.property("methodName", flowRuntime_umd.string()), flowRuntime_umd.property("args", flowRuntime_umd.array()))), flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Script) {
    _inherits(DelayedJobScript, _Script);

    var _super = _createSuper(DelayedJobScript);

    function DelayedJobScript() {
      _classCallCheck(this, DelayedJobScript);

      return _super.apply(this, arguments);
    }

    _createClass(DelayedJobScript, [{
      key: "body",
      value: function () {
        var _body = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(aoData) {
          var _replicated, _replicated2;

          var replicated, moduleName, replica, methodName, args, ApplicationModule, vcInstanceClass, _vcInstanceClassType2;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  moduleName = aoData.moduleName, replica = aoData.replica, methodName = aoData.methodName, args = aoData.args;
                  replica.multitonKey = this._multitonKey;
                  ApplicationModule = this.ApplicationModule;
                  assert(moduleName === ApplicationModule.name, "Job was defined with moduleName = `".concat(moduleName, "`, but its Module = `").concat(ApplicationModule.name, "`"));
                  _context.t0 = replica.type;
                  _context.next = _context.t0 === 'class' ? 7 : _context.t0 === 'instance' ? 13 : 22;
                  break;

                case 7:
                  _context.next = 9;
                  return Proto.restoreObject(ApplicationModule, replica);

                case 9:
                  replicated = _context.sent;
                  _context.next = 12;
                  return (_replicated = replicated)[methodName].apply(_replicated, _toConsumableArray(args));

                case 12:
                  return _context.abrupt("break", 23);

                case 13:
                  vcInstanceClass = ApplicationModule.NS[replica["class"]];
                  _vcInstanceClassType2 = flowRuntime_umd.ref(RecoverableStaticInterface$3, flowRuntime_umd.ref("Module"), flowRuntime_umd.ref(vcInstanceClass));
                  _context.next = 18;
                  return vcInstanceClass.restoreObject(ApplicationModule, replica);

                case 18:
                  replicated = _context.sent;
                  _context.next = 21;
                  return (_replicated2 = replicated)[methodName].apply(_replicated2, _toConsumableArray(args));

                case 21:
                  return _context.abrupt("break", 23);

                case 22:
                  throw new Error('Replica type must be `instance` or `class`');

                case 23:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function body(_x) {
          return _body.apply(this, arguments);
        }

        return body;
      }()
    }]);

    return DelayedJobScript;
  }(Script), _class3.__filename = __filename$1m, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "body", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "body"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$1n = '/leanes/mixins/ApplicationMediatorMixin.js';

var LegacyResponseInterface$6 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$6 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$4 = flowRuntime_umd.tdz(function () {
  return Config;
});
var ResourceInterface$7 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ContextInterface$b = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var NotificationInterface$k = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ApplicationMediatorMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      APPLICATION_SWITCH = _Module$NS.APPLICATION_SWITCH,
      HANDLER_RESULT = _Module$NS.HANDLER_RESULT,
      JOB_RESULT = _Module$NS.JOB_RESULT,
      STOPPED_MIGRATE = _Module$NS.STOPPED_MIGRATE,
      STOPPED_ROLLBACK = _Module$NS.STOPPED_ROLLBACK,
      MIGRATE = _Module$NS.MIGRATE,
      ROLLBACK = _Module$NS.ROLLBACK,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      genRandomAlphaNumbers = _Module$NS.Utils.genRandomAlphaNumbers;
  Module.defineMixin(__filename$1n, function (BaseClass) {
    var _dec, _class, _class2, _init, _descriptor, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("emitter", flowRuntime_umd.ref(EventEmitter)), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$k)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("migrate", flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("rollback", flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("run", flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.method("execute", function (_fn) {
      var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

      var R = _fn.typeParameter("R", undefined, flowRuntime_umd.ref("Promise", flowRuntime_umd.exactObject(flowRuntime_umd.property("result", T), flowRuntime_umd.property("resource", flowRuntime_umd.ref(ResourceInterface$7)))));

      return [flowRuntime_umd.param("resourceName", flowRuntime_umd.string()), flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("context", flowRuntime_umd.ref(ContextInterface$b)), flowRuntime_umd.property("reverse", flowRuntime_umd.string()))), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
    }), flowRuntime_umd.method("perform", function (_fn2) {
      var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any());

      var R = _fn2.typeParameter("R", undefined, T);

      var L = _fn2.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$6, flowRuntime_umd.ref(AxiosResponse$6, T, R)));

      return [flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref(Config$4, flowRuntime_umd.flowInto(T), flowRuntime_umd.flowInto(R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(L)))];
    }))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      _createClass(Mixin, [{
        key: "listNotificationInterests",
        value: function listNotificationInterests() {
          var _get2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var interests = (_get2 = _get(_getPrototypeOf(Mixin.prototype), "listNotificationInterests", this)).call.apply(_get2, [this].concat(args));

          interests.push(HANDLER_RESULT);
          interests.push(JOB_RESULT);
          interests.push(STOPPED_MIGRATE);
          interests.push(STOPPED_ROLLBACK);
          return interests;
        }
      }, {
        key: "handleNotification",
        value: function handleNotification(aoNotification) {
          var vsName = aoNotification.getName();
          var voBody = aoNotification.getBody();
          var vsType = aoNotification.getType();

          switch (vsName) {
            case HANDLER_RESULT:
            case STOPPED_MIGRATE:
            case STOPPED_ROLLBACK:
            case JOB_RESULT:
              this.emitter.emit(vsType, voBody);
              break;

            default:
              _get(_getPrototypeOf(Mixin.prototype), "handleNotification", this).call(this, aoNotification);

          }
        }
      }, {
        key: "migrate",
        value: function () {
          var _migrate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(opts) {
            var _this2 = this;

            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return new Promise(function (resolve, reject) {
                      // resolve('async migrate(opts)');
                      try {
                        var reverse = genRandomAlphaNumbers(32);

                        _this2.emitter.once(reverse, function (_ref) {
                          var error = _ref.error;

                          if (error != null) {
                            reject(error);
                            return;
                          }

                          resolve();
                        });

                        _this2.send(MIGRATE, opts, reverse);
                      } catch (err) {
                        reject(err);
                      }
                    });

                  case 2:
                    return _context.abrupt("return", _context.sent);

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function migrate(_x) {
            return _migrate.apply(this, arguments);
          }

          return migrate;
        }()
      }, {
        key: "rollback",
        value: function () {
          var _rollback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(opts) {
            var _this3 = this;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return new Promise(function (resolve, reject) {
                      // resolve();
                      try {
                        var reverse = genRandomAlphaNumbers(32);

                        _this3.emitter.once(reverse, function (_ref2) {
                          var error = _ref2.error;

                          if (error != null) {
                            reject(error);
                            return;
                          }

                          resolve();
                        });

                        _this3.send(ROLLBACK, opts, reverse);
                      } catch (err) {
                        reject(err);
                      }
                    });

                  case 2:
                    return _context2.abrupt("return", _context2.sent);

                  case 3:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function rollback(_x2) {
            return _rollback.apply(this, arguments);
          }

          return rollback;
        }()
      }, {
        key: "run",
        value: function () {
          var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(scriptName, data) {
            var _this4 = this;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return new Promise(function (resolve, reject) {
                      // resolve();
                      try {
                        var reverse = genRandomAlphaNumbers(32);

                        _this4.emitter.once(reverse, function (_ref3) {
                          var error = _ref3.error,
                              result = _ref3.result;

                          if (error != null) {
                            reject(error);
                            return;
                          }

                          resolve(result);
                        });

                        _this4.send(scriptName, data, reverse);
                      } catch (err) {
                        reject(err);
                      }
                    });

                  case 2:
                    return _context3.abrupt("return", _context3.sent);

                  case 3:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));

          function run(_x3, _x4) {
            return _run.apply(this, arguments);
          }

          return run;
        }()
      }, {
        key: "execute",
        value: function () {
          var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(resourceName, opts, action) {
            var _this5 = this;

            var context, reverse;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    context = opts.context, reverse = opts.reverse;
                    _context4.next = 3;
                    return new Promise(function (resolve, reject) {
                      // resolve();
                      try {
                        _this5.emitter.once(reverse, function (_ref4) {
                          var error = _ref4.error,
                              result = _ref4.result,
                              resource = _ref4.resource;

                          if (error != null) {
                            reject(error);
                            return;
                          }

                          resolve({
                            result: result,
                            resource: resource
                          });
                        });

                        _this5.send(resourceName, {
                          context: context,
                          reverse: reverse
                        }, action, null);
                      } catch (err) {
                        reject(err);
                      }
                    });

                  case 3:
                    return _context4.abrupt("return", _context4.sent);

                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          function execute(_x5, _x6, _x7) {
            return _execute.apply(this, arguments);
          }

          return execute;
        }()
      }, {
        key: "perform",
        value: function () {
          var _perform = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(methodName, url, options) {
            var appSwitch;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    appSwitch = this.facade.getMediator(APPLICATION_SWITCH);

                    if (!(appSwitch != null)) {
                      _context5.next = 9;
                      break;
                    }

                    _context5.next = 4;
                    return appSwitch.perform;

                  case 4:
                    _context5.t0 = _context5.sent;
                    _context5.t1 = T;
                    _context5.t0 < _context5.t1;
                    R;
                    return _context5.abrupt("return", L > (options));

                  case 9:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function perform(_x8, _x9, _x10) {
            return _perform.apply(this, arguments);
          }

          return perform;
        }()
      }]);

      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        _this = _super.apply(this, arguments);

        _initializerDefineProperty(_this, "emitter", _descriptor, _assertThisInitialized(_this));

        _this.emitter = new EventEmitter();
        return _this;
      }

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "emitter", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rollback", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollback"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "perform", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "perform"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$1o = '/leanes/mixins/MemoryExecutorMixin.js';

var hasProp$e = {}.hasOwnProperty;
var NotificationInterface$l = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var ResqueInterface$3 = flowRuntime_umd.tdz(function () {
  return ResqueInterface;
});
var MemoryExecutorMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      JOB_RESULT = _Module$NS.JOB_RESULT,
      START_RESQUE = _Module$NS.START_RESQUE,
      RESQUE = _Module$NS.RESQUE,
      RESQUE_EXECUTOR = _Module$NS.RESQUE_EXECUTOR,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      genRandomAlphaNumbers = _Module$NS$Utils.genRandomAlphaNumbers;
  Module.defineMixin(__filename$1o, function (BaseClass) {
    var _dec, _class, _class2, _init, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_timer", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.number()))), flowRuntime_umd.property("_isStopped", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("_definedProcessors", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.exactObject(flowRuntime_umd.property("listener", flowRuntime_umd["function"]()), flowRuntime_umd.property("concurrency", flowRuntime_umd.number()))))), flowRuntime_umd.property("_concurrencyCount", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd.property("_resque", flowRuntime_umd.ref(ResqueInterface$3)), flowRuntime_umd.method("fullQueueName", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$l))), flowRuntime_umd.method("onRegister", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("reDefineProcessors"), flowRuntime_umd.method("defineProcessors"), flowRuntime_umd.method("onRemove", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("cyclePart"), flowRuntime_umd.method("recursion"), flowRuntime_umd.method("start"), flowRuntime_umd.method("stop"), flowRuntime_umd.method("define", flowRuntime_umd.param("queueName", flowRuntime_umd.string()), flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("concurrency", flowRuntime_umd.number()))), flowRuntime_umd.param("lambda", flowRuntime_umd["function"]())))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        var _this;

        _classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _initializerDefineProperty(_this, "_timer", _descriptor, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "_isStopped", _descriptor2, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "_definedProcessors", _descriptor3, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "_concurrencyCount", _descriptor4, _assertThisInitialized(_this));

        _initializerDefineProperty(_this, "_resque", _descriptor5, _assertThisInitialized(_this));

        return _this;
      }

      _createClass(Mixin, [{
        key: "fullQueueName",
        value: function fullQueueName(queueName) {
          return this._resque.fullQueueName(queueName);
        }
      }, {
        key: "listNotificationInterests",
        value: function listNotificationInterests() {
          return [JOB_RESULT, START_RESQUE];
        }
      }, {
        key: "handleNotification",
        value: function handleNotification(aoNotification) {
          var vsName = aoNotification.getName();
          var voBody = aoNotification.getBody();
          var vsType = aoNotification.getType();

          switch (vsName) {
            case JOB_RESULT:
              this.getViewComponent().emit(vsType, voBody);
              break;

            case START_RESQUE:
              this.start();
          }
        }
      }, {
        key: "onRegister",
        value: function onRegister() {
          var _get2;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          (_get2 = _get(_getPrototypeOf(Mixin.prototype), "onRegister", this)).call.apply(_get2, [this].concat(args));

          this.setViewComponent(new EventEmitter());
          this._concurrencyCount = {};
          this._definedProcessors = {};
          this._resque = this.facade.getProxy(RESQUE);
          this.defineProcessors();
        }
      }, {
        key: "reDefineProcessors",
        value: function () {
          var _reDefineProcessors = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.stop();
                    this._definedProcessors = {};
                    _context.next = 4;
                    return this.defineProcessors();

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function reDefineProcessors() {
            return _reDefineProcessors.apply(this, arguments);
          }

          return reDefineProcessors;
        }()
      }, {
        key: "defineProcessors",
        value: function () {
          var _defineProcessors = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
            var self, ref, _iterator, _step, _step$value, name, concurrency, fullQueueName;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    self = this;
                    _context3.next = 3;
                    return this._resque.allQueues();

                  case 3:
                    ref = _context3.sent;
                    _iterator = _createForOfIteratorHelper(ref);
                    _context3.prev = 5;

                    _iterator.s();

                  case 7:
                    if ((_step = _iterator.n()).done) {
                      _context3.next = 14;
                      break;
                    }

                    _step$value = _step.value, name = _step$value.name, concurrency = _step$value.concurrency;
                    fullQueueName = this._resque.fullQueueName(name); // [let moduleName] = fullQueueName.split('|>');
                    //if (moduleName === this.moduleName()) {

                    this.define(name, {
                      concurrency: concurrency
                    }, /*#__PURE__*/function () {
                      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(job, done) {
                        var reverse, _job$data, scriptName, data;

                        return regeneratorRuntime.wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                reverse = genRandomAlphaNumbers(32);
                                self.getViewComponent().once(reverse, function (aoError) {
                                  return done(aoError);
                                });
                                _job$data = job.data, scriptName = _job$data.scriptName, data = _job$data.data;
                                self.send(scriptName, data, reverse);

                              case 4:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2);
                      }));

                      return function (_x, _x2) {
                        return _ref.apply(this, arguments);
                      };
                    }()); //}

                    return _context3.abrupt("continue", 12);

                  case 12:
                    _context3.next = 7;
                    break;

                  case 14:
                    _context3.next = 19;
                    break;

                  case 16:
                    _context3.prev = 16;
                    _context3.t0 = _context3["catch"](5);

                    _iterator.e(_context3.t0);

                  case 19:
                    _context3.prev = 19;

                    _iterator.f();

                    return _context3.finish(19);

                  case 22:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[5, 16, 19, 22]]);
          }));

          function defineProcessors() {
            return _defineProcessors.apply(this, arguments);
          }

          return defineProcessors;
        }()
      }, {
        key: "onRemove",
        value: function onRemove() {
          var _get3;

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          (_get3 = _get(_getPrototypeOf(Mixin.prototype), "onRemove", this)).call.apply(_get3, [this].concat(args));

          this.stop();
        }
      }, {
        key: "cyclePart",
        value: function () {
          var _cyclePart = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            var ref, queueName, _ref$queueName, listener, concurrency, currentQC, now, progressJobs, _iterator2, _step2, _job, pendingJobs, _iterator3, _step3, job;

            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    ref = this._definedProcessors;
                    _context4.t0 = regeneratorRuntime.keys(ref);

                  case 2:
                    if ((_context4.t1 = _context4.t0()).done) {
                      _context4.next = 38;
                      break;
                    }

                    queueName = _context4.t1.value;

                    if (hasProp$e.call(ref, queueName)) {
                      _context4.next = 6;
                      break;
                    }

                    return _context4.abrupt("continue", 2);

                  case 6:
                    _ref$queueName = ref[queueName], listener = _ref$queueName.listener, concurrency = _ref$queueName.concurrency;
                    currentQC = this._concurrencyCount[queueName];
                    now = Date.now();
                    _context4.next = 11;
                    return this._resque.progressJobs(queueName);

                  case 11:
                    progressJobs = _context4.sent;
                    _iterator2 = _createForOfIteratorHelper(progressJobs);

                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                        _job = _step2.value;

                        if (now - _job.startedAt < _job.lockLifetime) {
                          _job.status = 'scheduled';
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }

                    _context4.next = 16;
                    return this._resque.pendingJobs(queueName);

                  case 16:
                    pendingJobs = _context4.sent;

                    if (!(currentQC != null && currentQC < concurrency || currentQC == null)) {
                      _context4.next = 36;
                      break;
                    }

                    _iterator3 = _createForOfIteratorHelper(pendingJobs);
                    _context4.prev = 19;

                    _iterator3.s();

                  case 21:
                    if ((_step3 = _iterator3.n()).done) {
                      _context4.next = 28;
                      break;
                    }

                    job = _step3.value;

                    if (job.delayUntil < now) {
                      listener(job);
                    }

                    if (!(currentQC >= concurrency)) {
                      _context4.next = 26;
                      break;
                    }

                    return _context4.abrupt("break", 28);

                  case 26:
                    _context4.next = 21;
                    break;

                  case 28:
                    _context4.next = 33;
                    break;

                  case 30:
                    _context4.prev = 30;
                    _context4.t2 = _context4["catch"](19);

                    _iterator3.e(_context4.t2);

                  case 33:
                    _context4.prev = 33;

                    _iterator3.f();

                    return _context4.finish(33);

                  case 36:
                    _context4.next = 2;
                    break;

                  case 38:
                    this.recursion();

                  case 39:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this, [[19, 30, 33, 36]]);
          }));

          function cyclePart() {
            return _cyclePart.apply(this, arguments);
          }

          return cyclePart;
        }()
      }, {
        key: "recursion",
        value: function () {
          var _recursion = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
            var self;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    if (!this._isStopped) {
                      _context6.next = 2;
                      break;
                    }

                    return _context6.abrupt("return");

                  case 2:
                    self = this;
                    this._timer = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                      return regeneratorRuntime.wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              clearTimeout(self._timer);
                              _context5.next = 3;
                              return self.cyclePart();

                            case 3:
                              return _context5.abrupt("return", _context5.sent);

                            case 4:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5);
                    })), 100);

                  case 4:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function recursion() {
            return _recursion.apply(this, arguments);
          }

          return recursion;
        }()
      }, {
        key: "start",
        value: function () {
          var _start = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    this._isStopped = false;
                    _context7.next = 3;
                    return this.recursion();

                  case 3:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function start() {
            return _start.apply(this, arguments);
          }

          return start;
        }()
      }, {
        key: "stop",
        value: function stop() {
          this._isStopped = true;

          if (this._timer != null) {
            clearTimeout(this._timer);
          }
        }
      }, {
        key: "define",
        value: function define(queueName, opts, lambda) {
          var _this2 = this;

          var concurrency = opts.concurrency;

          var listener = function listener(job) {
            var base;

            var done = function done(err) {
              if (err != null) {
                job.status = 'failed';
                job.reason = err;
              } else {
                job.status = 'completed';
              }

              _this2._concurrencyCount[queueName] -= 1;
            };

            if ((base = _this2._concurrencyCount)[queueName] == null) {
              base[queueName] = 0;
            }

            _this2._concurrencyCount[queueName] += 1;
            job.status = 'running';
            job.startedAt = Date.now();
            lambda(job, done);
          };

          this._definedProcessors[queueName] = {
            listener: listener,
            concurrency: concurrency
          };
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_timer", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_isStopped", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return true;
      }
    }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_definedProcessors", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_concurrencyCount", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_resque", [property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _applyDecoratedDescriptor(_class2.prototype, "fullQueueName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "fullQueueName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRegister", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRegister"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reDefineProcessors", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reDefineProcessors"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defineProcessors", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "defineProcessors"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "onRemove"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "cyclePart", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "cyclePart"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "recursion", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recursion"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "start", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "start"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "stop", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "stop"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "define", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "define"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$1p = '/leanes/mixins/QueryableResourceMixin.js';

var ResourceListResultT$4 = flowRuntime_umd.tdz(function () {
  return ResourceListResultT;
});
var ContextInterface$c = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var QueryableResourceMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      action = _Module$NS.action,
      chains = _Module$NS.chains,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var MAX_LIMIT = 50;
  Module.defineMixin(__filename$1p, function (BaseClass) {
    var _dec, _dec2, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("writeTransaction", flowRuntime_umd.param("asAction", flowRuntime_umd.string()), flowRuntime_umd.param("aoContext", flowRuntime_umd.ref(ContextInterface$c)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("showNoHiddenByDefault", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("list", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ResourceListResultT$4)))), flowRuntime_umd.method("query", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array()))))), _dec2 = chains(['query', 'list'], function () {
      // this.initialHook('requiredAuthorizationHeader', {
      //   only: ['query']
      // });
      this.initialHook('parseBody', {
        only: ['query']
      });
      this.beforeHook('showNoHiddenByDefault', {
        only: ['list']
      });
    }), _dec(_class = initializeMixin(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "writeTransaction",
        value: function () {
          var _writeTransaction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(asAction, aoContext) {
            var result, parse, body, _ref, query, key;

            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return _get(_getPrototypeOf(Mixin.prototype), "writeTransaction", this).call(this, asAction, aoContext);

                  case 2:
                    result = _context.sent;

                    if (!result) {
                      _context.next = 11;
                      break;
                    }

                    if (!(asAction === 'query')) {
                      _context.next = 11;
                      break;
                    }

                    parse = require('co-body'); // TODO

                    _context.next = 8;
                    return parse(aoContext.req);

                  case 8:
                    body = _context.sent;
                    _ref = body != null ? body : {}, query = _ref.query;

                    if (query != null) {
                      key = _.findKey(query, function (v, k) {
                        return k === '$patch' || k === '$remove';
                      });
                      result = key != null;
                    }

                  case 11:
                    return _context.abrupt("return", result);

                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function writeTransaction(_x, _x2) {
            return _writeTransaction.apply(this, arguments);
          }

          return writeTransaction;
        }()
      }, {
        key: "showNoHiddenByDefault",
        value: function () {
          var _showNoHiddenByDefault = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
            var _len,
                args,
                _key,
                _args2 = arguments;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (this.listQuery == null) {
                      this.listQuery = {};
                    }

                    if (this.listQuery.$filter != null) {
                      if (!/.*\@doc\.isHidden.*/.test(JSON.stringify(this.listQuery.$filter))) {
                        this.listQuery.$filter = {
                          $and: [this.listQuery.$filter, {
                            '@doc.isHidden': false
                          }]
                        };
                      }
                    } else {
                      this.listQuery.$filter = {
                        '@doc.isHidden': false
                      };
                    }

                    for (_len = _args2.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = _args2[_key];
                    }

                    return _context2.abrupt("return", args);

                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function showNoHiddenByDefault() {
            return _showNoHiddenByDefault.apply(this, arguments);
          }

          return showNoHiddenByDefault;
        }()
      }, {
        key: "list",
        value: function () {
          var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
            var _this = this;

            var receivedQuery, voQuery, limit, skip, vlItems;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    receivedQuery = _.pick(this.listQuery, ['$filter', '$sort', '$limit', '$offset']);
                    voQuery = Module.NS.Query["new"]().forIn({
                      '@doc': this.collection.collectionFullName()
                    })["return"]('@doc');

                    if (receivedQuery.$filter) {
                      (function () {
                        var _joi$validate = joi.validate(receivedQuery.$filter, joi.object()),
                            error = _joi$validate.error;

                        if (error != null) {
                          return _this.context["throw"](400, 'ValidationError: `$filter` must be an object', error.stack);
                        }
                      })();

                      voQuery.filter(receivedQuery.$filter);
                    }

                    if (receivedQuery.$sort) {
                      (function () {
                        var _joi$validate2 = joi.validate(receivedQuery.$sort, joi.array().items(joi.object())),
                            error = _joi$validate2.error;

                        if (error != null) {
                          return _this.context["throw"](400, 'ValidationError: `$sort` must be an array');
                        }
                      })();

                      receivedQuery.$sort.forEach(function (item) {
                        return voQuery.sort(item);
                      });
                    }

                    if (receivedQuery.$limit) {
                      (function () {
                        var _joi$validate3 = joi.validate(receivedQuery.$limit, joi.number()),
                            error = _joi$validate3.error;

                        if (error != null) {
                          return _this.context["throw"](400, 'ValidationError: `$limit` must be a number', error.stack);
                        }
                      })();

                      voQuery.limit(receivedQuery.$limit);
                    }

                    if (receivedQuery.$offset) {
                      (function () {
                        var _joi$validate4 = joi.validate(receivedQuery.$offset, joi.number()),
                            error = _joi$validate4.error;

                        if (error != null) {
                          return _this.context["throw"](400, 'ValidationError: `$offset` must be a number', error.stack);
                        }
                      })();

                      voQuery.offset(receivedQuery.$offset);
                    }

                    limit = Number(voQuery.$limit);

                    if (this.needsLimitation) {
                      voQuery.limit(function () {
                        switch (false) {
                          case !(limit > MAX_LIMIT):
                          case !(limit < 0):
                          case !isNaN(limit):
                            return MAX_LIMIT;

                          default:
                            return limit;
                        }
                      }());
                    } else if (!isNaN(limit)) {
                      voQuery.limit(limit);
                    }

                    skip = Number(voQuery.$offset);
                    voQuery.offset(function () {
                      switch (false) {
                        case !(skip < 0):
                        case !isNaN(skip):
                          return 0;

                        default:
                          return skip;
                      }
                    }());
                    _context3.next = 12;
                    return this.collection.query(voQuery);

                  case 12:
                    _context3.next = 14;
                    return _context3.sent.toArray();

                  case 14:
                    vlItems = _context3.sent;
                    return _context3.abrupt("return", {
                      meta: {
                        pagination: {
                          limit: voQuery.$limit || 'not defined',
                          offset: voQuery.$offset || 'not defined'
                        }
                      },
                      items: vlItems
                    });

                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function list() {
            return _list.apply(this, arguments);
          }

          return list;
        }()
      }, {
        key: "query",
        value: function () {
          var _query = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            var body;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    body = this.context.request.body;
                    _context4.next = 3;
                    return this.collection.query(body.query);

                  case 3:
                    _context4.next = 5;
                    return _context4.sent.toArray();

                  case 5:
                    return _context4.abrupt("return", _context4.sent);

                  case 6:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function query() {
            return _query.apply(this, arguments);
          }

          return query;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "writeTransaction", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "writeTransaction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "showNoHiddenByDefault", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "showNoHiddenByDefault"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "list", [action], Object.getOwnPropertyDescriptor(_class2.prototype, "list"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "query", [action], Object.getOwnPropertyDescriptor(_class2.prototype, "query"), _class2.prototype)), _class2)) || _class) || _class) || _class);
    return Mixin;
  });
});

var __filename$1q = '/leanes/mixins/EditableResourceMixin.js';

var EditableResourceMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      chains = _Module$NS.chains,
      _ = _Module$NS.Utils._;
  Module.defineMixin(__filename$1q, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = chains(function () {
      this.beforeHook('protectEditable', {
        only: ['create', 'update', 'delete']
      });
      this.beforeHook('setCurrentUserOnCreate', {
        only: ['create']
      });
      this.beforeHook('setCurrentUserOnUpdate', {
        only: ['update']
      });
      this.beforeHook('setCurrentUserOnDelete', {
        only: ['delete']
      });
    }), initializeMixin(_class = _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "setCurrentUserOnCreate",
        value: function () {
          var _setCurrentUserOnCreate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var _len,
                args,
                _key,
                _args = arguments;

            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.recordBody.creatorId = this.session.uid || null;
                    this.recordBody.editorId = this.recordBody.creatorId;

                    for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = _args[_key];
                    }

                    return _context.abrupt("return", args);

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function setCurrentUserOnCreate() {
            return _setCurrentUserOnCreate.apply(this, arguments);
          }

          return setCurrentUserOnCreate;
        }()
      }, {
        key: "setCurrentUserOnUpdate",
        value: function () {
          var _setCurrentUserOnUpdate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
            var _len2,
                args,
                _key2,
                _args2 = arguments;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    this.recordBody.editorId = this.session.uid || null;

                    for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = _args2[_key2];
                    }

                    return _context2.abrupt("return", args);

                  case 3:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function setCurrentUserOnUpdate() {
            return _setCurrentUserOnUpdate.apply(this, arguments);
          }

          return setCurrentUserOnUpdate;
        }()
      }, {
        key: "setCurrentUserOnDelete",
        value: function () {
          var _setCurrentUserOnDelete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
            var _len3,
                args,
                _key3,
                _args3 = arguments;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.recordBody.editorId = this.session.uid || null;
                    this.recordBody.removerId = this.recordBody.editorId;

                    for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                      args[_key3] = _args3[_key3];
                    }

                    return _context3.abrupt("return", args);

                  case 4:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function setCurrentUserOnDelete() {
            return _setCurrentUserOnDelete.apply(this, arguments);
          }

          return setCurrentUserOnDelete;
        }()
      }, {
        key: "protectEditable",
        value: function () {
          var _protectEditable = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            var _len4,
                args,
                _key4,
                _args4 = arguments;

            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    this.recordBody = _.omit(this.recordBody, ['creatorId', 'editorId', 'removerId']);

                    for (_len4 = _args4.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                      args[_key4] = _args4[_key4];
                    }

                    return _context4.abrupt("return", args);

                  case 3:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function protectEditable() {
            return _protectEditable.apply(this, arguments);
          }

          return protectEditable;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "setCurrentUserOnCreate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setCurrentUserOnCreate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setCurrentUserOnUpdate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setCurrentUserOnUpdate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "setCurrentUserOnDelete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setCurrentUserOnDelete"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "protectEditable", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "protectEditable"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$1r = '/leanes/mixins/MemoryMigrationMixin.js';

var hasProp$f = {}.hasOwnProperty;
var MemoryMigrationMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      UP = _Module$NS.UP,
      DOWN = _Module$NS.DOWN,
      SUPPORTED_TYPES = _Module$NS.SUPPORTED_TYPES,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  Module.defineMixin(__filename$1r, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("createCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("createEdgeCollection", flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("addField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.any())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("addIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("addTimestamps", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("changeCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("changeField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(flowRuntime_umd.ref(SUPPORTED_TYPES)))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("renameField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("renameIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("old_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("renameCollection", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("dropCollection", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("dropEdgeCollection", flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("removeField", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("removeIndex", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("removeTimestamps", flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "createCollection",
        value: function () {
          var _createCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name, options) {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return");

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function createCollection(_x, _x2) {
            return _createCollection.apply(this, arguments);
          }

          return createCollection;
        }()
      }, {
        key: "createEdgeCollection",
        value: function () {
          var _createEdgeCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(collection_1, collection_2, options) {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return");

                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function createEdgeCollection(_x3, _x4, _x5) {
            return _createEdgeCollection.apply(this, arguments);
          }

          return createEdgeCollection;
        }()
      }, {
        key: "addField",
        value: function () {
          var _addField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(collection_name, field_name, options) {
            var collectionName, memCollection, initial, collection, id, doc;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!_.isString(options)) {
                      _context3.next = 2;
                      break;
                    }

                    return _context3.abrupt("return");

                  case 2:
                    collectionName = "".concat(inflect.camelize(collection_name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    initial = options["default"] != null ? _.isNumber(options["default"]) || _.isBoolean(options["default"]) ? options["default"] : _.isDate(options["default"]) ? options["default"].toISOString() : _.isString(options["default"]) ? "".concat(options["default"]) : null : null;
                    collection = memCollection._collection;
                    _context3.t0 = regeneratorRuntime.keys(collection);

                  case 7:
                    if ((_context3.t1 = _context3.t0()).done) {
                      _context3.next = 15;
                      break;
                    }

                    id = _context3.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context3.next = 11;
                      break;
                    }

                    return _context3.abrupt("continue", 7);

                  case 11:
                    doc = collection[id];

                    if (doc[field_name] == null) {
                      doc[field_name] = initial;
                    }

                    _context3.next = 7;
                    break;

                  case 15:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function addField(_x6, _x7, _x8) {
            return _addField.apply(this, arguments);
          }

          return addField;
        }()
      }, {
        key: "addIndex",
        value: function () {
          var _addIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(collection_name, field_names, options) {
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    return _context4.abrupt("return");

                  case 1:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          function addIndex(_x9, _x10, _x11) {
            return _addIndex.apply(this, arguments);
          }

          return addIndex;
        }()
      }, {
        key: "addTimestamps",
        value: function () {
          var _addTimestamps = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(collection_name) {
            var collectionName,
                memCollection,
                collection,
                id,
                doc;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    collectionName = "".concat(inflect.camelize(collection_name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection._collection;
                    _context5.t0 = regeneratorRuntime.keys(collection);

                  case 5:
                    if ((_context5.t1 = _context5.t0()).done) {
                      _context5.next = 15;
                      break;
                    }

                    id = _context5.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context5.next = 9;
                      break;
                    }

                    return _context5.abrupt("continue", 5);

                  case 9:
                    doc = collection[id];

                    if (doc.createdAt == null) {
                      doc.createdAt = null;
                    }

                    if (doc.updatedAt == null) {
                      doc.updatedAt = null;
                    }

                    if (doc.deletedAt == null) {
                      doc.deletedAt = null;
                    }

                    _context5.next = 5;
                    break;

                  case 15:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function addTimestamps(_x12) {
            return _addTimestamps.apply(this, arguments);
          }

          return addTimestamps;
        }()
      }, {
        key: "changeCollection",
        value: function () {
          var _changeCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(name, options) {
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    return _context6.abrupt("return");

                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));

          function changeCollection(_x13, _x14) {
            return _changeCollection.apply(this, arguments);
          }

          return changeCollection;
        }()
      }, {
        key: "changeField",
        value: function () {
          var _changeField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(collection_name, field_name) {
            var options,
                collectionName,
                memCollection,
                type,
                collection,
                id,
                doc,
                _args7 = arguments;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    options = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};
                    collectionName = "".concat(inflect.camelize(collection_name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    type = _.isString(options) ? options : options.type;
                    collection = memCollection._collection;
                    _context7.t0 = regeneratorRuntime.keys(collection);

                  case 6:
                    if ((_context7.t1 = _context7.t0()).done) {
                      _context7.next = 27;
                      break;
                    }

                    id = _context7.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context7.next = 10;
                      break;
                    }

                    return _context7.abrupt("continue", 6);

                  case 10:
                    doc = collection[id];
                    _context7.t2 = type;
                    _context7.next = _context7.t2 === SUPPORTED_TYPES["boolean"] ? 14 : _context7.t2 === SUPPORTED_TYPES.decimal ? 16 : _context7.t2 === SUPPORTED_TYPES["float"] ? 16 : _context7.t2 === SUPPORTED_TYPES.integer ? 16 : _context7.t2 === SUPPORTED_TYPES.number ? 16 : _context7.t2 === SUPPORTED_TYPES.string ? 18 : _context7.t2 === SUPPORTED_TYPES.text ? 18 : _context7.t2 === SUPPORTED_TYPES.primary_key ? 18 : _context7.t2 === SUPPORTED_TYPES.binary ? 18 : _context7.t2 === SUPPORTED_TYPES.json ? 20 : _context7.t2 === SUPPORTED_TYPES.hash ? 20 : _context7.t2 === SUPPORTED_TYPES.array ? 20 : _context7.t2 === SUPPORTED_TYPES.date ? 22 : _context7.t2 === SUPPORTED_TYPES.datetime ? 22 : _context7.t2 === SUPPORTED_TYPES.time ? 24 : _context7.t2 === SUPPORTED_TYPES.timestamp ? 24 : 25;
                    break;

                  case 14:
                    doc[field_name] = Boolean(doc[field_name]);
                    return _context7.abrupt("break", 25);

                  case 16:
                    doc[field_name] = Number(doc[field_name]);
                    return _context7.abrupt("break", 25);

                  case 18:
                    doc[field_name] = String(JSON.stringify(doc[field_name]));
                    return _context7.abrupt("break", 25);

                  case 20:
                    doc[field_name] = JSON.parse(String(doc[field_name]));
                    return _context7.abrupt("break", 25);

                  case 22:
                    doc[field_name] = new Date(String(doc[field_name])).toISOString();
                    return _context7.abrupt("break", 25);

                  case 24:
                    doc[field_name] = new Date(String(doc[field_name])).getTime();

                  case 25:
                    _context7.next = 6;
                    break;

                  case 27:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function changeField(_x15, _x16) {
            return _changeField.apply(this, arguments);
          }

          return changeField;
        }()
      }, {
        key: "renameField",
        value: function () {
          var _renameField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(collection_name, field_name, new_field_name) {
            var collectionName, memCollection, collection, id, doc;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    collectionName = "".concat(inflect.camelize(collection_name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection._collection;
                    _context8.t0 = regeneratorRuntime.keys(collection);

                  case 4:
                    if ((_context8.t1 = _context8.t0()).done) {
                      _context8.next = 13;
                      break;
                    }

                    id = _context8.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context8.next = 8;
                      break;
                    }

                    return _context8.abrupt("continue", 4);

                  case 8:
                    doc = collection[id];
                    doc[new_field_name] = doc[field_name];
                    delete doc[field_name];
                    _context8.next = 4;
                    break;

                  case 13:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function renameField(_x17, _x18, _x19) {
            return _renameField.apply(this, arguments);
          }

          return renameField;
        }()
      }, {
        key: "renameIndex",
        value: function () {
          var _renameIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(collection_name, old_name, new_name) {
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    return _context9.abrupt("return");

                  case 1:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9);
          }));

          function renameIndex(_x20, _x21, _x22) {
            return _renameIndex.apply(this, arguments);
          }

          return renameIndex;
        }()
      }, {
        key: "renameCollection",
        value: function () {
          var _renameCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(collection_name, new_name) {
            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    return _context10.abrupt("return");

                  case 1:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10);
          }));

          function renameCollection(_x23, _x24) {
            return _renameCollection.apply(this, arguments);
          }

          return renameCollection;
        }()
      }, {
        key: "dropCollection",
        value: function () {
          var _dropCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(collection_name) {
            var collectionName, memCollection, collection, id, doc;
            return regeneratorRuntime.wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    collectionName = "".concat(inflect.camelize(collection_name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = this.collection._collection;
                    _context11.t0 = regeneratorRuntime.keys(collection);

                  case 4:
                    if ((_context11.t1 = _context11.t0()).done) {
                      _context11.next = 12;
                      break;
                    }

                    id = _context11.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context11.next = 8;
                      break;
                    }

                    return _context11.abrupt("continue", 4);

                  case 8:
                    doc = collection[id];
                    delete memCollection._collection[id];
                    _context11.next = 4;
                    break;

                  case 12:
                    memCollection._collection = {};

                  case 13:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));

          function dropCollection(_x25) {
            return _dropCollection.apply(this, arguments);
          }

          return dropCollection;
        }()
      }, {
        key: "dropEdgeCollection",
        value: function () {
          var _dropEdgeCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(collection_1, collection_2) {
            var qualifiedName, collectionName, memCollection, collection, id, doc;
            return regeneratorRuntime.wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    qualifiedName = "".concat(collection_1, "_").concat(collection_2);
                    collectionName = "".concat(inflect.camelize(qualifiedName), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = this.collection._collection;
                    _context12.t0 = regeneratorRuntime.keys(collection);

                  case 5:
                    if ((_context12.t1 = _context12.t0()).done) {
                      _context12.next = 13;
                      break;
                    }

                    id = _context12.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context12.next = 9;
                      break;
                    }

                    return _context12.abrupt("continue", 5);

                  case 9:
                    doc = collection[id];
                    delete memCollection._collection[id];
                    _context12.next = 5;
                    break;

                  case 13:
                    memCollection._collection = {};

                  case 14:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));

          function dropEdgeCollection(_x26, _x27) {
            return _dropEdgeCollection.apply(this, arguments);
          }

          return dropEdgeCollection;
        }()
      }, {
        key: "removeField",
        value: function () {
          var _removeField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(collection_name, field_name) {
            var collectionName, memCollection, collection, id, doc;
            return regeneratorRuntime.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    collectionName = "".concat(inflect.camelize(collection_name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection._collection;
                    _context13.t0 = regeneratorRuntime.keys(collection);

                  case 4:
                    if ((_context13.t1 = _context13.t0()).done) {
                      _context13.next = 12;
                      break;
                    }

                    id = _context13.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context13.next = 8;
                      break;
                    }

                    return _context13.abrupt("continue", 4);

                  case 8:
                    doc = collection[id];
                    delete doc[field_name];
                    _context13.next = 4;
                    break;

                  case 12:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));

          function removeField(_x28, _x29) {
            return _removeField.apply(this, arguments);
          }

          return removeField;
        }()
      }, {
        key: "removeIndex",
        value: function () {
          var _removeIndex = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(collection_name, field_names, options) {
            return regeneratorRuntime.wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    return _context14.abrupt("return");

                  case 1:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14);
          }));

          function removeIndex(_x30, _x31, _x32) {
            return _removeIndex.apply(this, arguments);
          }

          return removeIndex;
        }()
      }, {
        key: "removeTimestamps",
        value: function () {
          var _removeTimestamps = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(collection_name) {
            var collectionName,
                memCollection,
                collection,
                id,
                doc;
            return regeneratorRuntime.wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    collectionName = "".concat(inflect.camelize(collection_name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection._collection;
                    _context15.t0 = regeneratorRuntime.keys(collection);

                  case 5:
                    if ((_context15.t1 = _context15.t0()).done) {
                      _context15.next = 15;
                      break;
                    }

                    id = _context15.t1.value;

                    if (hasProp$f.call(collection, id)) {
                      _context15.next = 9;
                      break;
                    }

                    return _context15.abrupt("continue", 5);

                  case 9:
                    doc = collection[id];
                    delete doc.createdAt;
                    delete doc.updatedAt;
                    delete doc.deletedAt;
                    _context15.next = 5;
                    break;

                  case 15:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15, this);
          }));

          function removeTimestamps(_x33) {
            return _removeTimestamps.apply(this, arguments);
          }

          return removeTimestamps;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "createCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "createEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createEdgeCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addField"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addIndex"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addTimestamps"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "changeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "changeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeField"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "renameField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameField"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "renameIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameIndex"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "renameCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "dropCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "dropEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropEdgeCollection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeField"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeIndex"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeTimestamps"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$1s = '/leanes/mixins/LoggingJunctionMixin.js';

var NotificationInterface$m = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var LoggingJunctionMixinTF = (function (Module) {
  var _Module$NS = Module.NS,
      Pipes = _Module$NS.Pipes,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      genRandomAlphaNumbers = _Module$NS.Utils.genRandomAlphaNumbers;
  var _Pipes$NS = Pipes.NS,
      FilterControlMessage = _Pipes$NS.FilterControlMessage,
      JunctionMediator = _Pipes$NS.JunctionMediator,
      PipeAwareModule = _Pipes$NS.PipeAwareModule,
      LogFilterMessage = _Pipes$NS.LogFilterMessage,
      LogMessage = _Pipes$NS.LogMessage;
  var SEND_TO_LOG = LogMessage.SEND_TO_LOG,
      LEVELS = LogMessage.LEVELS,
      DEBUG = LogMessage.DEBUG,
      ERROR = LogMessage.ERROR,
      FATAL = LogMessage.FATAL,
      INFO = LogMessage.INFO,
      WARN = LogMessage.WARN,
      CHANGE = LogMessage.CHANGE;
  var SET_PARAMS = FilterControlMessage.SET_PARAMS;
  var STDLOG = PipeAwareModule.STDLOG;
  Module.defineMixin(__filename$1s, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", flowRuntime_umd.param("note", flowRuntime_umd.ref(NotificationInterface$m))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      _inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        _classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      _createClass(Mixin, [{
        key: "listNotificationInterests",
        value: function listNotificationInterests() {
          var _get2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var interests = (_get2 = _get(_getPrototypeOf(Mixin.prototype), "listNotificationInterests", this)).call.apply(_get2, [this].concat(args));

          interests.push(SEND_TO_LOG);
          interests.push(LogFilterMessage.SET_LOG_LEVEL);
          return interests;
        }
      }, {
        key: "handleNotification",
        value: function handleNotification(note) {
          var level;

          switch (note.getName()) {
            case SEND_TO_LOG:
              switch (note.getType()) {
                case LEVELS[DEBUG]:
                  level = DEBUG;
                  break;

                case LEVELS[ERROR]:
                  level = ERROR;
                  break;

                case LEVELS[FATAL]:
                  level = FATAL;
                  break;

                case LEVELS[INFO]:
                  level = INFO;
                  break;

                case LEVELS[WARN]:
                  level = WARN;
                  break;

                default:
                  level = DEBUG;
                  break;
              }

              var logMessage = LogMessage["new"](level, this._multitonKey, note.getBody());

              this._junction.sendMessage(STDLOG, logMessage);

              break;

            case LogFilterMessage.SET_LOG_LEVEL:
              var logLevel = note.getBody();
              var setLogLevelMessage = LogFilterMessage["new"](SET_PARAMS, logLevel);

              this._junction.sendMessage(STDLOG, setLogLevelMessage);

              var changedLevelMessage = LogMessage["new"](CHANGE, this._multitonKey, "Changed Log Level to: ".concat(LogMessage.LEVELS[logLevel]));

              this._junction.sendMessage(STDLOG, changedLevelMessage);

              break;

            default:
              _get(_getPrototypeOf(Mixin.prototype), "handleNotification", this).call(this, note);

          }
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$1t = '/leanes/patterns/facade/Application.js';

var ContextInterface$d = flowRuntime_umd.tdz(function () {
  return ContextInterface;
});
var ResourceInterface$8 = flowRuntime_umd.tdz(function () {
  return ResourceInterface;
});
var ApplicationInterface = flowRuntime_umd.type("ApplicationInterface", flowRuntime_umd.object(flowRuntime_umd.property("isLightweight", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("start", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("finish", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("migrate", flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("rollback", flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("run", flowRuntime_umd["function"](function (_fn) {
  var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn.typeParameter("R", undefined, flowRuntime_umd.any());

  return [flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
})), flowRuntime_umd.property("execute", flowRuntime_umd["function"](function (_fn2) {
  var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn2.typeParameter("R", undefined, flowRuntime_umd.ref("Promise", flowRuntime_umd.exactObject(flowRuntime_umd.property("result", T), flowRuntime_umd.property("resource", flowRuntime_umd.ref(ResourceInterface$8)))));

  return [flowRuntime_umd.param("resourceName", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.object(flowRuntime_umd.property("context", flowRuntime_umd.ref(ContextInterface$d)), flowRuntime_umd.property("reverse", flowRuntime_umd.string()))), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
}))));

console.log('>>>>QQQQ 12-12+1');
var ApplicationInterface$1 = flowRuntime_umd.tdz(function () {
  return ApplicationInterface;
});
console.log('>>>>QQQQ 12-12+2');
var LegacyResponseInterface$7 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$7 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var Config$5 = flowRuntime_umd.tdz(function () {
  return Config;
});
var ApplicationTF = (function (Module) {
  var _dec, _dec2, _dec3, _class, _class2, _init, _init2, _init3, _init4, _init5, _init6, _descriptor, _class3, _temp;

  console.log('>>>>QQQQ 12-12+3');
  var _Module$NS = Module.NS,
      LIGHTWEIGHT = _Module$NS.LIGHTWEIGHT,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      CONFIGURATION = _Module$NS.CONFIGURATION,
      Pipes = _Module$NS.Pipes,
      Facade = _Module$NS.Facade,
      ConfigurableMixin = _Module$NS.ConfigurableMixin,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      uuid = _Module$NS.Utils.uuid;
  var PipeAwareModule = Pipes.NS.PipeAwareModule;
  console.log('>>>>QQQQ 12-12+4');
  var Application = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Application", flowRuntime_umd["extends"](PipeAwareModule), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("LOGGER_PROXY", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("CONNECT_MODULE_TO_LOGGER", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("CONNECT_SHELL_TO_LOGGER", flowRuntime_umd.string()), flowRuntime_umd.staticProperty("CONNECT_MODULE_TO_SHELL", flowRuntime_umd.string()), flowRuntime_umd.property("isLightweight", flowRuntime_umd["boolean"]()), flowRuntime_umd.method("start", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("finish", flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("migrate", flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("rollback", flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("run", function (_fn) {
    var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn.typeParameter("R", undefined, flowRuntime_umd.any());

    return [flowRuntime_umd.param("scriptName", flowRuntime_umd.string()), flowRuntime_umd.param("data", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
  }), flowRuntime_umd.method("execute", function (_fn2) {
    var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn2.typeParameter("R", undefined, flowRuntime_umd.ref("Promise", flowRuntime_umd.exactObject(flowRuntime_umd.property("result", T), flowRuntime_umd.property("resource", flowRuntime_umd.ref("ResourceInterface")))));

    return [flowRuntime_umd.param("resourceName", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.any()), flowRuntime_umd.param("action", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R))];
  }), flowRuntime_umd.method("perform", function (_fn3) {
    var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any());

    var R = _fn3.typeParameter("R", undefined, T);

    var L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$7, flowRuntime_umd.ref(AxiosResponse$7, T, R)));

    return [flowRuntime_umd.param("methodName", flowRuntime_umd.string()), flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref(Config$5, flowRuntime_umd.flowInto(T), flowRuntime_umd.flowInto(R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(L)))];
  }), flowRuntime_umd.method("constructor", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("ApplicationFacade", flowRuntime_umd.Class(flowRuntime_umd.ref(Facade))), flowRuntime_umd.param("symbol", flowRuntime_umd.nullable(flowRuntime_umd.symbol()))))), _dec2 = module(Module), _dec3 = mixin(ConfigurableMixin), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_PipeAwareModule) {
    _inherits(Application, _PipeAwareModule);

    var _super = _createSuper(Application);

    _createClass(Application, [{
      key: "start",
      // @property static get NAME(): string {
      //   return this.Module.name;
      // }
      value: function start() {
        // console.log(';MMMMMMMM:::::', this.facade, this);
        this.facade.startup(this);
      }
    }, {
      key: "finish",
      value: function finish() {
        this.facade.remove();
      }
    }, {
      key: "migrate",
      value: function () {
        var _migrate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(opts) {
          var appMediator;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                  _context.next = 3;
                  return appMediator.migrate(opts);

                case 3:
                  return _context.abrupt("return", _context.sent);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function migrate(_x) {
          return _migrate.apply(this, arguments);
        }

        return migrate;
      }()
    }, {
      key: "rollback",
      value: function () {
        var _rollback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(opts) {
          var appMediator;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                  _context2.next = 3;
                  return appMediator.rollback(opts);

                case 3:
                  return _context2.abrupt("return", _context2.sent);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function rollback(_x2) {
          return _rollback.apply(this, arguments);
        }

        return rollback;
      }()
    }, {
      key: "run",
      value: function () {
        var _run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(scriptName, data) {
          var appMediator;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                  _context3.next = 3;
                  return appMediator.run(scriptName, data);

                case 3:
                  return _context3.abrupt("return", _context3.sent);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function run(_x3, _x4) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }, {
      key: "execute",
      value: function () {
        var _execute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(resourceName, _ref, action) {
          var ContextInterface, string, appMediator;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  ContextInterface = _ref.context, string = _ref.reverse;
                  appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                  _context4.next = 4;
                  return appMediator.execute(resourceName, {
                    context: context,
                    reverse: reverse
                  }, action);

                case 4:
                  return _context4.abrupt("return", _context4.sent);

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function execute(_x5, _x6, _x7) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "perform",
      value: function () {
        var _perform = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(methodName, url, options) {
          var appMediator;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                  _context5.next = 3;
                  return appMediator.perform;

                case 3:
                  _context5.t0 = _context5.sent;
                  _context5.t1 = T;
                  _context5.t0 < _context5.t1;
                  R;
                  return _context5.abrupt("return", L > (options));

                case 8:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function perform(_x8, _x9, _x10) {
          return _perform.apply(this, arguments);
        }

        return perform;
      }() // @method init(symbol: ?(Symbol | object)) {
      //   const { ApplicationFacade } = this.constructor.Module.NS;
      //   const isLightweight = symbol === LIGHTWEIGHT;
      //   const NAME = this.constructor.NAME || this.constructor.name;
      //   if (isLightweight) {
      //     super.init(ApplicationFacade.getInstance(`${NAME}|>${uuid.v4()}`));
      //   } else {
      //     const facade = ApplicationFacade.getInstance(NAME);
      //     console.log('>>MNMN<N<N facade', facade);
      //     super.init(facade);
      //     // super.init(ApplicationFacade.getInstance(NAME));
      //   }
      //   this.isLightweight = isLightweight;
      // }

    }]);

    function Application(name, ApplicationFacade, symbol) {
      var _this;

      _classCallCheck(this, Application);

      console.log('>>>>QQQQ 12-12+5');
      var isLightweight = symbol === LIGHTWEIGHT;

      if (isLightweight) {
        console.log('>>>>QQQQ 12-12+6');
        _this = _super.call(this, ApplicationFacade.getInstance("".concat(name, "|>").concat(uuid.v4())));

        _initializerDefineProperty(_this, "isLightweight", _descriptor, _assertThisInitialized(_this));

        console.log('>>>>QQQQ 12-12+7');
      } else {
        console.log('>>>>QQQQ 12-12+8');
        _this = _super.call(this, ApplicationFacade.getInstance(name));

        _initializerDefineProperty(_this, "isLightweight", _descriptor, _assertThisInitialized(_this));

        console.log('>>>>QQQQ 12-12+9');
      }

      _this.isLightweight = isLightweight;
      console.log('>>>>QQQQ 12-12+10');
      return _possibleConstructorReturn(_this);
    }

    return Application;
  }(PipeAwareModule), _class3.__filename = __filename$1t, _class3.object = {}, _class3.LOGGER_PROXY = 'LoggerProxy', _class3.CONNECT_MODULE_TO_LOGGER = 'connectModuleToLogger', _class3.CONNECT_SHELL_TO_LOGGER = 'connectShellToLogger', _class3.CONNECT_MODULE_TO_SHELL = 'connectModuleToShell', _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "LOGGER_PROXY", [property], (_init3 = Object.getOwnPropertyDescriptor(_class2, "LOGGER_PROXY"), _init3 = _init3 ? _init3.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init3;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CONNECT_MODULE_TO_LOGGER", [property], (_init4 = Object.getOwnPropertyDescriptor(_class2, "CONNECT_MODULE_TO_LOGGER"), _init4 = _init4 ? _init4.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init4;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CONNECT_SHELL_TO_LOGGER", [property], (_init5 = Object.getOwnPropertyDescriptor(_class2, "CONNECT_SHELL_TO_LOGGER"), _init5 = _init5 ? _init5.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init5;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "CONNECT_MODULE_TO_SHELL", [property], (_init6 = Object.getOwnPropertyDescriptor(_class2, "CONNECT_MODULE_TO_SHELL"), _init6 = _init6 ? _init6.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init6;
    }
  }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "isLightweight", [property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "start", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "start"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "finish", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "finish"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rollback", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollback"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "run", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "run"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "perform", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "perform"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$1u = '/leanes/patterns/command/LogMessageCommand.js';

var NotificationInterface$n = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var LogMessageCommandTF = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      SimpleCommand = _Module$NS.SimpleCommand,
      Application = _Module$NS.Application,
      initialize = _Module$NS.initialize,
      module = _Module$NS.module,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;
  var LOGGER_PROXY = Application.LOGGER_PROXY;
  var LogMessageCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LogMessageCommand", flowRuntime_umd["extends"](SimpleCommand), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$n)), flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec2 = module(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_SimpleCommand) {
    _inherits(LogMessageCommand, _SimpleCommand);

    var _super = _createSuper(LogMessageCommand);

    function LogMessageCommand() {
      _classCallCheck(this, LogMessageCommand);

      return _super.apply(this, arguments);
    }

    _createClass(LogMessageCommand, [{
      key: "execute",
      value: function execute(aoNotification) {
        var proxy = this.facade.getProxy(LOGGER_PROXY);
        proxy.addLogEntry(aoNotification.getBody());
        return;
      }
    }]);

    return LogMessageCommand;
  }(SimpleCommand), _class3.__filename = __filename$1u, _class3.object = {}, _temp), (_applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), _applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var MomentT = flowRuntime_umd.type("MomentT", flowRuntime_umd.object(flowRuntime_umd.property("_isAMomentObject", flowRuntime_umd["boolean"](true))));

var StreamT = flowRuntime_umd.type("StreamT", flowRuntime_umd.object(flowRuntime_umd.property("pipe", flowRuntime_umd["function"]())));

var EmbedConfigT$6 = flowRuntime_umd.tdz(function () {
  return EmbedConfigT;
});
var RecordInterface$o = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$f = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var EmbeddableStaticInterface = flowRuntime_umd.type("EmbeddableStaticInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$f)), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$o)))), flowRuntime_umd.property("embeddings", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(EmbedConfigT$6))))));

var RecordInterface$p = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$g = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var MigrationStaticInterface = flowRuntime_umd.type("MigrationStaticInterface", function (MigrationStaticInterface) {
  var SUPPORTED_TYPES = MigrationStaticInterface.typeParameter("SUPPORTED_TYPES"),
      NON_OVERRIDDEN = MigrationStaticInterface.typeParameter("NON_OVERRIDDEN");
  return flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$g)), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$p)))), flowRuntime_umd.property("createCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("createEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(SUPPORTED_TYPES), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(SUPPORTED_TYPES)), flowRuntime_umd.property("default", flowRuntime_umd.any())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("changeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("changeField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(SUPPORTED_TYPES), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(SUPPORTED_TYPES))))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("renameField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("renameIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("old_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("renameCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("new_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("dropCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("dropEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collection_1", flowRuntime_umd.string()), flowRuntime_umd.param("collection_2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeField", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("field_names", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collection_name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("reversible", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.exactObject(flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("change", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(NON_OVERRIDDEN)))), flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(NON_OVERRIDDEN)))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(NON_OVERRIDDEN)))));
});

var RelationConfigT$6 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationInverseT$3 = flowRuntime_umd.tdz(function () {
  return RelationInverseT;
});
var RecordInterface$q = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$h = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var RelatableStaticInterface = flowRuntime_umd.type("RelatableStaticInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$h)), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$q)))), flowRuntime_umd.property("inverseFor", flowRuntime_umd["function"](flowRuntime_umd.param("asAttrName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RelationInverseT$3)))), flowRuntime_umd.property("relations", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(RelationConfigT$6))))));

var _dec$3, _dec2$3, _class$7, _class2$3, _init$3, _init2$3, _descriptor$3, _descriptor2$2, _descriptor3$2, _descriptor4$1, _descriptor5$1, _descriptor6$1, _descriptor7$1, _descriptor8$1, _descriptor9$1, _descriptor10$1, _descriptor11$1, _descriptor12$1, _descriptor13$1, _descriptor14$1, _descriptor15$1, _descriptor16$1, _descriptor17$1, _descriptor18$1, _descriptor19$1, _descriptor20$1, _descriptor21$1, _descriptor22$1, _descriptor23$1, _descriptor24$1, _descriptor25$1, _descriptor26$1, _descriptor27$1, _descriptor28$1, _descriptor29$1, _descriptor30$1, _descriptor31$1, _descriptor32$1, _descriptor33$1, _descriptor34$1, _descriptor35$1, _descriptor36$1, _descriptor37$1, _descriptor38$1, _descriptor39$1, _descriptor40$1, _descriptor41$1, _descriptor42$1, _descriptor43$1, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _class3$3, _temp$3;
console.log('?>?>?>11--1');
console.log('?>?>?>11--2');
console.log('?>?>?>11');
console.log('?>?>?>22');
var _PatternES$NS$1 = PatternES.NS,
    initialize$3 = _PatternES$NS$1.initialize,
    meta$4 = _PatternES$NS$1.meta,
    nameBy$3 = _PatternES$NS$1.nameBy,
    constant$3 = _PatternES$NS$1.constant,
    resolver$3 = _PatternES$NS$1.resolver,
    util$5 = _PatternES$NS$1.util,
    freeze$2 = _PatternES$NS$1.freeze,
    decorator$1 = _PatternES$NS$1.decorator;
console.log('?>?>?>33');
var LeanES = (_dec$3 = flowRuntime_umd.annotate(flowRuntime_umd["class"]("LeanES", flowRuntime_umd["extends"](PatternES), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("ROOT", flowRuntime_umd.any()), flowRuntime_umd.property("HANDLER_RESULT", flowRuntime_umd.any()), flowRuntime_umd.property("RECORD_CHANGED", flowRuntime_umd.any()), flowRuntime_umd.property("CONFIGURATION", flowRuntime_umd.any()), flowRuntime_umd.property("STARTUP", flowRuntime_umd.any()), flowRuntime_umd.property("MIGRATE", flowRuntime_umd.any()), flowRuntime_umd.property("ROLLBACK", flowRuntime_umd.any()), flowRuntime_umd.property("STOPPED_MIGRATE", flowRuntime_umd.any()), flowRuntime_umd.property("STOPPED_ROLLBACK", flowRuntime_umd.any()), flowRuntime_umd.property("STARTUP_COMPLETE", flowRuntime_umd.any()), flowRuntime_umd.property("LIGHTWEIGHT", flowRuntime_umd.any()), flowRuntime_umd.property("MIGRATIONS", flowRuntime_umd.any()), flowRuntime_umd.property("SESSIONS", flowRuntime_umd.any()), flowRuntime_umd.property("USERS", flowRuntime_umd.any()), flowRuntime_umd.property("SPACES", flowRuntime_umd.any()), flowRuntime_umd.property("ROLES", flowRuntime_umd.any()), flowRuntime_umd.property("UPLOADS", flowRuntime_umd.any()), flowRuntime_umd.property("RESQUE", flowRuntime_umd.any()), flowRuntime_umd.property("START_RESQUE", flowRuntime_umd.any()), flowRuntime_umd.property("DELAYED_JOBS_QUEUE", flowRuntime_umd.any()), flowRuntime_umd.property("DELAYED_JOBS_SCRIPT", flowRuntime_umd.any()), flowRuntime_umd.property("DEFAULT_QUEUE", flowRuntime_umd.any()), flowRuntime_umd.property("JOB_RESULT", flowRuntime_umd.any()), flowRuntime_umd.property("SHELL", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_ROUTER", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_RENDERER", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_SWITCH", flowRuntime_umd.any()), flowRuntime_umd.property("APPLICATION_GATEWAY", flowRuntime_umd.any()), flowRuntime_umd.property("RESOURCE_RENDERER", flowRuntime_umd.any()), flowRuntime_umd.property("RESQUE_EXECUTOR", flowRuntime_umd.any()), flowRuntime_umd.property("LOG_MSG", flowRuntime_umd.any()), flowRuntime_umd.property("UP", flowRuntime_umd.any()), flowRuntime_umd.property("DOWN", flowRuntime_umd.any()), flowRuntime_umd.property("NON_OVERRIDDEN", flowRuntime_umd.any()), flowRuntime_umd.property("SUPPORTED_TYPES", flowRuntime_umd.any()), flowRuntime_umd.property("REVERSE_MAP", flowRuntime_umd.any()), flowRuntime_umd.property("METHODS", flowRuntime_umd.any()), flowRuntime_umd.property("action", flowRuntime_umd.any()), flowRuntime_umd.property("attribute", flowRuntime_umd.any()), flowRuntime_umd.property("belongsTo", flowRuntime_umd.any()), flowRuntime_umd.property("computed", flowRuntime_umd.any()), flowRuntime_umd.property("hasEmbed", flowRuntime_umd.any()), flowRuntime_umd.property("hasEmbeds", flowRuntime_umd.any()), flowRuntime_umd.property("hasMany", flowRuntime_umd.any()), flowRuntime_umd.property("hasOne", flowRuntime_umd.any()), flowRuntime_umd.property("relatedEmbed", flowRuntime_umd.any()), flowRuntime_umd.property("relatedEmbeds", flowRuntime_umd.any()), flowRuntime_umd.property("relatedTo", flowRuntime_umd.any()), flowRuntime_umd.property("joi", flowRuntime_umd.any()), flowRuntime_umd.property("moment", flowRuntime_umd.any()), flowRuntime_umd.property("statuses", flowRuntime_umd.any()), flowRuntime_umd.property("Pipes", flowRuntime_umd.any()))), _dec2$3 = resolver$3(require, function (name) {
  return require(name);
}), _dec$3(_class$7 = initialize$3(_class$7 = _dec2$3(_class$7 = (_class2$3 = (_temp$3 = _class3$3 = /*#__PURE__*/function (_PatternES) {
  _inherits(LeanES, _PatternES);

  var _super = _createSuper(LeanES);

  function LeanES() {
    var _this;

    _classCallCheck(this, LeanES);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _initializerDefineProperty(_this, "ROOT", _descriptor$3, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "HANDLER_RESULT", _descriptor2$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "RECORD_CHANGED", _descriptor3$2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "CONFIGURATION", _descriptor4$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "STARTUP", _descriptor5$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "MIGRATE", _descriptor6$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "ROLLBACK", _descriptor7$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "STOPPED_MIGRATE", _descriptor8$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "STOPPED_ROLLBACK", _descriptor9$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "STARTUP_COMPLETE", _descriptor10$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "LIGHTWEIGHT", _descriptor11$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "MIGRATIONS", _descriptor12$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "SESSIONS", _descriptor13$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "USERS", _descriptor14$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "SPACES", _descriptor15$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "ROLES", _descriptor16$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "UPLOADS", _descriptor17$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "RESQUE", _descriptor18$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "START_RESQUE", _descriptor19$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "DELAYED_JOBS_QUEUE", _descriptor20$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "DELAYED_JOBS_SCRIPT", _descriptor21$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "DEFAULT_QUEUE", _descriptor22$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "JOB_RESULT", _descriptor23$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "SHELL", _descriptor24$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_ROUTER", _descriptor25$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_RENDERER", _descriptor26$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_SWITCH", _descriptor27$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "APPLICATION_GATEWAY", _descriptor28$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "RESOURCE_RENDERER", _descriptor29$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "RESQUE_EXECUTOR", _descriptor30$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "LOG_MSG", _descriptor31$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "UP", _descriptor32$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "DOWN", _descriptor33$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "NON_OVERRIDDEN", _descriptor34$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "SUPPORTED_TYPES", _descriptor35$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "REVERSE_MAP", _descriptor36$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "METHODS", _descriptor37$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "action", _descriptor38$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "attribute", _descriptor39$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "belongsTo", _descriptor40$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "computed", _descriptor41$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "hasEmbed", _descriptor42$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "hasEmbeds", _descriptor43$1, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "hasMany", _descriptor44, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "hasOne", _descriptor45, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "relatedEmbed", _descriptor46, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "relatedEmbeds", _descriptor47, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "relatedTo", _descriptor48, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "joi", _descriptor49, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "moment", _descriptor50, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "statuses", _descriptor51, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "Pipes", _descriptor52, _assertThisInitialized(_this));

    return _this;
  }

  return LeanES;
}(PatternES), _class3$3.__filename = 'LeanES', _class3$3.object = {}, _temp$3), (_applyDecoratedDescriptor(_class2$3, "__filename", [nameBy$3], (_init$3 = Object.getOwnPropertyDescriptor(_class2$3, "__filename"), _init$3 = _init$3 ? _init$3.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init$3;
  }
}), _class2$3), _applyDecoratedDescriptor(_class2$3, "object", [meta$4], (_init2$3 = Object.getOwnPropertyDescriptor(_class2$3, "object"), _init2$3 = _init2$3 ? _init2$3.value : undefined, {
  enumerable: true,
  configurable: true,
  writable: true,
  initializer: function initializer() {
    return _init2$3;
  }
}), _class2$3), _descriptor$3 = _applyDecoratedDescriptor(_class2$3.prototype, "ROOT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return __dirname$1;
  }
}), _descriptor2$2 = _applyDecoratedDescriptor(_class2$3.prototype, "HANDLER_RESULT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'HANDLER_RESULT';
  }
}), _descriptor3$2 = _applyDecoratedDescriptor(_class2$3.prototype, "RECORD_CHANGED", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'RECORD_CHANGED';
  }
}), _descriptor4$1 = _applyDecoratedDescriptor(_class2$3.prototype, "CONFIGURATION", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ConfigurationProxy';
  }
}), _descriptor5$1 = _applyDecoratedDescriptor(_class2$3.prototype, "STARTUP", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'STARTUP';
  }
}), _descriptor6$1 = _applyDecoratedDescriptor(_class2$3.prototype, "MIGRATE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'MIGRATE';
  }
}), _descriptor7$1 = _applyDecoratedDescriptor(_class2$3.prototype, "ROLLBACK", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ROLLBACK';
  }
}), _descriptor8$1 = _applyDecoratedDescriptor(_class2$3.prototype, "STOPPED_MIGRATE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'STOPPED_MIGRATE';
  }
}), _descriptor9$1 = _applyDecoratedDescriptor(_class2$3.prototype, "STOPPED_ROLLBACK", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'STOPPED_ROLLBACK';
  }
}), _descriptor10$1 = _applyDecoratedDescriptor(_class2$3.prototype, "STARTUP_COMPLETE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'STARTUP_COMPLETE';
  }
}), _descriptor11$1 = _applyDecoratedDescriptor(_class2$3.prototype, "LIGHTWEIGHT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return Symbol["for"]('LIGHTWEIGHT');
  }
}), _descriptor12$1 = _applyDecoratedDescriptor(_class2$3.prototype, "MIGRATIONS", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'MigrationsCollection';
  }
}), _descriptor13$1 = _applyDecoratedDescriptor(_class2$3.prototype, "SESSIONS", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'SessionsCollection';
  }
}), _descriptor14$1 = _applyDecoratedDescriptor(_class2$3.prototype, "USERS", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'UsersCollection';
  }
}), _descriptor15$1 = _applyDecoratedDescriptor(_class2$3.prototype, "SPACES", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'SpacesCollection';
  }
}), _descriptor16$1 = _applyDecoratedDescriptor(_class2$3.prototype, "ROLES", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'RolesCollection';
  }
}), _descriptor17$1 = _applyDecoratedDescriptor(_class2$3.prototype, "UPLOADS", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'UploadsCollection';
  }
}), _descriptor18$1 = _applyDecoratedDescriptor(_class2$3.prototype, "RESQUE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ResqueProxy';
  }
}), _descriptor19$1 = _applyDecoratedDescriptor(_class2$3.prototype, "START_RESQUE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'START_RESQUE';
  }
}), _descriptor20$1 = _applyDecoratedDescriptor(_class2$3.prototype, "DELAYED_JOBS_QUEUE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'delayed_jobs';
  }
}), _descriptor21$1 = _applyDecoratedDescriptor(_class2$3.prototype, "DELAYED_JOBS_SCRIPT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'DelayedJobScript';
  }
}), _descriptor22$1 = _applyDecoratedDescriptor(_class2$3.prototype, "DEFAULT_QUEUE", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'default';
  }
}), _descriptor23$1 = _applyDecoratedDescriptor(_class2$3.prototype, "JOB_RESULT", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'JOB_RESULT';
  }
}), _descriptor24$1 = _applyDecoratedDescriptor(_class2$3.prototype, "SHELL", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'SHELL';
  }
}), _descriptor25$1 = _applyDecoratedDescriptor(_class2$3.prototype, "APPLICATION_ROUTER", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationRouter';
  }
}), _descriptor26$1 = _applyDecoratedDescriptor(_class2$3.prototype, "APPLICATION_RENDERER", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationRenderer';
  }
}), _descriptor27$1 = _applyDecoratedDescriptor(_class2$3.prototype, "APPLICATION_SWITCH", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationSwitch';
  }
}), _descriptor28$1 = _applyDecoratedDescriptor(_class2$3.prototype, "APPLICATION_GATEWAY", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ApplicationGateway';
  }
}), _descriptor29$1 = _applyDecoratedDescriptor(_class2$3.prototype, "RESOURCE_RENDERER", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ResourceRenderer';
  }
}), _descriptor30$1 = _applyDecoratedDescriptor(_class2$3.prototype, "RESQUE_EXECUTOR", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'ResqueExecutor';
  }
}), _descriptor31$1 = _applyDecoratedDescriptor(_class2$3.prototype, "LOG_MSG", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return 'LOG_MSG';
  }
}), _descriptor32$1 = _applyDecoratedDescriptor(_class2$3.prototype, "UP", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return Symbol["for"]('UP');
  }
}), _descriptor33$1 = _applyDecoratedDescriptor(_class2$3.prototype, "DOWN", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return Symbol["for"]('DOWN');
  }
}), _descriptor34$1 = _applyDecoratedDescriptor(_class2$3.prototype, "NON_OVERRIDDEN", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return Symbol["for"]('NON_OVERRIDDEN');
  }
}), _descriptor35$1 = _applyDecoratedDescriptor(_class2$3.prototype, "SUPPORTED_TYPES", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      json: 'json',
      binary: 'binary',
      "boolean": 'boolean',
      date: 'date',
      datetime: 'datetime',
      number: 'number',
      decimal: 'decimal',
      "float": 'float',
      integer: 'integer',
      primary_key: 'primary_key',
      string: 'string',
      text: 'text',
      time: 'time',
      timestamp: 'timestamp',
      array: 'array',
      hash: 'hash'
    };
  }
}), _descriptor36$1 = _applyDecoratedDescriptor(_class2$3.prototype, "REVERSE_MAP", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      createCollection: 'dropCollection',
      dropCollection: 'dropCollection',
      createEdgeCollection: 'dropEdgeCollection',
      dropEdgeCollection: 'dropEdgeCollection',
      addField: 'removeField',
      removeField: 'removeField',
      addIndex: 'removeIndex',
      removeIndex: 'removeIndex',
      addTimestamps: 'removeTimestamps',
      removeTimestamps: 'addTimestamps',
      changeCollection: 'changeCollection',
      changeField: 'changeField',
      renameField: 'renameField',
      renameIndex: 'renameIndex',
      renameCollection: 'renameCollection'
    };
  }
}), _descriptor37$1 = _applyDecoratedDescriptor(_class2$3.prototype, "METHODS", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return ['get', 'post', 'put', 'head', 'delete', 'options', 'trace', 'copy', 'lock', 'mkcol', 'move', 'purge', 'propfind', 'proppatch', 'unlock', 'report', 'mkactivity', 'checkout', 'merge', 'm-search', 'notify', 'subscribe', 'unsubscribe', 'patch', 'search', 'connect'];
  }
}), _descriptor38$1 = _applyDecoratedDescriptor(_class2$3.prototype, "action", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return action;
  }
}), _descriptor39$1 = _applyDecoratedDescriptor(_class2$3.prototype, "attribute", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return attribute;
  }
}), _descriptor40$1 = _applyDecoratedDescriptor(_class2$3.prototype, "belongsTo", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return belongsTo;
  }
}), _descriptor41$1 = _applyDecoratedDescriptor(_class2$3.prototype, "computed", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return computed;
  }
}), _descriptor42$1 = _applyDecoratedDescriptor(_class2$3.prototype, "hasEmbed", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return hasEmbed;
  }
}), _descriptor43$1 = _applyDecoratedDescriptor(_class2$3.prototype, "hasEmbeds", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return hasEmbeds;
  }
}), _descriptor44 = _applyDecoratedDescriptor(_class2$3.prototype, "hasMany", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return hasMany;
  }
}), _descriptor45 = _applyDecoratedDescriptor(_class2$3.prototype, "hasOne", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return hasOne;
  }
}), _descriptor46 = _applyDecoratedDescriptor(_class2$3.prototype, "relatedEmbed", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return relatedEmbed;
  }
}), _descriptor47 = _applyDecoratedDescriptor(_class2$3.prototype, "relatedEmbeds", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return relatedEmbeds;
  }
}), _descriptor48 = _applyDecoratedDescriptor(_class2$3.prototype, "relatedTo", [decorator$1], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return relatedTo;
  }
}), _descriptor49 = _applyDecoratedDescriptor(_class2$3.prototype, "joi", [util$5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return joi;
  }
}), _descriptor50 = _applyDecoratedDescriptor(_class2$3.prototype, "moment", [util$5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return moment;
  }
}), _descriptor51 = _applyDecoratedDescriptor(_class2$3.prototype, "statuses", [util$5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return statuses;
  }
}), _descriptor52 = _applyDecoratedDescriptor(_class2$3.prototype, "Pipes", [constant$3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return Pipes$1;
  }
})), _class2$3)) || _class$7) || _class$7) || _class$7); // require('./utils/genRandomAlphaNumbers').default(LeanES);
genRandomAlphaNumbersTF(LeanES); // require('./utils/hashPassword').default(LeanES);
hashPasswordTF(LeanES); // require('./utils/jwtDecode').default(LeanES);
jwtDecodeTF(LeanES); // require('./utils/jwtEncode').default(LeanES);
jwtEncodeTF(LeanES); // require('./utils/request').default(LeanES);
requestTF(LeanES);
console.log('>>?MMMMM LeanES after 000'); // require('./utils/verifyPassword').default(LeanES);
verifyPasswordTF(LeanES);
console.log('>>?MMMMM LeanES after 111'); // require('./mixins/ConfigurableMixin').default(LeanES);
ConfigurableMixinTF(LeanES); // require('./mixins/RelationsMixin').default(LeanES);
RelationsMixinTF(LeanES); // require('./mixins/DelayableMixin').default(LeanES);
DelayableMixinTF(LeanES);
console.log('>>?MMMMM LeanES after 222'); // require('./patterns/iterator/Cursor').default(LeanES);
CursorTF(LeanES);
console.log('>>?MMMMM LeanES after 333'); // require('./patterns/data_mapper/Transform').default(LeanES);
TransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/StringTransform').default(LeanES);
StringTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/NumberTransform').default(LeanES);
NumberTransformTF(LeanES); // require('./patterns/data_mapper/PrimaryKeyTransform').default(LeanES);
PrimaryKeyTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/DateTransform').default(LeanES);
DateTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/BooleanTransform').default(LeanES);
BooleanTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/ObjectTransform').default(LeanES);
ObjectTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/ArrayTransform').default(LeanES);
ArrayTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/ComplexObjectTransform').default(LeanES);
ComplexObjectTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/ComplexArrayTransform').default(LeanES);
ComplexArrayTransformTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/Serializer').default(LeanES);
SerializerTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/Objectizer').default(LeanES);
ObjectizerTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/Record').default(LeanES);
RecordTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/Queue').default(LeanES);
QueueTF(LeanES);
console.log('>>?MMMMM LeanES after 333+1'); // require('./patterns/data_mapper/Migration').default(LeanES);
MigrationTF(LeanES);
console.log('>>?MMMMM LeanES after 444'); // require('./patterns/query_object/Query').default(LeanES);
QueueTF(LeanES);
console.log('>>?MMMMM LeanES after 555'); // require('./patterns/proxy/Collection').default(LeanES);
CollectionTF(LeanES);
ConfigurationTF(LeanES);
ResourceRendererTF(LeanES);
RouterTF(LeanES);
ResqueTF(LeanES);
console.log('>>?MMMMM LeanES after 666'); // require('./mixins/HttpCollectionMixin').default(LeanES);
HttpCollectionMixinTF(LeanES);
HttpSerializerMixinTF(LeanES);
MemoryCollectionMixinTF(LeanES);
GenerateAutoincrementIdMixinTF(LeanES);
GenerateUuidIdMixinTF(LeanES);
MemoryResqueMixinTF(LeanES);
MemoryConfigurationMixinTF(LeanES);
console.log('>>?MMMMM LeanES after 777'); // require('./mixins/IterableMixin').default(LeanES);
IterableMixinTF(LeanES);
QueryableCollectionMixinTF(LeanES);
ThinHttpCollectionMixinTF(LeanES);
SchemaModuleMixinTF(LeanES);
CrudResourceRendererMixinTF(LeanES);
TemplatableModuleMixinTF(LeanES);
EmbeddableRecordMixinTF(LeanES);
console.log('>>?MMMMM LeanES after 888'); // require('./patterns/switch/Request').default(LeanES);
RequestTF(LeanES);
ResponseTF(LeanES);
ContextTF(LeanES);
SwitchTF(LeanES);
console.log('>>?MMMMM LeanES after 999'); // require('./patterns/command/Resource').default(LeanES);
ResourceTF(LeanES);
console.log('>>?MMMMM LeanES after 1010'); // require('./patterns/command/MigrateCommand').default(LeanES);
MigrateCommandTF(LeanES);
RollbackCommandTF(LeanES);
console.log('>>?MMMMM LeanES after 1111'); // require('./patterns/command/Script').default(LeanES);
ScriptTF(LeanES);
DelayedJobScriptTF(LeanES);
console.log('>>?MMMMM LeanES after 1212'); // require('./mixins/ApplicationMediatorMixin').default(LeanES);
ApplicationMediatorMixinTF(LeanES);
MemoryExecutorMixinTF(LeanES);
QueryableResourceMixinTF(LeanES);
EditableResourceMixinTF(LeanES);
MemoryMigrationMixinTF(LeanES);
LoggingJunctionMixinTF(LeanES);
console.log('>>?MMMMM LeanES after 1313'); // require('./patterns/facade/Application').default(LeanES);
ApplicationTF(LeanES);
console.log('>>?MMMMM LeanES after 1414'); // require('./patterns/command/LogMessageCommand').default(LeanES);
LogMessageCommandTF(LeanES); // export * from '../patternes';

console.log('>>?MMMMM LeanES after 1515');
console.log('>>?MMMMM LeanES after 1616');
console.log('>>?MMMMM LeanES after 1717');
console.log('>>?MMMMM LeanES after 1818'); // export type { ModelInterface } from './interfaces/ModelInterface';
console.log('>>?MMMMM LeanES after 1919');
console.log('>>?MMMMM LeanES after 2020'); // export type { ViewInterface } from './interfaces/ViewInterface';

var LeanES$1 = freeze$2(LeanES);
console.log('>>?MMMMM LeanES after 2121');

console.log('>?>?>?>?>?>?>?>fff'); // export * from './pipes';

exports.ApplicationInterface = ApplicationInterface;
exports.AttributeConfigT = AttributeConfigT;
exports.AttributeOptionsT = AttributeOptionsT;
exports.AxiosBasicCredentials = AxiosBasicCredentials;
exports.AxiosInterceptorManager = AxiosInterceptorManager;
exports.AxiosProxyConfig = AxiosProxyConfig;
exports.AxiosResponse = AxiosResponse;
exports.AxiosTransformer = AxiosTransformer;
exports.Cancel = Cancel$1;
exports.CancelToken = CancelToken$1;
exports.CancelTokenSource = CancelTokenSource;
exports.CancelTokenStatic = CancelTokenStatic;
exports.Canceler = Canceler;
exports.CollectionInterface = CollectionInterface;
exports.ComputedConfigT = ComputedConfigT;
exports.ComputedOptionsT = ComputedOptionsT;
exports.Config = Config;
exports.ConfigurationInterface = ConfigurationInterface;
exports.ContextInterface = ContextInterface;
exports.CursorInterface = CursorInterface;
exports.DelayableInterface = DelayableInterface;
exports.EmbedConfigT = EmbedConfigT;
exports.EmbedOptionsT = EmbedOptionsT;
exports.EmbeddableStaticInterface = EmbeddableStaticInterface;
exports.HttpRequestHashT = HttpRequestHashT;
exports.HttpRequestParamsT = HttpRequestParamsT;
exports.IterableInterface = IterableInterface;
exports.JoiT = JoiT;
exports.LegacyRequestInterface = LegacyRequestInterface;
exports.LegacyResponseInterface = LegacyResponseInterface;
exports.MigrationInterface = MigrationInterface;
exports.MigrationStaticInterface = MigrationStaticInterface;
exports.MomentT = MomentT;
exports.ObjectizerInterface = ObjectizerInterface;
exports.PipeAwareInterface = PipeAwareInterface;
exports.PipeFittingInterface = PipeFittingInterface;
exports.PipeMessageInterface = PipeMessageInterface;
exports.QueryInterface = QueryInterface;
exports.QueryableCollectionInterface = QueryableCollectionInterface;
exports.QueueInterface = QueueInterface;
exports.RecordInterface = RecordInterface;
exports.RecordStaticInterface = RecordStaticInterface;
exports.RelatableStaticInterface = RelatableStaticInterface;
exports.RelationConfigT = RelationConfigT;
exports.RelationInverseT = RelationInverseT;
exports.RelationOptionsT = RelationOptionsT;
exports.RequestArgumentsT = RequestArgumentsT;
exports.RequestInterface = RequestInterface;
exports.RequestT = RequestT;
exports.ResourceInterface = ResourceInterface;
exports.ResourceListResultT = ResourceListResultT;
exports.ResourceRendererInterface = ResourceRendererInterface;
exports.ResourceRendererItemResultT = ResourceRendererItemResultT;
exports.ResourceRendererListResultT = ResourceRendererListResultT;
exports.ResponseInterface = ResponseInterface;
exports.ResqueInterface = ResqueInterface;
exports.RouteOptionsT = RouteOptionsT;
exports.RouterInterface = RouterInterface;
exports.RouterRouteT = RouterRouteT;
exports.ScriptInterface = ScriptInterface;
exports.SerializableInterface = SerializableInterface;
exports.SerializerInterface = SerializerInterface;
exports.StreamT = StreamT;
exports.SwitchInterface = SwitchInterface;
exports.TransformStaticInterface = TransformStaticInterface;
exports.default = LeanES$1;
//# sourceMappingURL=index.js.map
